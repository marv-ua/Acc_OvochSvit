Перем мНастройкаПериода;
Перем СуффиксДСС;
Перем СуффиксМДЗ;
Перем ЮрикФизик;
Перем ЮрикФизикОтчет;
Перем ЮрикФизикНалогДок;

&НаКлиенте
Перем Мес;
Перем ПерезаписьДокументов;
Перем ОбратитесьКРазработчику;
Перем СведенияОПоставщике,  КодЯзыкаПечать;
Перем СписокДляОткрытия;

&НаКлиенте
Перем МедКомпонент,App;
Перем ИмяПлагина;                     
Перем ОтменаПередачиНН;
Перем ИННПокупателя, Покупатель, КонтрНаименование,	КонтрЕДРПОУ, КонтрИНН, КонтрАдр, КонтрТлф;
Перем СписокРегОтчетов, СписокТипРасчетов;
Перем СписокСтатусов, СписокСтатусовЕРНН;
Перем мСписокВыбораСпецРежимНалогообложения;
Перем УстановленныйМедок;
Перем МенеджерЗвит1С Экспорт;
Перем РезТруда Экспорт;




&НаСервере
Функция ПолучитьИмяБазы()
	
	ИмяБазы = Метаданные.Имя;
	
	Если Найти(ИмяБазы, "БухгалтерияДляУкраины") = 1 Тогда //Объект.Конфигурация = "БУ"
		Возврат "БУ" //ИмяБазы;
	КонецЕсли;
	Если Найти(ИмяБазы, "BASБухгалтерия") = 1 ИЛИ Найти(ИмяБазы, "BASАгроБухгалтерия") = 1 ИЛИ Найти(ИмяБазы, "КомплексноеРешениеСельскохозяйственногоПредприятия") = 1 Тогда //Объект.Конфигурация = "ВА"
		Возврат "ВА" //ИмяБазы;
	КонецЕсли;
	Если Найти(ИмяБазы, "БухгалтерияСельскохозяйственногоПредприятия") = 1 Тогда //Объект.Конфигурация = "СГ"
		Возврат "СГ" //ИмяБазы;
	КонецЕсли;
	Если Найти(ИмяБазы, "BASERP") = 1 Тогда //Объект.Конфигурация = "ERP"
		Возврат "ERP" //ИмяБазы;
	КонецЕсли;
	//15.12.21 + DOCKING 368
	//Если Найти(ИмяБазы, "BASКомплексноеУправлениеПредприятием") = 1 ИЛИ Найти(ИмяБазы, "BASКомплексноеУправлениеПредприятиемFlyDoc") = 1 Тогда //Объект.Конфигурация = "КУП"
	Если Лев(ИмяБазы, 36) = "BASКомплексноеУправлениеПредприятием" Тогда
		Возврат "КУП" //ИмяБазы;
	КонецЕсли;
	//15.12.21 - DOCKING 368
		//Если Найти(ИмяБазы, "БухгалтерияДляУкраины") = 1 Тогда ИмяБазы = "БУ"
		//ИначеЕсли Найти(ИмяБазы, "БухгалтерияСельскохозяйственногоПредприятия") = 1 Тогда  ИмяБазы="СГ"
		//КонецЕсли;
	//01.11.22 + DOCKING 459
	Если Найти(ИмяБазы, "BASSmallBusiness") = 1 Тогда
		Возврат "SB" //ИмяБазы;
	КонецЕсли;
	//01.11.22 - DOCKING 459
	
	Если Найти(ИмяБазы, "BASPublicCatering") = 1 Тогда
		Возврат "BASPC" //ИмяБазы;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИмяКлиентскойБазы()
	
	ИмяБазы = Метаданные.Имя;
	
	//Если Найти(ИмяБазы, "БухгалтерияДляУкраины") = 1 Тогда //Объект.Конфигурация = "БУ"
	//	Возврат "БУ" //ИмяБазы;
	//КонецЕсли;
	//Если Найти(ИмяБазы, "BASБухгалтерия") = 1 ИЛИ Найти(ИмяБазы, "BASАгроБухгалтерия") = 1 Тогда //Объект.Конфигурация = "ВА"
	//	Возврат "ВА" //ИмяБазы;
	//КонецЕсли;
	//Если Найти(ИмяБазы, "БухгалтерияСельскохозяйственногоПредприятия") = 1 Тогда //Объект.Конфигурация = "СГ"
	//	Возврат "СГ" //ИмяБазы;
	//КонецЕсли;
	Если Найти(ИмяБазы, "BASERP") = 1 И Лев(метаданные.Версия,3) = "2.5" Тогда //Объект.Конфигурация = "ERP"
		Возврат "ERP25" //ИмяБазы;
	КонецЕсли;
	Если Найти(ИмяБазы, "BASКомплексноеУправлениеПредприятием") = 1 И Лев(метаданные.Версия,3) = "2.5" Тогда //Объект.Конфигурация = "КУП25"
		Возврат "КУП25" //ИмяБазы;
	КонецЕсли;
	////15.12.21 + DOCKING 368
	Если Найти(ИмяБазы, "BASКомплексноеУправлениеПредприятиемFlyDoc") = 1 Тогда //Объект.Конфигурация = "КУПФ"
		Возврат "КУПФ" //ИмяБазы;
	Иначе
		Возврат "";
	КонецЕсли;
	//15.12.21 - DOCKING 368
		//Если Найти(ИмяБазы, "БухгалтерияДляУкраины") = 1 Тогда ИмяБазы = "БУ"
		//ИначеЕсли Найти(ИмяБазы, "БухгалтерияСельскохозяйственногоПредприятия") = 1 Тогда  ИмяБазы="СГ"
		//КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТипДокПриИзменении(Элемент)
	
	// 03.12.2021 + DOCKING 361
		// 01.12.2021 + DOCKING 359
		//ТипДок = ПолучитьТекущийТипДок(ТипДокФорма);
		// 01.12.2021 - DOCKING 359
	ИмяТекущейВкладки = ПолучитьИмяТекущейВкладки();
	
	Если ИмяТекущейВкладки = "ПД" Тогда
		ТипДок = ПолучитьТекущийТипДок(ТипДокФорма, ИмяТекущейВкладки);
		Если ТипДок = Неопределено Тогда
			ТипДок = ПолучитьПустоеЗначениеСпискаПервичкиНаСервере();
		КонецЕсли;
		ПроизошлоФормированиеПД = Ложь;
	ИначеЕсли ИмяТекущейВкладки = "НД" Тогда
		ТипДок = ПолучитьТекущийТипДок(ТипДокФорма1, ИмяТекущейВкладки);
		Если ТипДок = Неопределено Тогда
			ТипДок = ПолучитьПустоеЗначениеСпискаНалоговыхНаСервере();
		КонецЕсли;
		ПроизошлоФормированиеНД = Ложь;
	КонецЕсли;	
	
	// 03.12.2021 - DOCKING 361
	
	ДоступностьКнопокПервички(,ИмяТекущейВкладки);
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщийМодуль(ОМ)
    
	Если Метаданные.ОбщиеМодули.Найти(ОМ) <> Неопределено Тогда
		
		Рез = Вычислить(ОМ);
	Иначе
		Рез = Ложь;
	КонецЕсли;
	
	Возврат Рез;
	                                    
КонецФункции     // DOCKING 459

&НаСервереБезКонтекста
Функция ПолучитьТелефоныИзОбщегоМодуляБезКонтекста(ОМ,Знач СведенияОПродавце, Знач СведенияОПокупателе)
    
	Если Метаданные.ОбщиеМодули.Найти(ОМ) <> Неопределено Тогда
		
		Рез = Вычислить(ОМ);
		
		// DOCKING 567 + 10.08.2023
		//ТекТелефоныОрганизации  =  Рез.ОписаниеОрганизации(СведенияОПродавце,     "Телефоны, ",           Ложь);
		//ТекТелефоныОрганизации  =  Рез.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
		//ТекТелефоныКонтрагента  =  Рез.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
		//ТекТелефоныКонтрагента  =  Рез.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		
		Если СведенияОПродавце  <> Неопределено Тогда
			ТекТелефоныОрганизации  =  Рез.ОписаниеОрганизации(СведенияОПродавце,     "Телефоны,",           Ложь);
			ТекТелефоныОрганизации  =  Рез.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
		Иначе 
			ТекТелефоныОрганизации  = Неопределено;
		КонецЕсли; 
			
		Если  СведенияОПокупателе  <> Неопределено Тогда 
			ТекТелефоныКонтрагента  =  Рез.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны,",           Ложь);
			ТекТелефоныКонтрагента  =  Рез.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		Иначе 
			ТекТелефоныКонтрагента  = Неопределено;
		КонецЕсли;
		// DOCKING 567 - 10.08.2023
		
		Телефоны = Новый Структура;
		Телефоны.Вставить("ТекТелефоныОрганизации",ТекТелефоныОрганизации);
		Телефоны.Вставить("ТекТелефоныКонтрагента",ТекТелефоныКонтрагента);
	Иначе
		Телефоны = Ложь;
	КонецЕсли;
	
	Возврат Телефоны;
	                                    
КонецФункции     // DOCKING 459 

&НаСервереБезКонтекста
Функция ПолучитьСписокГруппИзОбщегоМодуляБезКонтекста(ОМ, Контрагент, Договор)
    
	Если Метаданные.ОбщиеМодули.Найти(ОМ) <> Неопределено Тогда
		
		Рез = Вычислить(ОМ);
		
		СписокГруппКонтрагентов  =  Рез.ПолучитьСписокВышестоящихГрупп(Контрагент);
		СписокГруппДоговоров  	 =  Рез.ПолучитьСписокВышестоящихГрупп(Договор);
		
		СписокГрупп = Новый Структура;
		СписокГрупп.Вставить("СписокГруппКонтрагентов",СписокГруппКонтрагентов);
		СписокГрупп.Вставить("СписокГруппДоговоров",СписокГруппДоговоров);
	Иначе
		СписокГрупп = Ложь;
	КонецЕсли;
	
	Возврат СписокГрупп;
	                                    
КонецФункции     // DOCKING 459 

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруННИзОбщегоМодуляБезКонтекста(ОМ,СведенияОПродавце,СведенияОПокупателе)
    
	Если Метаданные.ОбщиеМодули.Найти(ОМ) <> Неопределено Тогда
		
		Рез = Вычислить(ОМ);
		
		СтруктураННОписаниеОрганизации  			 =  Рез.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь);
		СтруктураННОписаниеКонтагентаИНН  	 		 =  Рез.ОписаниеОрганизации(СведенияОПокупателе,    "ИНН,"               ,Ложь);
		СтруктураННОписаниеКонтагентаКодПоЕДРПОУ  	 =  Рез.ОписаниеОрганизации(СведенияОПокупателе,    "КодПоЕДРПОУ,"               ,Ложь);
		СтруктураННОписаниеКонтагентаКодПоДРФО  	 =  Рез.ОписаниеОрганизации(СведенияОПокупателе,    "КодПоДРФО,"               ,Ложь);
		
		СтруктураННОписаниеОрганизацииКодПоЕДРПОУ  	 =  Рез.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ,"               ,Ложь);
		СтруктураННОписаниеОрганизацииКодПоДРФО  	 =  Рез.ОписаниеОрганизации(СведенияОПродавце,    "КодПоДРФО,"               ,Ложь);
		
		СтруктураНН = Новый Структура;
		СтруктураНН.Вставить("ОписаниеОрганизации_ИНН",СтруктураННОписаниеОрганизации);
		СтруктураНН.Вставить("ОписаниеКонтагента_ИНН",СтруктураННОписаниеКонтагентаИНН);
		СтруктураНН.Вставить("ОписаниеКонтагента_КодПоЕДРПОУ",СтруктураННОписаниеКонтагентаКодПоЕДРПОУ);
		СтруктураНН.Вставить("ОписаниеКонтагента_КодПоДРФО",СтруктураННОписаниеКонтагентаКодПоДРФО);
		
		СтруктураНН.Вставить("ОписаниеОрганизации_КодПоЕДРПОУ",СтруктураННОписаниеОрганизацииКодПоЕДРПОУ);
		СтруктураНН.Вставить("ОписаниеОрганизации_КодПоДРФО",СтруктураННОписаниеОрганизацииКодПоДРФО);
	Иначе
		СтруктураНН = Ложь;
	КонецЕсли;
	
	Возврат СтруктураНН;
	                                    
КонецФункции     // DOCKING 459

&НаСервереБезКонтекста
Функция ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста(ОМ,Организация,ПредставительОрганизации,Дата)
    
	Если Метаданные.ОбщиеМодули.Найти(ОМ) <> Неопределено Тогда
		
		Рез = Вычислить(ОМ);
		
		ДанныеПредставителя = Рез.ДанныеФизЛица(Организация,ПредставительОрганизации,Дата);
		
		СтрДанныеПредставителя = Новый Структура;
		СтрДанныеПредставителя.Вставить("ДанныеПредставителя",ДанныеПредставителя);
	Иначе
		СтрДанныеПредставителя = Ложь;
	КонецЕсли;
	
	Возврат СтрДанныеПредставителя;
	                                    
КонецФункции     // DOCKING 459


//-------------------------------------------------------------------------------------------------------------
//---------------------------------------------ПРОЦЕДУРЫ ИЗ ОБЩИХ МОДУЛЕЙ--------------------------------------

Функция УстановитьОсновнойДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено)

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Ссылка = &ОсновнойДоговорКонтрагента 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = РегламентированнаяОтчетность.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", ДоговорКонтрагента); // В УП у контрагентов нет реквизита ОсновнойДоговорКонтрагента.
	
	ИмяРеквизитаКонтрагент = ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = ПолучитьИмяРеквизитаВидДоговора();
	
	Если Объект.Конфигурация = "SB" Тогда

		ТекстФильтра = "
			
		|	ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
		+?(СписокВидовДоговора<>неопределено,"
		|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)",""); 
	Иначе
			ТекстФильтра = "
			|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
			|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
			+?(СписокВидовДоговора<>неопределено,"
			|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
	 ИЛИ РеквизитыДоговора[ИмяРеквизитаКонтрагент] <> ВладелецДоговора
	 ИЛИ РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()  // DOCKING 459

// Функция ПолучитьИмяРеквизитаКонтрагентДоговора имя реквизита в справочнике
// ДоговорыКонтрагентов, в котором храниться ссылка на контрагента-владельца.
//
Функция ПолучитьИмяРеквизитаКонтрагентДоговора() 

	Возврат "Контрагент";

КонецФункции

// Функция ПолучитьИмяРеквизитаВидДоговора имя реквизита в справочнике
// ДоговорыКонтрагентов, по которому определяется вид договора.
//
Функция ПолучитьИмяРеквизитаВидДоговора() 

	Возврат "ХозяйственнаяОперация";

КонецФункции 

//Функция возвращает признак расчетов в условных единицах
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      Булево (ИСТИНА если расчеты ведутся в условных единицах)
Функция РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Экспорт
	
	ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ПорядокОплаты");
	
	Возврат ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
	
КонецФункции // РасчетыВУсловныхЕдиницах()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ТипыДоговоров  (УП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента)

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Контрагент,
																		|Организация,
																		|ХозяйственнаяОперация,
																		|УчетАгентскогоНДС,
																		|ВидАгентскогоДоговора");
																		
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	РасчетыВУсловныхЕдиницах(ДоговорКонтрагента));
		СтруктураРеквизиты.Вставить("Владелец", 				СтруктураРеквизиты.Контрагент);
		СтруктураРеквизиты.Вставить("ВидДоговора", 				СтруктураРеквизиты.ХозяйственнаяОперация);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		
	Иначе
		
		СтруктураРеквизиты = Новый Структура;
		СтруктураРеквизиты.Вставить("Ссылка",  					Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",		Справочники.Валюты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Владелец",					Справочники.Контрагенты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
		Если  НЕ Объект.Конфигурация = "SB" Тогда
			СтруктураРеквизиты.Вставить("ВидДоговора",				Перечисления.ХозяйственныеОперации.ПустаяСсылка());
		Иначе
			СтруктураРеквизиты.Вставить("ВидДоговора",				"");
		КонецЕсли;
		СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",		Ложь);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",	Неопределено);
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	Ложь);
		
	КонецЕсли;
	
	СтруктураРеквизиты.Вставить("ТипЦен", Неопределено);
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника)

	Результат = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;

	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";

	ТекущийЭлемент = ЭлементСправочника;

	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура ДоступностьКнопокПервички(Очищение = Истина, ИмяТК = 0)
	
	КодДокДоИзменений = Строка(КодДок);	
	//------------------------------------------------------------------
	Если Не ЗначениеЗаполнено(ТипДок) Тогда 		
		ТипДок  =  "Пусто";  	
	КонецЕсли; 
	//------------------------------------------------------------------	
	Если ТипДок  =  "Акт выполненных работ" Тогда 			КодДок = "А";
		Если Объект.Конфигурация = "УТП" Тогда
			Элементы.Проведен.Доступность = Ложь;
			ЭтотОбъект.Проведен = Ложь;
		Иначе
			Элементы.Проведен.Доступность = Истина; 
		КонецЕсли;
	ИначеЕсли ТипДок  =  "Счет покупателям"  Тогда				 КодДок = "С";
		ЭтотОбъект.Проведен = Ложь;
		Элементы.Проведен.Доступность = Ложь;
	ИначеЕсли ТипДок  =  "Возврат от покупателя" Тогда 		КодДок = "ВОП";
		Элементы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "Возврат поставщику" Тогда 		КодДок = "ВТП";
		Элементы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "Расходная накладная" Тогда 		КодДок = "ВН";
		Элементы.Проведен.Доступность = Истина; 
		
	ИначеЕсли ТипДок  =  "ТТН спирт этиловый" Тогда 		КодДок = "ТТНС";
		Элементы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ТТН алкогольные напитки" Тогда 		КодДок = "ТТНА";
		Элементы.Проведен.Доступность = Истина;
	ИначеЕсли ТипДок  =  "Акт Сверки"  Тогда 		КодДок = "АС";
		Если Объект.Конфигурация = "УПП" или Объект.Конфигурация = "УТ"  Тогда
			Элементы.Проведен.Доступность = Ложь;
			Элементы.Проведен = Ложь;
		Иначе
			Элементы.Проведен.Доступность = Истина; 
		КонецЕсли;
	ИначеЕсли ТипДок  =  "Приложение 2"  Тогда 		КодДок = "П2";
		Элементы.Проведен.Доступность = Истина; 
	ИначеЕсли ТипДок  =  "ВхНалоговыйДокумент" Тогда КодДок = "ВхНД";
	ИначеЕсли ТипДок  =  "ВхПостТовУслуг" Тогда 	КодДок = "ВхПТУ"; 
	ИначеЕсли ТипДок  =  "ВхСчет" Тогда 			КодДок = "ВхС";
	КонецЕсли;
	
	// 13.12.2021 + DOCKING 357
	//Если ТипДок  =  "Налоговая накладная" или ТипДок  =  "Приложение 2" Тогда КодДок = "НН";	
	Если ИмяТК  =  "НД" Тогда КодДок = "НН";
	// 13.12.2021 - DOCKING 357
	//	Элементы.ЗарегистрированныеПоДанным1СПлан.Видимость = Истина;
	//	Элементы.ЗарегистрированныеПоДанным1С.Видимость = Истина;
	//	Элементы.СпецРежимНалогообложения.Видимость = Истина;
	//	Элементы.ОтображатьСлужебныеНН.Видимость = Истина;
	//	Элементы.ДаП.Видимость = Истина;
	//	Элементы.ДаФ.Видимость = Истина;
		//Элементы.ВидОперацииВхНН.Видимость=Ложь;
		//Элементы.ВидОперацииПТУ.Видимость=Ложь;
		//Элементы.ВидОперацииВхСчет.Видимость=Ложь;  
	//	Элементы.Проведен.Доступность = Истина;
	//	Элементы.ТаблицаДокументовТребуетВключенияВЕдиныйРеестрНалоговыхНакладных.Доступность = Истина;
	//	Элементы.ТаблицаДокументовВключенаВЕдиныйРеестрНалоговыхНакладных.Доступность = Истина;

	Иначе 
		//Элементы.ЗарегистрированныеПоДанным1СПлан.Видимость = Ложь;
		//ЭтотОбъект.ЗарегистрированныеПоДанным1СПлан = Ложь;
		//Элементы.ЗарегистрированныеПоДанным1С.Видимость = Ложь;
		//ЭтотОбъект.ЗарегистрированныеПоДанным1С = Ложь;
		//Элементы.ДаП.Видимость = Ложь;
		//Элементы.ДаФ.Видимость = Ложь;
		//Элементы.СпецРежимНалогообложения = Неопределено;
	//	Элементы.СпецРежимНалогообложения.Видимость = Ложь;
	//	Элементы.ОтображатьСлужебныеНН.Видимость = Ложь;
		//Элементы.ВидОперацииВхНН.Видимость=Ложь;
		//Элементы.ВидОперацииПТУ.Видимость=Ложь;
		//Элементы.ВидОперацииВхСчет.Видимость=Ложь;
	КонецЕсли;     	    	
	
	ЭтотОбъект.Проведен=Ложь;
			
	Если ТипДок="ВхНалоговыйДокумент" ИЛИ ТипДок="ВхПостТовУслуг" ИЛИ ТипДок="ВхСчет" Тогда
		Элементы.ВхДокМедок.Видимость=Истина;
		Элементы.ОтпрНет.Видимость=Ложь;
		//Элементы.х2.Видимость=Ложь;
		//Элементы.х3.Видимость=Ложь;
		Элементы.ФР.Видимость=Ложь;
		Элементы.ОД.Видимость=Ложь;
	Иначе
		Элементы.ВхДокМедок.Видимость=Ложь;
		Элементы.ОтпрНет.Видимость=Истина;
		//Элементы.х2.Видимость=Истина;
		//Элементы.х3.Видимость=Истина;
		Элементы.ФР.Видимость=Истина;
		// 13.12.2021 + DOCKING 357
		Если ТипДок = "Пусто" ИЛИ ТипДок = "(Пусто)" ИЛИ ТипДок = Неопределено Тогда	
			Элементы.ФР.Видимость = Ложь;
			Этаформа.ФР = Ложь;
		Иначе
			Элементы.ФР.Видимость = Истина;
		КонецЕсли;	
		// 13.12.2021 - DOCKING 357
		Элементы.ОД.Видимость=Истина;  
	КонецЕсли;
	
	// 15.12.21 + DOCKING 361
	//СепараторВПервичке();
	// 15.12.21 - DOCKING 361
	
	Если Очищение Тогда
	//	Если КодДокДоИзменений<> Строка(КодДок) Тогда
			// 08.12.21 + DOCKING 361
			Если ИмяТК = "ПД" Тогда
			// 08.12.21 - DOCKING 361	
				ИзменениеОсновныхПараметров();
			ИначеЕсли ИмяТК = "НД" Тогда	
				ИзменениеОсновныхПараметровНалоговых();
			КонецЕсли;	
	//	КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СепараторВПервичке()
	
	Если 
		ТипДок  =  "-----------------" Тогда
		КодДок = ""; 
		Элементы.Заполнить.Доступность  =  Ложь; 
		Элементы.ФР.Доступность=Ложь;
		Элементы.од.Доступность=Ложь;
	Иначе 
		Элементы.Заполнить.Доступность  =  Истина;
		//Элементы.ФР.Доступность=Истина;
		Элементы.од.Доступность=Истина; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ИзменениеОсновныхПараметров()
	
	ТаблицаДокументов.Очистить();
	ВсегоЧисло = "0";
	ИзНихЧисло = "0";
	ОтправленоЧисло = "0";
	БезНДСЧисло = "0";
	ВсегоНДСЧисло = "0";
	ВсегоЧисло1 = "0";
	Элементы.Сформировать.Доступность  =  Ложь;
	Элементы.ОбновлениеЕРНН.Доступность = Ложь;
	Элементы.ВывестиСписок.Доступность = Ложь;  
	Элементы.ОтпрНет.Доступность = Ложь; 	
		
КонецПроцедуры

Процедура ИзменениеОсновныхПараметровНалоговых()
	
	ТаблицаНалоговых.Очистить();
	
	ВсегоЧисло2 = "0";
	ИзНихЧисло1 = "0";
	
	ОтправленоЧисло1 = "0";
	
	БезНДСЧисло1 = "0";
	ВсегоНДСЧисло1 = "0";
	ВсегоЧисло3 = "0";
	
	Элементы.Сформировать1.Доступность  =  Ложь;
	Элементы.ОбновлениеЕРНН.Доступность = Ложь;
	Элементы.ВывестиСписок1.Доступность = Ложь;  
	Элементы.ОтпрНет.Доступность = Ложь; 	
		
КонецПроцедуры  // 17.12.2021 + DOCKING 357

Процедура ИзменениеОсновныхПараметровРегОтчеты()
	
	ТаблицаОтчетов.Очистить();
	Элементы.ПередатьВМедокРегОтчет.Доступность  =  Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельТаблицаДокументовЗаполнить(Команда)
	
	
	
	//01.12.2021 + DOCKING 357 (удаление обязательности заполнения)
	//Если Не ЗначениеЗаполнено(НачПериода) Тогда
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = НСтр("ru = 'Не заполнено поле начала периода отбора!';uk = 'Не заповнене поле початку періоду вибору!'");
	//	Сообщение.Поле = "НачПериода";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;  

	//Если Не ЗначениеЗаполнено(КонПериода)Тогда
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = НСтр("ru = 'Не заполнено поле конца периода отбора !';uk = 'Не заповнене поле кінця періоду вибору!'");
	//	Сообщение.Поле = "КонПериода";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли; 
	//01.12.2021 - DOCKING 357 (удаление обязательности заполнения)
	Если Не ЗначениеЗаполнено(ОрганизацияПервичка)Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не указана Организация!';uk = 'Не вказана Організація!'");
		Сообщение.Поле = "Организация";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;  
	
	//01.12.2021 + DOCKING 357 (удаление обязательности заполнения)
	//Если Не ЗначениеЗаполнено(ТипДок) Тогда
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = НСтр("ru = 'Не указан тип дркумента !';uk = 'Не вказаний тип документу!'");
	//	Сообщение.Поле = "ТипДок";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
	//01.12.2021 - DOCKING 357
	
	Если Дата(НачПериода)>Дата(КонПериода) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Начальная дата должна быть меньше конечной!';uk = 'Початкова дата повинна бути менше кінцевої!'");
		Сообщение.Поле = "НачПериода";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	//ПроизошлоФормированиеПД = Истина;
	
	// 10.12.2021 + DOCKING 357
	
	//ВыбратьПервичку();
	КодПоЕДРПОУ = ОрганизацияПриИзмененииНаСервере();
	
	ТипДок = ПолучитьТекущийТипДок(ТипДокФорма, "ПД");
	
	Если ТипДок = "Пусто" ИЛИ ТипДок = Неопределено Тогда
		ТаблицаДокументов.Очистить();
		
		ВсегоЧисло = "0";    // очищаем, в начале, один раз
		ИзНихЧисло = "0"; 
		БезНДСЧисло = "0";
		ВсегоНДСЧисло = "0";
		ВсегоЧисло1 = "0";
		Элементы.ФР.Видимость = Ложь;
		Этаформа.ФР = Ложь;
		Для Каждого Эл из СписокПервички Цикл
			Если Эл.Значение = "Пусто"	Тогда
				Продолжить;
			КонецЕсли;	
			ТипДок = Эл.Значение;
		    ВыбратьПервичку("ПН");
		КонецЦикла;
		ТаблицаДокументов.Сортировать("Тип УБЫВ, Дата УБЫВ");
		Элементы.ТаблицаДокументов.Обновить();
		ТипДок = "Пусто";
	Иначе
		Элементы.ФР.Видимость = Истина;
		ВыбратьПервичку();
	КонецЕсли;	
	// 10.12.2021 - DOCKING 357
	
	ПроверитьНаличиеПервички();
		
	 	 
КонецПроцедуры
 
&НаСервере
Процедура ВыбратьПервичку(Знач Вкладка = 0)
	
	// 10.12.2021 + DOCKING 357
	//ТаблицаДокументов.Очистить();
	Если Вкладка = 0 Тогда
		ТаблицаДокументов.Очистить();
		
		ВсегоЧисло = "0";
		ИзНихЧисло = "0"; 	
		БезНДСЧисло = "0";
		ВсегоНДСЧисло = "0";
		ВсегоЧисло1 = "0";
	КонецЕсли;
	// 10.12.2021 - DOCKING 357
	
	Элементы.БезНДСЧисло.Видимость = Истина;
	Элементы.ВсегоНДСЧисло.Видимость = Истина;
	Элементы.ВсегоЧисло1.Видимость = Истина;
	Элементы.ДополнительныеДанные.Доступность = Ложь;
	//----------------------------------------------------------------------------------
	#Область Акт_выполненных_работ
	Если ТипДок = "Акт выполненных работ" Тогда
		
		Попытка
			Если Метаданные.Имя = "УТ" Тогда
				х = 1/0;
			КонецЕсли;
		Исключение
			#Если Клиент Тогда 
				Сообщить((НСтр("ru = 'Документ не предусмотрен конфигурацией ';uk = 'Документ не передбачено конфігурацією '")) + Символы.пс + Метаданные.КраткаяИнформация);
			#КонецЕсли
			Возврат;
		КонецПопытки;
		
		//Если НЕ Объект.Конфигурация = "УТ" Тогда
		Если НЕ Объект.Конфигурация = "УТ" И НЕ Объект.Конфигурация = "КУП" И НЕ Объект.Конфигурация = "ERP" И НЕ Объект.Конфигурация = "SB" Тогда	
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
			|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
			|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
			|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный, 
			|		АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен
			|	ИЗ
			|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
			|	ГДЕ
			|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РеализацияТоваровУслуг.Дата, 
			|		РеализацияТоваровУслуг.Ссылка, 
			|		РеализацияТоваровУслуг.Контрагент, 
			|		РеализацияТоваровУслуг.Ответственный, 
			|		РеализацияТоваровУслуг.ДоговорКонтрагента, 
			|		РеализацияТоваровУслуг.Проведен
			|	ИЗ
			|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|	ГДЕ
			|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И РеализацияТоваровУслуг.Организация  =  &Организация
			|		И РеализацияТоваровУслуг.Услуги.Количество>0
			|		И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)
			|						) КАК ВложенныйЗапрос     
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.Проведен, 
			|	ВложенныйЗапрос.ДоговорКонтрагента}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация",   "АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РеализацияТоваровУслуг.Организация  =  &Организация",   "РеализацияТоваровУслуг.Организация  =  &Организация");
			КонецЕсли;	
			//09.12.21 - DOCKING 357
			//--------------------------------------------
			Если ОрганизацияПервичка.КодПоЕДРПОУ = "34379765" //34379765
				ИЛИ ОрганизацияПервичка.КодПоЕДРПОУ = "44493086" //44493086
				
				Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)",   "");
			КонецЕсли;
			//--------------------------------------------
			
			
		// 14.02.2022 + DOCKING 368		
		ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
			
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		АктВыполненныхРабот.Дата КАК Дата, 
			|		АктВыполненныхРабот.Ссылка КАК Ссылка, 
			|		АктВыполненныхРабот.Контрагент КАК Контрагент, 
			|		АктВыполненныхРабот.Менеджер КАК Ответственный, 
			|		АктВыполненныхРабот.Договор КАК ДоговорКонтрагента, 
			|		АктВыполненныхРабот.Проведен КАК Проведен
			|	ИЗ
			|		Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
			|	ГДЕ
			|		АктВыполненныхРабот.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И АктВыполненныхРабот.Организация  =  &Организация
			|	
			//|	ОБЪЕДИНИТЬ ВСЕ
			//|	
			//|	ВЫБРАТЬ
			//|		РеализацияТоваровУслуг.Дата, 
			//|		РеализацияТоваровУслуг.Ссылка, 
			//|		РеализацияТоваровУслуг.Контрагент, 
			//|		РеализацияТоваровУслуг.Менеджер, 
			//|		РеализацияТоваровУслуг.Договор, 
			//|		РеализацияТоваровУслуг.Проведен
			//|	ИЗ
			//|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			//|	ГДЕ
			//|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			//|		И РеализацияТоваровУслуг.Организация  =  &Организация
			//|		И РеализацияТоваровУслуг.Услуги.Количество>0
			//|		И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)
			
			|			) КАК ВложенныйЗапрос     
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.Проведен, 
			|	ВложенныйЗапрос.ДоговорКонтрагента}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
			
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				//ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "АктВыполненныхРабот.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И АктВыполненныхРабот.Организация  =  &Организация",   "АктВыполненныхРабот.Организация  =  &Организация");
				//ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РеализацияТоваровУслуг.Организация  =  &Организация",   "РеализацияТоваровУслуг.Организация  =  &Организация");
			КонецЕсли;
			
			// 29.11.2022 + DOCKING 459
			Если Объект.Конфигурация = "SB" Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Менеджер",   "Ответственный");
			КонецЕсли;	
			// 29.11.2022 - DOCKING 459
				
		// 14.02.2022 - DOCKING 368		
		Иначе
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			//|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
			//|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
			//|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
			//|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный, 
			//|		АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			//|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен
			//|	ИЗ
			//|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
			//|	ГДЕ
			//|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			//|		И АктОбОказанииПроизводственныхУслуг.Организация  =  &Организация
			//|	
			//|	ОБЪЕДИНИТЬ ВСЕ
			//|	
			//|	ВЫБРАТЬ
			|		РеализацияТоваровУслуг.Дата, 
			|		РеализацияТоваровУслуг.Ссылка, 
			|		РеализацияТоваровУслуг.Контрагент, 
			|		РеализацияТоваровУслуг.Ответственный, 
			|		РеализацияТоваровУслуг.ДоговорКонтрагента, 
			|		РеализацияТоваровУслуг.Проведен
			|	ИЗ
			|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|	ГДЕ
			|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И РеализацияТоваровУслуг.Организация  =  &Организация
			|		И РеализацияТоваровУслуг.Услуги.Количество>0
			|		И (НЕ РеализацияТоваровУслуг.Товары.Количество > 0)) КАК ВложенныйЗапрос     
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.Проведен, 
			|	ВложенныйЗапрос.ДоговорКонтрагента}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";  
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РеализацияТоваровУслуг.Организация  =  &Организация",   "РеализацияТоваровУслуг.Организация  =  &Организация");
			КонецЕсли;	
			//09.12.21 - DOCKING 357
		КонецЕсли;
		
		Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор = ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора = Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора = Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора = Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда 
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		ОбщийБезНДС = 0;
		ОбщийНДС = 0;
		ОбщийСума = 0;
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			// 29.11.2022 + DOCKING 459
			//НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			КонецЕсли;	
			// 29.11.2022 - DOCKING 459
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			
            //20.05.2023 + DOCKING 510			
			//НоваяСтрока.ТипСтрока = ТипДок;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.ТипСтрока = ТипДок;
			Иначе
				НоваяСтрока.ТипСтрока = ПолучитьТипРТУПоУмолчанию();
			КонецЕсли;	
			//20.05.2023 - DOCKING 510
			
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если НЕ Объект.Конфигурация = "УТ" Тогда
			Если НЕ Объект.Конфигурация = "УТ" И НЕ Объект.Конфигурация = "КУП" И НЕ Объект.Конфигурация = "ERP" И НЕ Объект.Конфигурация = "SB" Тогда	
				Если ТипЗнч(Док) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
					НоваяСтрока.СуммаНДСДокумента =  Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
					НоваяСтрока.СуммаДокумента  =  Док.СуммаДокумента;
				Иначе
					НоваяСтрока.СуммаДокумента = Док.Услуги.Итог("СуммаНДС") + ?(Док.СуммаВключаетНДС, Док.Услуги.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС"), Док.Услуги.Итог("Сумма")); 
					НоваяСтрока.СуммаНДСДокумента = Док.Услуги.Итог("СуммаНДС");
					НоваяСтрока.СуммаБезНДС = ?(Док.СуммаВключаетНДС, Док.Услуги.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС"), Док.Услуги.Итог("Сумма")); 
				КонецЕсли;
			// 14.02.2022 + DOCKING 368	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
				НоваяСтрока.СуммаНДСДокумента =  Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
				НоваяСтрока.СуммаДокумента  =  Док.СуммаДокумента;				
			// 14.02.2022 - DOCKING 368
			ИначеЕсли Объект.Конфигурация = "SB" Тогда	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.РаботыИУслуги.Итог("СуммаНДС");
				НоваяСтрока.СуммаНДСДокумента =  Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
				НоваяСтрока.СуммаДокумента  =  Док.СуммаДокумента;				
			Иначе
				НоваяСтрока.СуммаДокумента = Док.Услуги.Итог("Сумма"); 
				НоваяСтрока.СуммаНДСДокумента = Док.Услуги.Итог("СуммаНДС");
				НоваяСтрока.СуммаБезНДС = Док.Услуги.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС");
			КонецЕсли;
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС = ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума = ОбщийСума+ НоваяСтрока.СуммаДокумента;
			
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовАкт();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//БезНДСЧисло = ОбщийБезНДС;
		//ВсегоНДСЧисло = ОбщийНДС;
		//ВсегоЧисло1 = ОбщийСума;
		Если Вкладка = 0 Тогда
			БезНДСЧисло = ОбщийБезНДС;
			ВсегоНДСЧисло = ОбщийНДС;
			ВсегоЧисло1 = ОбщийСума;
		Иначе
			БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
			ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
			ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
		КонецЕсли;	
		 Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, "ПД");
		//13.12.21 - DOCKING 357
		//ЗаполнитьРеквизитыДокументовАкт();		
	КонецЕсли;
	#КонецОбласти
	
	
	// 01.12.2021 - DOCKING 357
	
	#Область Возврат_от_покупателя
	Если ТипДок = "Возврат от покупателя" Тогда
		
		//15.12.21 + DOCKING 368
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВозвратТоваровОтКлиента.Дата КАК Дата, 
			|		ВозвратТоваровОтКлиента.Ссылка КАК Ссылка, 
			|		ВозвратТоваровОтКлиента.Контрагент КАК Контрагент, 
			|		ВозвратТоваровОтКлиента.Менеджер КАК Менеджер, 
			|		ВозвратТоваровОтКлиента.Договор КАК Договор, 
			|		ВозвратТоваровОтКлиента.Проведен КАК Проведен
			|	ИЗ
			|		Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
			|	ГДЕ
			|		ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И ВозвратТоваровОтКлиента.Организация  =  &Организация
			|		И ВозвратТоваровОтКлиента.Товары.Количество>0) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Менеджер, 
			|	ВложенныйЗапрос.Договор, 
			|	ВложенныйЗапрос.Проведен}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";      	
			
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ВозвратТоваровОтКлиента.Организация  =  &Организация",   "ВозвратТоваровОтКлиента.Организация  =  &Организация");
			КонецЕсли;	
			
		Иначе
		//15.12.21 + DOCKING 368	
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВозвратТоваровОтПокупателя.Дата КАК Дата, 
			|		ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка, 
			|		ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент, 
			|		ВозвратТоваровОтПокупателя.Ответственный КАК Ответственный, 
			|		ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		ВозвратТоваровОтПокупателя.Проведен КАК Проведен
			|	ИЗ
			|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
			|	ГДЕ
			|		ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И ВозвратТоваровОтПокупателя.Организация  =  &Организация
			|		И ВозвратТоваровОтПокупателя.Товары.Количество>0) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Проведен}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";      	
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ВозвратТоваровОтПокупателя.Организация  =  &Организация",   "ВозвратТоваровОтПокупателя.Организация  =  &Организация");
			КонецЕсли;	
			//09.12.21 - DOCKING 357
		КонецЕсли;
		
		Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
			ОбщийБезНДС = 0;
			ОбщийНДС  =0;
			ОбщийСума=0;
			
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УТ" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//Иначе 				
			//	Если ТипЗнч(Док)  =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
			//	Иначе
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//	КонецЕсли;
			//КонецЕсли;
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС;
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  =ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума=ОбщийСума+Док.суммаДокумента;
						
		КонецЦикла;		
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВозвратТоваровОтПокупателя(); 
		Иначе 
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//БезНДСЧисло = ОбщийБезНДС;
		//ВсегоНДСЧисло = ОбщийНДС;
		//ВсегоЧисло1 = ОбщийСума;
		Если Вкладка = 0 Тогда
			БезНДСЧисло =ОбщийБезНДС;
			ВсегоНДСЧисло = ОбщийНДС;
			ВсегоЧисло1 = ОбщийСума;
		Иначе
			БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
			ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
			ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
		КонецЕсли;
		//13.12.21 - DOCKING 357
		
		 Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, "ПД");
		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли;
	#КонецОбласти
		//-----------------------------------------------
	#Область Возврат_поставщику
	Если ТипДок = "Возврат поставщику" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВозвратТоваровПоставщику.Дата КАК Дата, 
		|		ВозвратТоваровПоставщику.Ссылка КАК Ссылка, 
		|		ВозвратТоваровПоставщику.Контрагент КАК Контрагент, 
		|		ВозвратТоваровПоставщику.Ответственный КАК Ответственный, 
		|		ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ВозвратТоваровПоставщику.Проведен КАК Проведен
		|	ИЗ
		|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|	ГДЕ
		|		ВозвратТоваровПоставщику.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ВозвратТоваровПоставщику.Организация  =  &Организация
		|		И ВозвратТоваровПоставщику.Товары.Количество>0) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Проведен}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      	
		
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВозвратТоваровПоставщику.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ВозвратТоваровПоставщику.Организация  =  &Организация",   "ВозвратТоваровПоставщику.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		//-------------------------------------------------
		//15.12.21 + DOCKING 368
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Ответственный",   "Менеджер");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента",   "Договор");	
		КонецЕсли;
		//15.12.21 - DOCKING 368
		
		Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			//ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Договор");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			КонецЕсли;
			// 25.04.2022 + DOCKING 396
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			// 25.04.2022 + DOCKING 396
			//ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Менеджер");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			КонецЕсли;
			// 25.04.2022 - DOCKING 396
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;   
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
			ОбщийБезНДС = 0;
			ОбщийНДС  =0;
			ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УТ" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//Иначе 				
			//	Если ТипЗнч(Док)  =  Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
			//	Иначе
			//		НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//	КонецЕсли;
			//КонецЕсли;
			//НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС;
				
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  =ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума=ОбщийСума+Док.суммаДокумента;


		КонецЦикла;		
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВозвратТоваровПоставщику(); 
		Иначе ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//БезНДСЧисло = ОбщийБезНДС;
		//ВсегоНДСЧисло = ОбщийНДС;
		//ВсегоЧисло1 = ОбщийСума;
		Если Вкладка = 0 Тогда
			БезНДСЧисло =ОбщийБезНДС;
			ВсегоНДСЧисло = ОбщийНДС;
			ВсегоЧисло1 = ОбщийСума;
		Иначе
			БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
			ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
			ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
		КонецЕсли;
		//13.12.21 - DOCKING 357
		 Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, "ПД");

		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли; 
	#КонецОбласти
		//-----------------------------------------------
    #Область Расходная_накладная
	Если ТипДок = "Расходная накладная" 
		// DOCKING 406 + 12.05.2022
		ИЛИ ТипДок = "Акт приема передачи ПО"
		// DOCKING 406 - 12.05.2022
		Тогда
		// DOCKING 459 + 22.11.2022
		Если НЕ Объект.Конфигурация = "SB" Тогда
		// DOCKING 459 - 22.11.2022	
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		РеализацияТоваровУслуг.Дата КАК Дата, 
			|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
			|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
			|		РеализацияТоваровУслуг.Ответственный КАК Ответственный, 
			|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		РеализацияТоваровУслуг.Проведен КАК Проведен
			|	ИЗ
			|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|	ГДЕ
			|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И РеализацияТоваровУслуг.Организация  =  &Организация
			|		И РеализацияТоваровУслуг.Товары.Количество>0) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Проведен}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";      	
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РеализацияТоваровУслуг.Организация  =  &Организация",   "РеализацияТоваровУслуг.Организация  =  &Организация");
			КонецЕсли;
			//09.12.21 - DOCKING 357
			
		Иначе
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		РасходнаяНакладная.Дата КАК Дата, 
			|		РасходнаяНакладная.Ссылка КАК Ссылка, 
			|		РасходнаяНакладная.Контрагент КАК Контрагент, 
			|		РасходнаяНакладная.Ответственный КАК Ответственный, 
			|		РасходнаяНакладная.Договор КАК Договор, 
			|		РасходнаяНакладная.Проведен КАК Проведен
			|	ИЗ
			|		Документ.РасходнаяНакладная КАК РасходнаяНакладная
			|	ГДЕ
			|		РасходнаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И РасходнаяНакладная.Организация  =  &Организация
			|		И РасходнаяНакладная.Запасы.Количество>0) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.Договор, 
			|	ВложенныйЗапрос.Проведен}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";      	
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РасходнаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РасходнаяНакладная.Организация  =  &Организация",   "РасходнаяНакладная.Организация  =  &Организация");
			КонецЕсли;
			//09.12.21 - DOCKING 357	
			
		КонецЕсли;
		
		//-------------------------------------------------
		//15.12.21 + DOCKING 368
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Ответственный",   "Менеджер");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента",   "Договор");	
		КонецЕсли;
		//15.12.21 - DOCKING 368
		
		Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			//ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Договор");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			КонецЕсли;
			// 25.04.2022 + DOCKING 396			
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			// 25.04.2022 + DOCKING 396
			//ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Менеджер");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			КонецЕсли;
			// 25.04.2022 - DOCKING 396			
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;   
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
			ОбщийБезНДС = 0;
			ОбщийНДС = 0;
			ОбщийСума = 0;
					
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			КонецЕсли;	
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			
			//20.05.2023 + DOCKING 510			
			//НоваяСтрока.ТипСтрока = ТипДок;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.ТипСтрока = ПолучитьТипРТУПоУмолчанию();			
			Иначе
				НоваяСтрока.ТипСтрока = ТипДок;
			КонецЕсли;	
			//20.05.2023 - DOCKING 510
			
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			Если Объект.Конфигурация = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			// 15.12.2021 + DOCKING 368	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			// 15.12.2021 - DOCKING 368
			ИначеЕсли Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Запасы.Итог("СуммаНДС");
			Иначе 				
				Если ТипЗнч(Док)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
				Иначе
					НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС;
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС = ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума = ОбщийСума+Док.суммаДокумента;
			
		КонецЦикла;		
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВидНакл(); 
		Иначе ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//БезНДСЧисло = ОбщийБезНДС;
		//ВсегоНДСЧисло = ОбщийНДС;
		//ВсегоЧисло1 = ОбщийСума;
		Если Вкладка = 0 Тогда
			БезНДСЧисло =ОбщийБезНДС;
			ВсегоНДСЧисло = ОбщийНДС;
			ВсегоЧисло1 = ОбщийСума;
		Иначе
			БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
			ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
			ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
		КонецЕсли;
		//13.12.21 - DOCKING 357
		 Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, "ПД");

		//ЗаполнитьРеквизитыДокументовВидНакл();  		
	КонецЕсли; 
	#КонецОбласти
	//-----------------------------------------------
	#Область Акт_Сверки
	Если ТипДок = "Акт Сверки" Тогда
		//15.12.21 + DOCKING 368
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
			
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		СверкаВзаиморасчетов.Дата КАК Дата, 
			|		СверкаВзаиморасчетов.Ссылка КАК Ссылка, 
			|		СверкаВзаиморасчетов.Контрагент КАК Контрагент, 
			|		СверкаВзаиморасчетов.Договор КАК Договор, 
			|		СверкаВзаиморасчетов.Менеджер КАК Менеджер, 
			|		СверкаВзаиморасчетов.Проведен КАК Проведен
			|	ИЗ
			|		Документ.СверкаВзаиморасчетов КАК СверкаВзаиморасчетов
			|	ГДЕ
			|		СверкаВзаиморасчетов.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И СверкаВзаиморасчетов.Организация  =  &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Менеджер, 
			|	ВложенныйЗапрос.Договор,  
			|	ВложенныйЗапрос.Проведен}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";   
			
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СверкаВзаиморасчетов.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И СверкаВзаиморасчетов.Организация  =  &Организация",   "СверкаВзаиморасчетов.Организация  =  &Организация");
			КонецЕсли;
			
			// DOCKING 459 + 22.11.2022
			Если Объект.Конфигурация = "SB" Тогда
				//ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Менеджер",   "Ответственный");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СверкаВзаиморасчетов.Договор КАК Договор,",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.Договор,",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СверкаВзаиморасчетов.Менеджер КАК Менеджер,",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.Менеджер,",   "");
			КонецЕсли;
			// DOCKING 459 - 22.11.2022
			
		Иначе
			//15.12.21 - DOCKING 368
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		АктСверкиВзаиморасчетов.Дата КАК Дата, 
			|		АктСверкиВзаиморасчетов.Ссылка КАК Ссылка, 
			|		АктСверкиВзаиморасчетов.Контрагент КАК Контрагент, 
			|		АктСверкиВзаиморасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		АктСверкиВзаиморасчетов.Ответственный КАК Ответственный, 
			|		АктСверкиВзаиморасчетов.Проведен КАК Проведен
			|	ИЗ
			|		Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
			|	ГДЕ
			|		АктСверкиВзаиморасчетов.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И АктСверкиВзаиморасчетов.Организация  =  &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.ДоговорКонтрагента,  
			|	ВложенныйЗапрос.Проведен}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";   
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "АктСверкиВзаиморасчетов.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И АктСверкиВзаиморасчетов.Организация  =  &Организация",   "АктСверкиВзаиморасчетов.Организация  =  &Организация");
			КонецЕсли;
			//09.12.21 - DOCKING 357
		КонецЕсли;
		
		Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
		
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);
		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если НЕ Объект.Конфигурация = "SB" Тогда
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
				ЭлементОтбора.Использование  =  Истина;
				ЭлементОтбора.Значение       =  ДоговорКонтрагента;
				ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ответственный) Тогда
				ЭлементОтбора  =  Отбор.Добавить("Ответственный");
				ЭлементОтбора.Использование  =  Истина;
				ЭлементОтбора.Значение       =  Ответственный;
				ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			
		КонецЕсли;
	
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно
		КонецЕсли;
		
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы = ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
			ОбщийБезНДС = 0;
			ОбщийНДС  = 0;
			ОбщийСума = 0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			КонецЕсли;	
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			//12.01.2022 + DOCKING 368
			//НоваяСтрока.СуммаДокумента  =  Док.ОстатокНаНачало + Док.ПоДаннымОрганизации.Итог("Дебет") -  Док.ПоДаннымОрганизации.Итог("Кредит");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				НоваяСтрока.СуммаДокумента  =  Док.ДанныеКонтрагента.Итог("СуммаДолгПартнера") -  Док.ДанныеКонтрагента.Итог("СуммаНашДолг");
			ИначеЕсли Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СуммаДокумента  =  Док.ДанныеКонтрагента.Итог("СуммаДолгКонтрагента") -  Док.ДанныеКонтрагента.Итог("СуммаДолгОрганизации");				
			Иначе
				НоваяСтрока.СуммаДокумента  =  Док.ОстатокНаНачало + Док.ПоДаннымОрганизации.Итог("Дебет") -  Док.ПоДаннымОрганизации.Итог("Кредит");
			КонецЕсли;
			//12.01.2022 - DOCKING 368
			
			ОбщийСума=ОбщийСума+НоваяСтрока.СуммаДокумента;
		КонецЦикла;
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовАктСверки(); 
		КонецЕсли;
		
	 	//13.12.21 + DOCKING 357
		//БезНДСЧисло = ОбщийБезНДС;
		//ВсегоНДСЧисло = ОбщийНДС;
		//ВсегоЧисло1 = ОбщийСума;
		Если Вкладка = 0 Тогда
			БезНДСЧисло =ОбщийБезНДС;
			ВсегоНДСЧисло = ОбщийНДС;
			ВсегоЧисло1 = ОбщийСума;
		Иначе
			БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
			ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
			ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
		КонецЕсли;
		//13.12.21 - DOCKING 357 
		 Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, "ПД");

		//ЗаполнитьРеквизитыДокументовАктСверки(); 		
	КонецЕсли;
	#КонецОбласти
	//------------------------------------------------------------------------
	#Область Счет_покупателям
	Если ТипДок = "Счет покупателям" Тогда
		
		Если НЕ Объект.Конфигурация = "SB" Тогда				
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		СчетНаОплатуПокупателю.Дата КАК Дата, 
			|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка, 
			|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент, 
			|		СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
			|	ГДЕ
			|		СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И СчетНаОплатуПокупателю.Организация  =  &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Ответственный}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";   
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И СчетНаОплатуПокупателю.Организация  =  &Организация",   "СчетНаОплатуПокупателю.Организация  =  &Организация");
			КонецЕсли;
			//09.12.21 - DOCKING 357
			//-------------------------------------------------
			//15.12.21 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПокупателю.Ответственный КАК Ответственный",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.Ответственный",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента,",   "ДоговорКонтрагента");
			КонецЕсли;
			//15.12.21 - DOCKING 368
		Иначе
			
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		СчетНаОплату.Дата КАК Дата, 
			|		СчетНаОплату.Ссылка КАК Ссылка, 
			|		СчетНаОплату.Контрагент КАК Контрагент, 
			|		СчетНаОплату.Договор КАК Договор, 
			|		СчетНаОплату.Ответственный КАК Ответственный
			|	ИЗ
			|		Документ.СчетНаОплату КАК СчетНаОплату
			|	ГДЕ
			|		СчетНаОплату.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И СчетНаОплату.Организация  =  &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Договор, 
			|	ВложенныйЗапрос.Ответственный}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";   
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплату.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И СчетНаОплату.Организация  =  &Организация",   "СчетНаОплату.Организация  =  &Организация");
			КонецЕсли;
			//09.12.21 - DOCKING 357

			
		КонецЕсли;
		//-------------------------------------------------------------------
		Попытка
			ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
			
		ПостроительЗапроса.ЗаполнитьНастройки();      		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			//ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Договор");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			КонецЕсли;
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		ОбщийБезНДС = 0;
		ОбщийНДС  =0;
		ОбщийСума=0; 
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			КонецЕсли;	
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			// 15.12.2021 + DOCKING 368	
			//НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("Сумма") - Док.Товары.Итог("Сумма");
			ИначеЕсли Объект.Конфигурация = "SB" Тогда                          
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Запасы.Итог("Сумма");
			Иначе
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			КонецЕсли;
			// 15.12.2021 - DOCKING 368
			НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС; 
			
			ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			ОбщийНДС  =ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума=ОбщийСума+Док.суммаДокумента;
		КонецЦикла;		
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовСчет(); 
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//БезНДСЧисло = ОбщийБезНДС;
		//ВсегоНДСЧисло = ОбщийНДС;
		//ВсегоЧисло1 = ОбщийСума;
		Если Вкладка = 0 Тогда
			БезНДСЧисло =ОбщийБезНДС;
			ВсегоНДСЧисло = ОбщийНДС;
			ВсегоЧисло1 = ОбщийСума;
		Иначе
			БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
			ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
			ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
		КонецЕсли;
		//13.12.21 - DOCKING 357 
 		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, "ПД");

		//ЗаполнитьРеквизитыДокументовСчет(); 		
	КонецЕсли;
	#КонецОбласти
	//**********************************************
	#Область Счет_клиентам
	Если ТипДок = "Счет клиентам" Тогда
		
		//Если НЕ Объект.Конфигурация = "SB" Тогда				
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		СчетНаОплатуКлиенту.Дата КАК Дата, 
			|		СчетНаОплатуКлиенту.Ссылка КАК Ссылка, 
			|		СчетНаОплатуКлиенту.Контрагент КАК Контрагент, 
			|		СчетНаОплатуКлиенту.Договор КАК Договор, 
			|		СчетНаОплатуКлиенту.Менеджер КАК Ответственный
			|	ИЗ
			|		Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
			|	ГДЕ
			|		СчетНаОплатуКлиенту.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И СчетНаОплатуКлиенту.Организация  =  &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Договор, 
			|	ВложенныйЗапрос.Ответственный}
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";   
			
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуКлиенту.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И СчетНаОплатуКлиенту.Организация  =  &Организация",   "СчетНаОплатуКлиенту.Организация  =  &Организация");
			КонецЕсли;
			
		//-------------------------------------------------------------------
		Попытка
			ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);
			
		ПостроительЗапроса.ЗаполнитьНастройки();      		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			//ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Договор");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			КонецЕсли;
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		ОбщийБезНДС = 0;
		ОбщийНДС  =0;
		ОбщийСума=0; 
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			КонецЕсли;	
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			// 15.12.2021 + DOCKING 368	
			//НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("Сумма") - Док.Товары.Итог("Сумма");
			//ИначеЕсли Объект.Конфигурация = "SB" Тогда                          
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Запасы.Итог("Сумма");
			//Иначе
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			//КонецЕсли;
			//// 15.12.2021 - DOCKING 368
			//НоваяСтрока.СуммаНДСДокумента = Док.суммаДокумента - НоваяСтрока.СуммаБезНДС; 
			//
			//ОбщийБезНДС = ОбщийБезНДС +НоваяСтрока.СуммаБезНДС;
			//ОбщийНДС  =ОбщийНДС+НоваяСтрока.СуммаНДСДокумента;
			ОбщийСума=ОбщийСума+Док.суммаДокумента;
		КонецЦикла;		
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовСчетКлиентам(); 
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//БезНДСЧисло = ОбщийБезНДС;
		//ВсегоНДСЧисло = ОбщийНДС;
		//ВсегоЧисло1 = ОбщийСума;
		Если Вкладка = 0 Тогда
			БезНДСЧисло =ОбщийБезНДС;
			ВсегоНДСЧисло = ОбщийНДС;
			ВсегоЧисло1 = ОбщийСума;
		Иначе
			БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
			ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
			ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
		КонецЕсли;
		//13.12.21 - DOCKING 357 
 		Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, "ПД");

		//ЗаполнитьРеквизитыДокументовСчет(); 		
	КонецЕсли;
	#КонецОбласти
	
		//====================Блок ТТН=====================//
	#Область ТТН_Спирт_Алкоголь
	Если ТипДок = "ТТН спирт этиловый" или ТипДок="ТТН алкогольные напитки" Тогда  
	Элементы.ДополнительныеДанные.Доступность = Истина;
	Если НЕ Объект.Конфигурация = "SB" Тогда                                      
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата КАК Дата, 
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
		|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
		|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РеализацияТоваровУслуг.Ответственный КАК Ответственный, 
		//|		РеализацияТоваровУслуг.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|		РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,   
		//|		РеализацияТоваровУслуг.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		//|		РеализацияТоваровУслуг.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|		РеализацияТоваровУслуг.Проведен КАК Проведен,
		|		РеализацияТоваровУслуг.ПредставительОрганизации КАК ПредставительОрганизации,
		|		РеализацияТоваровУслуг.Контрагент.ИНН КАК ИНН
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РеализацияТоваровУслуг.Организация = &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		//|	ВложенныйЗапрос.СпецРежимНалогообложения, 
		//|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		//|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ПредставительОрганизации,
		|	ВложенныйЗапрос.ИНН,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РеализацияТоваровУслуг.Организация = &Организация",   "РеализацияТоваровУслуг.Организация = &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		//----------------------------------------------------------------------------------------
		//15.12.21 + DOCKING 368
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента",   "Договор");
		    ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Ответственный",   "Менеджер");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РеализацияТоваровУслуг.Контрагент.ИНН КАК ИНН",   "РеализацияТоваровУслуг.Контрагент.ИННПлательщикаНДС КАК ИННПлательщикаНДС");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ИНН",   "ВложенныйЗапрос.ИННПлательщикаНДС");
		КонецЕсли;
		//15.12.21 - DOCKING 368
	///--------------------------------------------	
	Иначе
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасходнаяНакладная.Дата КАК Дата, 
		|		РасходнаяНакладная.Ссылка КАК Ссылка, 
		|		РасходнаяНакладная.Контрагент КАК Контрагент, 
		|		РасходнаяНакладная.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РасходнаяНакладная.Ответственный КАК Ответственный, 
		
		|		РасходнаяНакладная.ПометкаУдаления КАК ПометкаУдаления,   
		
		
		|		РасходнаяНакладная.Проведен КАК Проведен,
		|		РасходнаяНакладная.ПредставительОрганизации КАК ПредставительОрганизации,
		|		РасходнаяНакладная.Контрагент.ИНН КАК ИНН
		|	ИЗ
		|		Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|	ГДЕ
		|		РасходнаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РасходнаяНакладная.Организация = &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ПредставительОрганизации,
		|	ВложенныйЗапрос.ИНН,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";   
		
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РасходнаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РасходнаяНакладная.Организация = &Организация",   "РасходнаяНакладная.Организация = &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		//----------------------------------------------------------------------------------------
		
		
	КонецЕсли;
	
		
	Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭтотОбъект.НачПериода);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//Элементы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);      		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		//Если ЗарегистрированныеПоДанным1С Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  Истина;
		//	ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		//КонецЕсли;
		//
		//Если ЗарегистрированныеПоДанным1СПлан Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  Истина;
		//	ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			//ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Договор");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			КонецЕсли;
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если СпецРежимНалогообложения <> Неопределено Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("СпецРежимНалогообложения");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  СпецРежимНалогообложения;
		//	ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		//КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ПредставительОрганизации");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если БезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		ОбщийНДС = 0;
		ОбщийБезНДС = 0;
		ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			
			//20.05.2023 + DOCKING 510			
			//НоваяСтрока.ТипСтрока = ТипДок;
			Если НЕ Объект.Конфигурация = "SB" Тогда	
				НоваяСтрока.ТипСтрока = ПолучитьТипРТУПоУмолчанию();			
			Иначе
				НоваяСтрока.ТипСтрока = ТипДок;
			КонецЕсли;	
			//20.05.2023 - DOCKING 510
			
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			//Если ИмяБазы = "УПП" Тогда
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			//ИначеЕсли ИмяБазы = "УТ" Тогда
				// 15.12.2021 + DOCKING 368
			//НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			ИначеЕсли Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Запасы.Итог("СуммаНДС");
			Иначе
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			КонецЕсли;	
			// 15.12.2021 - DOCKING 368
			//Иначе	
			//	НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ВозвратнаяТара.Итог("Сумма") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			//КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		
			ОбщийНДС = ОбщийНДС + НоваяСтрока.СуммаНДСДокумента;
			ОбщийБезНДС = ОбщийБезНДС + НоваяСтрока.СуммаБезНДС;
			ОбщийСума = ОбщийСума + Док.СуммаДокумента;
			
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовТТН(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
	КонецЕсли;	
	#КонецОбласти
//------===========================ТТН конец запроса========================//	

	
	#Область Запись_Книги_Приобретения
	//-----------------------------------------------  	
	Если ТипДок = "ЗаписьКнигиПриобретения" Тогда  	
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
		|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
		|		РегистрацияВходящегоНалоговогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
		//|		&ОбособленноеПодразделениеЗапит КАК ОбособленноеПодразделениеЗапит
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
		|	ГДЕ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Ответственный}
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";      
		
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация",   "РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		
		//Если УчетПоОбособленнымПодразделениям Тогда			
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеЗапит",   "РегистрацияВходящегоНалоговогоДокумента.ОбособленноеПодразделение");
		//	Иначе
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеЗапит",   "NULL");
		//КонецЕсли;		
        Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);   		
		ПостроительЗапроса.ЗаполнитьНастройки(); 		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);	
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ОбособленноеПодразделение");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  ОбособленноеПодразделение;
		//	ЭлементОтбора.ВидСравнения   =  ?(ОбособленноеПодразделение.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		//КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС;
			
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488 
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовЗапит(); 
		Иначе
			ИзменениеОсновныхПараметров();			
		КонецЕсли;    		
		//ЗаполнитьРеквизитыДокументовЗапит();  		
	КонецЕсли;
	#КонецОбласти
	//---------------------------------------------------------------
	#Область Вх_НалоговыйДокумент
	Если ТипДок = "ВхНалоговыйДокумент" Тогда  
		Если Объект.Конфигурация = "БУ" или Объект.Конфигурация = "УТП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
		|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
		|		РегистрацияВходящегоНалоговогоДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
		|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления КАК ПометкаУдаления, 
		|		РегистрацияВходящегоНалоговогоДокумента.ВидОперации КАК ВидОперации,  
		|		РегистрацияВходящегоНалоговогоДокумента.Проведен КАК Проведен,
		|		РегистрацияВходящегоНалоговогоДокумента.Комментарий КАК Комментарий 
		|	ИЗ
		|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
		|	ГДЕ
		|		РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация 
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.Проведен,
		|	ВложенныйЗапрос.Комментарий} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РегистрацияВходящегоНалоговогоДокумента.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация",   "РегистрацияВходящегоНалоговогоДокумента.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
	ИначеЕсли Объект.Конфигурация = "УПП" или Объект.Конфигурация = "УТ" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаписьКнигиПриобретения.Дата КАК Дата, 
		|		ЗаписьКнигиПриобретения.Ссылка КАК Ссылка, 
		|		ЗаписьКнигиПриобретения.Контрагент КАК Контрагент, 
		|		ЗаписьКнигиПриобретения.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ЗаписьКнигиПриобретения.Ответственный КАК Ответственный, 
		|		ЗаписьКнигиПриобретения.ПометкаУдаления КАК ПометкаУдаления, 
		|		ЗаписьКнигиПриобретения.ВидОперации КАК ВидОперации,  
		|		ЗаписьКнигиПриобретения.Проведен КАК Проведен,
		|		ЗаписьКнигиПриобретения.Комментарий КАК Комментарий 
		|	ИЗ
		|		Документ.ЗаписьКнигиПриобретения КАК ЗаписьКнигиПриобретения
		|	ГДЕ
		|		ЗаписьКнигиПриобретения.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ЗаписьКнигиПриобретения.Организация  =  &Организация 
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.Проведен,
		|	ВложенныйЗапрос.Комментарий} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ЗаписьКнигиПриобретения.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ЗаписьКнигиПриобретения.Организация  =  &Организация",   "ЗаписьКнигиПриобретения.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
	КонецЕсли;
	
	Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭтотОбъект.НачПериода);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//Элементы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка);		
		Отбор  =  ПостроительЗапроса.Отбор;
			
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВидОперацииВхНН) Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ВидОперации");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  ВидОперацииВхНН;
		//	ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		//КонецЕсли;   
			
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
		
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
				Продолжить;
				КонецЕсли; 
			КонецЕсли;     		
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357		
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			Если Объект.Конфигурация = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС")- Док.ВозвратнаяТара.Итог("Сумма");
			ИначеЕсли Объект.Конфигурация = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВхНН(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		
		//ЗаполнитьРеквизитыДокументовВхНН(); 
	КонецЕсли;
	#КонецОбласти
	//---------------------------------------------------------------
	#Область Вх_ПостТовУслуг
	Если ТипДок = "ВхПостТовУслуг" Тогда
		
		Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
		|		ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации, 
		|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации, 
		|	ВложенныйЗапрос.Комментарий, 
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ПоступлениеТоваровУслуг.Организация  =  &Организация",   "ПоступлениеТоваровУслуг.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
		|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Комментарий, 
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ПоступлениеТоваровУслуг.Организация  =  &Организация",   "ПоступлениеТоваровУслуг.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		КонецЕсли;
		
		Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭтотОбъект.НачПериода);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   ЭтотОбъект.КонПериода);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка); 	
		Отбор  =  ПостроительЗапроса.Отбор;
			
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВидОперацииПТУ) Тогда
		//	ЭлементОтбора  =  Отбор.Добавить("ВидОперации");
		//	ЭлементОтбора.Использование  =  Истина;
		//	ЭлементОтбора.Значение       =  ВидОперацииПТУ;
		//	ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		//КонецЕсли;   

		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
				Продолжить;
				КонецЕсли; 
			КонецЕсли;   
			
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			Если Объект.Конфигурация = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.ОбъектыСтроительства.Итог("Сумма") - Док.БланкиСтрогогоУчета.Итог("Сумма") ; 
			ИначеЕсли Объект.Конфигурация = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.БланкиСтрогогоУчета.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовВхПТУ();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
	КонецЕсли;	
	#КонецОбласти
	
	
    //---------------------------------------------------------------
	#Область Вх_Счет
	Если ТипДок = "ВхСчет" Тогда 

		Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПоставщика.Дата КАК Дата, 
		|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
		|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
		|		СчетНаОплатуПоставщика.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
		|		СчетНаОплатуПоставщика.ПометкаУдаления КАК ПометкаУдаления,
		|		СчетНаОплатуПоставщика.Комментарий КАК Комментарий,
		|		СчетНаОплатуПоставщика.ВидОперации КАК ВидОперации, 
		|		СчетНаОплатуПоставщика.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|	ГДЕ
		|		СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И СчетНаОплатуПоставщика.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Комментарий,
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И СчетНаОплатуПоставщика.Организация  =  &Организация",   "СчетНаОплатуПоставщика.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
	ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда 
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПоставщика.Дата КАК Дата, 
		|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
		|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
		|		СчетНаОплатуПоставщика.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
		|		СчетНаОплатуПоставщика.ПометкаУдаления КАК ПометкаУдаления,
		|		СчетНаОплатуПоставщика.Комментарий КАК Комментарий,
		|		СчетНаОплатуПоставщика.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|	ГДЕ
		|		СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И СчетНаОплатуПоставщика.Организация  =  &Организация
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.Комментарий,
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПоставщика.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И СчетНаОплатуПоставщика.Организация  =  &Организация",   "СчетНаОплатуПоставщика.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
	КонецЕсли;
	Попытка
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭтотОбъект.НачПериода);
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(КонПериода));//Элементы.КонПериода.Значение);
		ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка); 	
		Отбор  =  ПостроительЗапроса.Отбор;
			
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если НЕ ИмяБазы="УПП" Тогда
		//	Если ЗначениеЗаполнено(ВидОперацииВхСчет) Тогда
		//		ЭлементОтбора  =  Отбор.Добавить("ВидОперации");
		//		ЭлементОтбора.Использование  =  Истина;
		//		ЭлементОтбора.Значение       =  ВидОперацииВхСчет;
		//		ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		//	КонецЕсли; 
		//КонецЕсли;
				
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
				Продолжить;
				КонецЕсли; 
			КонецЕсли;   
			
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			
			
			Док  =  ПодобранныйДокумент.Документ;
			
			Если Объект.Конфигурация = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") ;
			ИначеЕсли Объект.Конфигурация = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488 	
			ОтобразитьВозможности(); 
			ЗаполнитьРеквизитыДокументовВхСчет(); 
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
		//ЗаполнитьРеквизитыДокументовВхСчет();
	КонецЕсли;
	#КонецОбласти

	
	#Область Клиент_ПостТоваров
	Если ТипДок = "ПостТоваровКлиент" Тогда
		
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
		|		ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации, 
		|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
		|       И ПоступлениеТоваровУслуг.Товары.Количество >  0
		|       И ( НЕ ПоступлениеТоваровУслуг.Услуги.Количество > 0)
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации, 
		|	ВложенныйЗапрос.Комментарий, 
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ПоступлениеТоваровУслуг.Организация  =  &Организация",   "ПоступлениеТоваровУслуг.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		
		Попытка
			ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
			ПостроительЗапроса.ЗаполнитьНастройки();     		
			ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭтотОбъект.НачПериода);
			ПостроительЗапроса.Параметры.Вставить("КонПериода",   ЭтотОбъект.КонПериода);
			ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка); 	
			Отбор  =  ПостроительЗапроса.Отбор;
				
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
				Продолжить;
				КонецЕсли;                            
			КонецЕсли;   
			
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			Если Объект.Конфигурация = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.ОбъектыСтроительства.Итог("Сумма") - Док.БланкиСтрогогоУчета.Итог("Сумма") ; 
			ИначеЕсли Объект.Конфигурация = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.БланкиСтрогогоУчета.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовПТУ();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
	КонецЕсли;	
	#КонецОбласти
	
	#Область Клиент_ПостУслуг
	Если ТипДок = "ПостУслугКлиент" Тогда
		
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
		|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
		|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
		|		ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента, 
		|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
		|		ПоступлениеТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		|		ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
		|		ПоступлениеТоваровУслуг.ВидОперации КАК ВидОперации, 
		|		ПоступлениеТоваровУслуг.Проведен КАК Проведен 
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
		|		И ПоступлениеТоваровУслуг.Организация  =  &Организация
		|       И ПоступлениеТоваровУслуг.Услуги.Количество >  0
		|       И ( НЕ ПоступлениеТоваровУслуг.Товары.Количество > 0)
		|		) КАК ВложенныйЗапрос 
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.ДоговорКонтрагента, 
		|	ВложенныйЗапрос.ВидОперации, 
		|	ВложенныйЗапрос.Комментарий, 
		|	ВложенныйЗапрос.Проведен} 		
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ВложенныйЗапрос.Дата УБЫВ";  
		//09.12.21 + DOCKING 357
		Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
			ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И ПоступлениеТоваровУслуг.Организация  =  &Организация",   "ПоступлениеТоваровУслуг.Организация  =  &Организация");
		КонецЕсли;
		//09.12.21 - DOCKING 357
		
		Попытка
			ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
			ПостроительЗапроса.ЗаполнитьНастройки();     		
			ПостроительЗапроса.Параметры.Вставить("НачПериода",   ЭтотОбъект.НачПериода);
			ПостроительЗапроса.Параметры.Вставить("КонПериода",   ЭтотОбъект.КонПериода);
			ПостроительЗапроса.Параметры.Вставить("Организация",  ОрганизацияПервичка); 	
			Отбор  =  ПостроительЗапроса.Отбор;
				
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Контрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если КонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(Контрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  ДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(ДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Ответственный;
			ЭлементОтбора.ВидСравнения   =  ?(Ответственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если Проведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		// 28.07.22 + DOCKING 429
		Исключение
			//Сообщить(ОписаниеОшибки());
			ПодобранныеДокументы = Новый ТаблицаЗначений;	
		КонецПопытки;
		// 28.07.22 - DOCKING 429
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			
			Если ВхДокМедок = Истина Тогда
				Если Лев(ПодобранныйДокумент.Документ.Комментарий, 5)="Переданий з M.E.Doc" тогда
				Иначе 
				Продолжить;
				КонецЕсли;                            
			КонецЕсли;   
			
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаДокументов.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			
			НоваяСтрока  =  ТаблицаДокументов.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			Если Объект.Конфигурация = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС") - Док.Оборудование.Итог("СуммаНДС") - Док.ОбъектыСтроительства.Итог("Сумма") - Док.БланкиСтрогогоУчета.Итог("Сумма") ; 
			ИначеЕсли Объект.Конфигурация = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма") - Док.Услуги.Итог("СуммаНДС")- Док.Оборудование.Итог("СуммаНДС")- Док.ОбъектыСтроительства.Итог("СуммаНДС") - Док.БланкиСтрогогоУчета.Итог("СуммаНДС");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		КонецЦикла; 
		
		// 20.03.2023 + DOCKING 488		
		//Если ТаблицаДокументов.Количество() > 0 Тогда
		Если ТаблицаДокументов.Количество() > 0 И ПодобранныеДокументы.Количество() > 0 Тогда	
		// 20.03.2023 - DOCKING 488 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовПТУ();
		Иначе
			ИзменениеОсновныхПараметров();
		КонецЕсли;
	КонецЕсли;	
	#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ОбновитьСчетчики()
	
	ОбщийНДС = 0;
	ОбщийБезНДС = 0;
	ОбщийСума=0;
	
	ВсегоЧисло = 0;
	ИзНихЧисло = 0; 	
	БезНДСЧисло = 0;
	ВсегоНДСЧисло = 0;
	ВсегоЧисло1 = 0;
		
	Для каждого ПодобранныйДокумент Из ТаблицаДокументов Цикл
		Док  =  ПодобранныйДокумент.Документ.ПолучитьОбъект();
		Если Объект.Конфигурация = "УТ" Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
		ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Запасы.Итог("СуммаНДС");
		Иначе 				
			Если ТипЗнч(Док)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС");
			Иначе
				СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС");
			КонецЕсли;
		КонецЕсли;
		СуммаНДСДокумента = Док.суммаДокумента - СуммаБезНДС;
		ВсегоЧисло = ТаблицаДокументов.Количество();
		
		ОбщийБезНДС = ОбщийБезНДС +СуммаБезНДС;
		ОбщийНДС = ОбщийНДС+СуммаНДСДокумента;
		ОбщийСума = ОбщийСума+Док.суммаДокумента;
		
	КонецЦикла;		
	
	Если ТаблицаДокументов.Количество() > 0 Тогда	
		ОтобразитьВозможности();
	Иначе 
		ИзменениеОсновныхПараметров();
	КонецЕсли;
	
	БезНДСЧисло = БезНДСЧисло + ОбщийБезНДС;
	ВсегоНДСЧисло = ВсегоНДСЧисло + ОбщийНДС;
	ВсегоЧисло1 = ВсегоЧисло1 + ОбщийСума;
	
	//------------------------------
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСчетчикиНалоговых()
	
	ОбщийНДС = 0;
	ОбщийБезНДС = 0;
	ОбщийСума=0;
		
	ВсегоЧисло2 = "0";
	ИзНихЧисло1 = "0"; 
	БезНДСЧисло1 = "0";
	ВсегоНДСЧисло1 = "0";
	ВсегоЧисло3 = "0";
		
	Для каждого ПодобранныйДокумент Из ТаблицаНалоговых Цикл
		Док  =  ПодобранныйДокумент.Документ.ПолучитьОбъект();
		Если Объект.Конфигурация = "УПП" Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
		ИначеЕсли Объект.Конфигурация = "ERP" Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");	
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Запасы.Итог("СуммаНДС");		
		Иначе	
			СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
		КонецЕсли;	
		СуммаНДСДокумента = Док.СуммаДокумента - СуммаБезНДС;
		ВсегоЧисло2 = ТаблицаНалоговых.Количество();
		
		ОбщийБезНДС = ОбщийБезНДС +СуммаБезНДС;
		ОбщийНДС = ОбщийНДС+СуммаНДСДокумента;
		ОбщийСума = ОбщийСума+Док.суммаДокумента;
		
	КонецЦикла;		
	
	Если ТаблицаНалоговых.Количество() > 0 Тогда	
		ОтобразитьВозможности();
	Иначе 
		ИзменениеОсновныхПараметровНалоговых();
	КонецЕсли;
	
	БезНДСЧисло1 = БезНДСЧисло1 + ОбщийБезНДС;
	ВсегоНДСЧисло1 = ВсегоНДСЧисло1 + ОбщийНДС;
	ВсегоЧисло3 = ВсегоЧисло3 + ОбщийСума; 
	                                  	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеПервички()
	
	Попытка 
		App = Новый COMОбъект("MEDOC.ZApplication"); 
		Номер = 1;
		// 30.10.2023 + DOCKING 518 
		Инд = 0;
		МассивСтрокКУдалению  =  Новый Массив();
		// 30.10.2023 - DOCKING 518 
		Для Каждого СтрокаДокумент из ТаблицаДокументов Цикл
			
			НайденнаяСтрока = СтрокаДокумент;
			ИД = Строка(НайденнаяСтрока.Документ.УникальныйИдентификатор());
			НайденнаяСтрока.НомерСтроки = Номер; 
			Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
				СтатусТекст = СокрЛП(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 	
				СтатусТекст2 = СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
				НайденнаяСтрока.Статус = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2));
				СтатусОбщийТекст = СтатусТекст;
			ИначеЕсли (НЕ ТипДок = "ВхНалоговыйДокумент") 
				И (НЕ ТипДок = "ВхПостТовУслуг") 
				И (НЕ ТипДок = "ВхСчет")
				И App.GetInTrashStatus(ИД) = Ложь Тогда
				НайденнаяСтрока.Статус = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); 					
				СтатусОбщийТекст = НайденнаяСтрока.Статус;
			ИначеЕсли App.GetInTrashStatus(ИД) = Истина	Тогда
				НайденнаяСтрока.Статус = Формат(НСтр("ru = 'Документ в корзине';uk = 'Документ в корзині'"));
				СтатусОбщийТекст = НайденнаяСтрока.Статус;
			Иначе
				НайденнаяСтрока.Статус = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); //"ru = '';uk = ''"
				СтатусОбщийТекст = НайденнаяСтрока.Статус;
			КонецЕсли;
			
			// 30.10.2023 + DOCKING 518 
			//Номер = Номер + 1;
			Если ТипСтатусаПД <> Неопределено Тогда
				Если (СтатусОбщийТекст <> ТипСтатусаПД) Тогда
					НайденнаяСтрокаКоллекции = ТаблицаДокументов.Получить(Инд);
					МассивСтрокКУдалению.Добавить(НайденнаяСтрокаКоллекции); 
				Иначе
					Номер = Номер + 1;
				КонецЕсли;
			Иначе
				Номер = Номер + 1;
			КонецЕсли;
			Инд = Инд + 1;
			// 30.10.2023 - DOCKING 518
		КонецЦикла;

		// 30.10.2023 + DOCKING 518
		Если ТипСтатусаПД <> Неопределено Тогда
			Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
				ТаблицаДокументов.Удалить(СтрокаККудалению);
			КонецЦикла;
			ОбновитьСчетчики();
		КонецЕсли;	
		////----------------------------
		// 30.10.2023 - DOCKING 518
		//ЭтотОбъект.ЭДОВозможен.Видимость = Истина;
		//ЭтотОбъект.ЭДОНевозможен.Видимость = ложь;
	Исключение
		//ЭтотОбъект.ЭДОВозможен.Видимость = ложь;
		//ЭтотОбъект.ЭДОНевозможен.Видимость = истина;			
		Возврат; 
	КонецПопытки;     
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеНалоговых()
	
	Попытка 
		App = Новый COMОбъект("MEDOC.ZApplication"); 
		Номер = 1;
		// 30.10.2023 + DOCKING 518 
		Инд = 0;
		МассивСтрокКУдалению  =  Новый Массив();
		// 30.10.2023 - DOCKING 518 
		Prim = App.GetPrimaryDocs();
		Для Каждого СтрокаДокумент из ТаблицаНалоговых Цикл
			НайденнаяСтрока = СтрокаДокумент;
			ИД = Строка(НайденнаяСтрока.Документ.УникальныйИдентификатор());
			НайденнаяСтрока.НомерСтроки = Номер; 
			Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
				СтатусТекст = СокрЛП(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 	
				СтатусТекст2 = СокрЛП(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
				НайденнаяСтрока.Статус = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2)); 
				СтатусОбщийТекст = СтатусТекст;
			ИначеЕсли (НЕ ТипДок = "ВхНалоговыйДокумент") 
				И (НЕ ТипДок = "ВхПостТовУслуг") 
				И (НЕ ТипДок = "ВхСчет")
				И App.GetInTrashStatus(ИД) = Ложь Тогда
				НайденнаяСтрока.Статус = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'"));
				СтатусОбщийТекст = НайденнаяСтрока.Статус;
			ИначеЕсли App.GetInTrashStatus(ИД) = Истина	Тогда
				НайденнаяСтрока.Статус = Формат(НСтр("ru = 'Документ в корзине';uk = 'Документ в корзині'"));
				СтатусОбщийТекст = НайденнаяСтрока.Статус;
			Иначе
				НайденнаяСтрока.Статус = Формат(НСтр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'")); //"ru = '';uk = ''"
				СтатусОбщийТекст = НайденнаяСтрока.Статус;
			КонецЕсли;
			
			// DOCKING 543 + 28.07.2023
			СтатусТекстЕРНН  =  ПолучитьРасшифровкуСтатусаРегистрацииЕРПН(Строка(App.GetSendSTTByExDocID(ИД)));
			НайденнаяСтрока.СтатусРегистрацииЕРНН = Формат(Строка(СтатусТекстЕРНН));
			// DOCKING 543 - 28.07.2023
			// 30.10.2023 + DOCKING 518
			//Номер = Номер + 1;
			СтатусОбщийТекстЕРНН = НайденнаяСтрока.СтатусРегистрацииЕРНН;
			Если (ТипСтатусаНН <> Неопределено) ИЛИ (ТипСтатусаЕРНН <> Неопределено) Тогда
				Если (СтатусОбщийТекст <> ТипСтатусаНН) И (СтатусОбщийТекстЕРНН <> ТипСтатусаЕРНН) Тогда
					НайденнаяСтрокаКоллекции = ТаблицаНалоговых.Получить(Инд);
					МассивСтрокКУдалению.Добавить(НайденнаяСтрокаКоллекции); 
				Иначе
					Номер = Номер + 1;
				КонецЕсли;
			Иначе
				Номер = Номер + 1;
			КонецЕсли;
			Инд = Инд + 1;
			// 30.10.2023 - DOCKING 518
		КонецЦикла;

		// 30.10.2023 + DOCKING 518
		Если (ТипСтатусаНН <> Неопределено) ИЛИ (ТипСтатусаЕРНН <> Неопределено) Тогда
			Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
				ТаблицаНалоговых.Удалить(СтрокаККудалению);
			КонецЦикла;
			ОбновитьСчетчикиНалоговых();
		КонецЕсли;	
		////----------------------------
		// 30.10.2023 - DOCKING 518
		//ЭтотОбъект.ЭДОВозможен.Видимость = Истина;
		//ЭтотОбъект.ЭДОНевозможен.Видимость = ложь;
	Исключение
		//ЭтотОбъект.ЭДОВозможен.Видимость = ложь;
		//ЭтотОбъект.ЭДОНевозможен.Видимость = истина;			
		Возврат; 
	КонецПопытки;     
	
КонецПроцедуры

//*----------------------------------------------------------------------------

Процедура ОтобразитьВозможности()
	
	// 09.12.2021 + DOCKING 361
	//ВсегоЧисло = ТаблицаДокументов.Количество();
	//Элементы.ВывестиСписок.Доступность = Истина;  			
	//Элементы.СортироватьАЗ.Доступность = Истина;
	//Элементы.СортироватьЗА.Доступность = Истина;
	Если ПолучитьИмяТекущейВкладки() = "ПД" Тогда
		ВсегоЧисло = ТаблицаДокументов.Количество();
		Элементы.ВывестиСписок.Доступность = Истина;
		Элементы.СортироватьАЗ.Доступность = Истина;
		Элементы.СортироватьЗА.Доступность = Истина;
		Элементы.СортировкаВверх.Доступность = Истина;
		Элементы.СортировкаВниз.Доступность = Истина;
	ИначеЕсли ПолучитьИмяТекущейВкладки() = "НД" Тогда	
		ВсегоЧисло2 = ТаблицаНалоговых.Количество();
		Элементы.ВывестиСписок1.Доступность = Истина;
		Элементы.СортироватьАЗ1.Доступность = Истина;
		Элементы.СортироватьЗА1.Доступность = Истина;
		Элементы.СортировкаВверх1.Доступность = Истина;
		Элементы.СортировкаВниз1.Доступность = Истина;
	КонецЕсли;
	// 09.12.2021 - DOCKING 361
	
	//Если ТипДок = "Акт выполненных работ" 
	//	или ТипДок = "Счет покупателям" 
	//	или ТипДок = "Акт Сверки" 
	//	или ТипДок = "Расходная накладная" 
	//	или ТипДок = "Возврат от покупателя"
	//	или ТипДок = "Возврат поставщику" Тогда
	//	//Элементы.х2.Доступность = Ложь;
	//	//Элементы.х3.Доступность = Истина;
	//Иначе                    
	//	//Элементы.х2.Доступность = Истина;
	//	//Элементы.х3.Доступность = Истина;
	//КонецЕсли;
	
	Элементы.ОтпрНет.Доступность = Истина;  
	
	ОтпрНет  =  1;
	
КонецПроцедуры

Функция Скрытие(БезНДСЧисло, ВсегоНДСЧисло, ВсегоЧисло1, Вкладка)
	
	// 09.12.21 + DOCKING 361
	
	//Если БезНДСЧисло = 0 тогда
	//		Элементы.БезНДСЧисло.Видимость = Ложь;
	//	КонецЕсли;
	//	Если ВсегоНДСЧисло = 0 тогда
	//		Элементы.ВсегоНДСЧисло.Видимость = Ложь;
	//	КонецЕсли;
	//	Если ВсегоЧисло1 = 0 тогда
	//		Элементы.ВсегоЧисло1.Видимость = Ложь;
	//	КонецЕсли;
	
	Если Вкладка = "ПД" Тогда
	// 09.12.21 - DOCKING 361
	
		Если БезНДСЧисло = 0 тогда
			Элементы.БезНДСЧисло.Видимость = Ложь;
		КонецЕсли;
		Если ВсегоНДСЧисло = 0 тогда
			Элементы.ВсегоНДСЧисло.Видимость = Ложь;
		КонецЕсли;
		Если ВсегоЧисло1 = 0 тогда
			Элементы.ВсегоЧисло1.Видимость = Ложь;
		КонецЕсли;		
	// 09.12.21 + DOCKING 361	
	ИначеЕсли Вкладка = "НД" Тогда
		
		Если БезНДСЧисло1 = 0 тогда
			Элементы.БезНДСЧисло1.Видимость = Ложь;
		КонецЕсли;
		Если ВсегоНДСЧисло1 = 0 тогда
			Элементы.ВсегоНДСЧисло1.Видимость = Ложь;
		КонецЕсли;
		Если ВсегоЧисло3 = 0 тогда
			Элементы.ВсегоЧисло3.Видимость = Ложь;
		КонецЕсли;		
	
	КонецЕсли;
	// 09.12.21 - DOCKING 361	
		
КонецФункции

Процедура ЗаполнитьРеквизитыДокументовНН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаНалоговых;
		МассивДокументов  =  ТаблицаНалоговых.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "КУП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|	//#ЕстьОбособленноеПодразделение	ВЫБОР
		|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
		|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
		|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.ПометкаУдаления,      
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 	
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных	
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента, 
		|		НалоговаяНакладная.Ссылка КАК Ссылка, 
		|		НалоговаяНакладная.Номер КАК Номер, 
		|		НалоговаяНакладная.Дата КАК Дата, 
		|		НалоговаяНакладная.Контрагент КАК Контрагент, 
		|		НалоговаяНакладная.Валюта КАК ВалютаДокумента, 
		|		НалоговаяНакладная.СуммаДокумента КАК СуммаДокумента, 
		|		НалоговаяНакладная.Ответственный КАК Ответственный, 
		|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную, 
		|		НалоговаяНакладная.Проведен как Проведен, 
		|		НалоговаяНакладная.ПометкаУдаления как ПометкаУдаления,   
		|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных как ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		НалоговаяНакладная.СтатусРегистрацииВЕРНН как ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
		|	ГДЕ
		|		НалоговаяНакладная.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	Иначе
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|	//#ЕстьОбособленноеПодразделение	ВЫБОР
		|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
		|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
		|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.СуммаНДСДокумента, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.ПометкаУдаления,      
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 	
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных	
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента, 
		|		НалоговаяНакладная.Ссылка КАК Ссылка, 
		|		НалоговаяНакладная.Номер КАК Номер, 
		|		НалоговаяНакладная.Дата КАК Дата, 
		|		НалоговаяНакладная.Контрагент КАК Контрагент, 
		|		НалоговаяНакладная.ВалютаДокумента КАК ВалютаДокумента, 
		|		НалоговаяНакладная.СуммаДокумента КАК СуммаДокумента, 
		|		НалоговаяНакладная.СуммаНДСДокумента КАК СуммаНДСДокумента, 
		|		НалоговаяНакладная.Ответственный КАК Ответственный, 
		|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную, 
		|		НалоговаяНакладная.Проведен как Проведен, 
		|		НалоговаяНакладная.ПометкаУдаления как ПометкаУдаления,   
		|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных как ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных как ВключенаВЕдиныйРеестрНалоговыхНакладных
		|	ИЗ
		|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
		|	ГДЕ
		|		НалоговаяНакладная.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	КонецЕсли;	
	//15.12.21 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВалютаДокумента",   "Валюта");	
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "НалоговаяНакладная.СтатусРегистрацииВЕРНН как ВключенаВЕдиныйРеестрНалоговыхНакладных",   "");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных",   "");
		
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных как ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,",   "НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных как ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,",   "ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
		
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "НалоговаяНакладная.СуммаНДСДокумента КАК СуммаНДСДокумента,",   "");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.СуммаНДСДокумента,",   "");
	КонецЕсли;
	//15.12.21 - DOCKING 368
	//Если УчетПоОбособленнымПодразделениям Тогда
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	//Иначе
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	//КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда 
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		
		НомерБезПрефикса  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		КодСпецРежима = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", РеквизитыДокумента.Документ.Метаданные()))
			И (РеквизитыДокумента.Документ.СпецРежимНалогообложения > 0) Тогда
			КодСпецРежима = "/" + РеквизитыДокумента.Документ.СпецРежимНалогообложения + "/";
		КонецЕсли;

		Если (ЕстьРеквизитДокумента("ОбособленноеПодразделение", РеквизитыДокумента.Документ.Метаданные()))
			И (ЗначениеЗаполнено(РеквизитыДокумента.Документ.ОбособленноеПодразделение.Префикс)) Тогда
			НомерБезПрефикса = НомерБезПрефикса + ?(ЗначениеЗаполнено(КодСпецРежима),КодСпецРежима,"//") + РеквизитыДокумента.Документ.ОбособленноеПодразделение.Префикс;
		Иначе
			Если ЗначениеЗаполнено(КодСпецРежима) Тогда
				НомерБезПрефикса = НомерБезПрефикса + КодСпецРежима;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыДокументов.Номер  = НомерБезПрефикса;
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 491 + 17.03.2023
		Если НЕ СтрокаТаблицыДокументов.Документ.Контрагент = Неопределено
			// DOCKING 517 + 07.06.2023
			И ТипЗнч(СтрокаТаблицыДокументов.Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			// DOCKING 517 - 07.06.2023
			Тогда
		//DOCKING 491 - 17.03.2023	
		
			//DOCKING 476 + 02.02.2023		
			Если Объект.Конфигурация = "ERP" Тогда
				СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
			ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
				СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
			Иначе
				СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
			КонецЕсли;
			//DOCKING 476 - 02.02.2023
		КонецЕсли;	
		
		// КИТ-2005
		//DOCKING 459 + 22.11.2022		
		//ФИО = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(СтрокаТаблицыДокументов.Документ.Дата, Новый Структура("ФизическоеЛицо"));
		Если Объект.Конфигурация = "SB" Тогда
			ФИО = РегистрыСведений.ФИОФизЛиц.СрезПоследних(СтрокаТаблицыДокументов.Документ.Дата, Новый Структура("ФизЛицо"));			
		Иначе
			ФИО = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(СтрокаТаблицыДокументов.Документ.Дата, Новый Структура("ФизическоеЛицо"));
		КонецЕсли;
		//DOCKING 459 - 22.11.2022
		Если ФИО.Количество() > 0 Тогда
			СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = ВРег(Лев(СокрЛ(ФИО[0].Имя), 1))
										 + ". "
										 + ВРег(Лев(СокрЛ(ФИО[0].Отчество), 1))
										 + ". "
										 + СокрЛП(ФИО[0].Фамилия); 
			
		Иначе
			СтрокаТаблицыДокументов.КтоВыписалНалоговуюНакладную = "" + СокрЛП(СтрокаТаблицыДокументов.Документ.КтоВыписалНалоговуюНакладную);									 
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаНалоговых.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов1.Обновить(); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументовДод2(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаНалоговых;
		МассивДокументов  =  ТаблицаНалоговых.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "КУП" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|	//#ЕстьОбособленноеПодразделение	ВЫБОР
		|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
		|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
		|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен, 
		|	ВложенныйЗапрос.ПометкаУдаления, 
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных
		|ИЗ
		|	(ВЫБРАТЬ
		|		Приложение2КНалоговойНакладной.Ссылка, 
		|		Приложение2КНалоговойНакладной.Номер, 
		|		Приложение2КНалоговойНакладной.Дата, 
		|		Приложение2КНалоговойНакладной.Контрагент, 
		|		Приложение2КНалоговойНакладной.Валюта КАК ВалютаДокумента, 
		|		Приложение2КНалоговойНакладной.СуммаДокумента, 
		|		Приложение2КНалоговойНакладной.Ответственный, 
		|		Приложение2КНалоговойНакладной.Проведен, 
		|		Приложение2КНалоговойНакладной.ПометкаУдаления, 
		|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную, 
		|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		Приложение2КНалоговойНакладной.СтатусРегистрацииВЕРНН как ВключенаВЕдиныйРеестрНалоговыхНакладных   
		|	ИЗ
		|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|	ГДЕ
		|		Приложение2КНалоговойНакладной.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
		
	Иначе
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Ссылка.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
		|	//#ЕстьОбособленноеПодразделение	ВЫБОР
		|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
		|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
		|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
		|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.СуммаНДСДокумента, 
		|	ВложенныйЗапрос.Ответственный, 
		|	ВложенныйЗапрос.Проведен, 
		|	ВложенныйЗапрос.ПометкаУдаления, 
		|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную, 
		|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных
		|ИЗ
		|	(ВЫБРАТЬ
		|		Приложение2КНалоговойНакладной.Ссылка, 
		|		Приложение2КНалоговойНакладной.Номер, 
		|		Приложение2КНалоговойНакладной.Дата, 
		|		Приложение2КНалоговойНакладной.Контрагент, 
		|		Приложение2КНалоговойНакладной.ВалютаДокумента, 
		|		Приложение2КНалоговойНакладной.СуммаДокумента, 
		|		Приложение2КНалоговойНакладной.СуммаНДСДокумента, 
		|		Приложение2КНалоговойНакладной.Ответственный, 
		|		Приложение2КНалоговойНакладной.Проведен, 
		|		Приложение2КНалоговойНакладной.ПометкаУдаления, 
		|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную, 
		|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
		|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных как ВключенаВЕдиныйРеестрНалоговыхНакладных   
		|	ИЗ
		|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
		|	ГДЕ
		|		Приложение2КНалоговойНакладной.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
		
	КонецЕсли;
	//15.12.21 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВалютаДокумента",   "Валюта");	
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Приложение2КНалоговойНакладной.СтатусРегистрацииВЕРНН как ВключенаВЕдиныйРеестрНалоговыхНакладных",   "");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных",   "");
		
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных,",   "ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
		
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Приложение2КНалоговойНакладной.СуммаНДСДокумента,",   "");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.СуммаНДСДокумента,",   "");
	КонецЕсли;
	//15.12.21 - DOCKING 368
	
	//Если УчетПоОбособленнымПодразделениям Тогда
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	//Иначе
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	//КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента);		
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		ФилиалПрефикс  =  "";
		СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		Если (ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения))
			И (НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0") Тогда
			КодСпецРежима  =  "" + СпецРежим;
		Иначе
			КодСпецРежима  =  " ";//как и в реестре
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
			НомерФилиала  =  "";	
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		КонецЕсли;		
		
		НомерБезПрефикса = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		КодСпецРежима = "";
		Если (ЕстьРеквизитДокумента("СпецРежимНалогообложения", РеквизитыДокумента.Документ.Метаданные()))
			И (РеквизитыДокумента.Документ.СпецРежимНалогообложения > 0) Тогда
			КодСпецРежима = "/" + РеквизитыДокумента.Документ.СпецРежимНалогообложения + "/";
		КонецЕсли;

		Если Объект.Конфигурация = "SB" Тогда
			Если ЗначениеЗаполнено(КодСпецРежима) Тогда
				НомерБезПрефикса = НомерБезПрефикса + КодСпецРежима;
			КонецЕсли;
		Иначе
			
			Если (ЕстьРеквизитДокумента("НалоговаяНакладная", РеквизитыДокумента.Документ.Метаданные()))
				И (ЗначениеЗаполнено(РеквизитыДокумента.Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс)) Тогда
				НомерБезПрефикса = НомерБезПрефикса + ?(ЗначениеЗаполнено(КодСпецРежима),КодСпецРежима,"//") + РеквизитыДокумента.Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс;
			Иначе
				Если ЗначениеЗаполнено(КодСпецРежима) Тогда
					НомерБезПрефикса = НомерБезПрефикса + КодСпецРежима;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	

		СтрокаТаблицыДокументов.Номер = НомерБезПрефикса;
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаНалоговых.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов1.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовАкт(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	//Если НЕ Объект.Конфигурация = "УТ" Тогда
	Если НЕ Объект.Конфигурация = "УТ" И НЕ Объект.Конфигурация = "КУП" И НЕ Объект.Конфигурация = "ERP" И НЕ Объект.Конфигурация = "SB" Тогда
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		//|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.ПометкаУдаления,    
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента, 
		|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
		|		АктОбОказанииПроизводственныхУслуг.Номер КАК Номер, 
		|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
		|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
		|		АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК ВалютаДокумента, 
		//|		АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК СуммаДокумента, 
		|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен, 
		|		АктОбОказанииПроизводственныхУслуг.ПометкаУдаления КАК ПометкаУдаления, 
		|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		|	ГДЕ
		|		АктОбОказанииПроизводственныхУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2, 
		|	РеализацияТоваровУслуг.Ссылка, 
		|	РеализацияТоваровУслуг.Номер, 
		|	РеализацияТоваровУслуг.Дата, 
		|	РеализацияТоваровУслуг.Контрагент, 
		|	РеализацияТоваровУслуг.ВалютаДокумента, 
		//|	РеализацияТоваровУслуг.СуммаДокумента, 
		|	РеализацияТоваровУслуг.ПометкаУдаления, 
		|	РеализацияТоваровУслуг.Проведен,    
		|	РеализацияТоваровУслуг.Ответственный
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)";
		// 14.02.2022 + DOCKING 368	
	ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда	
		
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.ПометкаУдаления,    
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента, 
		|		АктВыполненныхРабот.Ссылка КАК Ссылка, 
		|		АктВыполненныхРабот.Номер КАК Номер, 
		|		АктВыполненныхРабот.Дата КАК Дата, 
		|		АктВыполненныхРабот.Контрагент КАК Контрагент, 
		|		АктВыполненныхРабот.Валюта КАК ВалютаДокумента, 
		|		АктВыполненныхРабот.СуммаДокумента КАК СуммаДокумента, 
		|		АктВыполненныхРабот.Проведен КАК Проведен, 
		|		АктВыполненныхРабот.ПометкаУдаления КАК ПометкаУдаления, 
		|		АктВыполненныхРабот.Менеджер КАК Ответственный
		|	ИЗ
		|		Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
		|	ГДЕ
		|		АктВыполненныхРабот.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
		|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	2, 
		//|	РеализацияТоваровУслуг.Ссылка, 
		//|	РеализацияТоваровУслуг.Номер, 
		//|	РеализацияТоваровУслуг.Дата, 
		//|	РеализацияТоваровУслуг.Контрагент, 
		//|	РеализацияТоваровУслуг.ВалютаДокумента, 
		////|	РеализацияТоваровУслуг.СуммаДокумента, 
		//|	РеализацияТоваровУслуг.ПометкаУдаления, 
		//|	РеализацияТоваровУслуг.Проведен,    
		//|	РеализацияТоваровУслуг.Ответственный
		//|ИЗ
		//|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|ГДЕ
		//	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
		| ";
		// 14.02.2022 - DOCKING 368	
	Иначе
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		//|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.ПометкаУдаления,    
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		//|		1 КАК ВидДокумента, 
		//|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка, 
		//|		АктОбОказанииПроизводственныхУслуг.Номер КАК Номер, 
		//|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата, 
		//|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент, 
		//|		АктОбОказанииПроизводственныхУслуг.ВалютаДокумента КАК ВалютаДокумента, 
		////|		АктОбОказанииПроизводственныхУслуг.СуммаДокумента КАК СуммаДокумента, 
		//|		АктОбОказанииПроизводственныхУслуг.Проведен КАК Проведен, 
		//|		АктОбОказанииПроизводственныхУслуг.ПометкаУдаления КАК ПометкаУдаления, 
		//|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный
		//|	ИЗ
		//|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		//|	ГДЕ
		//|		АктОбОказанииПроизводственныхУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	2, 
		|	РеализацияТоваровУслуг.Ссылка, 
		|	РеализацияТоваровУслуг.Номер, 
		|	РеализацияТоваровУслуг.Дата, 
		|	РеализацияТоваровУслуг.Контрагент, 
		|	РеализацияТоваровУслуг.ВалютаДокумента, 
		//|	РеализацияТоваровУслуг.СуммаДокумента, 
		|	РеализацияТоваровУслуг.ПометкаУдаления, 
		|	РеализацияТоваровУслуг.Проведен,    
		|	РеализацияТоваровУслуг.Ответственный
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	КонецЕсли; 
	
	// 28.11.2022 + DOCKING 459
	Если Объект.Конфигурация = "SB" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Менеджер",   "Ответственный");	
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "АктВыполненныхРабот.Валюта",   "АктВыполненныхРабот.ВалютаДокумента");
	КонецЕсли;
	// 28.11.2022 - DOCKING 459
	
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовСчет(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка, 
	|		СчетНаОплатуПокупателю.Номер КАК Номер, 
	|		СчетНаОплатуПокупателю.Дата КАК Дата, 
	|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент, 
	|		СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента, 
	|		СчетНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента, 
	|		СчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления, 
	|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|	ГДЕ
	|		СчетНаОплатуПокупателю.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	//-------------------------------------------------
	//15.12.21 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПокупателю.ВалютаДокумента КАК ВалютаДокумента,",   "");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ВалютаДокумента,",   "");
		
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.Ответственный",   "");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПокупателю.Ответственный КАК Ответственный",   "");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ПометкаУдаления,",   "ВложенныйЗапрос.ПометкаУдаления");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления,",   "СчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления");
	КонецЕсли;
	
	Если Объект.Конфигурация = "SB" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПокупателю",   "СчетНаОплату");
	КонецЕсли;
	
		
	//15.12.21 - DOCKING 368
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовСчетКлиентам(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		СчетНаОплатуКлиенту.Ссылка КАК Ссылка, 
	|		СчетНаОплатуКлиенту.Номер КАК Номер, 
	|		СчетНаОплатуКлиенту.Дата КАК Дата, 
	|		СчетНаОплатуКлиенту.Контрагент КАК Контрагент, 
	|		СчетНаОплатуКлиенту.Валюта КАК ВалютаДокумента, 
	|		СчетНаОплатуКлиенту.СуммаДокумента КАК СуммаДокумента, 
	|		СчетНаОплатуКлиенту.ПометкаУдаления КАК ПометкаУдаления, 
	|		СчетНаОплатуКлиенту.Менеджер КАК Ответственный
	|	ИЗ
	|		Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|	ГДЕ
	|		СчетНаОплатуКлиенту.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	//-------------------------------------------------
	//15.12.21 + DOCKING 368
	//Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуКлиенту.ВалютаДокумента КАК ВалютаДокумента,",   "");
	//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ВалютаДокумента,",   "");
	//	
	//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.Ответственный",   "");
	//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуКлиенту.Ответственный КАК Ответственный",   "");
	//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ПометкаУдаления,",   "ВложенныйЗапрос.ПометкаУдаления");
	//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуКлиенту.ПометкаУдаления КАК ПометкаУдаления,",   "СчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления");
	//КонецЕсли;
	//
	//Если Объект.Конфигурация = "SB" Тогда
	//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "СчетНаОплатуПокупателю",   "СчетНаОплату");
	//КонецЕсли;
	
		
	//15.12.21 - DOCKING 368
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВозвратТоваровОтПокупателя(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка, 
	|		ВозвратТоваровОтПокупателя.Номер КАК Номер, 
	|		ВозвратТоваровОтПокупателя.Дата КАК Дата, 
	|		ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент, 
	|		ВозвратТоваровОтПокупателя.ВалютаДокумента КАК ВалютаДокумента, 
	|		ВозвратТоваровОтПокупателя.СуммаДокумента КАК СуммаДокумента, 
	|		ВозвратТоваровОтПокупателя.ПометкаУдаления КАК ПометкаУдаления, 
	|		ВозвратТоваровОтПокупателя.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|	ГДЕ
	|		ВозвратТоваровОтПокупателя.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	//-------------------------------------------------
	//15.12.21 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВозвратТоваровОтПокупателя",   "ВозвратТоваровОтКлиента");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Ответственный",   "Менеджер");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВалютаДокумента",   "Валюта");	
	КонецЕсли;
	//15.12.21 - DOCKING 368
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВозвратТоваровПоставщику(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента,   
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ВозвратТоваровПоставщику.Ссылка КАК Ссылка, 
	|		ВозвратТоваровПоставщику.Номер КАК Номер, 
	|		ВозвратТоваровПоставщику.Дата КАК Дата, 
	|		ВозвратТоваровПоставщику.Контрагент КАК Контрагент, 
	|		ВозвратТоваровПоставщику.ВалютаДокумента КАК ВалютаДокумента, 
	|		ВозвратТоваровПоставщику.СуммаДокумента КАК СуммаДокумента, 
	|		ВозвратТоваровПоставщику.ПометкаУдаления КАК ПометкаУдаления, 
	|		ВозвратТоваровПоставщику.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	//-------------------------------------------------
	//15.12.21 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Ответственный",   "Менеджер");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВалютаДокумента",   "Валюта");	
	КонецЕсли;
	//15.12.21 - DOCKING 368
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВидНакл(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления,   
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка, 
	|		РеализацияТоваровУслуг.Номер КАК Номер, 
	|		РеализацияТоваровУслуг.Дата КАК Дата, 
	|		РеализацияТоваровУслуг.Контрагент КАК Контрагент, 
	|		РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента, 
	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		РеализацияТоваровУслуг.Проведен КАК Проведен, 
	|		РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления, 
	|		РеализацияТоваровУслуг.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	//-------------------------------------------------
	//15.12.21 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Ответственный",   "Менеджер");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВалютаДокумента",   "Валюта");	
	КонецЕсли;
	//15.12.21 - DOCKING 368
	
	Если Объект.Конфигурация = "SB" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "РеализацияТоваровУслуг",   "РасходнаяНакладная");
	КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовАктСверки(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.ВалютаДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления,  
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		АктСверкиВзаиморасчетов.Ссылка КАК Ссылка, 
	|		АктСверкиВзаиморасчетов.Номер КАК Номер, 
	|		АктСверкиВзаиморасчетов.Дата КАК Дата, 
	|		АктСверкиВзаиморасчетов.Контрагент КАК Контрагент, 
	|		АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента, 
	|		АктСверкиВзаиморасчетов.Проведен КАК Проведен, 
	|		АктСверкиВзаиморасчетов.ПометкаУдаления КАК ПометкаУдаления, 
	|		АктСверкиВзаиморасчетов.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|	ГДЕ
	|		АктСверкиВзаиморасчетов.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	//12.01.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктСверкиВзаиморасчетов.ВалютаДокумента КАК ВалютаДокумента,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос.ВалютаДокумента,", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктСверкиВзаиморасчетов", "СверкаВзаиморасчетов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Ответственный", "Менеджер");
	КонецЕсли;	
	//12.01.2022 - DOCKING 368
	//--------------------------------------
	//22.11.2022 + DOCKING 459	
	Если Объект.Конфигурация = "SB" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктСверкиВзаиморасчетов.Ответственный КАК Ответственный", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос.Ответственный", "");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктСверкиВзаиморасчетов.ПометкаУдаления КАК ПометкаУдаления,", "АктСверкиВзаиморасчетов.ПометкаУдаления КАК ПометкаУдаления");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос.ПометкаУдаления,", "ВложенныйЗапрос.ПометкаУдаления");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктСверкиВзаиморасчетов", "СверкаВзаиморасчетов");	
	КонецЕсли;
	//22.11.2022 - DOCKING 459		
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 		
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовЗапит(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Проведен, 
	|	ВложенныйЗапрос.ПометкаУдаления, 
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
	|		РегистрацияВходящегоНалоговогоДокумента.Номер КАК Номер, 
	|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
	|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаДокумента КАК СуммаДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления КАК ПометкаУдаления, 
	|		РегистрацияВходящегоНалоговогоДокумента.Проведен КАК Проведен, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
	|	ГДЕ
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда 
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		ФилиалПрефикс  =  "";
		Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
			НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		Иначе
			НомерФилиала  =  "";	
		КонецЕсли;
		СтрокаТаблицыДокументов.Номер  =  ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхНН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Конфигурация = "БУ" или Объект.Конфигурация = "УТП" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка КАК Ссылка, 
	|		РегистрацияВходящегоНалоговогоДокумента.Номер КАК Номер, 
	|		РегистрацияВходящегоНалоговогоДокумента.Дата КАК Дата, 
	|		РегистрацияВходящегоНалоговогоДокумента.Контрагент КАК Контрагент, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаДокумента КАК СуммаДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		РегистрацияВходящегоНалоговогоДокумента.Ответственный КАК Ответственный, 
	|		РегистрацияВходящегоНалоговогоДокумента.Проведен как Проведен, 
	|		РегистрацияВходящегоНалоговогоДокумента.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
	|	ГДЕ
	|		РегистрацияВходящегоНалоговогоДокумента.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
ИначеЕсли Объект.Конфигурация = "УПП" или Объект.Конфигурация = "УТ" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСДокумента, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ЗаписьКнигиПриобретения.Ссылка КАК Ссылка, 
	|		ЗаписьКнигиПриобретения.Номер КАК Номер, 
	|		ЗаписьКнигиПриобретения.Дата КАК Дата, 
	|		ЗаписьКнигиПриобретения.Контрагент КАК Контрагент, 
	|		ЗаписьКнигиПриобретения.СуммаДокумента КАК СуммаДокумента, 
	|		ЗаписьКнигиПриобретения.СуммаНДСДокумента КАК СуммаНДСДокумента, 
	|		ЗаписьКнигиПриобретения.Ответственный КАК Ответственный, 
	|		ЗаписьКнигиПриобретения.Проведен как Проведен, 
	|		ЗаписьКнигиПриобретения.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ЗаписьКнигиПриобретения КАК ЗаписьКнигиПриобретения
	|	ГДЕ
	|		ЗаписьКнигиПриобретения.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
КонецЕсли;
	
	//Если УчетПоОбособленнымПодразделениям Тогда
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	//Иначе
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	//КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			

		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхПТУ(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" Тогда
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
	|		ПоступлениеТоваровУслуг.Номер КАК Номер, 
	|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
	|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		ПоступлениеТоваровУслуг.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
	|		ПоступлениеТоваровУслуг.Проведен как Проведен, 
	|		ПоступлениеТоваровУслуг.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда	
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	//|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
	|		ПоступлениеТоваровУслуг.Номер КАК Номер, 
	|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
	|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	//|		ПоступлениеТоваровУслуг.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
	|		ПоступлениеТоваровУслуг.Проведен как Проведен, 
	|		ПоступлениеТоваровУслуг.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
КонецЕсли;
	//Если УчетПоОбособленнымПодразделениям Тогда
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	//Иначе
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	//КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			
		
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовПТУ(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	//|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	//|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	//|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	//|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	//|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		ПоступлениеТоваровУслуг.Ссылка КАК Ссылка, 
	|		ПоступлениеТоваровУслуг.Номер КАК Номер, 
	|		ПоступлениеТоваровУслуг.Дата КАК Дата, 
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент, 
	|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента, 
	|		ПоступлениеТоваровУслуг.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		ПоступлениеТоваровУслуг.Ответственный КАК Ответственный, 
	|		ПоступлениеТоваровУслуг.Проведен как Проведен, 
	|		ПоступлениеТоваровУслуг.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	

	//Если УчетПоОбособленнымПодразделениям Тогда
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	//Иначе
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	//КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументовВхСчет(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе 
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
	|	ВложенныйЗапрос.Ссылка КАК Документ, 
	|	ВложенныйЗапрос.Номер, 
	|	//#ЕстьОбособленноеПодразделение	ВЫБОР
	|	//#ЕстьОбособленноеПодразделение		КОГДА ВложенныйЗапрос.Ссылка ССЫЛКА Документ.Приложение2КНалоговойНакладной
	|	//#ЕстьОбособленноеПодразделение			ТОГДА ВложенныйЗапрос.Ссылка.НалоговаяНакладная.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение		ИНАЧЕ ВложенныйЗапрос.Ссылка.ОбособленноеПодразделение.Префикс
	|	//#ЕстьОбособленноеПодразделение	КОНЕЦ КАК ПрефиксОП, 
	|	//#НетОбособленноеПодразделение	"""" КАК ПрефиксОП, 
	|	ВложенныйЗапрос.Дата КАК Дата, 
	|	ВложенныйЗапрос.Контрагент, 
	|	ВложенныйЗапрос.СуммаДокумента, 
	//|	ВложенныйЗапрос.СуммаНДСПропорциональноВсего, 
	|	ВложенныйЗапрос.Ответственный, 
	|	ВложенныйЗапрос.Проведен,  
	|	ВложенныйЗапрос.ПометкаУдаления      
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК ВидДокумента, 
	|		СчетНаОплатуПоставщика.Ссылка КАК Ссылка, 
	|		СчетНаОплатуПоставщика.Номер КАК Номер, 
	|		СчетНаОплатуПоставщика.Дата КАК Дата, 
	|		СчетНаОплатуПоставщика.Контрагент КАК Контрагент, 
	|		СчетНаОплатуПоставщика.СуммаДокумента КАК СуммаДокумента, 
	//|		СчетНаОплатуПоставщика.СуммаНДСПропорциональноВсего КАК СуммаНДСПропорциональноВсего, 
	|		СчетНаОплатуПоставщика.Ответственный КАК Ответственный, 
	|		СчетНаОплатуПоставщика.Проведен как Проведен, 
	|		СчетНаОплатуПоставщика.ПометкаУдаления как ПометкаУдаления   
	|	ИЗ
	|		Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|	ГДЕ
	|		СчетНаОплатуПоставщика.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	
	//Если УчетПоОбособленнымПодразделениям Тогда
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#ЕстьОбособленноеПодразделение",  "");	
	//Иначе
	//	ТекстЗапроса  =   СтрЗаменить(ТекстЗапроса,  "//#НетОбособленноеПодразделение",  "");
	//КонецЕсли;
	
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл 		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		
		// в номере исходящей налоговой накладной будем показывать оба номера: в начале реальный (тот,  что видят получатели), 
		// а второй - номер документа,  которые не несет существенного смысла
		//ФилиалПрефикс  =  "";
		//СпецРежим  =  СокрЛП(РеквизитыДокумента.СпецРежимНалогообложения);
		//Если ЗначениеЗаполнено(РеквизитыДокумента.СпецРежимНалогообложения)
		//	И НЕ РеквизитыДокумента.СпецРежимНалогообложения  =  "0" Тогда
		//	КодСпецРежима  =  "" + СпецРежим;
		//Иначе
		//	КодСпецРежима  =  " ";//как и в реестре
		//КонецЕсли;
		
		//Если ЗначениеЗаполнено(РеквизитыДокумента.ПрефиксОП) Тогда
		//	НомерФилиала  =  Прав("0000" + СокрЛП(РеквизитыДокумента.ПрефиксОП), 4);
		//Иначе
		//	НомерФилиала  =  "";	
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
		//	ФилиалПрефикс  =  "/" + КодСпецРежима + НомерФилиала;
		//КонецЕсли;			
		
		СтрокаТаблицыДокументов.Номер  = ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		
		//DOCKING 486 + 14.02.2023		
		Если Объект.Конфигурация = "ERP" Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;	
		ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;	
		КонецЕсли;
		//DOCKING 486 - 14.02.2023
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 
	
КонецПроцедуры
//======================ТТН=========================//
Процедура ЗаполнитьРеквизитыДокументовТТН(СтрокиТаблицыДокументов  =  Неопределено,  ПроверитьСостояниеРегистрации  =  Истина,  УстановитьПометки  =  Истина)
	
	Если СтрокиТаблицыДокументов  =  Неопределено Тогда
		СтрокиТаблицыДокументов  =  ТаблицаДокументов;
		МассивДокументов  =  ТаблицаДокументов.Выгрузить(,"Документ");
	Иначе
		МассивДокументов  =  Новый Массив;
		Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
			МассивДокументов.Добавить(СтрокаТаблицыДокументов.Документ);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТаблицыДокументов.Количество()  =  0 Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Объект.Конфигурация = "SB" Тогда
	
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.ПометкаУдаления,    
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента,  
		|	РеализацияТоваровУслуг.Ссылка, 
		|	РеализацияТоваровУслуг.Номер, 
		|	РеализацияТоваровУслуг.Дата, 
		|	РеализацияТоваровУслуг.Контрагент, 
		|	РеализацияТоваровУслуг.ВалютаДокумента, 
		|	РеализацияТоваровУслуг.СуммаДокумента, 
		|	РеализацияТоваровУслуг.ПометкаУдаления, 
		|	РеализацияТоваровУслуг.Проведен,    
		|	РеализацияТоваровУслуг.Ответственный
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	Иначе
		ТекстЗапроса  =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ВидДокумента КАК ВидДокумента, 
		|	ВложенныйЗапрос.Ссылка КАК Документ, 
		|	ВложенныйЗапрос.Номер, 
		|	ВложенныйЗапрос.Дата КАК Дата, 
		|	ВложенныйЗапрос.Контрагент, 
		|	ВложенныйЗапрос.ВалютаДокумента, 
		|	ВложенныйЗапрос.СуммаДокумента, 
		|	ВложенныйЗапрос.ПометкаУдаления,    
		|	ВложенныйЗапрос.Проведен,  
		|	ВложенныйЗапрос.Ответственный
		|ИЗ
		|	(ВЫБРАТЬ
		|		1 КАК ВидДокумента,  
		|	РасходнаяНакладная.Ссылка, 
		|	РасходнаяНакладная.Номер, 
		|	РасходнаяНакладная.Дата, 
		|	РасходнаяНакладная.Контрагент, 
		|	РасходнаяНакладная.ВалютаДокумента, 
		|	РасходнаяНакладная.СуммаДокумента, 
		|	РасходнаяНакладная.ПометкаУдаления, 
		|	РасходнаяНакладная.Проведен,    
		|	РасходнаяНакладная.Ответственный
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	РасходнаяНакладная.Ссылка В(&МассивДокументов)) КАК ВложенныйЗапрос";
	КонецЕсли;
	
	
	//-------------------------------------------------
	//15.12.21 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Ответственный",   "Менеджер");
		ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВалютаДокумента",   "Валюта");	
	КонецЕсли;
	//15.12.21 - DOCKING 368
	Запрос  =  Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МассивДокументов",   МассивДокументов);
	РеквизитыДокументов  =  Запрос.Выполнить().Выгрузить();
	РеквизитыДокументов.Индексы.Добавить("Документ");
	
	МассивСтрокКУдалению  =  Новый Массив();
	Если ПроверитьСостояниеРегистрации Тогда
		МассивСтрокКПроверке  =  Новый Массив();
	КонецЕсли;
	
	Для каждого СтрокаТаблицыДокументов Из СтрокиТаблицыДокументов Цикл
		
		РеквизитыДокумента  =  РеквизитыДокументов.Найти(СтрокаТаблицыДокументов.Документ,  "Документ");
		Если РеквизитыДокумента  =  Неопределено Тогда
			// Документ удален,  либо RLS закрыл к нему доступ
			// 13.12.21 + DOCKING 357 (отсекаем запрещенные документы НО этого же типа
			//МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
			//Продолжить;
			Если РеквизитыДокументов.Количество() = 0 Тогда // когда документов вообще нет изначально
				Прервать;
			КонецЕсли;
			Если ТипЗнч(РеквизитыДокументов.Получить(0).Документ) = ТипЗнч(СтрокаТаблицыДокументов.Документ) Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицыДокументов);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
			// 13.12.21 - DOCKING 357
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокументов,  РеквизитыДокумента); 
		СтрокаТаблицыДокументов.Номер  =   ПолучитьНомерБезНулей(РеквизитыДокумента.Документ);
		Если ПроверитьСостояниеРегистрации Тогда
			МассивСтрокКПроверке.Добавить(СтрокаТаблицыДокументов);
		КонецЕсли;
		// 15.12.2021 + DOCKING 368	
		//СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИННПлательщикаНДС;
		Иначе
			СтрокаТаблицыДокументов.ИНН = СтрокаТаблицыДокументов.Документ.Контрагент.ИНН;
		КонецЕсли;	
		// 15.12.2021 - DOCKING 368
		
	КонецЦикла;
	
	Для каждого СтрокаККудалению Из МассивСтрокКУдалению Цикл
		ТаблицаДокументов.Удалить(СтрокаККудалению);
	КонецЦикла;
	
	Элементы.ТаблицаДокументов.Обновить(); 

КонецПроцедуры
//======================ТТН=========================//

Функция ПолучитьНомерБезНулей( Документ )
	// 07.02.2022 + DOCKING 385
	//НомерБезПрефикса  =  СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер,,));
	Если Объект.Конфигурация = "SB" 
		ИЛИ ИмяКлиентскойБазы = "ERP25"
		ИЛИ ИмяКлиентскойБазы = "КУП25" 
		
		Тогда // DOCKING 459 +- 22.11.2022
		Если ЭтаФорма.ИП Тогда 
			НомерБезПрефикса  =  СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер,Истина,Истина));
		Иначе
			НомерБезПрефикса  =  СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Документ.Номер,,));
		КонецЕсли;	
	Иначе
		Если ЭтаФорма.ИП Тогда 
			НомерБезПрефикса  =  СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер,Истина,Истина));
		Иначе
			НомерБезПрефикса  =  СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер,,));
		КонецЕсли;	
	КонецЕсли;

	// 07.02.2022 + DOCKING 385	
	Если СтрДлина(НомерБезПрефикса) > 15 Тогда
		НомерБезПрефикса = Прав(НомерБезПрефикса, 15);
		Пока Лев(НомерБезПрефикса, 1) = "0" Цикл
			НомерБезПрефикса = Сред(НомерБезПрефикса, 2);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат НомерБезПрефикса;
КонецФункции

&НаКлиенте
Функция ПолучитьРасшифровкуСтатуса(Статус)  
	
	Перем Стр2;  
	
	Если Статус = "0" Тогда Стр2 = НСтр("ru = 'Готовится';uk = 'Готується'");
	ИначеЕсли Статус = "1" Тогда Стр2 = НСтр("ru = 'Подписан бухгалтером';uk = 'Підписано бухгалтером'");
	ИначеЕсли Статус = "2" Тогда Стр2 = НСтр("ru = 'Подписан директором';uk = 'Підписано директором'");
	ИначеЕсли Статус = "3" Тогда Стр2 = НСтр("ru = 'Подписан печатью';uk = 'Підписано печаткою установи'");
	ИначеЕсли Статус = "4" Тогда Стр2 = НСтр("ru = 'Отправлен';uk = 'Відправлено'");
	ИначеЕсли Статус = "6" Тогда Стр2 = НСтр("ru = 'Получено сообщение';uk = 'Отримано повідомлення'"); 
	ИначеЕсли Статус = "9" Тогда Стр2 = НСтр("ru = 'Принято';uk = 'Прийнято'"); 
	ИначеЕсли Статус = "10" Тогда Стр2 = НСтр("ru = 'Не принято';uk = 'Не прийнято'");
	ИначеЕсли Статус = "11" Тогда Стр2 = НСтр("ru = 'Ошибка отправки';uk = 'Помилка відправки'"); 
	ИначеЕсли Статус = "12" Тогда Стр2 = НСтр("ru = 'На подпись';uk = 'На підпис'");
	ИначеЕсли Статус = "13" Тогда Стр2 = НСтр("ru = 'Архив';uk = 'Архів'");
	ИначеЕсли Статус = "14" Тогда Стр2 = НСтр("ru = 'Получено';uk = 'Отримано'"); 
	ИначеЕсли Статус = "15" Тогда Стр2 = НСтр("ru = 'Импортирован';uk = 'Імпортований'");
	ИначеЕсли Статус = "16" Тогда Стр2 = НСтр("ru = 'Отклонен контрагентом';uk = 'Відхилено контрагентом'");
	ИначеЕсли Статус = "17" Тогда Стр2 = НСтр("ru = 'Подписан сотрудником';uk = 'Підписано співробітником'"); 
	ИначеЕсли Статус = "19" Тогда Стр2 = НСтр("ru = 'Доставлено контрагенту';uk = 'Доставлено контрагенту'");	
	ИначеЕсли Статус = "20" Тогда Стр2 = НСтр("ru = 'Утвержден контрагеном';uk = 'Затверджено контрагентом'");
	ИначеЕсли Статус = "32" Тогда Стр2 = НСтр("ru = 'Доставка контрагенту невозможна';uk = 'Доставка контрагенту неможлива'");	
	КонецЕсли;  

	Возврат Стр2; 	
	
КонецФункции

&НаКлиенте
Функция ПроверитьСтатусПоИД(Статус2)
	
	Перем Стр3;
	
	Если Статус2 = "1" Тогда Стр3 = НСтр("ru = 'Черновик';uk = 'Чернетка'");
	ИначеЕсли  Статус2 = "2" Тогда Стр3 = НСтр("ru = 'Правильный';uk = 'Правильний'");	
	ИначеЕсли  Статус2 = "3" Тогда Стр3 = НСтр("ru = 'Ошибочный';uk = 'Помилковий'");
	ИначеЕсли  Статус2 = "4" Тогда Стр3 = НСтр("ru = 'Импортирован';uk = 'Імпортований'");
	ИначеЕсли  Статус2 = "5" Тогда Стр3 = НСтр("ru = 'Копия';uk = 'Копія'");
	ИначеЕсли  Статус2 = "6" Тогда Стр3 = НСтр("ru = 'Отправленный';uk = 'Відправлений'");
	ИначеЕсли  Статус2 = "7" Тогда Стр3 = НСтр("ru = 'Контроль отключен';uk = 'Контроль відключено'");
	КонецЕсли;
	Возврат Стр3;	
	
КонецФункции

&НаКлиенте
Функция ПолучитьРасшифровкуСтатусаРегистрацииЕРПН(Статус)  
	
	Перем Стр1;  
	
	Если Статус = "4" Тогда Стр1 = НСтр("ru = 'Отправлено в ГФС';uk = 'Відправлено в ДПС'");
	ИначеЕсли Статус = "6" Тогда Стр1 = НСтр("ru = 'Доставлено к получателю';uk = 'Доставлено до отримувача'");
	ИначеЕсли Статус = "9" Тогда Стр1 = НСтр("ru = 'Принято в ГФС';uk = 'Прийнято в ДПС'");
	ИначеЕсли Статус = "10" Тогда Стр1 = НСтр("ru = 'Отклонено в ГФС';uk = 'Відхилено в ДПС'");
	ИначеЕсли Статус = "110" Тогда Стр1 = НСтр("ru = 'СМКОР Регистрация остановлена';uk = 'СМКОР Реєстрація зупинена'");
	ИначеЕсли Статус = "111" Тогда Стр1 = НСтр("ru = 'Решение СМКОР про регистрацию';uk = 'Рішення СМКОР про реєстрацію'"); 
	ИначеЕсли Статус = "112" Тогда Стр1 = НСтр("ru = 'Решение СМКОР про отказ';uk = 'Рішення СМКОР про відмову'"); 
	ИначеЕсли Статус = "113" Тогда Стр1 = НСтр("ru = 'СМКОР Решение про рассмотрения жалобы';uk = 'СМКОР Рішення про розгляд скарги'");
	ИначеЕсли Статус = "ELSE" Тогда Стр1 = НСтр("ru = 'Другой статус';uk = 'Інший статус'"); 
	КонецЕсли;  

	Возврат Стр1; 	
	
КонецФункции


Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции

 &НаКлиенте
Процедура КоманднаяПанельТаблицаДокументовМодосЗапуск(Команда)
	
	ПрефиксТекст = "Внимание";
	ЗапускМедка(ПрефиксТекст);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДействияФормыСформировать(Команда)
	Сформировать()
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДействияФормыСформироватьНД(Команда)
	СформироватьНД()
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДействияФормыСформироватьСвойШаблон(Команда)
	СформироватьСвойШаблон()
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДействияФормыСформироватьНДСвойШаблон(Команда)
	СформироватьНДСвойШаблон()
КонецПроцедуры

&НаКлиенте
Процедура Сформировать() 
	
	// 06.12.2021 + DOCKING 361
	//ИмяТК = ПолучитьИмяТекущейВкладки();
	// 06.12.2021 - DOCKING 361
	МассивУникальныхСообщений = Новый Структура;
	// 17.12.2021 + DOCKING 357
	Если ТипДокФорма = Неопределено ИЛИ ТипДокФорма = "" Тогда
		ТипДокФорма = ПолучитьПустоеЗначениеСпискаПервичкиНаСервере();
	КонецЕсли;	
	ТипДок = ПолучитьТекущийТипДок(ТипДокФорма, "ПД");
	
	КодПоЕДРПОУ = ОрганизацияПриИзмененииНаСервере();
	Если КодПоЕДРПОУ = Неопределено Тогда
		Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+ОрганизацияПервичка+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+ОрганизацияПервичка+"'"));
		КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
	КонецЕсли;      
	// 17.12.2021 - DOCKING 357
	
	ЮрикФизик = ЮрикФизик();
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- M.E.Doc не запущен.';uk = '- M.E.Doc не запущений.'") + символы.ПС + 
		НСтр("ru = '- Не выполнен вход в предприятие из списка.';uk = '- Не виконаний вхід у підприємство із списку.'"));
		Сообщение.Сообщить();		
		Возврат; 
	КонецПопытки;    
	
	Попытка 
		//ОргМедок = ДатьОргМЕДок();
		ОргМедок = App.GetCurrEdrpou();
		ОргМедокФиллиал = App.GetCurrDept();
		
		// 06.12.2021 + DOCKING 361
	    //Орг1С = КодЕДРПОУ(ОрганизацияПервичка);
		//Если ИмяТК = "ПД" Тогда
			Орг1С = КодЕДРПОУ(ОрганизацияПервичка);
		//ИначеЕсли ИмяТК = "НД" Тогда
		//	Орг1С = КодЕДРПОУ(НалогДокОрганизацияПервичка);
		//КонецЕсли;
		// 06.12.2021 - DOCKING 361
		
		Если ОргМедок = СокрЛП(КодПоЕДРПОУ) И ОргМедокФиллиал = СокрЛП(пФил) Тогда 
			orgId = App.SeekOrg(СокрЛП(КодПоЕДРПОУ), СокрЛП(пФил));
		Иначе
			orgId = 0;
		КонецЕсли;

		Если orgId = 0 Тогда 
			Элементы.Сформировать.Доступность = Ложь;
			Сообщение = Новый СообщениеПользователю();
		    Предупреждение(НСтр("ru = 'Предприятие открытое в М.E.Doc не соответствует выбранному в 1С : ';uk = 'Підприємство відкрите в М.E.Doc не відповідає вибраному в 1С: '") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ'") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Перевірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да, создайте в M.E.Doc новое предприятие.';uk = 'Якщо Так, створіть в M.E.Doc нове підприємство.'"));
			Сообщение.Сообщить();	
			//ИзменениеОсновныхПараметровБезОчисткиТаблицы();
			Возврат;
		ИначеЕсли ОргМедок <> Орг1С Тогда
			Предупреждение(НСтр("ru = 'Ошибка: Предприятие открытое в М.E.Doc не соответствует выбраном в 1С.';uk = 'Помилка: Підприємство відкрите в М.E.Doc не співпадає вибраному в 1С.'"));
		    Возврат;
		КонецЕсли;   
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Ошибка при определении наличия предприятия в М.E.Doc.';uk = 'Помилка при визначенні наявності підприємства в М.E.Doc.'"));
		Сообщение.Сообщить();	
	КонецПопытки; 
			
	//-----------------------------------------------------------------------------------------
	КоличествоДокументов  =  0;
	КоличествоДокументовСчет  =  0;
	КоличествоДокументовАкт  =  0; 
	КоличествоДокументовНН  =  0;
	КоличествоДокументовДод2  = 0;  
	КоличествоДокументовЗапит  =  0;
	КоличествоДокументовВидНакл  =  0;
	КоличествоДокументовВозвратТоваровОтПокупателя = 0;
	КоличествоДокументовВозвратТоваровПоставщику = 0;
	КоличествоДокументовАктСверки  =  0;
	КоличествоДокументовТТНспирт = 0;
	КоличествоДокументовТТНалкоголь = 0;
	КоличествоОтправленных =  0;
	КоличествоСуществующих =  0;
	КолВоФлажков = 0;
	//Элементы.ТаблицаДокументов.Колонки.Статус = "";
	СписокДляОткрытия = Новый Массив();
	//------------------------------------------------------------------------------------
	Для каждого Строки из ТаблицаДокументов Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		// 06.12.2021 + DOCKING 361
		
		Если Строки.Флажок Тогда
			//Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
		// 06.12.2021 - DOCKING 361
			КолВоФлажков = КолВоФлажков + 1;
			Документ = Строки.Документ;
			ИД  =  Строка(Документ.УникальныйИдентификатор());  
			//НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ,  "Документ");
			Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
				КоличествоСуществующих = КоличествоСуществующих + 1;
			КонецЕсли; 
		КонецЕсли;  
				
	КонецЦикла;		
	
	Если КоличествоСуществующих>0 тогда
		
		// DOCKING 617 + 27.11.2023
		Если Объект.Конфигурация = "SB" Тогда
			
			ПерезаписьДокументов = "Да";
			Сообщить(НСтр("ru = 'Документ существует в M.E.Doc:';uk = 'Документ існує в M.E.Doc:'"));
			Сообщить(НСтр("ru = 'Существующий документ будет перемещен в Корзину';uk = 'Існуючий документ буде переміщений до Корзини'"));	
		Иначе
		// DOCKING 617 - 27.11.2023			
			Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc:';uk = 'Документи існують в M.E.Doc:'") + Символы.ПС + 
			+ Число(КоличествоСуществующих) +  НСтр("ru = ' из ';uk = ' з '") +  КолВоФлажков +  НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
			НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Да Тогда 
				ПерезаписьДокументов = "Да";
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда 
				ПерезаписьДокументов = "Нет";
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;     	
	
	ОтменаПередачиНН = Ложь;
	pd =  App.GetPrimaryDocs();
	
	Для каждого Строки из ТаблицаДокументов Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		// 06.12.2021 + DOCKING 361
		Если Строки.Флажок Тогда
			
			Если ОтменаПередачиНН Тогда
				Прервать;
			КонецЕсли;
			//Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//НайденнаяСтрока  =  Элементы.ТаблицаДокументов.ДанныеСтроки(Строки);
			Документ = Строки.Документ;		
			НайденнаяСтрока = Строки;
			ИД  =  Строка(Документ.УникальныйИдентификатор());
			PDate = Дата(Год(НайденнаяСтрока.Дата), Месяц(НайденнаяСтрока.Дата), 01);
			Если ПерезаписьДокументов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;			
			ИначеЕсли ПерезаписьДокументов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;			
			
			//Если ИмяТК = "ПД" Тогда		
				//------------------------------------------------------------------------------------
				Если ТипДок = "Акт выполненных работ" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
					// 13.12.21 - DOCKING 357
					Тогда
					Бланк = ОпределитьШаблонДляАкт(Документ);
					ПередаемАкт(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;
				///--------------------------------------------------------------------------
				Если ТипДок = "Счет покупателям" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Счет покупателям")
					// 13.12.21 - DOCKING 357
					Тогда 			
					Бланк = ОпределитьШаблонДляСчета(Документ);
					ПередаемСчет(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли; 
				///--------------------------------------------------------------------------
				// DOCKING 531 + 24.07.2023
				Если ТипДок = "Счет клиентам" 
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Счет клиентам")
					Тогда 			
					Бланк = "1С82РАХ0";
					ПередаемСчетКлиентам(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли; 
				// DOCKING 531 - 24.07.2023
				///--------------------------------------------------------------------------
				
				Если ТипДок = "Возврат от покупателя" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Возврат от покупателя")
					// 13.12.21 - DOCKING 357
					Тогда 			
					
					Бланк  =  "101";
					
					ПередаемВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровОтПокупателя, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;  
				
				///--------------------------------------------------------------------------
				
				Если ТипДок = "Возврат поставщику" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Возврат поставщику")
					// 13.12.21 - DOCKING 357
					Тогда 			
					
					Бланк = ОпределитьШаблонДляВозвратПоставщику(Документ);
					
					ПередаемВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровПоставщику, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;  
				
				///--------------------------------------------------------------------------
				Если ТипДок = "Расходная накладная" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Расходная накладная")
					// 13.12.21 - DOCKING 357
					Тогда 						
					
					//Бланк  =  "2";
					//Если (ПолучитьРеквизит(Документ, "УдалитьУчитыватьНДС")) = Ложь Тогда 
					//	Бланк  =  "1С82ВНБ"
					//Иначе
					// 10.01.2022 + DOCKING 368
					Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
						Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
							Бланк  =  "1С82ВН0"
						Иначе
							Бланк  =  "1С82ВН"
						КонецЕсли;	
					Иначе	
					// 10.01.2022 - DOCKING 368
						Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
							Бланк  =  "1С82ВН0"
						Иначе
							Бланк  =  "1С82ВН"
						КонецЕсли;
					КонецЕсли;	
					//КонецЕсли;   
					
					ПередаемРасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, СписокДляОткрытия, НайденнаяСтрока); 
				КонецЕсли;      
				///--------------------------------------------------------------------------
				Если ТипДок="Акт Сверки" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт Сверки")
					// 13.12.21 - DOCKING 357
					Тогда Бланк = "1С82АЗ";
					ПередаемАЗ(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАктСверки, СписокДляОткрытия, НайденнаяСтрока); 
				КонецЕсли;    
				////---------------------------------------------------------------------------------
				//Если ТипДок = "Налоговая накладная" Тогда
				//	Если ЮрикФизик = "Юрик" Тогда
				//		Бланк  =  "J1201012";  		
				//	Иначе 
				//		Бланк  =  "F1201012";    
				//	КонецЕсли;
				//	
				//	ПередаемНН(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовНН, СписокДляОткрытия,НайденнаяСтрока, orgId);   
				//КонецЕсли;  	
				////------------------------------------------------------------------------------------
				//Если ТипДок = "Приложение 2" Тогда 			
				//	
				//	Если ЮрикФизик = "Юрик" Тогда
				//		Бланк  =  "J1201212";  		
				//	Иначе 
				//		Бланк  =  "F1201212";    
				//	КонецЕсли;
				//	
				//	ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, СписокДляОткрытия,НайденнаяСтрока, orgId);			
				//КонецЕсли;
				
				//-------------------------------ТТН по спирту и алкоголю----------------------------------------//
				
				Если ТипДок = "ТТН спирт этиловый" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "ТТН спирт этиловый")
					// 13.12.21 - DOCKING 357
					Тогда 			
					
					
					Если ЮрикФизик = "Юрик" Тогда
						Бланк  =  "J1204101";  		
					Иначе 
						Бланк  =  "F1204101";    
					КонецЕсли;
					
					ПередаемТТНспирт(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНспирт, СписокДляОткрытия,НайденнаяСтрока, orgId);			
				КонецЕсли;
				
				Если ТипДок = "ТТН алкогольные напитки" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "ТТН алкогольные напитки")
					// 13.12.21 - DOCKING 357	
					Тогда 			
					
					Если ЮрикФизик = "Юрик" Тогда
						Бланк  =  "J1204201";  		
					Иначе 
						Бланк  =  "F1204201";    
					КонецЕсли;
					
					ПередаемТТНалкоголь(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНалкоголь, СписокДляОткрытия, НайденнаяСтрока, orgId);			
				КонецЕсли;
				
				//----------------------------------Конец блока ТТН----------------------------------------------//
			//ИначеЕсли ИмяТК = "НД" Тогда
			//
			////---------------------------------------------------------------------------------
			//	Если ТипДок = "Налоговая Накладная"
			//	// 13.12.21 + DOCKING 357
			//	ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Налоговая Накладная")
			//	// 13.12.21 - DOCKING 357	
			//	Тогда
			//		Если ЮрикФизик = "Юрик" Тогда
			//			Бланк  =  "J1201012";  		
			//		Иначе 
			//			Бланк  =  "F1201012";    
			//		КонецЕсли;
			//		
			//		ПередаемНН(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовНН, СписокДляОткрытия,НайденнаяСтрока, orgId);   
			//	КонецЕсли;  	
			//	//------------------------------------------------------------------------------------
			//	Если ТипДок = "Приложение 2"
			//		// 13.12.21 + DOCKING 357
			//		ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Приложение 2")
			//		// 13.12.21 - DOCKING 357
			//	Тогда 			
			//		
			//		Если ЮрикФизик = "Юрик" Тогда
			//			Бланк  =  "J1201212";  		
			//		Иначе 
			//			Бланк  =  "F1201212";    
			//		КонецЕсли;
			//		
			//		ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, СписокДляОткрытия,НайденнаяСтрока, orgId);			
			//	КонецЕсли;
			//	//------------------------------------------------------------------------------------
			//	
			//КонецЕсли;	
			
		КонецЕсли;		
		// 06.12.2021 - DOCKING 361
	КонецЦикла;
	//--------------------------------------------------------------------------
	КоличествоДокументов =  КоличествоДокументовВидНакл + КоличествоДокументовАктСверки + КоличествоДокументовСчет + КоличествоДокументовАкт +
	КоличествоДокументовНН + КоличествоДокументовДод2 + КоличествоДокументовЗапит + КоличествоДокументовВозвратТоваровОтПокупателя + КоличествоДокументовВозвратТоваровПоставщику+
	КоличествоДокументовТТНспирт+КоличествоДокументовТТНалкоголь;  	
	
	// 02.02.2022 + DOCKING 369
	Сообщение = Новый СообщениеПользователю();
	
	Для Каждого Эл ИЗ МассивУникальныхСообщений Цикл 
		Сообщение.Текст = Эл.Значение;
		Сообщение.Сообщить();
	КонецЦикла;
	
	// 02.02.2022 - DOCKING 369
	
	Если КоличествоДокументов>0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передано в M.E.Doc:';uk = 'Передано в M.E.Doc:'") + Символы.ПС +   
		"  - " + КоличествоДокументов + " шт.");
		Сообщение.Сообщить();
		//--------------------------------------------------------------------------
		Если ОтпрНет  =  2 и App.GetDocStatus(ИД)<>3 Тогда 
			Sender  =  App.GetDocSender();
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
		 		Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);
				КонецЕсли;
			КонецЦикла;
			// 06.12.2021 - DOCKING 361
			Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (НСтр("ru = 'Отправляем в ГФС. Перейдите в M.E.Doc';uk = 'Відправляємо до ДФС. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(1);    
			// 08.12.2021 + DOCKING 361
			//ОтправленоЧисло = cnt;
			//Если ИмяТК = "ПД" Тогда
				ОтправленоЧисло = cnt;
			//ИначеЕсли ИмяТК = "НД" Тогда
			//	ОтправленоЧисло1 = cnt;
			//КонецЕсли;
			// 08.12.2021 - DOCKING 361
			// 06.12.2021 + DOCKING 361
			
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			//	Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//	ИД  =  Строка(Документ.УникальныйИдентификатор());
			//    ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			//КонецЦикла;
			
			Для Каждого Строки из ТаблицаДокументов цикл
		 		Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			// 06.12.2021 - DOCKING 361
		ИначеЕсли 
			ОтпрНет  =  2 и App.GetDocStatus(ИД) = 3 Тогда 
			Сообщить(Нстр("ru = 'Документ ошибочный, поэтому в ГФС не отправляется.';uk = 'Документ помилковий, тому в ДФС не відправляється.'"));
		КонецЕсли; 
		
		Если ОтпрНет  =  3  Тогда
			Sender  =  App.GetDocSender();
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			//	Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//	//Если Документ.УникальныйИднтификатор().ТаблицаДокументов..ДанныеСтроки(Строки).ИНН = "" Тогда
			//	//	Сообщить(Строка(Документ) + НСтр("ru = ' не будет отправлен контрагенту,  т.к. у него не указан ЕДРПОУ.';uk = ' не буде відправлено контрагенту,  оскліьки в нього не вказаний ЄДРПОУ.'"));
			//	//Иначе 
			//		ИД  =  Строка(Документ.УникальныйИдентификатор());
			//		Sender.Add(ИД);    
			//	//КонецЕсли;
			//КонецЦикла;
			
			Для Каждого Строки из ТаблицаДокументов Цикл
				Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);
				КонецЕсли;
			КонецЦикла;
			
			// 06.12.2021 - DOCKING 361
		    Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (Нстр("ru = 'Отправляем Контрагенту. Перейдите в M.E.Doc';uk = 'Відправляємо Контрагенту. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(0); 
			// 08.12.2021 + DOCKING 361
			//ОтправленоЧисло = cnt;
			//Если ИмяТК = "ПД" Тогда
				ОтправленоЧисло = cnt;
			//ИначеЕсли ИмяТК = "НД" Тогда
			//	ОтправленоЧисло1 = cnt;
			//КонецЕсли;
			// 08.12.2021 + DOCKING 361
			
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			//	Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//	ИД  =  Строка(Документ.УникальныйИдентификатор());
			//    ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			//КонецЦикла;
			Для Каждого Строки из ТаблицаДокументов цикл
		 		Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			// 06.12.2021 - DOCKING 361

		КонецЕсли;     
		//---------------------------------------------------------------  		
		Если ФР = Истина Тогда 
			Попытка
				Если ТипДок="Налоговая накладная" Тогда
					ТипДокФильтр="10100"
				ИначеЕсли ТипДок="Приложение 2" Тогда
					ТипДокФильтр="10101"
				ИначеЕсли ТипДок="Счет покупателям" Тогда
					ТипДокФильтр="10103" 
				ИначеЕсли ТипДок="Акт выполненных работ" Тогда
					ТипДокФильтр="10104" 
				ИначеЕсли ТипДок="Расходная накладная" Тогда
					ТипДокФильтр="10105" 
				ИначеЕсли ТипДок="Акт Сверки" Тогда
					ТипДокФильтр="10106"   
				ИначеЕсли ТипДок="Возврат от покупателя" Тогда
					ТипДокФильтр="10107"  
				ИначеЕсли ТипДок="Возврат поставщику" Тогда
					ТипДокФильтр="10108"  
				КонецЕсли;
				
				reestrFil  = App.RunModule("PrimaryDocsRstNew");  
				filterTbl  =  reestrFil.GetFilter(); 
				filterTbl.Fields.Item("DOCTYPE").Value  =  ТипДокФильтр;
				// 06.12.2021 + DOCKING 361
				//filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
				//filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   			
				
				// 06.12.2021 + DOCKING 361
				
				//Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
				//	filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
				//	filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				//КонецЕсли;   				
				//Если ИмяТК = "ПД" Тогда
					
					filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
					filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   				
					Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
						filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
						filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
					КонецЕсли;
					
				//ИначеЕсли ИмяТК = "НД" Тогда	
				//	
				//	filterTbl.Fields.Item("PERFROM").Value  =  Дата(НалогДокНачПериода);  
				//	filterTbl.Fields.Item("PERTO").Value  =  Дата(НалогДокКонПериода);   			
				//	Если ЗначениеЗаполнено(НалогДокКонтрагент.КодПоЕДРПОУ) Тогда
				//		filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  НалогДокКонтрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
				//		filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				//	КонецЕсли;
				//КонецЕсли;	
				// 06.12.2021 - DOCKING 361	
				
				filterTbl.Fields.Item("STAN").Value  =  2; //1 - входящие 2 - исходящие 
				//filterTbl.Fields.Item("ROUTE").Value  =  2;
				//filterTbl.Fields.Item("SUBROUTE").Value  =  -3; 
				reestrFil.ApplyFilter(); 
			Исключение
			КонецПопытки;
		КонецЕсли;  		 
		
		Если ОД = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытия Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;     
		//---------------------------------------------------------------
	Иначе 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
		Сообщение.Сообщить();

	КонецЕсли;
	
КонецПроцедуры	 

&НаКлиенте
Процедура СформироватьНД() 
	
	МассивУникальныхСообщений = Новый Структура;
	// 06.12.2021 + DOCKING 361
	//ИмяТК = ПолучитьИмяТекущейВкладки();
	Если ТипДокФорма1 = Неопределено Тогда
		ТипДокФорма1 = ПолучитьПустоеЗначениеСпискаНалоговыхНаСервере();
	КонецЕсли;	
	ТипДок = ПолучитьТекущийТипДок(ТипДокФорма1, "НД");
	// 06.12.2021 - DOCKING 361
	
	// 17.12.2021 + DOCKING 357
	КодПоЕДРПОУ = НалогДокОрганизацияПриИзмененииНаСервере();
	Если КодПоЕДРПОУ = Неопределено Тогда
		Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+ОрганизацияПервичка+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+ОрганизацияПервичка+"'"));
		КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
	КонецЕсли;      
	// 17.12.2021 - DOCKING 357
	
	
	
	ЮрикФизик = ЮрикФизик();
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- M.E.Doc не запущен.';uk = '- M.E.Doc не запущений.'") + символы.ПС + 
		НСтр("ru = '- Не выполнен вход в предприятие из списка.';uk = '- Не виконаний вхід у підприємство із списку.'"));
		Сообщение.Сообщить();		
		Возврат; 
	КонецПопытки;    
	
	Попытка 
		//ОргМедок = ДатьОргМЕДок();
		ОргМедок = App.GetCurrEdrpou();
		ОргМедокФиллиал = App.GetCurrDept();
		
		Орг1С = КодЕДРПОУ(НалогДокОрганизацияПервичка);
		
		Если ОргМедок = СокрЛП(КодПоЕДРПОУ) И ОргМедокФиллиал = СокрЛП(пФил) Тогда 
			orgId = App.SeekOrg(СокрЛП(КодПоЕДРПОУ), СокрЛП(пФил));
		Иначе
			orgId = 0;
		КонецЕсли;

		Если orgId = 0 Тогда 
			Элементы.Сформировать.Доступность = Ложь;
			Сообщение = Новый СообщениеПользователю();
		    Предупреждение(НСтр("ru = 'Предприятие открытое в М.E.Doc не соответствует выбранному в 1С : ';uk = 'Підприємство відкрите в М.E.Doc не відповідає вибраному в 1С: '") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ'") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Перевірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да, создайте в M.E.Doc новое предприятие.';uk = 'Якщо Так, створіть в M.E.Doc нове підприємство.'"));
			Сообщение.Сообщить();	
			//ИзменениеОсновныхПараметровБезОчисткиТаблицы();
			Возврат;
		ИначеЕсли ОргМедок <> Орг1С Тогда
			Предупреждение(НСтр("ru = 'Ошибка: Предприятие открытое в М.E.Doc не соответствует выбраном в 1С.';uk = 'Помилка: Підприємство відкрите в М.E.Doc не співпадає вибраному в 1С.'"));
		    Возврат;
		КонецЕсли;   
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Ошибка при определении наличия предприятия в М.E.Doc.';uk = 'Помилка при визначенні наявності підприємства в М.E.Doc.'"));
		Сообщение.Сообщить();	
	КонецПопытки; 
			
	//-----------------------------------------------------------------------------------------
	КоличествоДокументов  =  0;
	КоличествоДокументовСчет  =  0;
	КоличествоДокументовАкт  =  0; 
	КоличествоДокументовНН  =  0;
	КоличествоДокументовДод2  = 0;  
	КоличествоДокументовЗапит  =  0;
	КоличествоДокументовВидНакл  =  0;
	КоличествоДокументовВозвратТоваровОтПокупателя = 0;
	КоличествоДокументовВозвратТоваровПоставщику = 0;
	КоличествоДокументовАктСверки  =  0;
	КоличествоДокументовТТНспирт = 0;
	КоличествоДокументовТТНалкоголь = 0;
	КоличествоОтправленных =  0;
	КоличествоСуществующих =  0;
	КолВоФлажков = 0;
	//Элементы.ТаблицаДокументов.Колонки.Статус = "";
	СписокДляОткрытия = Новый Массив();
	//------------------------------------------------------------------------------------
	Для каждого Строки из ТаблицаНалоговых Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		// 06.12.2021 + DOCKING 361
		
		Если Строки.Флажок Тогда
			//Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
		// 06.12.2021 - DOCKING 361
			КолВоФлажков = КолВоФлажков + 1;
			Документ = Строки.Документ;
			ИД  =  Строка(Документ.УникальныйИдентификатор());  
			//НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ,  "Документ");
			Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
				КоличествоСуществующих = КоличествоСуществующих + 1;
			КонецЕсли; 
		КонецЕсли;  
				
	КонецЦикла;		
	
	Если КоличествоСуществующих>0 тогда   
		
		
		//ТекстВопроса = НСтр("ru = 'Документы существуют в M.E.Doc:';uk = 'Документи існують в M.E.Doc:'") + Символы.ПС + 
		//+ Число(КоличествоСуществующих) +  НСтр("ru = ' из ';uk = ' з '") +  КолВоФлажков +  НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		//НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'");
				
		Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc:';uk = 'Документи існують в M.E.Doc:'") + Символы.ПС + 
		+ Число(КоличествоСуществующих) +  НСтр("ru = ' из ';uk = ' з '") +  КолВоФлажков +  НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ПерезаписьДокументов = "Да";
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда 
			ПерезаписьДокументов = "Нет";
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;     	
	
	ОтменаПередачиНН = Ложь;
	pd =  App.GetPrimaryDocs();
	
	Для каждого Строки из ТаблицаНалоговых Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		// 06.12.2021 + DOCKING 361
		Если Строки.Флажок Тогда
			
			Если ОтменаПередачиНН Тогда
				Прервать;
			КонецЕсли;
			//Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//НайденнаяСтрока  =  Элементы.ТаблицаДокументов.ДанныеСтроки(Строки);
			Документ = Строки.Документ;		
			НайденнаяСтрока = Строки;
			ИД  =  Строка(Документ.УникальныйИдентификатор());
			PDate = Дата(Год(НайденнаяСтрока.Дата), Месяц(НайденнаяСтрока.Дата), 01);
			Если ПерезаписьДокументов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;			
			ИначеЕсли ПерезаписьДокументов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;			
			
			//---------------------------------------------------------------------------------
				Если ТипДок = "Налоговая накладная"
				// 13.12.21 + DOCKING 357
				ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Налоговая накладная")
				// 13.12.21 - DOCKING 357	
				Тогда
					Если ЮрикФизик = "Юрик" Тогда
						Бланк  =  "J1201015";  		
					Иначе 
						Бланк  =  "F1201015";    
					КонецЕсли;
					
					ПередаемНН(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовНН, СписокДляОткрытия,НайденнаяСтрока, orgId);   
				КонецЕсли;  	
				//------------------------------------------------------------------------------------
				Если ТипДок = "Приложение 2"
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Приложение 2")
					// 13.12.21 - DOCKING 357
				Тогда 			
					
					Если ЮрикФизик = "Юрик" Тогда
						Бланк  =  "J1201215";  		
					Иначе 
						Бланк  =  "F1201215";    
					КонецЕсли;
					
					ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, СписокДляОткрытия,НайденнаяСтрока, orgId);			
				КонецЕсли;
				//------------------------------------------------------------------------------------
			
		КонецЕсли;		
		// 06.12.2021 - DOCKING 361
	КонецЦикла;
	//--------------------------------------------------------------------------
	КоличествоДокументов =  КоличествоДокументовВидНакл + КоличествоДокументовАктСверки + КоличествоДокументовСчет + КоличествоДокументовАкт +
	КоличествоДокументовНН + КоличествоДокументовДод2 + КоличествоДокументовЗапит + КоличествоДокументовВозвратТоваровОтПокупателя + КоличествоДокументовВозвратТоваровПоставщику+
	КоличествоДокументовТТНспирт+КоличествоДокументовТТНалкоголь;  	
	
	// 02.02.2022 + DOCKING 369
	Сообщение = Новый СообщениеПользователю();
	
	Для Каждого Эл ИЗ МассивУникальныхСообщений Цикл 
		Сообщение.Текст = Эл.Значение;
		Сообщение.Сообщить();
	КонецЦикла;
	// 02.02.2022 - DOCKING 369
	
	Если КоличествоДокументов>0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передано в M.E.Doc:';uk = 'Передано в M.E.Doc:'") + Символы.ПС +   
		"  - " + КоличествоДокументов + " шт.");
		Сообщение.Сообщить();
		//--------------------------------------------------------------------------
		Если ОтпрНет  =  2 и App.GetDocStatus(ИД)<>3 Тогда 
			Sender  =  App.GetDocSender();
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаНалоговых Цикл
		 		Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);
				КонецЕсли;
			КонецЦикла;
			// 06.12.2021 - DOCKING 361
			Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (НСтр("ru = 'Отправляем в ГФС. Перейдите в M.E.Doc';uk = 'Відправляємо до ДФС. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(1);    
			// 08.12.2021 + DOCKING 361
			
				ОтправленоЧисло1 = cnt;
			
			// 06.12.2021 + DOCKING 361
			
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			//	Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//	ИД  =  Строка(Документ.УникальныйИдентификатор());
			//    ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			//КонецЦикла;
			
			Для Каждого Строки из ТаблицаНалоговых цикл
		 		Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
					ПроверкаСтатусовРегистрацииЕРНН(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			// 06.12.2021 - DOCKING 361
		ИначеЕсли 
			ОтпрНет  =  2 и App.GetDocStatus(ИД) = 3 Тогда 
			Сообщить(Нстр("ru = 'Документ ошибочный, поэтому в ГФС не отправляется.';uk = 'Документ помилковий, тому в ДФС не відправляється.'"));
		КонецЕсли; 
		
		Если ОтпрНет  =  3  Тогда
			Sender  =  App.GetDocSender();
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			//	Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//	//Если Документ.УникальныйИднтификатор().ТаблицаДокументов..ДанныеСтроки(Строки).ИНН = "" Тогда
			//	//	Сообщить(Строка(Документ) + НСтр("ru = ' не будет отправлен контрагенту,  т.к. у него не указан ЕДРПОУ.';uk = ' не буде відправлено контрагенту,  оскліьки в нього не вказаний ЄДРПОУ.'"));
			//	//Иначе 
			//		ИД  =  Строка(Документ.УникальныйИдентификатор());
			//		Sender.Add(ИД);    
			//	//КонецЕсли;
			//КонецЦикла;
			
			Для Каждого Строки из ТаблицаНалоговых Цикл
				Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);
				КонецЕсли;
			КонецЦикла;
			
			// 06.12.2021 - DOCKING 361
		    Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (Нстр("ru = 'Отправляем Контрагенту. Перейдите в M.E.Doc';uk = 'Відправляємо Контрагенту. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(0); 
			// 08.12.2021 + DOCKING 361
			//ОтправленоЧисло = cnt;
			
			ОтправленоЧисло1 = cnt;
			// 08.12.2021 + DOCKING 361
			
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			//	Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
			//	ИД  =  Строка(Документ.УникальныйИдентификатор());
			//    ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			//КонецЦикла;
			Для Каждого Строки из ТаблицаНалоговых цикл
		 		Если Строки.Флажок Тогда
					Документ = Строки.Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
					ПроверкаСтатусовРегистрацииЕРНН(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			// 06.12.2021 - DOCKING 361

		КонецЕсли;     
		//---------------------------------------------------------------  		
		Если ФР = Истина Тогда 
			Попытка
				Если ТипДок="Налоговая накладная" Тогда
					ТипДокФильтр="10100"
				ИначеЕсли ТипДок="Приложение 2" Тогда
					ТипДокФильтр="10101"
				ИначеЕсли ТипДок="Счет покупателям" Тогда
					ТипДокФильтр="10103" 
				ИначеЕсли ТипДок="Акт выполненных работ" Тогда
					ТипДокФильтр="10104" 
				ИначеЕсли ТипДок="Расходная накладная" Тогда
					ТипДокФильтр="10105" 
				ИначеЕсли ТипДок="Акт Сверки" Тогда
					ТипДокФильтр="10106"   
				ИначеЕсли ТипДок="Возврат от покупателя" Тогда
					ТипДокФильтр="10107"  
				ИначеЕсли ТипДок="Возврат поставщику" Тогда
					ТипДокФильтр="10108"  
				КонецЕсли;
				
				reestrFil  = App.RunModule("PrimaryDocsRstNew");  
				filterTbl  =  reestrFil.GetFilter(); 
				filterTbl.Fields.Item("DOCTYPE").Value  =  ТипДокФильтр;
				// 06.12.2021 + DOCKING 361
				//filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
				//filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   			
				
				// 06.12.2021 + DOCKING 361
				
				//Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
				//	filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
				//	filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				//КонецЕсли;   				
				//Если ИмяТК = "ПД" Тогда
				//	
				//	filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
				//	filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   				
				//	Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
				//		filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
				//		filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				//	КонецЕсли;
				//	
				//ИначеЕсли ИмяТК = "НД" Тогда	
					
					filterTbl.Fields.Item("PERFROM").Value  =  Дата(НалогДокНачПериода);  
					filterTbl.Fields.Item("PERTO").Value  =  Дата(НалогДокКонПериода);   			
					Если ЗначениеЗаполнено(НалогДокКонтрагент.КодПоЕДРПОУ) Тогда
						filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  НалогДокКонтрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
						filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
					КонецЕсли;
				//КонецЕсли;	
				// 06.12.2021 - DOCKING 361	
				
				filterTbl.Fields.Item("STAN").Value  =  2; //1 - входящие 2 - исходящие 
				//filterTbl.Fields.Item("ROUTE").Value  =  2;
				//filterTbl.Fields.Item("SUBROUTE").Value  =  -3; 
				reestrFil.ApplyFilter(); 
			Исключение
			КонецПопытки;
		КонецЕсли;  		 
		
		Если ОД = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытия Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;     
		//---------------------------------------------------------------
	Иначе 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
		Сообщение.Сообщить();

	КонецЕсли;
	
КонецПроцедуры	 

 &НаКлиенте
Процедура СформироватьСвойШаблон() 
	 
	// 06.12.2021 + DOCKING 361
	//ИмяТК = ПолучитьИмяТекущейВкладки();
	// 06.12.2021 - DOCKING 361
	МассивУникальныхСообщений = Новый Структура;
	// 17.12.2021 + DOCKING 357
	КодПоЕДРПОУ = ОрганизацияПриИзмененииНаСервере();
	Если КодПоЕДРПОУ = Неопределено Тогда
		Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+ОрганизацияПервичка+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+ОрганизацияПервичка+"'"));
		КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
	КонецЕсли;      
	// 17.12.2021 - DOCKING 357
	
	ЮрикФизик = ЮрикФизик();
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- M.E.Doc не запущен.';uk = '- M.E.Doc не запущений.'") + символы.ПС + 
		НСтр("ru = '- Не выполнен вход в предприятие из списка.';uk = '- Не виконаний вхід у підприємство із списку.'"));
		Сообщение.Сообщить();		
		Возврат; 
	КонецПопытки;    
	
	Попытка 
		ОргМедок = ДатьОргМЕДок();
	    // 06.12.2021 + DOCKING 361
		
	    //Орг1С = КодЕДРПОУ(ОрганизацияПервичка);
		//Если ИмяТК = "ПД" Тогда
			Орг1С = КодЕДРПОУ(ОрганизацияПервичка);
		//ИначеЕсли ИмяТК = "НД" Тогда
		//	Орг1С = КодЕДРПОУ(НалогДокОрганизацияПервичка);
		//КонецЕсли;
		// 06.12.2021 - DOCKING 361
		
		orgId  =  App.SeekOrg(СокрЛП(КодПоЕДРПОУ), СокрЛП(пФил)); 
		Если orgId = 0 Тогда 
			Элементы.СформироватьСвойШаблон.Доступность = Ложь;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = (НСтр("ru = 'Предприятия не существует в M.E.Doc :';uk = 'Підприємства не існує в M.E.Doc:'") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ'") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Перевірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да, создайте в M.E.Doc новое предприятие.';uk = 'Якщо Так, створіть в M.E.Doc нове підприємство.'"));
			Сообщение.Сообщить();	
			Возврат;
		ИначеЕсли ОргМедок <> Орг1С Тогда
			Предупреждение(НСтр("ru = 'Ошибка: Предприятие открытое в М.E.Doc не соответствует выбраном в 1С.';uk = 'Помилка: Підприємство відкрите в М.E.Doc не співпадає вибраному в 1С.'"));
		    Возврат;
		КонецЕсли;   
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Ошибка при определении наличия предприятия в М.E.Doc.';uk = 'Помилка при визначенні наявності підприємства в М.E.Doc.'"));
		Сообщение.Сообщить();	
	КонецПопытки; 
			
	//-----------------------------------------------------------------------------------------
	КоличествоДокументов  =  0;
	КоличествоДокументовАкт  =  0;	
	КоличествоДокументовСчет  =  0;
	КоличествоДокументовВидНакл  =  0;
	КоличествоОтправленных =  0;
	КоличествоСуществующих =  0;
	КолВоФлажков = 0;
	СписокДляОткрытия = Новый Массив();
	//------------------------------------------------------------------------------------
	Для каждого Строки из ТаблицаДокументов Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		Если Строки.Флажок Тогда
			КолВоФлажков = КолВоФлажков + 1;
			Документ = Строки.Документ;
			ИД  =  Строка(Документ.УникальныйИдентификатор());  
			Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
				КоличествоСуществующих = КоличествоСуществующих + 1;
			КонецЕсли; 
		КонецЕсли;  
	КонецЦикла;		
	
	Если КоличествоСуществующих>0 тогда   
		Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc:';uk = 'Документи існують в M.E.Doc:'") + Символы.ПС + 
		+ Число(КоличествоСуществующих) +  НСтр("ru = ' из ';uk = ' з '") +  КолВоФлажков +  НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ПерезаписьДокументов = "Да";
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда 
			ПерезаписьДокументов = "Нет";
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;     	
	
	ОтменаПередачиНН = Ложь;
	pd =  App.GetPrimaryDocs();
	
	Для каждого Строки из ТаблицаДокументов Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		Если Строки.Флажок Тогда
			Если ОтменаПередачиНН Тогда
				Прервать;
			КонецЕсли;
			Документ = Строки.Документ;		
			НайденнаяСтрока = Строки;
			ИД  =  Строка(Документ.УникальныйИдентификатор());
			PDate = Дата(Год(НайденнаяСтрока.Дата), Месяц(НайденнаяСтрока.Дата), 01);
			Если ПерезаписьДокументов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;			
			ИначеЕсли ПерезаписьДокументов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;			
			
			///--------------------------------------------------------------------------
			Если Орг1С = "42762568" Тогда
				Если ТипДок = "Акт выполненных работ" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
					// 13.12.21 - DOCKING 357
					Тогда 			
					Бланк  =  "1CAKT";
					ПередаемАктСвойШаблон(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли; 
				///--------------------------------------------------------------------------
			ИначеЕсли Орг1С = "34818882" Тогда
				ВыборСкидки = "СуммаСкидки";
				ВыборСуммы  =  "СуммаБезСкидки";
				
				Если ТипДок = "Расходная накладная" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Расходная накладная")
					// 13.12.21 - DOCKING 357
					Тогда
					РезультатЗапроса = СформироватьРТУ_Услуги(ВыборСкидки,Документ);
					Н = РезультатЗапроса.Количество();
					Если Н > 0 Тогда
						Бланк  =  "Eprc_A";
						ПередаемСвойШаблон_Eprc_A(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
					Иначе	
						Бланк  =  "Eprc_N";
						ПередаемСвойШаблон_Eprc_N(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, СписокДляОткрытия, НайденнаяСтрока);				
					КонецЕсли;
					//тест
				ИначеЕсли ТипДок = "Акт выполненных работ" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
					// 13.12.21 - DOCKING 357
					Тогда
					РезультатЗапросаУ = СформироватьРТУ_Услуги(ВыборСкидки,Документ);
					РезультатЗапросаТ = СформироватьРТУ_Товары(ВыборСкидки,Документ);
					У = РезультатЗапросаУ.Количество();
					Т = РезультатЗапросаТ.Количество();
					
					Если У > 0 ИЛИ Т > 0 Тогда
						Бланк  =  "Eprc_A";
						ПередаемСвойШаблон_Eprc_A(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
					Иначе	
						Сообщить ("В документе нет записей");					
					КонецЕсли;				
				ИначеЕсли ТипДок = "Счет покупателям" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Счет покупателям")
					// 13.12.21 - DOCKING 357
					Тогда 
					РезультатЗапроса = СформироватьСчетПокупателя_Услуги(ВыборСуммы,ВыборСкидки,Документ);
					Н = РезультатЗапроса.Количество();
					Если Н > 0 Тогда	
						Бланк  =  "Eprc_I1";
						ПередаемСвойШаблон_Eprc_I1(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока);
					Иначе
						Бланк  =  "Eprc_I";
						ПередаемСвойШаблон_Eprc_I(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока);	
					КонецЕсли;	
				КонецЕсли;
			ИначеЕсли Орг1С = "37471198" Тогда
				Если ТипДок = "Акт выполненных работ" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
					// 13.12.21 - DOCKING 357
					Тогда 			
					Бланк  =  "NST_ACT";
					ПередаемСвойШаблон_NST_ACT(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;
				// DOCKING 406 + 12.05.2022		  
			ИначеЕсли Орг1С = "20079914" Тогда 
				Если ТипДок = "Акт приема передачи ПО" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт приема передачи ПО")
					// 13.12.21 - DOCKING 357
					Тогда 			
					Бланк  =  "ACT_AR1";
					ПередаемСвойШаблон_ACT_AR1(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;
				// DOCKING 406 - 12.05.2022
				
				// DOCKING 381 + 19.05.2022		  
			ИначеЕсли Орг1С = "36265553" Тогда 
				Если ТипДок = "Акт выполненных работ" 
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
					Тогда 			
					Бланк  =  "ACT_LKV";
					ПередаемСвойШаблон_ACT_LKV(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				ИначеЕсли ТипДок = "Счет покупателям" 
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Счет покупателям")
					Тогда 			
					Бланк  =  "RAH_LKV";
					ПередаемСвойШаблон_RAH_LKV(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;
				// DOCKING 381 - 19.05.2022
				
				// DOCKING 439 + 15.05.2022
			ИначеЕсли Орг1С = "34379765" Тогда // 34379765
				Если ТипДок = "Акт выполненных работ" 
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
					Тогда 			
					Бланк  =  "TRANS_AC";
					ПередаемСвойШаблон_TRANS_AC(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;
				//// DOCKING 439 + 15.05.2022
				
				// DOCKING 485 + 15.02.2023
			ИначеЕсли Орг1С = "44493086" Тогда // 44493086
				Если ТипДок = "Акт выполненных работ" 
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
					Тогда 			
					Бланк  =  "ALD_RAH";
					ПередаемСвойШаблон_ALD_RAH(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				КонецЕсли;
				// DOCKING 485 - 15.02.2023
				
				// DOCKING 586 + 10.11.2023
			ИначеЕсли Орг1С = "45000828" Тогда
				ВыборСкидки = "СуммаСкидки";
				ВыборСуммы  =  "Сумма";
				Если ТипДок = "Счет покупателям" 
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Счет покупателям")
					Тогда
					РезультатЗапросаУ = СформироватьСчетПокупателя_Услуги(ВыборСуммы,ВыборСкидки,Документ);
					РезультатЗапросаТ = СформироватьСчетПокупателя_Товары(ВыборСуммы,ВыборСкидки,Документ);
					У = РезультатЗапросаУ.Количество();
					Т = РезультатЗапросаТ.Количество();
					
					Если У > 0 ИЛИ Т > 0 Тогда
						Бланк  =  "Act_TSS";
						ПередаемСвойШаблон_TRACK(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
					Иначе	
						Сообщить ("В документе нет записей");					
					КонецЕсли;
				КонецЕсли;
				// DOCKING 586 - 10.11.2023
				
			// DOCKING 669 + 15.03.2024
			ИначеЕсли Орг1С = "41007704" Тогда
				ВыборСкидки = "СуммаСкидки";
				ВыборСуммы  =  "СуммаБезСкидки";
				
				Если ТипДок = "ПостТоваровКлиент" 
					// 13.12.21 + DOCKING 357
					ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "ПостТоваровКлиент")
					// 13.12.21 - DOCKING 357
					Тогда
					Бланк  =  "USV";
					ПередаемСвойШаблон_USV(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				ИначеЕсли	ТипДок = "ПостУслугКлиент" ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "ПостУслугКлиент")
					Тогда
					
					Бланк  =  "NP_AKT2R";
					ПередаемСвойШаблон_NP_AKT2R(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, СписокДляОткрытия, НайденнаяСтрока);				
				КонецЕсли;
			
			// DOCKING 669 - 15.03.2024	
			КонецЕсли;
			///--------------------------------------------------------------------------
		КонецЕсли;		
	КонецЦикла;           
	//--------------------------------------------------------------------------
	КоличествоДокументов =  КоличествоДокументовАкт + КоличествоДокументовВидНакл + КоличествоДокументовСчет;  	
	
	// 02.02.2022 + DOCKING 369
	Сообщение = Новый СообщениеПользователю();
	
	Для Каждого Эл ИЗ МассивУникальныхСообщений Цикл 
		Сообщение.Текст = Эл.Значение;
		Сообщение.Сообщить();
	КонецЦикла;
	
	// 02.02.2022 - DOCKING 369
	
	Если КоличествоДокументов>0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передано в M.E.Doc:';uk = 'Передано в M.E.Doc:'") + Символы.ПС +   
		"  - " + КоличествоДокументов + " шт.");
		Сообщение.Сообщить();
		//--------------------------------------------------------------------------
		Если ОтпрНет  =  2 и App.GetDocStatus(ИД)<>3 Тогда 
			Sender  =  App.GetDocSender();
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361		
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);
				КонецЕсли;	
			КонецЦикла;    
			Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (НСтр("ru = 'Отправляем в ГФС. Перейдите в M.E.Doc';uk = 'Відправляємо до ДФС. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(1);    
			// 08.12.2021 + DOCKING 361
			ОтправленоЧисло = cnt;
			//Если ИмяТК = "ПД" Тогда
			//	ОтправленоЧисло = cnt;
			//ИначеЕсли ИмяТК = "НД" Тогда
			//	ОтправленоЧисло1 = cnt;
			//КонецЕсли;
			// 08.12.2021 + DOCKING 361
			
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
                	ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;   
			
		ИначеЕсли 
			ОтпрНет  =  2 и App.GetDocStatus(ИД) = 3 Тогда 
			Сообщить(Нстр("ru = 'Документ ошибочный, поэтому в ГФС не отправляется.';uk = 'Документ помилковий, тому в ДФС не відправляється.'"));
		КонецЕсли; 
		
		Если ОтпрНет  =  3  Тогда
			Sender  =  App.GetDocSender(); 
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);    
				КонецЕсли;	
			КонецЦикла;    
		    Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (Нстр("ru = 'Отправляем Контрагенту. Перейдите в M.E.Doc';uk = 'Відправляємо Контрагенту. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(0); 
			// 08.12.2021 + DOCKING 361
			ОтправленоЧисло = cnt;
			//Если ИмяТК = "ПД" Тогда
			//	ОтправленоЧисло = cnt;
			//ИначеЕсли ИмяТК = "НД" Тогда
			//	ОтправленоЧисло1 = cnt;
			//КонецЕсли;
			// 08.12.2021 + DOCKING 361
			
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
                	ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;   

		КонецЕсли;     
		//---------------------------------------------------------------  		
		Если ФР = Истина Тогда 
			Попытка
				Если ТипДок="Счет покупателям" Тогда
					ТипДокФильтр="10103"  
				ИначеЕсли ТипДок="Расходная накладная" Тогда
					ТипДокФильтр="10105" 
				КонецЕсли;
				
				reestrFil  = App.RunModule("PrimaryDocsRstNew");  
				filterTbl  =  reestrFil.GetFilter(); 
				filterTbl.Fields.Item("DOCTYPE").Value  =  ТипДокФильтр; 
				filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
				filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   			
				Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
					filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
					filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				КонецЕсли;   				
				filterTbl.Fields.Item("STAN").Value  =  2; //1 - входящие 2 - исходящие 
				reestrFil.ApplyFilter(); 
			Исключение
			КонецПопытки;
		КонецЕсли;  		 
		
		Если ОД = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытия Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;     
		//---------------------------------------------------------------
	Иначе 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
		Сообщение.Сообщить();

	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СформироватьНДСвойШаблон() 
	 
	МассивУникальныхСообщений = Новый Структура;
	// 06.12.2021 + DOCKING 361
	//ИмяТК = ПолучитьИмяТекущейВкладки();
	// 06.12.2021 - DOCKING 361
	// 17.12.2021 + DOCKING 357
	КодПоЕДРПОУ = НалогДокОрганизацияПриИзмененииНаСервере();
	Если КодПоЕДРПОУ = Неопределено Тогда
		Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+НалогДокОрганизацияПервичка+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+НалогДокОрганизацияПервичка+"'"));
		КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
	КонецЕсли;      
	// 17.12.2021 - DOCKING 357
	
	ЮрикФизик = ЮрикФизик();
	Попытка 
		App  =  Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передача документов отложена. Возможные причины:';uk = 'Передача документів відкладено. Можливі причини:'") + Символы.ПС + 
		НСтр("ru = '- M.E.Doc не запущен.';uk = '- M.E.Doc не запущений.'") + символы.ПС + 
		НСтр("ru = '- Не выполнен вход в предприятие из списка.';uk = '- Не виконаний вхід у підприємство із списку.'"));
		Сообщение.Сообщить();		
		Возврат; 
	КонецПопытки;    
	
	Попытка 
		ОргМедок = ДатьОргМЕДок();
	    // 06.12.2021 + DOCKING 361
		
	    //Орг1С = КодЕДРПОУ(ОрганизацияПервичка);
		Орг1С = КодЕДРПОУ(НалогДокОрганизацияПервичка);
		
		// 06.12.2021 - DOCKING 361
		
		orgId  =  App.SeekOrg(СокрЛП(КодПоЕДРПОУ), СокрЛП(пФил)); 
		Если orgId = 0 Тогда 
			Элементы.СформироватьСвойШаблон.Доступность = Ложь;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = (НСтр("ru = 'Предприятия не существует в M.E.Doc :';uk = 'Підприємства не існує в M.E.Doc:'") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ'") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Перевірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да, создайте в M.E.Doc новое предприятие.';uk = 'Якщо Так, створіть в M.E.Doc нове підприємство.'"));
			Сообщение.Сообщить();	
			Возврат;
		ИначеЕсли ОргМедок <> Орг1С Тогда
			Предупреждение(НСтр("ru = 'Ошибка: Предприятие открытое в М.E.Doc не соответствует выбраном в 1С.';uk = 'Помилка: Підприємство відкрите в М.E.Doc не співпадає вибраному в 1С.'"));
		    Возврат;
		КонецЕсли;   
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Ошибка при определении наличия предприятия в М.E.Doc.';uk = 'Помилка при визначенні наявності підприємства в М.E.Doc.'"));
		Сообщение.Сообщить();	
	КонецПопытки; 
			
	//-----------------------------------------------------------------------------------------
	КоличествоДокументов  =  0;
	КоличествоДокументовАкт  =  0;	
	КоличествоДокументовСчет  =  0;
	КоличествоДокументовВидНакл  =  0;
	КоличествоОтправленных =  0;
	КоличествоСуществующих =  0;
	КолВоФлажков = 0;
	СписокДляОткрытия = Новый Массив();
	//------------------------------------------------------------------------------------
	Для каждого Строки из ТаблицаНалоговых Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		Если Строки.Флажок Тогда
			КолВоФлажков = КолВоФлажков + 1;
			Документ = Строки.Документ;
			ИД  =  Строка(Документ.УникальныйИдентификатор());  
			Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
				КоличествоСуществующих = КоличествоСуществующих + 1;
			КонецЕсли; 
		КонецЕсли;  
	КонецЦикла;		
	
	Если КоличествоСуществующих>0 тогда   
		Ответ = Вопрос(НСтр("ru = 'Документы существуют в M.E.Doc:';uk = 'Документи існують в M.E.Doc:'") + Символы.ПС + 
		+ Число(КоличествоСуществующих) +  НСтр("ru = ' из ';uk = ' з '") +  КолВоФлажков +  НСтр("ru = ' выбранных.';uk = ' обраних.'") + Символы.ПС +		
		НСтр("ru = 'Переместить существующие в Корзину,  и передать новые документы?';uk = 'Перемістити існуючі до Корзини,  та передати нові документи?'"),  РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ПерезаписьДокументов = "Да";
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда 
			ПерезаписьДокументов = "Нет";
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;     	
	
	ОтменаПередачиНН = Ложь;
	pd =  App.GetPrimaryDocs();
	
	Для каждого Строки из ТаблицаНалоговых Цикл  //Элементы.ТаблицаДокументов.ВыделенныеСтроки
		Если Строки.Флажок Тогда
			Если ОтменаПередачиНН Тогда
				Прервать;
			КонецЕсли;
			Документ = Строки.Документ;		
			НайденнаяСтрока = Строки;
			ИД  =  Строка(Документ.УникальныйИдентификатор());
			PDate = Дата(Год(НайденнаяСтрока.Дата), Месяц(НайденнаяСтрока.Дата), 01);
			Если ПерезаписьДокументов = "Да" Тогда   
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					App.MoveToTrash(ИД);
				КонецЕсли;			
			ИначеЕсли ПерезаписьДокументов = "Нет" Тогда 
				Если App.GetSendSTTByExDocID(ИД) <> -1 Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;			
			
		///--------------------------------------------------------------------------
		Если Орг1С = "42762568" Тогда
			Если ТипДок = "Акт выполненных работ" 
				// 13.12.21 + DOCKING 357
				ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
				// 13.12.21 - DOCKING 357
				Тогда 			
					Бланк  =  "1CAKT";
				    ПередаемАктСвойШаблон(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
			КонецЕсли; 
				///--------------------------------------------------------------------------
		ИначеЕсли Орг1С = "34818882" Тогда
			 ВыборСкидки = "СуммаСкидки";
			 ВыборСуммы  =  "СуммаБезСкидки";

			 Если ТипДок = "Расходная накладная" 
				// 13.12.21 + DOCKING 357
				ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Расходная накладная")
				// 13.12.21 - DOCKING 357
				 Тогда
				 РезультатЗапроса = СформироватьРТУ_Услуги(ВыборСкидки,Документ);
			     Н = РезультатЗапроса.Количество();
				Если Н > 0 Тогда
					Бланк  =  "Eprc_A";
				    ПередаемСвойШаблон_Eprc_A(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				Иначе	
					Бланк  =  "Eprc_N";
					ПередаемСвойШаблон_Eprc_N(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, СписокДляОткрытия, НайденнаяСтрока);				
				КонецЕсли;
				//тест
			ИначеЕсли ТипДок = "Акт выполненных работ" 
				// 13.12.21 + DOCKING 357
				ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
				// 13.12.21 - DOCKING 357
				Тогда
				 РезультатЗапросаУ = СформироватьРТУ_Услуги(ВыборСкидки,Документ);
				 РезультатЗапросаТ = СформироватьРТУ_Товары(ВыборСкидки,Документ);
			     У = РезультатЗапросаУ.Количество();
				 Т = РезультатЗапросаТ.Количество();

				Если У > 0 ИЛИ Т > 0 Тогда
					Бланк  =  "Eprc_A";
				    ПередаемСвойШаблон_Eprc_A(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
				Иначе	
					Сообщить ("В документе нет записей");					
				КонецЕсли;				
			ИначеЕсли ТипДок = "Счет покупателям" 
				// 13.12.21 + DOCKING 357
				ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Счет покупателям")
				// 13.12.21 - DOCKING 357
				Тогда 
				    РезультатЗапроса = СформироватьСчетПокупателя_Услуги(ВыборСуммы,ВыборСкидки,Документ);
				    Н = РезультатЗапроса.Количество();
				Если Н > 0 Тогда	
				    Бланк  =  "Eprc_I1";
				    ПередаемСвойШаблон_Eprc_I1(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока);
				Иначе
				    Бланк  =  "Eprc_I";
				    ПередаемСвойШаблон_Eprc_I(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока);	
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли Орг1С = "37471198" Тогда
			Если ТипДок = "Акт выполненных работ" 
				// 13.12.21 + DOCKING 357
				ИЛИ (ТипДок = "Пусто" И Строки.ТипСтрока = "Акт выполненных работ")
				// 13.12.21 - DOCKING 357
				Тогда 			
					  Бланк  =  "NST_ACT";
				      ПередаемСвойШаблон_NST_ACT(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока);
		    КонецЕсли;
		КонецЕсли;
		///--------------------------------------------------------------------------
	КонецЕсли;		
	КонецЦикла;           
	//--------------------------------------------------------------------------
	КоличествоДокументов =  КоличествоДокументовАкт + КоличествоДокументовВидНакл + КоличествоДокументовСчет;  	
	
	// 02.02.2022 + DOCKING 369
	Сообщение = Новый СообщениеПользователю();
	
	Для Каждого Эл ИЗ МассивУникальныхСообщений Цикл 
		Сообщение.Текст = Эл.Значение;
		Сообщение.Сообщить();
	КонецЦикла;
	
	// 02.02.2022 - DOCKING 369
	
	Если КоличествоДокументов>0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Передано в M.E.Doc:';uk = 'Передано в M.E.Doc:'") + Символы.ПС +   
		"  - " + КоличествоДокументов + " шт.");
		Сообщение.Сообщить();
		//--------------------------------------------------------------------------
		Если ОтпрНет  =  2 и App.GetDocStatus(ИД)<>3 Тогда 
			Sender  =  App.GetDocSender();
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361		
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);
				КонецЕсли;	
			КонецЦикла;    
			Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (НСтр("ru = 'Отправляем в ГФС. Перейдите в M.E.Doc';uk = 'Відправляємо до ДФС. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(1);    
			// 08.12.2021 + DOCKING 361
			//ОтправленоЧисло = cnt;
			ОтправленоЧисло1 = cnt;
			// 08.12.2021 + DOCKING 361
			
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
                	ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;   
			
		ИначеЕсли 
			ОтпрНет  =  2 и App.GetDocStatus(ИД) = 3 Тогда 
			Сообщить(Нстр("ru = 'Документ ошибочный, поэтому в ГФС не отправляется.';uk = 'Документ помилковий, тому в ДФС не відправляється.'"));
		КонецЕсли; 
		
		Если ОтпрНет  =  3  Тогда
			Sender  =  App.GetDocSender(); 
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
					Sender.Add(ИД);    
				КонецЕсли;	
			КонецЦикла;    
		    Сообщение = Новый СообщениеПользователю();
		    Сообщение.Текст = (Нстр("ru = 'Отправляем Контрагенту. Перейдите в M.E.Doc';uk = 'Відправляємо Контрагенту. Перейдіть в M.E.Doc'"));
			Сообщение.Сообщить();

			cnt  =  Sender.Send(0); 
			// 08.12.2021 + DOCKING 361
			//ОтправленоЧисло = cnt;
			//Если ИмяТК = "ПД" Тогда
			//	ОтправленоЧисло = cnt;
			//ИначеЕсли ИмяТК = "НД" Тогда
			ОтправленоЧисло1 = cnt;
			//КонецЕсли;
			// 08.12.2021 + DOCKING 361
			
			// 06.12.2021 + DOCKING 361
			//Для каждого Строки из Элементы.ТаблицаДокументов.ВыделенныеСтроки цикл
			Для каждого Строки из ТаблицаДокументов Цикл
				Если Строки.флажок Тогда
			// 06.12.2021 - DOCKING 361
					Документ = Элементы.ТаблицаДокументов.ДанныеСтроки(Строки).Документ;
					ИД  =  Строка(Документ.УникальныйИдентификатор());
                	ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
					ПроверкаСтатусовРегистрацииЕРНН(App, Документ, ИД, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;   

		КонецЕсли;     
		//---------------------------------------------------------------  		
		Если ФР = Истина Тогда 
			Попытка
				Если ТипДок="Счет покупателям" Тогда
					ТипДокФильтр="10103"  
				ИначеЕсли ТипДок="Расходная накладная" Тогда
					ТипДокФильтр="10105" 
				КонецЕсли;
				
				reestrFil  = App.RunModule("PrimaryDocsRstNew");  
				filterTbl  =  reestrFil.GetFilter(); 
				filterTbl.Fields.Item("DOCTYPE").Value  =  ТипДокФильтр; 
				filterTbl.Fields.Item("PERFROM").Value  =  Дата(НачПериода);  
				filterTbl.Fields.Item("PERTO").Value  =  Дата(КонПериода);   			
				Если ЗначениеЗаполнено(Контрагент.КодПоЕДРПОУ) Тогда
					filterTbl.Fields.Item("PARTNEREDRPOU").Value  =  Контрагент.КодПоЕДРПОУ; //ЕДРПОУ КОНТРАГЕНТА
					filterTbl.Fields.Item("PARTNERDEPT").Value  =  ""; //КОД ФИЛИАЛА КОНТРАГЕНТА
				КонецЕсли;   				
				filterTbl.Fields.Item("STAN").Value  =  2; //1 - входящие 2 - исходящие 
				reestrFil.ApplyFilter(); 
			Исключение
			КонецПопытки;
		КонецЕсли;  		 
		
		Если ОД = Истина Тогда
			Для Каждого ИД Из СписокДляОткрытия Цикл
				App.ShowDocument(ИД);
			КонецЦикла;        		
		КонецЕсли;     
		//---------------------------------------------------------------
	Иначе 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Не передано ни одного документа.';uk = 'Не передано жодного документа.'"));
		Сообщение.Сообщить();

	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновлениеСостоянияРегистрацииЕРНН(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ВопросОбновлениеСостоянияЕРНН", ЭтаФорма, Параметры);
	
	ПоказатьВопрос(Оповещение,
					НСтр("ru = 'Обновить статус регистрации в ЕРНН по выделенным  документам?'; uk = 'Оновити статус реєстрації в ЄРПН по обраним документам?'"),
					Режим,
					0)
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновлениеСостоянияЕРНН(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыделенаяСтрока = Ложь;
		Для каждого СтрокаДокумент Из ТаблицаНалоговых Цикл 
			Если СтрокаДокумент.Флажок Тогда
				ОбновлениеСтатусаРНН(СтрокаДокумент.Документ,СтрокаДокумент.ТипСтрока);
				ВыделенаяСтрока = Истина;
			КонецЕсли; 
		КонецЦикла;
		
		Если НЕ ВыделенаяСтрока Тогда 
			Сообщить("Не выбрано ни одного документа для обновления статуса!");
		Иначе 
			ВыбратьНалоговые();
			ПроверитьНаличиеНалоговых();
		КонецЕсли;
		
	Иначе 
		Сообщить(НСтр("ru = 'Обновление статусов отменено.'; uk = 'Оновлення статусів відмінено.'"));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте	
Процедура ОбновлениеСтатусаРНН(Документ,ТипСтрока) 
	
	Попытка
		App = Новый COMОбъект("Medoc.ZApplication");
	Исключение
		Сообщить(НСтр("ru = 'Программа M.E.Doc не запущена либо не выполнен вход в предприятие.'; uk = 'Програму M.E.Doc не запущено або не виконано вхід у підприємство.'"));
		Возврат;
	КонецПопытки;
	
	Попытка  
		СтруктураПараметров = СтруктураПараметров(Документ,,ТипСтрока);
	Исключение
		Возврат;
	КонецПопытки; 
	
	ИД = Строка(Документ.УникальныйИдентификатор());
	НомерДока = СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтруктураПараметров.НалоговыйДокумент.HNUM));
	//НомерДока = ПолучитьНомерБезПрефиксов(Документ);
	
	ДокументСтруктура = ПолучитьОбъектНаСервере(Документ); 
	
	Если ТипДок = "Налоговая накладная" 
		ИЛИ (ТипДок = "Пусто" И ТипСтрока = "Налоговая накладная")
		Тогда
		docType = "10100";
	ИначеЕсли ТипДок = "Приложение 2" 
		ИЛИ (ТипДок = "Пусто" И ТипСтрока = "Приложение 2")
		Тогда 
		docType = "10101"; 
	КонецЕсли;
	
	
	Контр = СокрЛП(СтруктураПараметров.НалоговыйДокумент.HKBUY);
	Дата = Формат(СтруктураПараметров.НалоговыйДокумент.HFILL, "ДЛФ=Д");
	prim = App.GetPrimaryDocs();
	Попытка
		Reestr = prim.GetPrimaryReestr(docType, 1, Дата, Дата);
	Исключение
	    Дата = Дата(СтруктураПараметров.НалоговыйДокумент.HFILL);
		Reestr = prim.GetPrimaryReestr(docType, 1, Дата, Дата);
	КонецПопытки;
	Reestr.First();
	Счетчик = Reestr.RecordCount;
	
	Пока Счетчик <> 0 Цикл
		МедИд = Reestr.Fields.Item("EXDOC_ID").Value;
		НомерДокаМед = Reestr.Fields.Item("DOC_NUM").Value;
		КонтрМед = Reestr.Fields.Item("PATRNER_IPN").Value;
		РегКод = Reestr.Fields.Item("REG_NUM").Value;
		Если ИД = МедИд и НомерДока = НомерДокаМед и КонтрМед = Контр Тогда
			
			// DOCKING 512 + 01.06.2023
			ThisDoc = App.OpenDocumentByExDocID(МедИд);
			rsSomeDoc = ThisDoc.DataSets("Main"); //get document header
			ЕРНН = rsSomeDoc.FldVal("DPA_REG_TIME");	//'get reg date
			
			НаличиеВМедке = Истина;
			
			//ЕРНН = Reestr.Fields.Item("REGDATE").Value; 
			
			// DOCKING 512 - 01.06.2023
			
			Если ЗначениеЗаполнено(ЕРНН) И ДокументСтруктура.ВключенаВЕдиныйРеестрНалоговыхНакладных = Ложь Тогда
				ОбновитьСтатусРегистрацииЕРНННаСервере(Документ,ЕРНН,РегКод);
			ИначеЕсли ЗначениеЗаполнено(ЕРНН) и ДокументСтруктура.ВключенаВЕдиныйРеестрНалоговыхНакладных = Истина Тогда	
				// DOCKING 540 + 31.03.2024
				ЗаполнитьКомментарийЕРНННаСервере(Документ,ЕРНН,РегКод);
				// DOCKING 540 - 31.03.2024
				Сообщить("Документ " + Документ + " уже зарегестрирован в ЕРНН.");
			КонецЕсли;
			
		КонецЕсли;
		Счетчик = Счетчик-1;
		Reestr.Next();
	КонецЦикла;
	
	Если НаличиеВМедке <> Истина И App.GetInTrashStatus(ИД) = Ложь Тогда 
		Сообщить("Документ " + Документ + " не существует в M.E.Doc.");
	ИначеЕсли НаличиеВМедке <> Истина И App.GetInTrashStatus(ИД) <> Ложь Тогда
		Сообщить("Документ " + Документ + " был перемещен в Корзину.");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерБезПрефиксов(Документ)
	Номер = Прав(Документ.Номер,7);
	//Возврат СтрЗаменить(Номер,"0","")	
	Возврат Строка(Число(Номер));	
КонецФункции
 
&НаСервере
Процедура ОбновитьСтатусРегистрацииЕРНННаСервере(Документ,ЕРНН,РегКод)
	Док = Документ.ПолучитьОбъект();
	Док.ВключенаВЕдиныйРеестрНалоговыхНакладных = Истина;
	Док.Комментарий = Строка("Дата регистрации - " + Формат(ЕРНН,  "ДФ = dd.MM.yyyy")+", номер регистрации - "+РегКод);
	Док.Записать();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомментарийЕРНННаСервере(Документ,ЕРНН,РегКод)
	Док = Документ.ПолучитьОбъект();
	Док.Комментарий = Строка("Дата регистрации - " + Формат(ЕРНН,  "ДФ = dd.MM.yyyy")+", номер регистрации - "+РегКод);
	Док.Записать();
КонецПроцедуры
 
&НаКлиенте
Процедура КоманднаяПанельТаблицаДокументовОпрограмме(Команда)

	ЗапуститьПриложение("https://medoc.ua/pdf/instruction-2.0.pdf");     

КонецПроцедуры

&НаСервере
Функция ПолучитьИспользуемоеИмяФайлаНаСервере()
    Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции

&НаКлиенте
Процедура ДополнительныеДанные(Команда)  Экспорт
	
	//ИмяСтк = ПолучитьИспользуемоеИмяФайлаНаСервере();
	//ИмяМногостр= СтрЗаменить( ИмяСтк, "\", Символы.ПС);
	//ЧислоСтрок = СтрЧислоСтрок(ИмяМногостр);
	//Имя1 = СтрПолучитьСтроку(ИмяМногостр, ЧислоСтрок);
	//Имя = СтрЗаменить(Имя1, ".epf", "");
	//

	//Форма = ОткрытьФорму("МедоваяСтыковка."+Имя+".Форма.ТТНФорма");
	Форма = ОткрытьФорму("ВнешняяОбработка.МедоваяСтыковка.Форма.ТТНФорма");
	//Параметр = ХранилищеОбщихНастроек.Загрузить("Марка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускМедка(ПрефиксТекст)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Оповещение = Новый ОписаниеОповещения("ЗапуститьMeDoc",ЭтаФорма);
	ПоказатьВопрос(Оповещение,
					НСтр("ru = 'Запустить M.E.Doc на основании настроек?'; uk = 'Запустити M.E.Doc за налаштуваннями?'") + Символы.ПС + ПутьКФайлуМедка + Элементы.НадписьЯрлык.Заголовок,  
					Режим,  
					0,
					,
					ПрефиксТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьMeDoc(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриНажатииНажатие(ПутьКФайлуМедка);
		ПодключитьОбработчикОжидания("Подключение1СМедок",1, Ложь);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
//запуск прилоджения МеДок
Процедура ПриНажатииНажатие(Элемент) 	
	
	Если (Элементы.ПутьКФайлуМедка <> "" и Элементы.НадписьЯрлык<>"") Тогда
		Попытка 
			Путь  = Строка(ЭтотОбъект.ПутьКФайлуМедка) + Строка(Элементы.НадписьЯрлык.Заголовок);
			Если НадписьПараметры Тогда
				Парам  =  ?(ЗначениеЗаполнено(СокрЛП(ПараметрыПредприятияПоле)),  " -org "+СокрЛП(ПараметрыПредприятияПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыФилиалПоле)),  " -dept "+СокрЛП(ПараметрыФилиалПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыЛогинПоле)),  " -user "+СокрЛП(ПараметрыЛогинПоле),  "") + 
				?(ЗначениеЗаполнено(СокрЛП(ПараметрыПарольПоле)),  " -pass "+СокрЛП(ПараметрыПарольПоле),  "");
			Иначе
				Парам = "";
			КонецЕсли;
				ЗапуститьПриложение(Путь + Парам);
			Возврат;
		Исключение
			#Если Клиент Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Не удалось запустить M.E.Doc. Проверьте путь к ехе-файлу программы!';uk = 'Не вдалось запустити  M.E.Doc. Перевірте шлях до ехе-файлу програми!'"));
	    Сообщение.Сообщить();	
	        #КонецЕсли
		КонецПопытки;
	Иначе 
		#Если Клиент Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Не указан путь к М.E.Doc на вкладке Настройки !';uk = 'Не вказаний шлях до М.E.Doc на вкладці Налаштування!'"));
		//Сообщение.Поле = "ПутьКФайлуМедка";
		Сообщение.Сообщить();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока)
	
	СтатусТекст  =  Строка(ПолучитьРасшифровкуСтатуса(Строка(App.GetSendSTTByExDocID(ИД)))); 	
	СтатусТекст2  =  Строка(ПроверитьСтатусПоИД(Строка(App.GetDocStatus(ИД))));
	//НайденнаяСтрока  =  ТаблицаДокументов.Найти(Документ, "Документ");   
	НайденнаяСтрока.Статус = Формат(Строка(СтатусТекст + ",  " + СтатусТекст2));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтатусовРегистрацииЕРНН(App, Документ, ИД, НайденнаяСтрока)
	
	СтатусТекстЕРНН  =  ПолучитьРасшифровкуСтатусаРегистрацииЕРПН(Строка(App.GetSendSTTByExDocID(ИД))); 	
	НайденнаяСтрока.СтатусРегистрацииЕРНН = Формат(Строка(СтатусТекстЕРНН));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемАкт(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_Акт(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемАктСвойШаблон(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_Eprc_N(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_РасхНаклСвойШаблон_Eprc_N(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВидНакл  =  КоличествоДокументовВидНакл+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_Eprc_I(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_СчетСвойШаблон_Eprc_I(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_Eprc_I1(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_СчетСвойШаблон_Eprc_I1(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_TRACK(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_СчетСвойШаблон_TRACK(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_Eprc_A(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_Eprc_A(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_USV(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_USV(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_NP_AKT2R(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_NP_AKT2R(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_NST_ACT(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_NST_ACT(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_ACT_AR1(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_ACT_AR1(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры // DOCKING 406 - 12.05.2022

&НаКлиенте
Процедура ПередаемСвойШаблон_ACT_LKV(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_ACT_LKV(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_RAH_LKV(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_СчетСвойШаблон_RAH_LKV(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_TRANS_AC(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_TRANS_AC(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСвойШаблон_ALD_RAH(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовАкт, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_АктСвойШаблон_ALD_RAH(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовАкт  =  КоличествоДокументовАкт+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередаемВозвратТоваровОтПокупателя(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровОтПокупателя, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_ВозвратТоваровОтПокупателя(  OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВозвратТоваровОтПокупателя  =  КоличествоДокументовВозвратТоваровОтПокупателя+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемВозвратТоваровПоставщику(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВозвратТоваровПоставщику, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка
		Формирование_ВозвратТоваровПоставщику(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВозвратТоваровПоставщику  =  КоличествоДокументовВозвратТоваровПоставщику+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСчет(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка	
		Формирование_Счет(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД); 		
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемСчетКлиентам(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовСчет, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка	
		Формирование_СчетКлиентам(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовСчет  =  КоличествоДокументовСчет+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД); 		
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемАЗ(App,pd, OrgId, Документ, Бланк, ИД, КоличествоДокументовАктСверки, СписокДляОткрытия, НайденнаяСтрока)
	 Попытка
		Формирование_АктаСверки(OrgId, Документ, Бланк, ИД); 				
		КоличествоДокументовАктСверки = КоличествоДокументовАктСверки+1; 
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
		App.MoveToTrash(ИД); 
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПередаемРасхНакл(App,  pd,  OrgId,  Документ,  Бланк,  ИД, КоличествоДокументовВидНакл, СписокДляОткрытия, НайденнаяСтрока)
	
	Попытка	
		Формирование_РасхНакл(OrgId,  Документ,  Бланк,  ИД); 				
		КоличествоДокументовВидНакл  =  КоличествоДокументовВидНакл+1;
		ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
		СписокДляОткрытия.Добавить(ИД);
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемНН(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовНН, СписокДляОткрытия,НайденнаяСтрока, orgId)
	
	Попытка	
		Если Формирование_НН(Документ,  Бланк,  PDate,  ИД, orgId, НайденнаяСтрока) Тогда		
			КоличествоДокументовНН  =  КоличествоДокументовНН + 1;
			ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			ПроверкаСтатусовРегистрацииЕРНН(App, Документ, ИД, НайденнаяСтрока);
			СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемДод2(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовДод2, СписокДляОткрытия,НайденнаяСтрока, orgId)
	
	Попытка
		Если Формирование_Дод2(Документ,  Бланк,  PDate,  ИД, orgId, НайденнаяСтрока) Тогда			
			КоличествоДокументовДод2  =  КоличествоДокументовДод2+1;
			ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			ПроверкаСтатусовРегистрацииЕРНН(App, Документ, ИД, НайденнаяСтрока);
			СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПередаемТТНспирт(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНспирт, СписокДляОткрытия, НайденнаяСтрока, orgId)
	
	Попытка	
		Если Формирование_ТТН(Документ,  Бланк,  PDate,  ИД, orgId)Тогда 				
			 КоличествоДокументовТТНспирт  =  КоличествоДокументовТТНспирт+1;
			 ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			 СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередаемТТНалкоголь(App,  Документ,  Бланк,  PDate,  ИД, КоличествоДокументовТТНалкоголь, СписокДляОткрытия, НайденнаяСтрока, orgId)
	
	Попытка	
		Если Формирование_ТТН(Документ,  Бланк,  PDate,  ИД, orgId)Тогда 				
			 КоличествоДокументовТТНалкоголь  =  КоличествоДокументовТТНалкоголь+1;
			 ПроверкаСтатусов(App, Документ, ИД, НайденнаяСтрока);
			 СписокДляОткрытия.Добавить(ИД);
		КонецЕсли;
	Исключение
		НайденнаяСтрока.Статус=Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");;
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ВозвратТоваровПоставщику(orgId,  Документ,  Бланк,  ИД)
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();

	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ);
		
		СведенияОПокупателе = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);

		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		//СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
	    ДатаДокумента = СтруктураДокумента.Дата;  
		//СведенияОПоставщике  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация,  ТекущаяДата(), , , КодЯзыкаПечать);
		//СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Организация, ТекущаяДата(),,,КодЯзыкаПечать);
		
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(СведенияОПокупателе.НомерСчета);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(СведенияОПокупателе.МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПокупателе.Телефоны);
		
		Если ЮрикФизик = "Физик" Тогда
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		КонецЕсли;      

		Если ЗначениеЗаполнено(СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО);
		КонецЕсли;	
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_TEL_FIZ_K").Value  =  СокрЛП(СведенияОПоставщике.Телефоны);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПоставщике.Телефоны);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
	    rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
		rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");	
		
		rsMain.Fields.Item("SUMPDV").Value = СтруктураДокумента.ИтогСуммаНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		
		// DOCKING 497 + 13.04.2023
		//rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("DOCSUM").Value =  СтруктураДокумента.ИтогСумма;
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.Ответственный);
		// DOCKING 497 - 13.04.2023
		
		rsMain.Fields.Item("SUMPDV_TEXT").Value = СтруктураДокумента.ИтогСуммаНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = СтруктураДокумента.СуммаДокумента;
		Попытка
			rsMain.Fields.Item("OTRUMAV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		Исключение
		КонецПопытки;	
		
		Попытка
			rsMain.Fields.Item("DOV_SERIA").Value = СтруктураДокумента.ДоверенностьСерия;
			rsMain.Fields.Item("DOV_NOMER").Value = СтруктураДокумента.ДоверенностьНомер;
			rsMain.Fields.Item("DOV_DATA").Value = ?(СтруктураДокумента.ДоверенностьДата = Дата(1,1,1),"",Формат(СтруктураДокумента.ДоверенностьДата, "ДЛФ = Д"));
		Исключение
		КонецПопытки;
				
		Если Объект.Конфигурация = "УПП" или Объект.Конфигурация = "УТП" Тогда
			rsMain.Fields.Item("VO_NAME").Value = "";
		Иначе 
			rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.Ответственный);
		КонецЕсли;

		
		Если ЗначениеЗаполнено(СтруктураДокумента.Склад) Тогда   
			rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(СтруктураДокумента.Склад);
		КонецЕсли;
		
		//СОФТКОМ Петренко 20.12.17
		
		//Запрос  =  Новый Запрос;
		//Запрос.Текст  =  
		//"ВЫБРАТЬ
		//|	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК Наименование, 
		//|	ВЫБОР
		//|		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		//|			ТОГДА ВозвратТоваровПоставщикуТовары.Цена
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС  =  &Ставка20
		////|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
		//|					ТОГДА ВозвратТоваровПоставщикуТовары.Цена 
		//|				ИНАЧЕ ВозвратТоваровПоставщикуТовары.Цена
		//|			КОНЕЦ
		//|	КОНЕЦ КАК Цена, 
		//|	ВозвратТоваровПоставщикуТовары.Количество, 
		//|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
		//|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК Единица, 
		//|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаБезСкидки
		////|	ВозвратТоваровПоставщикуТовары.СуммаСкидки КАК Скидка
		//|ИЗ
		//|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		//|ГДЕ
		//|	ВозвратТоваровПоставщикуТовары.Ссылка = &Документ ";

		//Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		//Запрос.УстановитьПараметр("Документ",  Документ);			
		//Результат  =  Запрос.Выполнить();
		Результат = СформироватьВозвратТоваровПоставщиков(Документ);

		Контр  =  0;
		Н  =  Результат.Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		//ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//...СОФТКОМ 20.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_MOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_MOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);				   
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
			//rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;  
	КонецПопытки;  
		 	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ВозвратТоваровОтПокупателя(orgId,  Документ,  Бланк,  ИД)
	
	// СОФТКОМ Петренко 18.12.17
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	//...СОФТКОМ Петренко 18.12.17

	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); // СОФТКОМ Петренко 18.12.17
		
		СведенияОПокупателе =  СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);

		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		//СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтруктураДокумента.Контрагент, СтруктураДокумента.Дата,,,КодЯзыкаПечать);
	    ДатаДокумента =СтруктураДокумента.Дата;
		
		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		//СведенияОПоставщике  =  БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтруктураДокумента.Контрагент, СтруктураДокумента.Дата,,,КодЯзыкаПечать);
		//Если ТипЗнч(Документ.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		//	Банк		= Документ.СтруктурнаяЕдиница.Банк;
		//	МФО	 		= Банк.Код;
		//	НомерСчета 	= Документ.СтруктурнаяЕдиница.НомерСчета;
		//Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		//КонецЕсли;
		
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 			
		КонецЕсли;      

		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_TEL_FIZ_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
	    rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			
		rsMain.Fields.Item("SUMPDV").Value = СтруктураДокумента.ИтогСуммаНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("SUMPDV_TEXT").Value = СтруктураДокумента.ИтогСуммаНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = СтруктураДокумента.СуммаДокумента;
		//rsMain.Fields.Item("EMP_NAME").Value = Документ.СуммаДокумента;
				
		//Если ИмяБазы = "УПП" Тогда
		//	rsMain.Fields.Item("OTRUMAV_FIO").Value = "";
		//Иначе 
		//	rsMain.Fields.Item("OTRUMAV_FIO").Value = СокрЛП(Документ.Ответственный);
		//КонецЕсли;

		попытка 
			rsMain.Fields.Item("OTRUMAV_FIO").Value = СокрЛП(СтруктураДокумента.Ответственный);
		Исключение	Конецпопытки;

		rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
		
		Если Объект.Конфигурация ="УПП" или  Объект.Конфигурация ="УТП" тогда 
			
			Если ЗначениеЗаполнено(СтруктураДокумента.СкладОрдер) Тогда   
				rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(СтруктураДокумента.СкладОрдер);
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(СтруктураДокумента.Склад) Тогда   
				rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(СтруктураДокумента.Склад);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Конфигурация  =  "УТП" или Объект.Конфигурация ="УПП" Тогда
			ВыборСкидки = "ПроцентАвтоматическихСкидок";
			ВыборСуммы  =  "Сумма";
		//14.01.2022 + DOCKING 368		
		ИначеЕсли Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда	
			ВыборСуммы  =  "Сумма";
			ВыборСкидки = "СуммаСкидки";
		//14.01.2022 - DOCKING 368	
		Иначе
			ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";    
		КонецЕсли; 
        // СОФТКОМ Петренко 20.12.17
		
		//Запрос  =  Новый Запрос;
		//Запрос.Текст  =  
		//"ВЫБРАТЬ
		//|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК Наименование, 
		//|	ВЫБОР
		//|		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		//|			ТОГДА ВозвратТоваровОтПокупателяТовары.Цена
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС  =  &Ставка20
		////|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
		//|					ТОГДА ВозвратТоваровОтПокупателяТовары.Цена 
		//|				ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Цена
		//|			КОНЕЦ
		//|	КОНЕЦ КАК Цена, 
		//|	ВозвратТоваровОтПокупателяТовары.Количество, 
		////|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
		//|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК Единица, 
		//|	ВозвратТоваровОтПокупателяТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
		//|	ВозвратТоваровОтПокупателяТовары."+ВыборСкидки+" КАК Скидка
		//|ИЗ
		//|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		//|ГДЕ
		//|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Документ";
		//
		//Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		//Запрос.УстановитьПараметр("Документ",  Документ);			
		//Результат  =  Запрос.Выполнить();
		Результат = СформироватьВозвратТоваровОтПокупателя(ВыборСуммы,ВыборСкидки,Документ);
		Контр  =  0;
		Н  =  Результат.Количество(); 		
		rsMain.Fields.Item("KVO").Value = Н;
		
		//ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 
		//...СОФТКОМ Петренко 20.1217	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);				   
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
			//rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;  
	КонецПопытки;  
		 	
КонецПроцедуры

&НаКлиенте	
Процедура Формирование_Акт(orgId,  Документ,  Бланк,  ИД)
	
	Перем РуководителиКонтрагента, ДолжностьРуководителяКонтрагента;
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); // СОФТКОМ Петренко 18.12.17
		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		// 14.02.2021 + DOCKING 368
		//РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТЗ = ПолучитьКонтактноеЛицоКонтрагентаПоУмолчанию(ОбъектКонтрагентДокумент(Документ));
			//ТЗ.Свойство("Лицо",РуководителиКонтрагента);
			//ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			// 27.04.2022 + DOCKING 396
			Если НЕ ЗначениеЗаполнено(ТЗ) Тогда
				РуководителиКонтрагента = "";
				ДолжностьРуководителяКонтрагента = "";
			Иначе
				ТЗ.Свойство("Лицо",РуководителиКонтрагента);
				ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			КонецЕсли;
			// 27.04.2022 - DOCKING 396
			//ДанныеПредставителя = ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		// DOCKING 459 + 22.11.2022	
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			РуководителиКонтрагента = СтруктураДокумента.РуководителиКонтрагента;
			ДанныеПредставителя = ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Иначе
			РуководителиКонтрагента = РуководителиКонтрагента(Документ);
			//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		// DOCKING 459 - 22.11.2022	
		КонецЕсли;
		// 14.02.2021 - DOCKING 368		
		
		// DOCKING 699 + 15.04.2024	
		Если ЗначениеЗаполнено(СтруктураДокумента.БанковскийСчетОрганизации) Тогда
			//Если НЕ ЗначениеЗаполнено(СтруктураДокумента.Банк) Тогда 
			Банк		= СтруктураДокумента.БанковскийСчетОрганизации;
				//МФО	 		= СтруктураДокумента.БанкКод2;
			//Иначе
			//	Банк		= СтруктураДокумента.Банк;
			МФО	 		= СтруктураДокумента.БанкКод;
			//КонецЕсли;	
			НомерСчета 	= СтруктураДокумента.БанковскийСчетОрганизацииНомерСчета;
		Иначе
		// DOCKING 699 - 15.04.2024		
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
		
        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value = "код за ДРФО";
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value = "код за ЄДРПОУ"; 
		КонецЕсли;
		
		Если Объект.Конфигурация = "SB" Тогда
			rsMain.Fields.Item("OSN_T").Value  =  "";
			rsMain.Fields.Item("OSN_TIP").Value  =  ""; 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  "";
			rsMain.Fields.Item("OSN_NOMER").Value  =  "";
			rsMain.Fields.Item("OSN_DATA_T").Value  =  ""; 
			rsMain.Fields.Item("OSN_DATA").Value  =  ""; 
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураДокумента.ДокументРасчетов) Тогда
				rsMain.Fields.Item("OSN_T").Value  =  Строка("Розр.док.:");
				rsMain.Fields.Item("OSN_TIP").Value  =  ОпределитьДокументРасчетов(СтруктураДокумента.НаименованиеДокументаРасчетов); 
				rsMain.Fields.Item("OSN_NUM_T").Value  =  Строка("№");
				rsMain.Fields.Item("OSN_NOMER").Value  =  СтруктураДокумента.НомерДокументаРасчетов;
				rsMain.Fields.Item("OSN_DATA_T").Value  =  Строка("від");  
				rsMain.Fields.Item("OSN_DATA").Value  =  Формат(СтруктураДокумента.ДатаДокументаРасчетов, "ДЛФ = Д"); 
			Иначе
				rsMain.Fields.Item("OSN_T").Value  =  "";
				rsMain.Fields.Item("OSN_TIP").Value  =  ""; 
				rsMain.Fields.Item("OSN_NUM_T").Value  =  "";
				rsMain.Fields.Item("OSN_NOMER").Value  =  "";
				rsMain.Fields.Item("OSN_DATA_T").Value  =  ""; 
				rsMain.Fields.Item("OSN_DATA").Value  =  ""; 
			КонецЕсли; 
			
		КонецЕсли; 	
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
			Если ЗначениеЗаполнено(СтруктураДокумента.Договор) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					 Если НЕ (ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) 
						И ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) )
						Тогда					
						rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
						rsMain.Fields.Item("DOG_NUM_T").Value = "";
						rsMain.Fields.Item("DOG_DATA_T").Value = "";
					КонецЕсли;
					 // 06.06.2022 + DOCKING 414
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) Тогда
						rsMain.Fields.Item("DOG_NUM_T").Value = "№";
				    	rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) Тогда
						rsMain.Fields.Item("DOG_DATA_T").Value = "від";
					    rsMain.Fields.Item("DOG_DATE").Value =  Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
					КонецЕсли;
					// 06.06.2022 - DOCKING 414
				Иначе
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНомер) Тогда
						rsMain.Fields.Item("DOG_NUM_T").Value = "№";
				    	rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорНомер);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорДата) Тогда
						rsMain.Fields.Item("DOG_DATA_T").Value = "від";
					    rsMain.Fields.Item("DOG_DATE").Value =  Формат(СтруктураДокумента.ДоговорДата,  "ДЛФ = Д");
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
				rsMain.Fields.Item("DOG_NUM_T").Value = "";
				rsMain.Fields.Item("DOG_DATA_T").Value = "";
			КонецЕсли;
		// 14.02.2021 - DOCKING 368	
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					Если НЕ (ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) 
						И ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) )
						Тогда					
						rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
						rsMain.Fields.Item("DOG_NUM_T").Value = "";
						rsMain.Fields.Item("DOG_DATA_T").Value = "";
					КонецЕсли;
					// 06.06.2022 + DOCKING 414
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) Тогда
						rsMain.Fields.Item("DOG_NUM_T").Value = "№";
				    	rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) Тогда
						rsMain.Fields.Item("DOG_DATA_T").Value = "від";
					    rsMain.Fields.Item("DOG_DATE").Value =  Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
					КонецЕсли;
					// 06.06.2022 - DOCKING 414					
				Иначе
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) Тогда
						rsMain.Fields.Item("DOG_NUM_T").Value = "№";
				    	rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) Тогда
						rsMain.Fields.Item("DOG_DATA_T").Value = "від";
					    rsMain.Fields.Item("DOG_DATE").Value =  Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
				rsMain.Fields.Item("DOG_NUM_T").Value = "";
				rsMain.Fields.Item("DOG_DATA_T").Value = "";
			КонецЕсли;
		
		КонецЕсли;
	

		Если Объект.Конфигурация = "SB" Тогда
			
			Если Бланк = "1САКТ"  Тогда
				rsMain.Fields.Item("TSPDV").Value  = "Ставка ПДВ";
				rsMain.Fields.Item("TSUMPDV").Value  = "Сума ПДВ";
			ИначеЕсли  Бланк = "1САКТ0" Тогда
				rsMain.Fields.Item("STAVKAPDV_TEXT").Value  = "Ставка ПДВ";
				rsMain.Fields.Item("PDV_TEXT").Value  = "Сума ПДВ";
			КонецЕсли;
		
		Иначе         
			
			Если Бланк = "1С82АВР0" или  Бланк = "1С82АВР" Тогда
				rsMain.Fields.Item("SO").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
				// - DOCKING-277 27.07.2021
			ИначеЕсли Бланк = "1САКТ"  Тогда
				rsMain.Fields.Item("TSPDV").Value  = "Ставка ПДВ";
				rsMain.Fields.Item("TSUMPDV").Value  = "Сума ПДВ";
			ИначеЕсли  Бланк = "1САКТ0" Тогда
				rsMain.Fields.Item("STAVKAPDV_TEXT").Value  = "Ставка ПДВ";
				rsMain.Fields.Item("PDV_TEXT").Value  = "Сума ПДВ";
			Иначе
				// + DOCKING-277 27.07.2021	
				rsMain.Fields.Item("TAXSYSTEM").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
			КонецЕсли;
			
		КонецЕсли;		
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		попытка
		rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
		исключение конецпопытки;
		
		rsMain.Fields.Item("DATA1").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		rsMain.Fields.Item("DATA2").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ"); 
		
		
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ДолжностьРуководителяКонтрагента;
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента);
			
		Иначе	
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
			
		КонецЕсли;	
			
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		Если НЕ Объект.Конфигурация = "SB" Тогда
			rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала;
		КонецЕсли;	
		 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		// 14.02.2021 + DOCKING 368
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Иначе
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//КонецЕсли;
		// 14.02.2021 - DOCKING 368
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		// 07.06.2022 + DOCKING 408
		
		Если НЕ (
			Объект.Конфигурация = "SB" 
			ИЛИ Объект.Конфигурация = "КУП" 
			ИЛИ Объект.Конфигурация = "ERP"	
			)
			Тогда
			Если (Бланк = "1С82АВР0" ИЛИ Бланк = "1С82АВРБ") 
				И НЕ ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
				Тогда
				ИтогСуммаСкидки = СтруктураДокумента.ИтогСкидка2;
				rsMain.Fields.Item("ZNYGKA").Value = ИтогСуммаСкидки;
			КонецЕсли;
		// 07.06.2022 - DOCKING 408	
		Иначе
			Если (Бланк = "1С82АВР0" ИЛИ Бланк = "1С82АВРБ") Тогда
				ИтогСуммаСкидки = СтруктураДокумента.ИтогСкидка2;
				rsMain.Fields.Item("ZNYGKA").Value = ИтогСуммаСкидки;
			КонецЕсли;	
		КонецЕсли;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если Объект.Конфигурация = "УТП" Тогда
			ЕдиницаВПроизводстве = """грн.""";
		ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ЕдиницаВПроизводстве = "АктВыполненныхРаботУслуги.Номенклатура.ЕдиницаИзмерения"
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			ЕдиницаВПроизводстве = "АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения"
		Иначе
			ЕдиницаВПроизводстве = "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		// - DOCKING-277 27.07.2021
		Если Бланк = "1САКТ" или  Бланк = "1САКТ0" Тогда
			Результат = СформироватьАктУслугЕслиЕстьНДС0(ЕдиницаВПроизводстве,Документ);
		Иначе
			Результат = СформироватьАктУслуг(ЕдиницаВПроизводстве,Документ);
		КонецЕсли;     	

		// + DOCKING-277 27.07.2021
		
		Н  =  Результат.Количество();		
		
		rsMain = Doc.DataSets("TAB1"); 	
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 	
			//...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)); //Номенклатура
			
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = ЕдиницаИзмерения;
			
			Try
				БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			Except
			EndTry;
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;

			// 14.02.2022 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			Иначе
			// 14.02.2022 - DOCKING 368	
			
				// 07.06.2022 + DOCKING 408
				Если Бланк = "1С82АВР0" Тогда
					rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.СуммаСкидки;
				КонецЕсли;
				// 07.06.2022 - DOCKING 408			
				
			Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			КонецЕсли;	
			
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			// - DOCKING-277 27.07.2021
			Если Бланк = "1САКТ" или Бланк = "1САКТ0" 
				// 27.06.2022 + DOCKING 403
				ИЛИ Бланк = "1С82АВР" // или Бланк = "1С77АВР"
				// 27.06.2022 - DOCKING 403
				Тогда
				//rsMain.Fields.Item("TAB1_STAVKAPDV").Value = ВернутьПроцентСтавкиНДС(ВыборкаДетальныеЗаписи.СтавкаНДС);
				Если Объект.Конфигурация = "SB" Тогда
					rsMain.Fields.Item("TAB1_STAVKAPDV").Value = ВернутьПроцентСтавкиНДС_SB(ВыборкаДетальныеЗаписи.СтавкаНДС);
				Иначе
					rsMain.Fields.Item("TAB1_STAVKAPDV").Value = ВернутьПроцентСтавкиНДС(ВыборкаДетальныеЗаписи.СтавкаНДС);
				КонецЕсли;
				
				rsMain.Fields.Item("TAB1_SUMPDV").Value = ВыборкаДетальныеЗаписи.СуммаНДС;
			КонецЕсли;
			// + DOCKING-277 27.07.2021
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		Иначе
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 

// - DOCKING-277 27.07.2021
&НаСервереБезКонтекста
Функция ВернутьПроцентСтавкиНДС(текСтавкаНДС)
	
	Если ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0")  = текСтавкаНДС Тогда
		ТакойПроцентСтавки = 0;
	ИначеЕсли ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7")= текСтавкаНДС Тогда	
		ТакойПроцентСтавки = 7;
	ИначеЕсли ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14") = текСтавкаНДС Тогда	
		ТакойПроцентСтавки = 14;
	ИначеЕсли ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") = текСтавкаНДС Тогда	
		ТакойПроцентСтавки = 20;
	Иначе
		ТакойПроцентСтавки = 0;
	КонецЕсли;
	
	Возврат ТакойПроцентСтавки	    
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьПроцентСтавкиНДС_SB(текСтавкаНДС)
	
	Если Справочники.СтавкиНДС.НайтиПоНаименованию("0%")  = текСтавкаНДС Тогда
		ТакойПроцентСтавки = 0;
	ИначеЕсли Справочники.СтавкиНДС.НайтиПоНаименованию("7%")= текСтавкаНДС Тогда	
		ТакойПроцентСтавки = 7;
	ИначеЕсли Справочники.СтавкиНДС.НайтиПоНаименованию("14%") = текСтавкаНДС Тогда	
		ТакойПроцентСтавки = 14;
	ИначеЕсли Справочники.СтавкиНДС.НайтиПоНаименованию("20%") = текСтавкаНДС Тогда	
		ТакойПроцентСтавки = 20;
	Иначе
		ТакойПроцентСтавки = 0;
	КонецЕсли;
	
	
	Возврат ТакойПроцентСтавки	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьПроцентВидыСтавкиНДС(текСтавкаНДС)
	
	Если Справочники.СтавкиНДС.НайтиПоНаименованию("0%")  = текСтавкаНДС Тогда
		ТакойПроцентСтавки = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Нулевая");
	ИначеЕсли Справочники.СтавкиНДС.НайтиПоНаименованию("7%")= текСтавкаНДС Тогда	
		ТакойПроцентСтавки = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Пониженная");
	ИначеЕсли Справочники.СтавкиНДС.НайтиПоНаименованию("14%") = текСтавкаНДС Тогда	
		ТакойПроцентСтавки = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Пониженная14");
	ИначеЕсли Справочники.СтавкиНДС.НайтиПоНаименованию("20%") = текСтавкаНДС Тогда	
		ТакойПроцентСтавки = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Общая");
	Иначе
		ТакойПроцентСтавки = ПредопределенноеЗначение("Перечисление.ВидыСтавокНДС.Нулевая");
	КонецЕсли;
	
	
	Возврат ТакойПроцентСтавки	
КонецФункции

&НаСервере
Функция СформироватьАктУслугЕслиЕстьНДС0(ЕдиницаВПроизводстве,Документ)
	
	// 14.02.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	АктВыполненныхРаботУслуги.Номенклатура.Код как КодНоменклатуры,	
		|	АктВыполненныхРаботУслуги.Содержание как Наименование, 
		|	АктВыполненныхРаботУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботУслуги.Ссылка.ЦенаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктВыполненныхРаботУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктВыполненныхРаботУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктВыполненныхРаботУслуги.Цена  / 1.2
		|				ИНАЧЕ АктВыполненныхРаботУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктВыполненныхРаботУслуги.Цена, 
		|	АктВыполненныхРаботУслуги.Количество, 
		|	АктВыполненныхРаботУслуги.СтавкаНДС, 
		|	АктВыполненныхРаботУслуги.СуммаНДС,
		|	"+ЕдиницаВПроизводстве+", 
		|	АктВыполненныхРаботУслуги.Сумма
		|ИЗ
		|	Документ.АктВыполненныхРабот.Услуги КАК АктВыполненныхРаботУслуги
		|ГДЕ
		|	АктВыполненныхРаботУслуги.Ссылка  =  &Документ";
		
	ИначеЕсли  Объект.Конфигурация = "SB" Тогда
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.Код как КодНоменклатуры,	
		|	АктВыполненныхРаботРаботыИУслуги.Содержание как Наименование, 
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктВыполненныхРаботРаботыИУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктВыполненныхРаботРаботыИУслуги.Цена  / 1.2
		|				ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктВыполненныхРаботРаботыИУслуги.Цена, 
		|	АктВыполненныхРаботРаботыИУслуги.Количество, 
		|	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС, 
		|	АктВыполненныхРаботРаботыИУслуги.СуммаНДС,
		|	"+ЕдиницаВПроизводстве+", 
		|	АктВыполненныхРаботРаботыИУслуги.Сумма
		|ИЗ
		|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
		|ГДЕ
		|	АктВыполненныхРаботРаботыИУслуги.Ссылка  =  &Документ";

		
	Иначе
	// 14.02.2022 - DOCKING 368		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура.Код как КодНоменклатуры,
		|	РеализацияТоваровУслугУслуги.Содержание как Наименование, 
		|	РеализацияТоваровУслугУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	РеализацияТоваровУслугУслуги.Цена, 
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	""шт"" как Единица, 
		|	РеализацияТоваровУслугУслуги.Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Код как КодНоменклатуры,	
		|	АктОбОказанииПроизводственныхУслугУслуги.Содержание как Наименование, 
		|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА АктОбОказанииПроизводственныхУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена  / 1.2
		|				ИНАЧЕ АктОбОказанииПроизводственныхУслугУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктОбОказанииПроизводственныхУслугУслуги.Цена, 
		|	АктОбОказанииПроизводственныхУслугУслуги.Количество, 
		|	АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС, 
		|	АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС,
		|	"+ЕдиницаВПроизводстве+", 
		|	АктОбОказанииПроизводственныхУслугУслуги.Сумма
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
		|ГДЕ
		|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка  =  &Документ";
		
	КонецЕсли;
	
	// DOCKING 459 + 28.11.2022
	//Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Если Объект.Конфигурация = "SB" Тогда
		Запрос.УстановитьПараметр("Ставка20",  Справочники.СтавкиНДС.НайтиПоНаименованию("20%"));		
	Иначе
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	КонецЕсли;
	// DOCKING 459 - 28.11.2022
	Запрос.УстановитьПараметр("Документ",  Документ);  
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции

// + DOCKING-277 27.07.2021

Функция ОпределитьДокументРасчетов(НаименованиеДокументаРасчетов)
	Если Найти(НаименованиеДокументаРасчетов, "Счет") Тогда
		НаименованиеДокументаРасчетов = "Рахунок на оплату покупцю";
	ИначеЕсли  Найти(НаименованиеДокументаРасчетов, "Документ расчетов") Тогда
		НаименованиеДокументаРасчетов = "Документ розрахунків з контрагентом (ручний облік)";
	ИначеЕсли  Найти(НаименованиеДокументаРасчетов, "Заказ") Тогда
		НаименованиеДокументаРасчетов = "Замовлення покупця";
	ИначеЕсли  Найти(НаименованиеДокументаРасчетов, "Реализация") Тогда
		НаименованиеДокументаРасчетов = "Реалізація товарів і послуг";
	ИначеЕсли  Найти(НаименованиеДокументаРасчетов, "Акт") Тогда
		НаименованиеДокументаРасчетов = "Акт про надання виробничих послуг";
	КонецЕсли;
	
	Возврат НаименованиеДокументаРасчетов	
КонецФункции

&НаКлиенте	
Процедура Формирование_АктСвойШаблон(orgId,  Документ,  Бланк,  ИД)
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); // СОФТКОМ Петренко 18.12.17
		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		
		// DOCKING 459 + 22.11.2022
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация <> "SB" Тогда
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;	
		// DOCKING 459 - 22.11.2022
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value = "код за ДРФО";
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value = "код за ЄДРПОУ"; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДокумента.Сделка) Тогда
			rsMain.Fields.Item("OSN_T").Value  =  Строка("Розр.док.:");
			rsMain.Fields.Item("OSN_TIP").Value  =  Строка("Рахунок на оплату покупцю"); 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  Строка("№");
			НомерБезПрефикса = ПолучитьНомерБезНулей(СтруктураДокумента.Сделка); 
			rsMain.Fields.Item("OSN_NOMER").Value  =  НомерБезПрефикса;
			rsMain.Fields.Item("OSN_DATA_T").Value  =  Строка("від");
			rsMain.Fields.Item("OSN_DATA").Value  =  Дата(СтруктураДокумента.СделкаДата); 
		Иначе
			rsMain.Fields.Item("OSN_T").Value  =  "";
			rsMain.Fields.Item("OSN_TIP").Value  =  ""; 
			rsMain.Fields.Item("OSN_NUM_T").Value  =  "";
			rsMain.Fields.Item("OSN_NOMER").Value  =  "";
			rsMain.Fields.Item("OSN_DATA_T").Value  =  ""; 
			rsMain.Fields.Item("OSN_DATA").Value  =  ""; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
			rsMain.Fields.Item("DOG_NUM_T").Value = "№";
			rsMain.Fields.Item("DOG_DATA_T").Value = "від";     
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			//rsMain.Fields.Item("OSN_TIP").Value = СтруктураДокумента.НаименованиеДляПечати;                      
		Иначе
			rsMain.Fields.Item("DOG_NUM_T").Value = "";
			rsMain.Fields.Item("DOG_DATA_T").Value = "";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
		
		rsMain.Fields.Item("DATA1").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		rsMain.Fields.Item("DATA2").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ"); 
		
		rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
		rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		Иначе
			ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		КонецЕсли;
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		//rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если Объект.Конфигурация = "УТП" Тогда
			ЕдиницаВПроизводстве = """грн.""";
		Иначе
			ЕдиницаВПроизводстве = "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		
		// СОФТКОМ Петренко 18.12.17
		Результат = СформироватьАктУслуг(ЕдиницаВПроизводстве,Документ);
		Н  =  Результат.Количество();		
		// СОФТКОМ Петренко 18.12.17
		
		rsMain = Doc.DataSets("TAB1"); 	
		// СОФТКОМ Петренко 18.12.17
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 	
			//...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = ЕдиницаИзмерения;
			
			Try
				БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			Except
			EndTry;
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;	
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 	

&НаКлиенте	
Процедура Формирование_АктСвойШаблон_NST_ACT(orgId,  Документ,  Бланк,  ИД)
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		
		// DOCKING 459 + 22.11.2022
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация <> "SB" Тогда
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;
		// DOCKING 459 - 22.11.2022
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
    
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
				Если ЗначениеЗаполнено (СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати)) Тогда
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
				Иначе
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
				КонецЕсли;
        КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
		
		rsMain.Fields.Item("DATA1").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		rsMain.Fields.Item("DATA2").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ"); 
		
		rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
		rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		Иначе
			ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		КонецЕсли;
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если Объект.Конфигурация = "УТП" Тогда
			ЕдиницаВПроизводстве = """грн.""";
		Иначе
			ЕдиницаВПроизводстве = "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		
		Результат = СформироватьАктУслуг(ЕдиницаВПроизводстве,Документ);
		Н  =  Результат.Количество();		
		
		rsMain = Doc.DataSets("TAB1"); 	

		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_F2").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)); //Номенклатура
			rsMain.Fields.Item("TAB1_F3").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;	
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 

&НаКлиенте	
Процедура Формирование_АктСвойШаблон_ACT_LKV(orgId,  Документ,  Бланк,  ИД)
	
	Перем РуководителиКонтрагента, ДолжностьРуководителяКонтрагента;
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); // СОФТКОМ Петренко 18.12.17
		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		// 14.02.2021 + DOCKING 368
		//РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТЗ = ПолучитьКонтактноеЛицоКонтрагентаПоУмолчанию(ОбъектКонтрагентДокумент(Документ));
			//ТЗ.Свойство("Лицо",РуководителиКонтрагента);
			//ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			// 27.04.2022 + DOCKING 396
			Если НЕ ЗначениеЗаполнено(ТЗ) Тогда
				РуководителиКонтрагента = "";
				ДолжностьРуководителяКонтрагента = "";
			Иначе
				ТЗ.Свойство("Лицо",РуководителиКонтрагента);
				ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			КонецЕсли;
			// 27.04.2022 - DOCKING 396
			ДанныеПредставителя = ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Иначе
			РуководителиКонтрагента = РуководителиКонтрагента(Документ);
			//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;
		// 14.02.2021 - DOCKING 368		
		
		
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДокумента.ДокументРасчетов) Тогда
			OSN_T  		=  Строка("Розр.док.:");
			OSN_TIP  	=  ОпределитьДокументРасчетов(СтруктураДокумента.НаименованиеДокументаРасчетов); 
			OSN_NUM_T   =  Строка("№");
			OSN_NOMER   =  СтруктураДокумента.НомерДокументаРасчетов;
			OSN_DATA_T  =  Строка("від");  
			OSN_DATA    =  Формат(СтруктураДокумента.ДатаДокументаРасчетов, "ДЛФ = Д");
			
			rsMain.Fields.Item("ORDER_NAME").Value  =  Строка(OSN_T+" "+OSN_TIP+" "+OSN_NUM_T+" "+OSN_NOMER+" "+OSN_DATA_T+" "+OSN_DATA);			
		Иначе
			rsMain.Fields.Item("ORDER_NAME").Value  =  "";
		КонецЕсли; 
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Если ЗначениеЗаполнено(СтруктураДокумента.Договор) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					 rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
				Иначе
					D_NAME = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНомер) Тогда
						DOG_NUM_T = "№";
				    	DOG_NUM   = СокрЛП(СтруктураДокумента.ДоговорНомер);
						D_NAME = СокрЛП(СокрЛП(СтруктураДокумента.ДоговорНаименование)+" "+DOG_NUM_T+" "+DOG_NUM);
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорДата) Тогда
						DOG_DATA_T = "від";
					    DOG_DATE =  Формат(СтруктураДокумента.ДоговорДата,  "ДЛФ = Д");
						D_NAME = D_NAME + " " + DOG_DATA_T + " " + DOG_DATE;
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
			КонецЕсли;
		// 14.02.2021 - DOCKING 368	
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					 rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
				Иначе
					D_NAME = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) Тогда
						DOG_NUM_T = "№";
				    	DOG_NUM = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
						D_NAME = СокрЛП(СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати)+" "+DOG_NUM_T+" "+DOG_NUM);
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) Тогда
						DOG_DATA_T = "від";
					    DOG_DATE =  Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
						D_NAME = D_NAME + " " + DOG_DATA_T + " " + DOG_DATE;
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
			КонецЕсли;
		
		КонецЕсли;
	

		//Если Бланк = "1С82АВР0" или  Бланк = "1С82АВР" Тогда
		//	rsMain.Fields.Item("SO").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
		//	// - DOCKING-277 27.07.2021
		//ИначеЕсли Бланк = "1САКТ"  Тогда
		//	rsMain.Fields.Item("TSPDV").Value  = "Ставка ПДВ";
		//	rsMain.Fields.Item("TSUMPDV").Value  = "Сума ПДВ";
		//ИначеЕсли  Бланк = "1САКТ0" Тогда
		//	rsMain.Fields.Item("STAVKAPDV_TEXT").Value  = "Ставка ПДВ";
		//	rsMain.Fields.Item("PDV_TEXT").Value  = "Сума ПДВ";
		//Иначе
		//	// + DOCKING-277 27.07.2021	
		//	rsMain.Fields.Item("TAXSYSTEM").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
		//КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		//rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		попытка
		rsMain.Fields.Item("VO_POS").Value = СокрЛП(ДанныеПредставителя.Должность);
		исключение конецпопытки;
		
		rsMain.Fields.Item("DATE_DOC").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ДолжностьРуководителяКонтрагента;
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента);
			
		Иначе	
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		КонецЕсли;	
			
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			//rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			//rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		// 14.02.2021 + DOCKING 368
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Иначе
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//КонецЕсли;
		// 14.02.2021 - DOCKING 368
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если Объект.Конфигурация = "УТП" Тогда
			ЕдиницаВПроизводстве = """грн.""";
		ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ЕдиницаВПроизводстве = "АктВыполненныхРаботУслуги.Номенклатура.ЕдиницаИзмерения"	
		Иначе
			ЕдиницаВПроизводстве = "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		// - DOCKING-277 27.07.2021
		Если Бланк = "1САКТ" или  Бланк = "1САКТ0" Тогда
			Результат = СформироватьАктУслугЕслиЕстьНДС0(ЕдиницаВПроизводстве,Документ);
		Иначе
			Результат = СформироватьАктУслуг(ЕдиницаВПроизводстве,Документ);
		КонецЕсли;     	

		// + DOCKING-277 27.07.2021
		
		Н  =  Результат.Количество();		
		
		rsMain = Doc.DataSets("TAB1"); 	
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 	
			//...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_F2").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)); //Номенклатура
			
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения;
			
			//Try
			//	БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//	rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			//Except
			//EndTry;
			rsMain.Fields.Item("TAB1_F3").Value = ВыборкаДетальныеЗаписи.Количество;

			// 14.02.2022 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			Иначе
			// 14.02.2022 - DOCKING 368	
				Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			КонецЕсли;	
			
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		Иначе
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 

&НаКлиенте
Процедура Формирование_СчетСвойШаблон_RAH_LKV(orgId,  Документ,  Бланк,  ИД)  		  
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();

	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПокупателе =  СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
	    СведенияОПоставщике =  СведенияОПоставщике(Документ, КодЯзыкаПечать);	
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ);
		
		Если ЗначениеЗаполнено(СтруктураДокумента.СтруктурнаяЕдиница) Тогда
			Банк		= СтруктураДокумента.БанкЕд;
			МФО	 		= СтруктураДокумента.БанкКодЕд;
			НомерСчета 	= СтруктураДокумента.НомерСчетаЕд;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;      
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		//rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		//Если ИмяБазы = "УправлениеПроизводственнымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента);
		//ИначеЕсли ИмяБазы = "УправлениеТорговымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//ИначеЕсли ИмяБазы = "УТ" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//Иначе 
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			DOG_NUM_T = "№";  
			DOG_NUM = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			DOG_DATA_T = "від";
			DOG_DATE = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			rsMain.Fields.Item("DOG_NAME").Value = СокрЛП( DOG_NUM_T+" "+DOG_NUM+" "+DOG_DATA_T+" "+DOG_DATE);
		Иначе
			rsMain.Fields.Item("DOG_NAME").Value = "";  
		КонецЕсли;
		
		rsMain.Fields.Item("VO_NAME").Value  =  СокрЛП(СтруктураДокумента.ФизЛицо);
		
		rsMain.Fields.Item("AUTO").Value  =  СокрЛП(СтруктураДокумента.Автомобиль);
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		
		Если Объект.Конфигурация  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли Объект.Конфигурация = "УПП" Тогда
			ИтогСкидка = СтруктураДокумента.ИтогСкидка;
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			ИтогСкидка  =  0;
		Иначе
			ИтогСкидка  =  СтруктураДокумента.ИтогСкидка;
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;   	
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = ИтогСуммаСНДС;   
		//rsMain.Fields.Item("ZNYGKA").Value =  ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;   
		
		rsMain.Post(); 	
		Если Объект.Конфигурация  =  "УТП" Тогда
			ВыборСкидки = "ПроцентСкидкиНаценки";
			ВыборСуммы  =  "Сумма";
		ИначеЕсли Объект.Конфигурация = "УПП" Тогда
			ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			ВыборСуммы  =  "Сумма";  
			ВыборСкидки = "ПроцентСкидкиНаценки";
		Иначе
			ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";    
		КонецЕсли;              
				
		Результат = СформироватьСчетПокупателя(ВыборСуммы,ВыборСкидки,Документ);

		Контр  =  0;
		Н  =  Результат.Количество(); 		
	
		rsMain.Fields.Item("KVO").Value = Н;

		//ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_F2").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения;
			
			//rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);	
			//rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = СокрЛП(Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)).БазоваяЕдиницаИзмерения.Код);
			//БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			rsMain.Fields.Item("TAB1_F3").Value = ВыборкаДетальныеЗаписи.Количество;
			
			//12.01.2022 + DOCKING 368	
			Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.Цена;
				
				rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.Сумма;
				
			Иначе
			//12.01.2022 - DOCKING 368		
				rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				// БВА 24052021
				Если  ВыборкаДетальныеЗаписи.СуммаБезСкидки > 0 Тогда
					rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				Иначе
					rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.Сумма;
				КонецЕсли;
			КонецЕсли;
			

			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;  
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте	
Процедура Формирование_АктСвойШаблон_TRANS_AC(orgId,  Документ,  Бланк,  ИД)
	
	Перем РуководителиКонтрагента, ДолжностьРуководителяКонтрагента;
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); // СОФТКОМ Петренко 18.12.17
		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		// 14.02.2021 + DOCKING 368
		//РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТЗ = ПолучитьКонтактноеЛицоКонтрагентаПоУмолчанию(ОбъектКонтрагентДокумент(Документ));
			//ТЗ.Свойство("Лицо",РуководителиКонтрагента);
			//ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			// 27.04.2022 + DOCKING 396
			Если НЕ ЗначениеЗаполнено(ТЗ) Тогда
				РуководителиКонтрагента = "";
				ДолжностьРуководителяКонтрагента = "";
			Иначе
				ТЗ.Свойство("Лицо",РуководителиКонтрагента);
				ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			КонецЕсли;
			// 27.04.2022 - DOCKING 396
			ДанныеПредставителя = ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Иначе
			РуководителиКонтрагента = РуководителиКонтрагента(Документ);
			//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;
		// 14.02.2021 - DOCKING 368		
		
		
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;
		
		Попытка
			rsMain.Fields.Item("AUTO").Value = СтруктураДокумента.Автомобиль;
		Исключение КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("RECOMMENDATIONS").Value = СтруктураДокумента.Рекомендации;
		Исключение КонецПопытки;
		
			
		
		Если ЗначениеЗаполнено(СтруктураДокумента.ДокументРасчетов) Тогда
			OSN_T  		=  Строка("Розр.док.:");
			OSN_TIP  	=  ОпределитьДокументРасчетов(СтруктураДокумента.НаименованиеДокументаРасчетов); 
			OSN_NUM_T   =  Строка("№");
			OSN_NOMER   =  СтруктураДокумента.НомерДокументаРасчетов;
			OSN_DATA_T  =  Строка("від");  
			OSN_DATA    =  Формат(СтруктураДокумента.ДатаДокументаРасчетов, "ДЛФ = Д");
			
			rsMain.Fields.Item("ORDER").Value  =  Строка(OSN_TIP+" "+OSN_NUM_T+" "+OSN_NOMER+" "+OSN_DATA_T+" "+OSN_DATA);
			
			
			
		Иначе
			rsMain.Fields.Item("ORDER").Value  =  "";
		КонецЕсли; 
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Если ЗначениеЗаполнено(СтруктураДокумента.Договор) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					 rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
				Иначе
					D_NAME = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНомер) Тогда
						DOG_NUM_T = "№";
				    	DOG_NUM   = СокрЛП(СтруктураДокумента.ДоговорНомер);
						D_NAME = СокрЛП(СокрЛП(СтруктураДокумента.ДоговорНаименование)+" "+DOG_NUM_T+" "+DOG_NUM);
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорДата) Тогда
						DOG_DATA_T = "від";
					    DOG_DATE =  Формат(СтруктураДокумента.ДоговорДата,  "ДЛФ = Д");
						D_NAME = D_NAME + " " + DOG_DATA_T + " " + DOG_DATE;
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
			КонецЕсли;
		// 14.02.2021 - DOCKING 368	
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					 //rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
					 rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
					 rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
				Иначе
					D_NAME = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) Тогда
						DOG_NUM_T = "№";
				    	DOG_NUM = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
						D_NAME = СокрЛП(СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати)+" "+DOG_NUM_T+" "+DOG_NUM);
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
						rsMain.Fields.Item("DOG_NUM").Value = DOG_NUM;
						
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) Тогда
						DOG_DATA_T = "від";
					    DOG_DATE =  Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
						D_NAME = D_NAME + " " + DOG_DATA_T + " " + DOG_DATE;
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
						rsMain.Fields.Item("DOG_DATE").Value = DOG_DATE;
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
			КонецЕсли;
		
		КонецЕсли;
	

		//Если Бланк = "1С82АВР0" или  Бланк = "1С82АВР" Тогда
		//	rsMain.Fields.Item("SO").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
		//	// - DOCKING-277 27.07.2021
		//ИначеЕсли Бланк = "1САКТ"  Тогда
		//	rsMain.Fields.Item("TSPDV").Value  = "Ставка ПДВ";
		//	rsMain.Fields.Item("TSUMPDV").Value  = "Сума ПДВ";
		//ИначеЕсли  Бланк = "1САКТ0" Тогда
		//	rsMain.Fields.Item("STAVKAPDV_TEXT").Value  = "Ставка ПДВ";
		//	rsMain.Fields.Item("PDV_TEXT").Value  = "Сума ПДВ";
		//Иначе
		//	// + DOCKING-277 27.07.2021	
		//	rsMain.Fields.Item("TAXSYSTEM").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
		//КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		//rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		попытка
		rsMain.Fields.Item("VO_POS").Value = СокрЛП(ДанныеПредставителя.Должность);
		исключение конецпопытки;
		
		rsMain.Fields.Item("DOCDATE").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ДолжностьРуководителяКонтрагента;
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента);
			
		Иначе	
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		КонецЕсли;	
			
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			//rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			//rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		// 14.02.2021 + DOCKING 368
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Иначе
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//КонецЕсли;
		// 14.02.2021 - DOCKING 368
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС;
		
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если Объект.Конфигурация = "УТП" Тогда
			ЕдиницаВПроизводстве = """грн.""";
		ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ЕдиницаВПроизводстве = "АктВыполненныхРаботУслуги.Номенклатура.ЕдиницаИзмерения"	
		Иначе
			ЕдиницаВПроизводстве = "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		// - DOCKING-277 27.07.2021
		Если Бланк = "1САКТ" или  Бланк = "1САКТ0" Тогда
			Результат = СформироватьАктУслугЕслиЕстьНДС0(ЕдиницаВПроизводстве,Документ);
		Иначе
			Результат = СформироватьАктУслуг(ЕдиницаВПроизводстве,Документ);
		КонецЕсли;     	

		// + DOCKING-277 27.07.2021
		
		Н  =  Результат.Количество();		
		FIELD1 = 0;
		FIELD2 = 0;
		
		rsMain = Doc.DataSets("TAB1"); 	
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 	
			//...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_FIELD1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_FIELD2").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)); //Номенклатура
			
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_FIELD4").Value = ЕдиницаИзмерения;
			
			//Try
			//	БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//	rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			//Except
			//EndTry;
			rsMain.Fields.Item("TAB1_FIELD3").Value = ВыборкаДетальныеЗаписи.Количество;
			
            rsMain.Fields.Item("TAB1_FIELD5").Value = ВыборкаДетальныеЗаписи.СуммаСкидки;
			// 14.02.2022 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB1_FIELD6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB1_FIELD6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			Иначе
			// 14.02.2022 - DOCKING 368	
				Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB1_FIELD6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB1_FIELD6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			КонецЕсли;	
			
			rsMain.Fields.Item("TAB1_FIELD7").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			FIELD1 = FIELD1 + rsMain.Fields.Item("TAB1_FIELD6").Value;
			FIELD2 = FIELD2 + rsMain.Fields.Item("TAB1_FIELD7").Value;
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		
		rsMain.Fields.Item("FIELD1").Value  =  FIELD1;
		rsMain.Fields.Item("FIELD2").Value  =  FIELD2;
		
		Результат2 = СформироватьАктТоваров(ЕдиницаВПроизводстве,Документ);
		
		
		FIELD3 = 0;
		FIELD4 = 0;
		
		Н2  =  Результат2.Количество();
		Н0  = Н + Н2;
		rsMain.Fields.Item("KVO").Value  =  Н0;
		
		rsMain = Doc.DataSets("TAB2");
		Контр  =  0;
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат2 Цикл 	
			//...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB2_FIELD1").Value = Контр + 1;
			rsMain.Fields.Item("TAB2_FIELD2").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)); //Номенклатура
			
			Try 
				//ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				//
				//Если ЗначениеЗаполнено(ЕдИзм) тогда
				//	ЕдиницаИзмерения = ЕдИзм;
				//Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				//КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB2_FIELD4").Value = ЕдиницаИзмерения;
			
			//Try
			//	БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//	rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			//Except
			//EndTry;
			rsMain.Fields.Item("TAB2_FIELD3").Value = ВыборкаДетальныеЗаписи.Количество;
			
            rsMain.Fields.Item("TAB2_FIELD5").Value = ВыборкаДетальныеЗаписи.СуммаСкидки;
			// 14.02.2022 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB2_FIELD6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB2_FIELD6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			Иначе
			// 14.02.2022 - DOCKING 368	
				Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB2_FIELD6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB2_FIELD6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			КонецЕсли;	
			
			rsMain.Fields.Item("TAB2_FIELD7").Value = ВыборкаДетальныеЗаписи.Сумма;
			
			FIELD3 = FIELD3 + rsMain.Fields.Item("TAB2_FIELD6").Value;
			FIELD4 = FIELD4 + rsMain.Fields.Item("TAB2_FIELD7").Value;
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н2 Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		
		rsMain.Fields.Item("FIELD3").Value  =  FIELD3;
		rsMain.Fields.Item("FIELD4").Value  =  FIELD4;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС + FIELD3;  
			rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
			rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС + FIELD4;
			
			rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС + FIELD3; 
			rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
			rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС + FIELD4;
		КонецЕсли;	
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		Иначе
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 

&НаКлиенте	
Процедура Формирование_АктСвойШаблон_ALD_RAH(orgId,  Документ,  Бланк,  ИД)
	
	Перем РуководителиКонтрагента, ДолжностьРуководителяКонтрагента;
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); // СОФТКОМ Петренко 18.12.17
		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		// 14.02.2021 + DOCKING 368
		//РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТЗ = ПолучитьКонтактноеЛицоКонтрагентаПоУмолчанию(ОбъектКонтрагентДокумент(Документ));
			//ТЗ.Свойство("Лицо",РуководителиКонтрагента);
			//ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			// 27.04.2022 + DOCKING 396
			Если НЕ ЗначениеЗаполнено(ТЗ) Тогда
				РуководителиКонтрагента = "";
				ДолжностьРуководителяКонтрагента = "";
			Иначе
				ТЗ.Свойство("Лицо",РуководителиКонтрагента);
				ТЗ.Свойство("Должность",ДолжностьРуководителяКонтрагента);
			КонецЕсли;
			// 27.04.2022 - DOCKING 396
			ДанныеПредставителя = ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Иначе
			РуководителиКонтрагента = РуководителиКонтрагента(Документ);
			//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;
		// 14.02.2021 - DOCKING 368		
		
		
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;
		
		Попытка
			rsMain.Fields.Item("AUTO").Value = СтруктураДокумента.Автомобиль;
		Исключение КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("RECOMMENDATIONS").Value = СтруктураДокумента.Рекомендации;
		Исключение КонецПопытки;
		
			
		
		//Если ЗначениеЗаполнено(СтруктураДокумента.ДокументРасчетов) Тогда
		//	OSN_T  		=  Строка("Розр.док.:");
		//	OSN_TIP  	=  ОпределитьДокументРасчетов(СтруктураДокумента.НаименованиеДокументаРасчетов); 
		//	OSN_NUM_T   =  Строка("№");
		//	OSN_NOMER   =  СтруктураДокумента.НомерДокументаРасчетов;
		//	OSN_DATA_T  =  Строка("від");  
		//	OSN_DATA    =  Формат(СтруктураДокумента.ДатаДокументаРасчетов, "ДЛФ = Д");
		//	
		//	rsMain.Fields.Item("ORDER").Value  =  Строка(OSN_TIP+" "+OSN_NUM_T+" "+OSN_NOMER+" "+OSN_DATA_T+" "+OSN_DATA);
		//	
		//	
		//	
		//Иначе
		//	rsMain.Fields.Item("ORDER").Value  =  "";
		//КонецЕсли; 
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Если ЗначениеЗаполнено(СтруктураДокумента.Договор) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					 rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
				Иначе
					D_NAME = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНомер) Тогда
						DOG_NUM_T = "№";
				    	DOG_NUM   = СокрЛП(СтруктураДокумента.ДоговорНомер);
						D_NAME = СокрЛП(СокрЛП(СтруктураДокумента.ДоговорНаименование)+" "+DOG_NUM_T+" "+DOG_NUM);
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорДата) Тогда
						DOG_DATA_T = "від";
					    DOG_DATE =  Формат(СтруктураДокумента.ДоговорДата,  "ДЛФ = Д");
						D_NAME = D_NAME + " " + DOG_DATA_T + " " + DOG_DATE;
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
			КонецЕсли;
		// 14.02.2021 - DOCKING 368	
		Иначе
			
			Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорНаименованиеДляПечати) Тогда
					 //rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
					 rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
					 rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
				Иначе
					D_NAME = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) Тогда
						DOG_NUM_T = "№";
				    	DOG_NUM = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
						D_NAME = СокрЛП(СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати)+" "+DOG_NUM_T+" "+DOG_NUM);
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
						rsMain.Fields.Item("DOG_NUM").Value = DOG_NUM;
						
					КонецЕсли;
					Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) Тогда
						DOG_DATA_T = "від";
					    DOG_DATE =  Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
						D_NAME = D_NAME + " " + DOG_DATA_T + " " + DOG_DATE;
						rsMain.Fields.Item("DOG_NAME").Value = D_NAME;
						rsMain.Fields.Item("DOG_DATE").Value = DOG_DATE;
					КонецЕсли;	
				КонецЕсли;
	                 
			Иначе
				rsMain.Fields.Item("DOG_NAME").Value = "";
			КонецЕсли;
		
		КонецЕсли;
	

		//Если Бланк = "1С82АВР0" или  Бланк = "1С82АВР" Тогда
		//	rsMain.Fields.Item("SO").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
		//	// - DOCKING-277 27.07.2021
		//ИначеЕсли Бланк = "1САКТ"  Тогда
		//	rsMain.Fields.Item("TSPDV").Value  = "Ставка ПДВ";
		//	rsMain.Fields.Item("TSUMPDV").Value  = "Сума ПДВ";
		//ИначеЕсли  Бланк = "1САКТ0" Тогда
		//	rsMain.Fields.Item("STAVKAPDV_TEXT").Value  = "Ставка ПДВ";
		//	rsMain.Fields.Item("PDV_TEXT").Value  = "Сума ПДВ";
		//Иначе
		//	// + DOCKING-277 27.07.2021	
		//	rsMain.Fields.Item("TAXSYSTEM").Value  =  СокрЛП(СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
		//КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		//rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		попытка
		rsMain.Fields.Item("VO_POS").Value = СокрЛП(ДанныеПредставителя.Должность);
		исключение конецпопытки;
		
		rsMain.Fields.Item("DOCDATE").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		
		// 14.02.2021 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ДолжностьРуководителяКонтрагента;
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента);
			
		Иначе	
			
			rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
			rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		КонецЕсли;	
			
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			//rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			//rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		// 14.02.2021 + DOCKING 368
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//Иначе
		//	ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		//КонецЕсли;
		// 14.02.2021 - DOCKING 368
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС;
		
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		// в УТП нету колонки единицизмерения в производственных услугах
		Если Объект.Конфигурация = "УТП" Тогда
			ЕдиницаВПроизводстве = """грн.""";
		ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ЕдиницаВПроизводстве = "АктВыполненныхРаботУслуги.Номенклатура.ЕдиницаИзмерения"	
		Иначе
			ЕдиницаВПроизводстве = "АктОбОказанииПроизводственныхУслугУслуги.ЕдиницаИзмерения"
		КонецЕсли;     	
		// - DOCKING-277 27.07.2021
		Если Бланк = "1САКТ" или  Бланк = "1САКТ0" Тогда
			Результат = СформироватьАктУслугЕслиЕстьНДС0(ЕдиницаВПроизводстве,Документ);
		Иначе
			Результат = СформироватьАктУслуг(ЕдиницаВПроизводстве,Документ);
		КонецЕсли;     	

		// + DOCKING-277 27.07.2021
		
		Н  =  Результат.Количество();		
		
		B1=0;
		B2=0;
		B3=0;
		B4=0;
		
		rsMain = Doc.DataSets("TAB3"); 	
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 	
			//...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB3_A2").Value = Контр + 1;
			rsMain.Fields.Item("TAB3_A3").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)); //Номенклатура
			
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB3_A5").Value = ЕдиницаИзмерения;
			
			//Try
			//	БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//	rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			//Except
			//EndTry;
			rsMain.Fields.Item("TAB3_A4").Value = ВыборкаДетальныеЗаписи.Количество;
			
            //rsMain.Fields.Item("TAB3_FIELD5").Value = ВыборкаДетальныеЗаписи.СуммаСкидки;
			// 14.02.2022 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB3_A6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB3_A6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			Иначе
			// 14.02.2022 - DOCKING 368	
				Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB3_A6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB3_A6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			КонецЕсли;	
			
			rsMain.Fields.Item("TAB3_A9").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			
			B1 = B1 + ВыборкаДетальныеЗаписи.СуммаСкидки;
			B2 = B2 + ВыборкаДетальныеЗаписи.СуммаБезСкидки;
			B3 = B3 + ВыборкаДетальныеЗаписи.СуммаНДС;
			B4 = B4 + ВыборкаДетальныеЗаписи.Сумма;
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		
		rsMain.Fields.Item("B1").Value  =  B1;
		rsMain.Fields.Item("B2").Value  =  B2;
		rsMain.Fields.Item("B3").Value  =  B3;
		rsMain.Fields.Item("B4").Value  =  B4;
		
		Результат2 = СформироватьАктТоваров(ЕдиницаВПроизводстве,Документ);
		
		
		A1 = 0;
		A2 = 0;
		A3 = 0;
		A4 = 0;
		
		Н2  =  Результат2.Количество();
		Н0  = Н + Н2;
		//rsMain.Fields.Item("KVO").Value  =  Н0;
		
		rsMain = Doc.DataSets("TAB2");
		Контр  =  0;
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат2 Цикл 	
			//...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB2_A2").Value = Контр + 1;
			rsMain.Fields.Item("TAB2_A3").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)); //Номенклатура
			
			Try 
				//ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				//
				//Если ЗначениеЗаполнено(ЕдИзм) тогда
				//	ЕдиницаИзмерения = ЕдИзм;
				//Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				//КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB2_A5").Value = ЕдиницаИзмерения;
			
			//Try
			//	БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//	rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			//Except
			//EndTry;
			rsMain.Fields.Item("TAB2_A4").Value = ВыборкаДетальныеЗаписи.Количество;
			
            //rsMain.Fields.Item("TAB2_FIELD5").Value = ВыборкаДетальныеЗаписи.СуммаСкидки;
			// 14.02.2022 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB2_A6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB2_A6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			Иначе
			// 14.02.2022 - DOCKING 368	
				Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
					rsMain.Fields.Item("TAB2_A6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				Иначе
					rsMain.Fields.Item("TAB2_A6").Value = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
			КонецЕсли;	
			
			rsMain.Fields.Item("TAB2_A9").Value = ВыборкаДетальныеЗаписи.Сумма;
			
			A1 = A1 + ВыборкаДетальныеЗаписи.СуммаСкидки;
			A2 = A2 + ВыборкаДетальныеЗаписи.СуммаБезСкидки;
			A3 = A3 + ВыборкаДетальныеЗаписи.СуммаНДС;
			A4 = A4 + ВыборкаДетальныеЗаписи.Сумма;
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н2 Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		
		rsMain.Fields.Item("A1").Value  =  A1;
		rsMain.Fields.Item("A2").Value  =  A2;
		rsMain.Fields.Item("A3").Value  =  A3;
		rsMain.Fields.Item("A4").Value  =  A4;
		
		//Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		//	rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС + FIELD3;  
		//	rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		//	rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС + FIELD4;
		//	
		//	rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС + FIELD3; 
		//	rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		//	rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС + FIELD4;
		//КонецЕсли;	
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		Иначе
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки;  
	
КонецПроцедуры 

&НаКлиенте
Процедура Формирование_Счет(orgId,  Документ,  Бланк,  ИД)  		  
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();

	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПокупателе =  СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
	    СведенияОПоставщике =  СведенияОПоставщике(Документ, КодЯзыкаПечать);	
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ);
		
		Если ЗначениеЗаполнено(СтруктураДокумента.СтруктурнаяЕдиница) Тогда
			Банк		= СтруктураДокумента.БанкЕд;
			МФО	 		= СтруктураДокумента.БанкКодЕд;
			НомерСчета 	= СтруктураДокумента.НомерСчетаЕд;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		КонецЕсли;      
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		//Если ИмяБазы = "УправлениеПроизводственнымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента);
		//ИначеЕсли ИмяБазы = "УправлениеТорговымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//ИначеЕсли ИмяБазы = "УТ" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//Иначе 
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_NUM_T").Value = "№";  
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATA_T").Value = "від";
			rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			//rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;
		Иначе
			rsMain.Fields.Item("DOG_NUM_T").Value = "";  
			rsMain.Fields.Item("DOG_DATA_T").Value = "";  			
		КонецЕсли;
		
		rsMain.Fields.Item("VO_NAME").Value  =  СокрЛП(СтруктураДокумента.ФизЛицо);      
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		
		Если Объект.Конфигурация  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли Объект.Конфигурация = "УПП" Тогда
			ИтогСкидка = СтруктураДокумента.ИтогСкидка;
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			ИтогСкидка  =  0;
		Иначе
			ИтогСкидка  =  СтруктураДокумента.ИтогСкидка;
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;   	
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = ИтогСуммаСНДС;   
		rsMain.Fields.Item("ZNYGKA").Value =  ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;   
		
		rsMain.Post(); 	
		Если Объект.Конфигурация  =  "УТП" Тогда
			ВыборСкидки = "ПроцентСкидкиНаценки";
			ВыборСуммы  =  "Сумма";
		ИначеЕсли Объект.Конфигурация = "УПП" Тогда
			ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			ВыборСуммы  =  "Сумма";  
			ВыборСкидки = "ПроцентСкидкиНаценки";
		Иначе
			ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";    
		КонецЕсли;              
		// СОФТКОМ Петренко 20.12.17
		
		//Запрос  =  Новый Запрос;
		//Запрос.Текст  =  
		//"ВЫБРАТЬ
		//|	СчетНаОплатуПокупателюТовары.Номенклатура.НаименованиеПолное КАК Наименование,
		//|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		//|	ВЫБОР
		//|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		//|			ТОГДА СчетНаОплатуПокупателюТовары.Цена
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА СчетНаОплатуПокупателюТовары.СтавкаНДС  =  &Ставка20
		////|					ТОГДА СчетНаОплатуПокупателюТовары.Цена / 1.2
		//|					ТОГДА СчетНаОплатуПокупателюТовары.Цена 
		//|				ИНАЧЕ СчетНаОплатуПокупателюТовары.Цена
		//|			КОНЕЦ
		//|	КОНЕЦ КАК ЦенаБезНДС, 
		//|	СчетНаОплатуПокупателюТовары.Количество, 
		//|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК Единица, 
		//|	СчетНаОплатуПокупателюТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
		//|	СчетНаОплатуПокупателюТовары."+ВыборСкидки+" КАК Скидка
		//|ИЗ
		//|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		//|ГДЕ
		//|	СчетНаОплатуПокупателюТовары.Ссылка = &Документ
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	СчетНаОплатуПокупателюУслуги.Содержание, 
		//|	СчетНаОплатуПокупателюУслуги.Номенклатура КАК Номенклатура,
		//|	ВЫБОР
		//|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		//|			ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА СчетНаОплатуПокупателюУслуги.СтавкаНДС  =  &Ставка20
		////|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена / 1.2
		//|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		//|				ИНАЧЕ СчетНаОплатуПокупателюУслуги.Цена
		//|			КОНЕЦ
		//|	КОНЕЦ, 
		//|	СчетНаОплатуПокупателюУслуги.Количество, 
		//|	""шт"", 
		//|	СчетНаОплатуПокупателюУслуги."+ВыборСуммы+",
		//|	СчетНаОплатуПокупателюУслуги."+ВыборСкидки+" КАК Скидка
		//|ИЗ
		//|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		//|ГДЕ
		//|	СчетНаОплатуПокупателюУслуги.Ссылка  =  &Документ";
		//
		//Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		//Запрос.УстановитьПараметр("Документ",  Документ);			
		//Результат  =  Запрос.Выполнить();
		
		Результат = СформироватьСчетПокупателя(ВыборСуммы,ВыборСкидки,Документ);

		Контр  =  0;
		Н  =  Результат.Количество(); 		
	
		rsMain.Fields.Item("KVO").Value = Н;

		//ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			
			Try 
				
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				// DOCKING 587 + 03.10.2023
				ЕдИзмДок = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				
				//Если ЗначениеЗаполнено(ЕдИзм) тогда
				//	ЕдиницаИзмерения = ЕдИзм;
				//Иначе	
				//	ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				//КонецЕсли;	
				
				Если ЗначениеЗаполнено(ЕдИзмДок) тогда
					ЕдиницаИзмерения = ЕдИзмДок;
				Иначе	
					ЕдиницаИзмерения =  ЕдИзм;
				КонецЕсли;	
				// DOCKING 587 - 03.10.2023
				
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = ЕдиницаИзмерения;
			
			//rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);	
			//rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = СокрЛП(Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)).БазоваяЕдиницаИзмерения.Код);
			БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			
			//12.01.2022 + DOCKING 368	
			Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.Цена;
				rsMain.Fields.Item("TAB1_A4").Value = 0;
				
				rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма;
				
			Иначе
			//12.01.2022 - DOCKING 368		
				rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
				// БВА 24052021
				Если  ВыборкаДетальныеЗаписи.СуммаБезСкидки > 0 Тогда
					rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки; 
				Иначе
					rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма;
				КонецЕсли;
			КонецЕсли;
			

			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;        		
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;  
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_СчетКлиентам(orgId,  Документ,  Бланк,  ИД)  		  
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();

	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПокупателе =  СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
	    СведенияОПоставщике =  СведенияОПоставщике(Документ, КодЯзыкаПечать);	
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ);
		
		
		Банк		= СтруктураДокумента.Банк;
		МФО	 		= СтруктураДокумента.БанкКод;
		НомерСчета 	= СтруктураДокумента.БанковскийСчетОрганизации;
		
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизацииДолжность);

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО); 	
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		КонецЕсли;      
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		//Если ИмяБазы = "УправлениеПроизводственнымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента);
		//ИначеЕсли ИмяБазы = "УправлениеТорговымПредприятиемДляУкраины" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//ИначеЕсли ИмяБазы = "УТ" Тогда
		//	rsMain.Fields.Item("DOG_NAME").Value  =  "№" + СокрЛП(Документ.ДоговорКонтрагента.Ссылка.Номер) + " від " +  Формат(Документ.ДоговорКонтрагента.Ссылка.Дата,  "ДЛФ = Д");
		//Иначе 
		//	rsMain.Fields.Item("DOG_NAME").Value  =  СокрЛП(Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_NUM_T").Value = "№";  
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATA_T").Value = "від";
			rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			//rsMain.Fields.Item("OSN_TIP").Value = Документ.ДоговорКонтрагента.НаименованиеДляПечати;
		Иначе
			rsMain.Fields.Item("DOG_NUM_T").Value = "";  
			rsMain.Fields.Item("DOG_DATA_T").Value = "";  			
		КонецЕсли;
		
		//rsMain.Fields.Item("VO_NAME").Value  =  СокрЛП(СтруктураДокумента.ФизЛицо);      
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		
		//Если Объект.Конфигурация  =  "УТП" Тогда
		//	ИтогСкидка  =  0;
		//ИначеЕсли Объект.Конфигурация = "УПП" Тогда
		//	ИтогСкидка = СтруктураДокумента.ИтогСкидка;
		//ИначеЕсли Объект.Конфигурация = "УТ" Тогда
		//	ИтогСкидка  =  0;
		//Иначе
			ИтогСкидка  =  СтруктураДокумента.ИтогСкидка;
		//КонецЕсли;
		//ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = ИтогСуммаСНДС;   
		rsMain.Fields.Item("ZNYGKA").Value =  ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;   
		
		rsMain.Post(); 	
		//Если Объект.Конфигурация  =  "УТП" Тогда
		//	ВыборСкидки = "ПроцентСкидкиНаценки";
		//	ВыборСуммы  =  "Сумма";
		//ИначеЕсли Объект.Конфигурация = "УПП" Тогда
		//	ВыборСуммы  =  "Сумма";
		//	ВыборСкидки = "ПроцентСкидкиНаценки";
		//ИначеЕсли Объект.Конфигурация = "УТ" Тогда
		//	ВыборСуммы  =  "Сумма";  
		//	ВыборСкидки = "ПроцентСкидкиНаценки";
		//Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
		//	ВыборСкидки = "СуммаСкидки";    
		//КонецЕсли;
		
		ВыборСкидки = "СуммаРучнойСкидки";
				
		Если ТипЗнч(СтруктураДокумента.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Результат = СформироватьРТУ(ВыборСкидки,СтруктураДокумента.ДокументОснование,1);
			
			Контр  =  0;
			Н  =  Результат.Количество(); 		
			rsMain.Fields.Item("KVO").Value = Н;
			
			//ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
			rsMain = Doc.DataSets("TAB1");  
			//	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 
				rsMain.Edit(); 
				rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
				
				Try 
					ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
					
					Если ЗначениеЗаполнено(ЕдИзм) тогда
						ЕдиницаИзмерения = ЕдИзм;
					Иначе	
						ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
					КонецЕсли;	
				Исключение
				EndTry;
				rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = ЕдиницаИзмерения;
				
				//rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);	
				//rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = СокрЛП(Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)).БазоваяЕдиницаИзмерения.Код);
				БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
				rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
				
				
				rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
				
				rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма;
				
				rsMain.Post();
				Контр  =  Контр + 1; 
				Если  Контр <> Н Тогда 
					rsMain.Append();  
				КонецЕсли;        		
			КонецЦикла;
		КонецЕсли;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;  
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_РасхНакл(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();

	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
			
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ);
		
		//СведенияОПокупателе  =  УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать); //БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		Если ЗначениеЗаполнено(СтруктураДокумента.БанковскийСчетОрганизации) Тогда
			// DOCKING 604 + 01.11.2023
			Если НЕ ЗначениеЗаполнено(СтруктураДокумента.Банк) Тогда 
				Банк		= СтруктураДокумента.БанковскийСчетОрганизации;
				МФО	 		= СтруктураДокумента.БанкКод2;
			Иначе
				Банк		= СтруктураДокумента.Банк;
				МФО	 		= СтруктураДокумента.БанкКод;
			КонецЕсли;	
			// DOCKING 604 - 01.11.2023
			НомерСчета 	= СтруктураДокумента.БанковскийСчетОрганизацииНомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
		
        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
 	
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО); 
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		//11.01.2022 + DOCKING 368
		
		//Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
		//	rsMain.Fields.Item("DOG_T").Value = "Договір:";
		//	rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
		//	rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
		//	rsMain.Fields.Item("OSN_TIP").Value = СтруктураДокумента.НаименованиеДляПечати;
		//КонецЕсли;
		Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда
		
			Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
				rsMain.Fields.Item("DOG_T").Value = "Договір:";
				rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
				rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
				rsMain.Fields.Item("OSN_TIP").Value = СтруктураДокумента.НаименованиеДляПечати;
			КонецЕсли;
		Иначе	
			
			Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.Договор)) Тогда
				rsMain.Fields.Item("DOG_T").Value = "Договір:";
				rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорНомер);
				rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорДата,  "ДЛФ = Д");
				Если Объект.Конфигурация = "SB" Тогда
					rsMain.Fields.Item("OSN_TIP").Value = rsMain.Fields.Item("DOG_T").Value+" "+rsMain.Fields.Item("DOG_NUM").Value+" "+rsMain.Fields.Item("DOG_DATE").Value;
				Иначе
					//17.03.2023 + DOCKING 492
					//rsMain.Fields.Item("OSN_TIP").Value = СтруктураДокумента.НаименованиеДляПечати;
					Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
						rsMain.Fields.Item("OSN_TIP").Value = СтруктураДокумента.ДоговорНаименованиеДляПечати;
					Иначе
						rsMain.Fields.Item("OSN_TIP").Value = СтруктураДокумента.НаименованиеДляПечати;
					КонецЕсли;
					//17.03.2023 - DOCKING 492
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		//11.01.2022 - DOCKING 368
		
		Если НЕ Объект.Конфигурация = "SB" Тогда
			Если ЗначениеЗаполнено(СтруктураДокумента.ДокументРасчетов) Тогда
				rsMain.Fields.Item("OSN_T").Value  =  Строка("Розр.док.:");
				rsMain.Fields.Item("OSN_TIP").Value  =  ОпределитьДокументРасчетов(СтруктураДокумента.НаименованиеДокументаРасчетов); 
				rsMain.Fields.Item("OSN_NUM_T").Value  =  Строка("№");
				rsMain.Fields.Item("OSN_NOMER").Value  =  СтруктураДокумента.НомерДокументаРасчетов;
				rsMain.Fields.Item("OSN_DATA_T").Value  =  Строка("від");  
				rsMain.Fields.Item("OSN_DATA").Value  =  Формат(СтруктураДокумента.ДатаДокументаРасчетов, "ДЛФ = Д"); 
			Иначе
				rsMain.Fields.Item("OSN_T").Value  =  "";
				rsMain.Fields.Item("OSN_TIP").Value  =  ""; 
				rsMain.Fields.Item("OSN_NUM_T").Value  =  "";
				rsMain.Fields.Item("OSN_NOMER").Value  =  "";
				rsMain.Fields.Item("OSN_DATA_T").Value  =  ""; 
				rsMain.Fields.Item("OSN_DATA").Value  =  ""; 
			КонецЕсли; 
				
		
			Если ЗначениеЗаполнено(СтруктураДокумента.Склад) Тогда   
				rsMain.Fields.Item("SKLAD_T").Value = Строка("Склад:");
				rsMain.Fields.Item("SKLAD_NAME").Value = СокрЛП(СтруктураДокумента.Склад);
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтруктураДокумента.АдресДоставки) Тогда
			rsMain.Fields.Item("ADR_DOST_T").Value  =   Строка("Адреса доставки:");
			rsMain.Fields.Item("ADR_DOST").Value  =  СокрЛП(СтруктураДокумента.АдресДоставки); 
		КонецЕсли; 
		
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		
		Если Объект.Конфигурация  =  "УТП" Тогда
			ИтогСкидка  =  0;
		ИначеЕсли Объект.Конфигурация  =  "УТ" Тогда
			ИтогСкидка  =  0;	
		ИначеЕсли Объект.Конфигурация  = "УПП" Тогда
			ИтогСкидка  =  СтруктураДокумента.ИтогСкидка;
		Иначе
			ИтогСкидка  =  СтруктураДокумента.ИтогСкидка2;
		КонецЕсли;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("ZNYGKA").Value = ИтогСкидка;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post();
		
		Если Объект.Конфигурация  =  "УТП" Тогда
		//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		//11.01.2022 + DOCKING 368	
		ИначеЕсли Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда	
			ВыборСкидки = "СуммаРучнойСкидки";
		ИначеЕсли Объект.Конфигурация  =  "SB" Тогда
			ВыборСкидки = "СуммаСкидкиНаценки";			
		//11.01.2022 - DOCKING 368	
		Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		
		// СОФТКОМ Петренко 18.12.17
		
		// DOCKING 608 + 30.11.2023
		//РезультатЗапроса = СформироватьРТУ(ВыборСкидки,Документ); 
		РезультатЗапроса = СформироватьРТУ(ВыборСкидки,Документ,1); 
		// DOCKING 608 - 30.11.2023
		
		//Запрос  =  Новый Запрос;
		//Запрос.Текст  =  
		//"ВЫБРАТЬ
		//|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
		//|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		//|	ВЫБОР
		//|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		//|			ТОГДА РеализацияТоваровУслугТовары.Цена
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		////|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		//|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		//|			КОНЕЦ
		//|	КОНЕЦ КАК ЦенаБезНДС, 
		//|	РеализацияТоваровУслугТовары.Количество, 
		//|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
		//|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Единица,
		//|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		//|ИЗ
		//|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		//|ГДЕ
		//|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	РеализацияТоваровУслугУслуги.Содержание, 
		//|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		//|	ВЫБОР
		//|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		//|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		////|					ТОГДА РеализацияТоваровУслугУслуги.Цена / 1.2
		//|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		//|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		//|			КОНЕЦ
		//|	КОНЕЦ, 
		//|	РеализацияТоваровУслугУслуги.Количество, 
		//|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		//|	""шт"" ,
		//|	РеализацияТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
		//|ИЗ
		//|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		//|ГДЕ
		//|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ";
		//Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		//Запрос.УстановитьПараметр("Документ",  Документ);		
		//
		//Результат  =  Запрос.Выполнить();
		
		Контр  =  0;
		//Н  =  Результат.Выгрузить().Количество();
		
		  Н = РезультатЗапроса.Количество();
		//...СОФТКОМ Петренко 18.12.17
		
		rsMain.Fields.Item("KVO").Value = Н;
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		
		// 12.01.2022 + DOCKING 368
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		//rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
		Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
				rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
			//rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
		ИначеЕсли Объект.Конфигурация = "SB" Тогда //DOCKING 459
			ДанныеПредставителя = ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);			
		Иначе
			rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизацииДолжность);
		КонецЕсли;
		// 12.01.2022 - DOCKING 368
		
		Если Объект.Конфигурация = "УПП" Тогда
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = "";
		Иначе 
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		КонецЕсли;
		
		Если Объект.Конфигурация = "SB" Тогда
			
			rsMain.Fields.Item("DOV_SERIA").Value = "";   
			rsMain.Fields.Item("DOV_NOMER").Value = СокрЛП(СтруктураДокумента.ДоверенностьНомер);
			rsMain.Fields.Item("DOV_DATA").Value = ?(СтруктураДокумента.ДоверенностьДата = Дата(1,1,1),"",СокрЛП(СтруктураДокумента.ДоверенностьДата)); 
			
		Иначе
			
			rsMain.Fields.Item("DOV_SERIA").Value = СокрЛП(СтруктураДокумента.ДоверенностьСерия);   
			rsMain.Fields.Item("DOV_NOMER").Value = СокрЛП(СтруктураДокумента.ДоверенностьНомер);
			rsMain.Fields.Item("DOV_DATA").Value = ?(СтруктураДокумента.ДоверенностьДата = Дата(1,1,1),"",СокрЛП(СтруктураДокумента.ДоверенностьДата)); 
		КонецЕсли;	
		
		
		//ВыборкаДетальныеЗаписи  =  Результат.Выбрать(); // Петренко
		
		rsMain = Doc.DataSets("TAB1");  
		
		// СОФТКОМ Петренко 18.12.17
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл
		// ...СОФТКОМ Петренко 18.12.17	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NUM").Value = СокрЛП(ВыборкаДетальныеЗаписи.Артикул);
			rsMain.Fields.Item("TAB1_NOMENKLATURA_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Наименование); 
			rsMain.Fields.Item("TAB1_A3").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_NOMENKLATURA_CHARCODEUMEASURE").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);
			Try
				//rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = СокрЛП(Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)).БазоваяЕдиницаИзмерения.Код);
			    БазЕдИзмКод = ПолучитьБазЕдИзмерения(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				rsMain.Fields.Item("TAB1_NOMENKLATURA_NUMHBUMEASURE").Value = БазЕдИзмКод;
			Except
			EndTry;
			rsMain.Fields.Item("TAB1_A5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_A6").Value = ВыборкаДетальныеЗаписи.Сумма;
			
			//rsMain.Fields.Item("TAB1_OV_NAME").Value = СокрЛП(ВыборкаДетальныеЗаписи.Единица);
			rsMain.Fields.Item("TAB1_A4").Value = ВыборкаДетальныеЗаписи.Скидка;
			
			// 27.06.2022 + DOCKING 403
			Если Бланк = "1С82ВН" // или Бланк = "1С77ВН"
				Тогда
				Если Объект.Конфигурация = "SB" Тогда
					rsMain.Fields.Item("TAB1_STAVKAPDV").Value = ВернутьПроцентСтавкиНДС_SB(ВыборкаДетальныеЗаписи.СтавкаНДС);
				Иначе
					rsMain.Fields.Item("TAB1_STAVKAPDV").Value = ВернутьПроцентСтавкиНДС(ВыборкаДетальныеЗаписи.СтавкаНДС);
				КонецЕсли;	
				rsMain.Fields.Item("TAB1_SUMPDV").Value = ВыборкаДетальныеЗаписи.СуммаНДС;
			КонецЕсли;
			// 27.06.2022 - DOCKING 403
			
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		//-----------------------------------------------------
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369		
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_РасхНаклСвойШаблон_Eprc_N(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();

		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 
		
			СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);
			СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
			
		Если ТипЗнч(СтруктураДокумента.БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= СтруктураДокумента.Банк;
			МФО	 		= СтруктураДокумента.БанкКод;
			НомерСчета 	= СтруктураДокумента.БанковскийСчетОрганизацииНомерСчета;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
		
        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = СокрЛП(СтруктураДокумента.bgs_СкалаКод);  
 	
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО); 
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			//rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			//rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			rsMain.Fields.Item("DOG_TEXT").Value = "Договір:";
			rsMain.Fields.Item("DOG_NAME").Value = СтруктураДокумента.НаименованиеДляПечати;
		Иначе
			rsMain.Fields.Item("DOG_TEXT").Value = "";
			rsMain.Fields.Item("DOG_NAME").Value = "";
		КонецЕсли;
										
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ГрузополучательНаименованиеПолное)) Тогда
			rsMain.Fields.Item("SIDE_SD_V").Value = СокрЛП(СтруктураДокумента.ГрузополучательНаименованиеПолное); 
			rsMain.Fields.Item("SIDE_SDADR_V").Value = СокрЛП(СтруктураДокумента.ГрузополучательЮрАдрес);
			rsMain.Fields.Item("SIDE_TEL_V").Value = СокрЛП(СтруктураДокумента.ГрузополучательТелефон);
		Иначе
			rsMain.Fields.Item("SIDE_SD_V").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_SDADR_V").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
			rsMain.Fields.Item("SIDE_TEL_V").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		КонецЕсли;

		rsMain.Fields.Item("CITY").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента);	
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		ИтогСкидка  =  СтруктураДокумента.ИтогСкидка2;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post();
		
			ВыборСкидки = "СуммаСкидки";
       		
		РезультатЗапроса = СформироватьРТУ_Товары(ВыборСкидки,Документ); 
		
		Контр  =  0;

		  Н = РезультатЗапроса.Количество();
		  
		ФИО = СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ);
		Должность = ПолучитьДолжностьСотрудника(СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ));
		rsMain.Fields.Item("VO_NAME").Value = Строка(Должность)+ " "+ Строка(ФИО);
		
	    rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("WARRANT_NUM").Value = СокрЛП(СокрЛП(СтруктураДокумента.ДоверенностьСерия)+СокрЛП(СтруктураДокумента.ДоверенностьНомер));
		rsMain.Fields.Item("WARRANT_DATE").Value = ?(СтруктураДокумента.ДоверенностьДата = Дата(1,1,1),"",СокрЛП(СтруктураДокумента.ДоверенностьДата)); 
		
		rsMain = Doc.DataSets("TAB1");  
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			
			ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)," ");
			ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),НайтиПробел,ДлинаСтроки));
			rsMain.Fields.Item("TAB1_F2").Value = СокрЛП(ТекстДоПробела);
			Try 
				УКТВЭД = ПолучитьКодУКТВЭД(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
				Если ЗначениеЗаполнено(УКТВЭД) тогда
					КодУКТВЭД = УКТВЭД;
				Иначе	
					КодУКТВЭД = "";
				КонецЕсли;	
			Исключение
			EndTry;
            rsMain.Fields.Item("TAB1_F2_1").Value = СтрЗаменить(КодУКТВЭД," ","");
			rsMain.Fields.Item("TAB1_F3").Value = СокрЛП(ТекстПослеПробела);                                                                
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения;		
			rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_F7").Value = ВыборкаДетальныеЗаписи.Сумма;
						
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		//-----------------------------------------------------
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_АктСвойШаблон_Eprc_A(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();

		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 
		
			СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);
			СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
			
			

		Если ТипЗнч(СтруктураДокумента.БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= СтруктураДокумента.Банк;
			МФО	 		= СтруктураДокумента.БанкКод;
			НомерСчета 	= СтруктураДокумента.БанковскийСчетОрганизацииНомерСчета;
			БанкАдрес   = СтруктураДокумента.БанкАдрес;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
			БанкАдрес   = СведенияОПоставщике.АдресБанка;
		КонецЕсли;
		
        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = СокрЛП(СтруктураДокумента.bgs_СкалаКод); 
		
		rsMain.Fields.Item("RAH_DATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("RAH_NUM").Value = СокрЛП(СтруктураДокумента.bgs_СкалаКод);		
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_BANKADR").Value = СокрЛП(БанкАдрес);
		
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		rsMain.Fields.Item("SIDE_TYPE").Value  =  СокрЛП(СтруктураДокумента.bgs_ТипСерийныйНомер);
		rsMain.Fields.Item("SIDE_PV").Value  =  СокрЛП(СтруктураДокумента.bgs_ПричинаВызова);
		rsMain.Fields.Item("SIDE_PIDSTAVA").Value  =  СокрЛП(СтруктураДокумента.bgs_НаОсновании);
				
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			rsMain.Fields.Item("DOG_NAME").Value = СтруктураДокумента.НаименованиеДляПечати;
		КонецЕсли;
										
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		ИтогСкидка  =  СтруктураДокумента.ИтогСкидка2;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ);
		
		ФИО = СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ);
		Должность = ПолучитьДолжностьСотрудника(СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ));
		
		rsMain.Fields.Item("VO_NAME").Value = Строка(ФИО);
		rsMain.Fields.Item("VO_POS").Value = Строка(Должность);  		
		
	    rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);	
		rsMain.Fields.Item("WARRANT_NUM").Value = СокрЛП(СокрЛП(СтруктураДокумента.ДоверенностьСерия)+СокрЛП(СтруктураДокумента.ДоверенностьНомер));
		rsMain.Fields.Item("WARRANT_DATE").Value = ?(СтруктураДокумента.ДоверенностьДата = Дата(1,1,1),"",СокрЛП(СтруктураДокумента.ДоверенностьДата)); 
			
		rsMain.Post();
		
		ВыборСкидки = "СуммаСкидки";	
      //--ТАБ1---------------------------------------------------		
		РезультатЗапроса = СформироватьРТУ_Услуги(ВыборСкидки,Документ); 
		
		Контр  =  0;
		Н = РезультатЗапроса.Количество();
		rsMain = Doc.DataSets("TAB1");
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			
			ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура));
			НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)," ");
			ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура),НайтиПробел,ДлинаСтроки));
			rsMain.Fields.Item("TAB1_F2").Value = СокрЛП(ТекстДоПробела);
			rsMain.Fields.Item("TAB1_F3").Value = СокрЛП(ТекстПослеПробела);
			rsMain.Fields.Item("TAB1_F4").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F5").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_F7").Value = ВыборкаДетальныеЗаписи.Сумма;
						
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();
		
     //--ТАБ2---------------------------------------------------   	
		РезультатЗапроса = СформироватьРТУ_Товары(ВыборСкидки,Документ); 	
		
		Контр2  =  Контр;// продолжаем нумерацию
		Контр   = 0;
		Н = РезультатЗапроса.Количество();
		
		rsMain = Doc.DataSets("TAB2");  
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB2_F1").Value = Контр2 + 1;
			
			ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)," ");
			ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),НайтиПробел,ДлинаСтроки));
			rsMain.Fields.Item("TAB2_F2").Value = СокрЛП(ТекстДоПробела);
			Try 
				УКТВЭД = ПолучитьКодУКТВЭД(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
				Если ЗначениеЗаполнено(УКТВЭД) тогда
					КодУКТВЭД = УКТВЭД;
				Иначе	
					КодУКТВЭД = "";
				КонецЕсли;	
			Исключение
			EndTry;
            rsMain.Fields.Item("TAB2_F2_1").Value = СтрЗаменить(КодУКТВЭД," ","");		
			rsMain.Fields.Item("TAB2_F3").Value = СокрЛП(ТекстПослеПробела);
			rsMain.Fields.Item("TAB2_F4").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB2_F5").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB2_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB2_F7").Value = ВыборкаДетальныеЗаписи.Сумма;
						
			rsMain.Post();
			Контр2  =  Контр2 + 1;
			Контр = Контр + 1;
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла;
		
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
				
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_СчетСвойШаблон_Eprc_I(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();

		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 
		
			СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);
			СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
			
		Если ТипЗнч(СтруктураДокумента.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= СтруктураДокумента.БанкЕд;
			МФО	 		= СтруктураДокумента.БанкКодЕд;
			НомерСчета 	= СтруктураДокумента.НомерСчетаЕд;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;
	
        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = СокрЛП(СтруктураДокумента.bgs_СкалаКод); 
		
		Если  ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.bgs_МестоСоставленияДокумента)) Тогда
		     rsMain.Fields.Item("CITY").Value = СокрЛП(СтруктураДокумента.bgs_МестоСоставленияДокумента);
			 rsMain.Fields.Item("CITY_TEXT").Value = "Місце складання:";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО); 
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			rsMain.Fields.Item("DOG_NAME").Value = СтруктураДокумента.НаименованиеДляПечати;
		КонецЕсли;
								
		//Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ГрузополучательНаименованиеПолное)) Тогда
			//rsMain.Fields.Item("SIDE_SD_V").Value = СокрЛП(СтруктураДокумента.ГрузополучательНаименованиеПолное); 
			//rsMain.Fields.Item("SIDE_SDADR_V").Value = СокрЛП(СтруктураДокумента.ГрузополучательЮрАдрес);
			//rsMain.Fields.Item("SIDE_TEL_V").Value = СокрЛП(СтруктураДокумента.ГрузополучательТелефон);
		//Иначе
			rsMain.Fields.Item("SIDE_SD_V").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			rsMain.Fields.Item("SIDE_SDADR_V").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
			rsMain.Fields.Item("SIDE_TEL_V").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		//КонецЕсли;
		
		//rsMain.Fields.Item("CITY").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента);	
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		ИтогСкидка  =  СтруктураДокумента.ИтогСкидка;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		ФИО = СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ);
		Должность = ПолучитьДолжностьСотрудника(СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ));
		
		rsMain.Fields.Item("VO_NAME").Value = Строка(Должность)+ " "+ Строка(ФИО);

		rsMain.Post();
		
			ВыборСкидки = "СуммаСкидки";
			ВыборСуммы  = "СуммаБезСкидки";
     		
		РезультатЗапроса = СформироватьСчетПокупателя_Товары(ВыборСуммы,ВыборСкидки,Документ); 
		
		Контр  =  0;

		  Н = РезультатЗапроса.Количество();
		
				
		rsMain = Doc.DataSets("TAB1");  
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			
			ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)," ");
			ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),НайтиПробел,ДлинаСтроки));
			rsMain.Fields.Item("TAB1_F2").Value = СокрЛП(ТекстДоПробела);
			Try 
				УКТВЭД = ПолучитьКодУКТВЭД(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
				Если ЗначениеЗаполнено(УКТВЭД) тогда
					КодУКТВЭД = УКТВЭД;
				Иначе	
					КодУКТВЭД = "";
				КонецЕсли;	
			Исключение
			EndTry;
            rsMain.Fields.Item("TAB1_F2_1").Value = СтрЗаменить(КодУКТВЭД," ","");
			rsMain.Fields.Item("TAB1_F3").Value = СокрЛП(ТекстПослеПробела);                                                                
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения; 
			rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_F7").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки;
						
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		//-----------------------------------------------------
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_СчетСвойШаблон_Eprc_I1(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();

		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 
		
			СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);
			СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
			
		Если ТипЗнч(СтруктураДокумента.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= СтруктураДокумента.БанкЕд;
			МФО	 		= СтруктураДокумента.БанкКодЕд;
			НомерСчета 	= СтруктураДокумента.НомерСчетаЕд;
			БанкАдрес   = СтруктураДокумента.БанкАдрес;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
			БанкАдрес   = СведенияОПоставщике.АдресБанка;
		КонецЕсли;
	
        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = СокрЛП(СтруктураДокумента.bgs_СкалаКод); 
		
		Если  ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.bgs_МестоСоставленияДокумента)) Тогда
		     rsMain.Fields.Item("CITY").Value = СокрЛП(СтруктураДокумента.bgs_МестоСоставленияДокумента);
			 rsMain.Fields.Item("CITY_TEXT").Value = "Місце складання:";
		КонецЕсли;
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_BANKADR").Value = СокрЛП(БанкАдрес);

		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		rsMain.Fields.Item("SIDE_TYPE").Value  =  СокрЛП(СтруктураДокумента.bgs_ТипСерийныйНомер);
		rsMain.Fields.Item("SIDE_PV").Value  =  СокрЛП(СтруктураДокумента.bgs_ПричинаВызова);
		rsMain.Fields.Item("SIDE_PIDSTAVA").Value  =  СокрЛП(СтруктураДокумента.bgs_НаОсновании);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			rsMain.Fields.Item("DOG_NAME").Value = СтруктураДокумента.НаименованиеДляПечати;
		КонецЕсли;
									
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		ИтогСкидка  =  СтруктураДокумента.ИтогСкидка;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		ФИО = СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ);
		Должность = ПолучитьДолжностьСотрудника(СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ));
		
		rsMain.Fields.Item("VO_NAME").Value = Строка(ФИО);
		rsMain.Fields.Item("VO_POS").Value = Строка(Должность);
		
		rsMain.Post();
		
			ВыборСкидки = "СуммаСкидки";
			ВыборСуммы  = "СуммаБезСкидки";
// ТАБ1	     		
		РезультатЗапроса = СформироватьСчетПокупателя_Услуги(ВыборСуммы,ВыборСкидки,Документ); 
		  Контр  =  0;
		  Н = РезультатЗапроса.Количество();
			
		rsMain = Doc.DataSets("TAB1");  
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			
			ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура));
			НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)," ");
			ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура),НайтиПробел,ДлинаСтроки));
			rsMain.Fields.Item("TAB1_F2").Value = СокрЛП(ТекстДоПробела);
			rsMain.Fields.Item("TAB1_F3").Value = СокрЛП(ТекстПослеПробела);
			rsMain.Fields.Item("TAB1_F4").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F5").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_F7").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки;
						
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
// ТАБ2	

		РезультатЗапроса = СформироватьСчетПокупателя_Товары(ВыборСуммы,ВыборСкидки,Документ); 
		
		  Контр2  =  Контр;// продолжаем нумерацию
		  Контр  =  0;
		  Н = РезультатЗапроса.Количество();			

		rsMain = Doc.DataSets("TAB2");  
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB2_F1").Value = Контр2 + 1;
			
			ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)," ");
			ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),НайтиПробел,ДлинаСтроки));
			rsMain.Fields.Item("TAB2_F2").Value = СокрЛП(ТекстДоПробела);
			Try 
				УКТВЭД = ПолучитьКодУКТВЭД(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
				Если ЗначениеЗаполнено(УКТВЭД) тогда
					КодУКТВЭД = УКТВЭД;
				Иначе	
					КодУКТВЭД = "";
				КонецЕсли;	
			Исключение
			EndTry;
            rsMain.Fields.Item("TAB2_F2_1").Value = СтрЗаменить(КодУКТВЭД," ","");
			rsMain.Fields.Item("TAB2_F3").Value = СокрЛП(ТекстПослеПробела);
			rsMain.Fields.Item("TAB2_F4").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB2_F5").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB2_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB2_F7").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки;
						
			rsMain.Post();
			Контр2  =  Контр2 + 1; 
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_СчетСвойШаблон_TRACK(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");
		pd =  App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();

		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 
		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
			
		РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		
		Если ТипЗнч(СтруктураДокумента.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк		= СтруктураДокумента.БанкЕд;
			МФО	 		= СтруктураДокумента.БанкКодЕд;
			НомерСчета 	= СтруктураДокумента.НомерСчетаЕд;
			БанкАдрес   = СтруктураДокумента.БанкАдрес;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
			БанкАдрес   = СведенияОПоставщике.АдресБанка;
		КонецЕсли;
	
        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО);
		//rsMain.Fields.Item("FIRM_BANKADR").Value = СокрЛП(БанкАдрес); *****

		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		rsMain.Fields.Item("FIRM_TELEFON").Value = СокрЛП(СведенияОПоставщике.Телефоны);  
		rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 		
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		
		rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
		rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны);  
		
		rsMain.Fields.Item("MISZE_SKL").Value = ""; //СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("FIELD1").Value = СокрЛП(""); 
		rsMain.Fields.Item("FIELD2").Value = СокрЛП(СтруктураДокумента.Техника); 
		rsMain.Fields.Item("FIELD3").Value = СокрЛП(СтруктураДокумента.ГосНомер); 
		rsMain.Fields.Item("FIELD4").Value = СокрЛП(СтруктураДокумента.СерийныйНомер); 
		rsMain.Fields.Item("FIELD5").Value = СокрЛП(""); 
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)) Тогда
			Если ЗначениеЗаполнено(СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер)) Тогда
				rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
				rsMain.Fields.Item("DOG_DATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
			Иначе
				ДлинаСтроки = СтрДлина(СокрЛП(СтруктураДокумента.ДоговорКонтрагента));
				НайтиПробел = Найти(СокрЛП(СтруктураДокумента.ДоговорКонтрагента)," ");
				ТекстДоПробела =  СокрЛП(Лев(СокрЛП(СтруктураДокумента.ДоговорКонтрагента),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
				НомерДОГ = СтрЗаменить(ТекстДоПробела,"№","");
				
				ТекстПосле =  СокрЛП(Сред(СокрЛП(СтруктураДокумента.ДоговорКонтрагента),НайтиПробел,ДлинаСтроки));
				ДлинаСтроки = СтрДлина(СокрЛП(ТекстПосле));
				НайтиПробел = Найти(СокрЛП(ТекстПосле)," ");
				ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ТекстПосле),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
				ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ТекстПосле),НайтиПробел,ДлинаСтроки));
				ДатаДОГ = СтрЗаменить(ТекстПослеПробела," р.","");
								
				rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(НомерДОГ);
				rsMain.Fields.Item("DOG_DATE").Value = Формат(ДатаДОГ,  "ДЛФ = Д");
			КонецЕсли;
			
			//rsMain.Fields.Item("DOG_NAME").Value = СтруктураДокумента.НаименованиеДляПечати;
		КонецЕсли;
									
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		ИтогСкидка  =  СтруктураДокумента.ИтогСкидка;
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС; 
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value = ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value = ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value = СтруктураДокумента.СуммаДокумента;
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		//ФИО = СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ);
		//Должность = ПолучитьДолжностьСотрудника(СокрЛП(СтруктураДокумента.bgs_ОтветственныйЗаЗаказ));
		rsMain.Fields.Item("VO_NAME").Value  =  СокрЛП(СтруктураДокумента.ФизЛицо);
		//rsMain.Fields.Item("VO_POS").Value = СокрЛП(ДанныеПредставителя.Должность);
		//rsMain.Fields.Item("VO_NAME").Value = Строка(ФИО);
		//rsMain.Fields.Item("VO_POS").Value = Строка(Должность);
		
		rsMain.Post();
		
		ВыборСкидки = "СуммаСкидки";
		ВыборСуммы  =  "Сумма";	
// ТАБ2	     		
		РезультатЗапроса = СформироватьСчетПокупателя_Услуги(ВыборСуммы,ВыборСкидки,Документ); 
		  Контр  =  0;
		  Н = РезультатЗапроса.Количество();
		  Sum_2 = 0;
		  
		rsMain = Doc.DataSets("TAB2");  
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB2_F1").Value = СокрЛП(ВыборкаДетальныеЗаписи.КодУКТВЭД);
			
			ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура));
			НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура)," ");
			ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура),НайтиПробел,ДлинаСтроки));
			//rsMain.Fields.Item("TAB2_F2").Value = СокрЛП(ТекстДоПробела);
			//rsMain.Fields.Item("TAB2_F3").Value = СокрЛП(ТекстПослеПробела);
			
			
			//Try 
			//	//ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//	
			//	Если ЗначениеЗаполнено(ЕдИзм) тогда
			//		ЕдиницаИзмерения = ЕдИзм;
			//	Иначе	
			//		ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
			//	КонецЕсли;	
			//Исключение
			//EndTry;
			rsMain.Fields.Item("TAB2_F3").Value = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура);
				ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
			rsMain.Fields.Item("TAB2_F4").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB2_F5").Value = ВыборкаДетальныеЗаписи.Количество;
			rsMain.Fields.Item("TAB2_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB2_F7").Value = ВыборкаДетальныеЗаписи.Сумма;
				Sum_2 = Sum_2 + ВыборкаДетальныеЗаписи.Сумма;
			
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла;
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		rsMain.Fields.Item("Sum_2").Value = Sum_2;		
		
		//rsMain.Append();
		//rsMain.Post();
		
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
// ТАБ1	

		РезультатЗапроса = СформироватьСчетПокупателя_Товары(ВыборСуммы,ВыборСкидки,Документ); 
		
		  Контр2  =  Контр;// продолжаем нумерацию
		  Контр  =  0;
		  Н = РезультатЗапроса.Количество();			
		  Sum_1 = 0;
		  
		rsMain = Doc.DataSets("TAB1");  
		
		Для Каждого ВыборкаДетальныеЗаписи ИЗ РезультатЗапроса Цикл

			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = СокрЛП(ВыборкаДетальныеЗаписи.КодУКТВЭД);
			
			//ДлинаСтроки = СтрДлина(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			//НайтиПробел = Найти(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)," ");
			//ТекстДоПробела =  СокрЛП(Лев(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),?(НайтиПробел = 0,СтрДлина(НайтиПробел),НайтиПробел-1)));
			//ТекстПослеПробела =  СокрЛП(Сред(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),НайтиПробел,ДлинаСтроки));
			//rsMain.Fields.Item("TAB1_F2").Value = СокрЛП(ТекстДоПробела);
			rsMain.Fields.Item("TAB1_F2").Value = СокрЛП(ВыборкаДетальныеЗаписи.Артикул);
			//Try 
			//	УКТВЭД = ПолучитьКодУКТВЭД(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			//	Если ЗначениеЗаполнено(УКТВЭД) тогда
			//		КодУКТВЭД = УКТВЭД;
			//	Иначе	
			//		КодУКТВЭД = "";
			//	КонецЕсли;	
			//Исключение
			//EndTry;
            //rsMain.Fields.Item("TAB2_F2_1").Value = СтрЗаменить(КодУКТВЭД," ","");
			rsMain.Fields.Item("TAB1_F3").Value = СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура);
				ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.Количество;
			//Try 
			//	ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
			//	
			//	Если ЗначениеЗаполнено(ЕдИзм) тогда
			//		ЕдиницаИзмерения = ЕдИзм;
			//	Иначе	
			//		ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
			//	КонецЕсли;	
			//Исключение
			//EndTry;
			
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
			rsMain.Fields.Item("TAB1_F7").Value = ВыборкаДетальныеЗаписи.СуммаБезСкидки;
				Sum_1 = Sum_1 + ВыборкаДетальныеЗаписи.СуммаБезСкидки;
			
			rsMain.Post();
			Контр2  =  Контр2 + 1; 
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла;
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		rsMain.Fields.Item("Sum_1").Value = Sum_1;		
		
		//rsMain.Append();
		//rsMain.Post();
		
		Doc.EnableScripts();	
		Doc.Save();  
		Doc.Close();  
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;

	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_АктСвойШаблон_ACT_AR1(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		
		// DOCKING 459 + 22.11.2022
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация <> "SB" Тогда
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;	
		// DOCKING 459 - 22.11.2022
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
    
			rsMain.Fields.Item("RAHNUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("RAHDATE").Value = Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
				Если ЗначениеЗаполнено (СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати)) Тогда
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименованиеДляПечати);
				Иначе
					rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорНаименование);
				КонецЕсли;
        КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		rsMain.Fields.Item("VO_POS").Value = СокрЛП(ДанныеПредставителя.Должность);
		
		rsMain.Fields.Item("DATE_DOC").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		//rsMain.Fields.Item("DATA2").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ"); 
		
		rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
		rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
		//	rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
		//	rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		Иначе
			ИтогНДС  =  СтруктураДокумента.ИтогНДС;
		КонецЕсли;
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		Если Объект.Конфигурация  =  "УТП" Тогда
		//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		//11.01.2022 + DOCKING 368	
		ИначеЕсли Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда	
			ВыборСкидки = "СуммаРучнойСкидки";
		//11.01.2022 - DOCKING 368	
		Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		
		РезультатЗапроса = СформироватьРТУ(ВыборСкидки,Документ);
		Н  =  РезультатЗапроса.Количество();		
		
		rsMain = Doc.DataSets("TAB1"); 	

		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из РезультатЗапроса Цикл 	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_F2").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)); //Номенклатура
			rsMain.Fields.Item("TAB1_F3").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;	
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки; 
	
КонецПроцедуры // 12.05.2022 - DOCKING 406

&НаКлиенте
Процедура Формирование_АктСвойШаблон_USV(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		
		// DOCKING 459 + 22.11.2022
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация <> "SB" Тогда
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;	
		// DOCKING 459 - 22.11.2022
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
    
			rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагента);
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATE").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаДата);
			
        КонецЕсли;
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		rsMain.Fields.Item("VO_POS").Value = СокрЛП(ДанныеПредставителя.Должность);
		
		rsMain.Fields.Item("DOCDATE").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		//rsMain.Fields.Item("DATA2").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ"); 
		
		rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
		rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		
		ИтогНДС  =  СтруктураДокумента.ИтогНДСТовары;
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		Если Объект.Конфигурация  =  "УТП" Тогда
		//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		//11.01.2022 + DOCKING 368	
		ИначеЕсли Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда	
			ВыборСкидки = "СуммаРучнойСкидки";
		//11.01.2022 - DOCKING 368	
		Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		
		РезультатЗапроса = СформироватьПТУ_Товары(ВыборСкидки,Документ);
		Н  =  РезультатЗапроса.Количество();		
		
		rsMain = Doc.DataSets("TAB1"); 	

		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из РезультатЗапроса Цикл 	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_F2").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Наименование)); //Номенклатура
			rsMain.Fields.Item("TAB1_F3").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F4").Value = ЕдиницаИзмерения;
			rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;	
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки; 
	
КонецПроцедуры // 12.05.2022 - DOCKING 406

&НаКлиенте
Процедура Формирование_АктСвойШаблон_NP_AKT2R(orgId,  Документ,  Бланк,  ИД) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc  =  pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;
 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();  
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 		
		СведенияОПокупателе = СведенияОПокупателе(Документ, КодЯзыкаПечать);//БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);
		
		РуководителиКонтрагента = РуководителиКонтрагента(Документ);
		
		// DOCKING 459 + 22.11.2022
		//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
		Если Объект.Конфигурация <> "SB" Тогда
			ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
		КонецЕсли;	
		// DOCKING 459 - 22.11.2022
		
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;

        ДатаДокумента = СтруктураДокумента.Дата;
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		
		Если ЮрикФизик = "Физик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value = СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагента) Тогда
    
			rsMain.Fields.Item("DOG_NAME").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагента);
			rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
			rsMain.Fields.Item("DOG_DATE").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаДата);
			
        КонецЕсли;
		
		//Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) Тогда
		//	rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер);
		//КонецЕсли;
		//Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) Тогда
		//	rsMain.Fields.Item("DOG_DATE").Value =  Формат(СтруктураДокумента.ДоговорКонтрагентаДата,  "ДЛФ = Д");
		//КонецЕсли;	
		
		rsMain.Fields.Item("FIRM_TELEFON").Value  =  СокрЛП(СведенияОПоставщике.Телефоны); 
		rsMain.Fields.Item("FIRM_RS").Value  =  СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value  =  СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value  =  СокрЛП(МФО);
		rsMain.Fields.Item("FIRM_INN").Value  =  СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПоставщике.НомерСвидетельства); 	
		rsMain.Fields.Item("TAXSYSTEM").Value = ПолучитьСхемуНалогообложения(ДатаДокумента);		
		rsMain.Fields.Item("FIRM_ADR").Value  =  СокрЛП(СведенияОПоставщике.ЮридическийАдрес); 
		//rsMain.Fields.Item("VO_NAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизации);
		//rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
		
		rsMain.Fields.Item("DOCDATE").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ");
		//rsMain.Fields.Item("DATA2").Value = Формат(СтруктураДокумента.Дата, "ДДДММГГГГ"); 
		
		rsMain.Fields.Item("SIDE_DIR_POS").Value = ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента);
		rsMain.Fields.Item("SIDE_CD_K").Value    = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("SIDE_DIR_FIO").Value = СокрЛП(РуководителиКонтрагента.РуководительПредставление);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
		//	rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
		//	rsMain.Fields.Item("TEXT_SIDE_E_D").Value = "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value = СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CDADR_K").Value  =  СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("SIDE_CODENDS_K").Value  =  СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		rsMain.Fields.Item("SIDE_CDINDTAXNUM_K").Value  =  СокрЛП(СведенияОПокупателе.ИНН);	                                                                 
		rsMain.Fields.Item("SIDE_TEL_K").Value  =  СокрЛП(СведенияОПокупателе.Телефоны); 
		rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(СтруктураДокумента.Получил);
		
		rsMain.Fields.Item("SIDE_DEPT_K").Value = СтруктураДокумента.КонтрагентКодФилиала; 
		rsMain.Fields.Item("SIDE_CDSHR_K").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("SIDE_BANK_K").Value = СокрЛП(СведенияОПокупателе.Банк); 
		rsMain.Fields.Item("SIDE_MFO_K").Value = СокрЛП(СведенияОПокупателе.МФО); 
		
		ИтогСуммаСНДС  =  СтруктураДокумента.СуммаДокумента;
		
		ИтогНДС  =  СтруктураДокумента.ИтогНДСУслуги;
		
		
		ИтогСуммаБезНДС  =  ИтогСуммаСНДС - ИтогНДС;
		
		rsMain.Fields.Item("SUMWITHOUTPDV").Value  =  ИтогСуммаБезНДС;  
		rsMain.Fields.Item("SUMPDV").Value  =  ИтогНДС; 
		rsMain.Fields.Item("DOCSUM").Value  =  ИтогСуммаСНДС; 
		rsMain.Fields.Item("MISZE_SKL").Value = СокрЛП(СтруктураДокумента.МестоСоставленияДокумента); 
		
		rsMain.Fields.Item("SUMWITHOUTPDV_TEXT").Value=ИтогСуммаБезНДС; 
		rsMain.Fields.Item("SUMPDV_TEXT").Value = ИтогНДС;
		rsMain.Fields.Item("DOCSUM_TEXT").Value = ИтогСуммаСНДС;
		
		rsMain.Post(); 			                    
		Контр  =  0; 
		
		Если Объект.Конфигурация  =  "УТП" Тогда
		//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		//11.01.2022 + DOCKING 368	
		ИначеЕсли Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда	
			ВыборСкидки = "СуммаРучнойСкидки";
		//11.01.2022 - DOCKING 368	
		Иначе
		//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		
		РезультатЗапроса = СформироватьПТУ_Услуги(ВыборСкидки,Документ);
		Н  =  РезультатЗапроса.Количество();		
		
		rsMain = Doc.DataSets("TAB1"); 	

		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ВыборкаДетальныеЗаписи Из РезультатЗапроса Цикл 	
			rsMain.Edit(); 
			rsMain.Fields.Item("TAB1_F1").Value = Контр + 1;
			rsMain.Fields.Item("TAB1_F2").Value = Строка(СокрЛП(ВыборкаДетальныеЗаписи.Содержание)); //Номенклатура
			rsMain.Fields.Item("TAB1_F4").Value = ВыборкаДетальныеЗаписи.Количество;
			Try 
				ЕдИзм = ПолучитьНаименованиеЕдиницы(СокрЛП(ВыборкаДетальныеЗаписи.КодНоменклатуры));
				
				Если ЗначениеЗаполнено(ЕдИзм) тогда
					ЕдиницаИзмерения = ЕдИзм;
				Иначе	
					ЕдиницаИзмерения =  Строка(СокрЛП(ВыборкаДетальныеЗаписи.Единица));
				КонецЕсли;	
			Исключение
			EndTry;
			rsMain.Fields.Item("TAB1_F3").Value = ЕдиницаИзмерения;
			//rsMain.Fields.Item("TAB1_F5").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;	
			rsMain.Fields.Item("TAB1_F6").Value = ВыборкаДетальныеЗаписи.Сумма; 
			
			rsMain.Post();  		
			Контр  =  КОнтр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();  
			КонецЕсли;  
		КонецЦикла;
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close(); 
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
		//Возврат;
	КонецПопытки; 
	
КонецПроцедуры // 12.05.2022 - DOCKING 406

&НаКлиенте
Процедура Формирование_АктаСверки(OrgId, Документ, Бланк, ИД)
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		pd = App.GetPrimaryDocs(); 
		Doc = pd.OpenOrCreateDocument(orgId,  Бланк, , ,  ИД,  0);
		Попытка
			Doc.DisableScripts();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
		ВызватьИсключение
		КонецПопытки;

		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе = СведенияОПокупателе(Документ,КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ,КодЯзыкаПечать);
        ДатаДокумента = ОбъектДокументДата(Документ);
		//12.01.2022 + DOCKING 368
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			СверкаСогласована = ОбъектДокументСогласованаСверка(Документ);
			ДатаОкончания = ОбъектДокументКонецПериода(Документ);
			ДатаНачала = ОбъектДокументНачалоПериода(Документ);
			ПредставительКонтрагента = ОбъектДокументКонтактноеЛицо(Документ);
			ПредставительОрганизации = ОбъектДокументРуководитель(Документ);
			СтруктураДоговорКонтрагента = ОбъектДокументДоговор(Документ);
		//12.01.2022 - DOCKING 368
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			СверкаСогласована = ОбъектДокументСогласованаСверка(Документ);
			ДатаОкончания = ОбъектДокументКонецПериода(Документ);
			ДатаНачала = ОбъектДокументНачалоПериода(Документ);
			ПредставительКонтрагента = ОбъектДокументПредставительКонтрагента(Документ);
		    ПредставительОрганизации = ОбъектДокументПодписьОтветственного(Документ);
			СтруктураДоговорКонтрагента = ОбъектДокументТЧДоговорКонтрагента(Документ);
			ОстатокНаНачало = ОбъектДокументСальдоНачалоПериода(Документ);
		Иначе
			ВалютаДокумента = ОбъектДокументВалютаДокумента(Документ);
			ОстатокНаНачало = ОбъектДокументОстатокНаНачало(Документ);
			СверкаСогласована = ОбъектДокументСверкаСогласована(Документ);
			Расхождение = ОбъектДокументРасхождение(Документ);
			ДатаОкончания = ОбъектДокументДатаОкончания(Документ);
			ДатаНачала = ОбъектДокументДатаНачала(Документ);
			ПредставительКонтрагента = ОбъектДокументПредставительКонтрагента(Документ);
			ПредставительОрганизации = ОбъектДокументПредставительОрганизации(Документ);
			СтруктураДоговорКонтрагента = ОбъектДокументДоговорКонтрагента(Документ);
		КонецЕсли;	
		
		
		rsMain.Fields.Item("DOCDATE").Value  =  ДатаДокумента;
		rsMain.Fields.Item("NUM").Value = ПолучитьНомерБезНулей(Документ); 

		rsMain.Fields.Item("VALUTA_CHARCODE").Value  =  СокрЛП(ВалютаДокумента);
		rsMain.Fields.Item("NA_KORIST_TEXT").Value  =  "на користь";
		
		
		rsMain.Fields.Item("DOCDATE").Value = ДатаДокумента;  	
		rsMain.Fields.Item("FIRM_NAME").Value  =  СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		//rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН);
		rsMain.Fields.Item("DATA_BEG").Value  =  ДатаНачала;
		rsMain.Fields.Item("DATA_END").Value  =  ДатаОкончания;
		rsMain.Fields.Item("DATA1").Value = ДатаОкончания; 
		
		Если ЗначениеЗаполнено(СтруктураДоговорКонтрагента.Представление) Тогда
			rsMain.Fields.Item("ZA_DOGOVOROM").Value = "за договором";
			rsMain.Fields.Item("NUM_DOG").Value = "№";
			rsMain.Fields.Item("DATA_DOG").Value = "від";
		КонецЕсли;
	
		rsMain.Fields.Item("DOG_NAME").Value = СтруктураДоговорКонтрагента.Представление;
		rsMain.Fields.Item("DOG_NUM").Value = СокрЛП(СтруктураДоговорКонтрагента.Номер);
		rsMain.Fields.Item("DOG_DATE").Value = ?(СтруктураДоговорКонтрагента.Дата <> Дата(1,1,1),СтруктураДоговорКонтрагента.Дата,"");
		
		Если Объект.Конфигурация = "УТ" Тогда		
		Иначе  
			//ДанныеПредставителяОрганизации  =  ОбщегоНазначения.ДанныеФизическогоЛица(Документ.Организация, Документ.ПредставительОрганизации,  Документ.Дата);
			rsMain.Fields.Item("VO_NAME").Value  =  СокрЛП(ПредставительОрганизации);
			rsMain.Fields.Item("SIDE_OTV_FIO").Value = СокрЛП(ПредставительКонтрагента);
			rsMain.Fields.Item("VO_PIB").Value  =  ?(ЗначениеЗаполнено(ПредставительОрганизации), СокрЛП(ПредставительОрганизации), "");
			rsMain.Fields.Item("SIDE_OTV_FIO_S").Value  = ?(ЗначениеЗаполнено(ПредставительКонтрагента), СокрЛП(ПредставительКонтрагента), "");

			СтруктураДокумента = ПолучитьОбъектНаСервере(Документ);
			
			//12.01.2022 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(СтруктураДокумента.ПредставительОрганизацииДолжность);
				rsMain.Fields.Item("SIDE_OTV_DOL").Value  = СокрЛП(СтруктураДокумента.ДолжностьРуководителяКонтрагента);
				
			ИначеЕсли Объект.Конфигурация = "SB" Тогда
				rsMain.Fields.Item("VO_POSTNAME").Value = "";
				rsMain.Fields.Item("SIDE_OTV_DOL").Value  = "";
				
			Иначе
				//ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СтруктураДокумента.Организация,ПредставительОрганизации, ДатаДокумента);
				ОбщМодуль = ПолучитьДанныеПредставителяИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СтруктураДокумента.Организация,СтруктураДокумента.ПредставительОрганизации, СтруктураДокумента.Дата);
			Если ОбщМодуль <> Ложь Тогда
				ДанныеПредставителя = ОбщМодуль.ДанныеПредставителя;
				rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
			Иначе
				ДанныеПредставителя = "";
			КонецЕсли;
				//rsMain.Fields.Item("VO_POSTNAME").Value = СокрЛП(ДанныеПредставителя.Должность);
				rsMain.Fields.Item("SIDE_OTV_DOL").Value  = ОбъектДокументПредставительКонтрагентаДолжность(Документ);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЮрикФизик = "Юрик" Тогда 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ЄДРПОУ"; 
		Иначе 
			rsMain.Fields.Item("FIRM_EDRPOU").Value  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
			rsMain.Fields.Item("TEXT_FIRM_E_D").Value  =  "код за ДРФО";
		КонецЕсли;
		
		rsMain.Fields.Item("SIDE_CD_K").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		
		Если ЗначениеЗаполнено(СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ)) Тогда	
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ЄДРПОУ";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ); 
		Иначе 
			rsMain.Fields.Item("TEXT_SIDE_E_D").Value  =  "код за ДРФО";
			rsMain.Fields.Item("SIDE_EDRPOU_K").Value  =  СокрЛП(СведенияОПокупателе.КодПоДРФО);
		КонецЕсли;
		
		//13.01.2022 + DOCKING 368
		Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда
			Если ОстатокНаНачало > 0 тогда    
				rsMain.Fields.Item("SND_ORG").Value  =  ОстатокНаНачало; 
				rsMain.Fields.Item("SNK_SIDE").Value  =  ОстатокНаНачало; 
			Иначе 
				rsMain.Fields.Item("SNK_ORG").Value  =  Макс(ОстатокНаНачало,  -ОстатокНаНачало); 
				rsMain.Fields.Item("SND_SIDE").Value  =  Макс(ОстатокНаНачало,  -ОстатокНаНачало); 
			КонецЕсли;
		КонецЕсли;	
		//13.01.2022 - DOCKING 368	
		
        //+202 26.05.2021 
        СтруктураКонтр = Новый Структура;
        //-202 26.05.2021   
        
		
		//13.01.2022 + DOCKING 368
		//ТаблицаАктаСверки  =  СоздатьТаблицуАктаСверки(Документ, СтруктураКонтр); 
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ТаблицаАктаСверки  =  СоздатьТаблицуАктаСверкиКУП(Документ, СтруктураКонтр);
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			ТаблицаАктаСверки  =  СоздатьТаблицуАктаСверкиСБ(Документ, СтруктураКонтр);
		Иначе
			ТаблицаАктаСверки  =  СоздатьТаблицуАктаСверки(Документ, СтруктураКонтр); 	
		КонецЕсли;
		//13.01.2022 - DOCKING 368
		
		rsMain = Doc.DataSets("TAB1");
		КоличествоСтрок = ТаблицаАктаСверки.Количество();
		Счетчик  =  0;
		ОборотыПоДебету = 0 ;
		ОборотыПоКредиту = 0 ; 
		ОборотыДтКонтр = 0;
		ОборотыКтКонтр = 0;
        
        Для Каждого СтрокаТЗ Из ТаблицаАктаСверки Цикл
			rsMain.Edit();
			//13.01.2022 + DOCKING 368
			Если (Объект.Конфигурация = "КУП" И НЕ ИмяКлиентскойБазы = "КУП25" ) ИЛИ (Объект.Конфигурация = "ERP" И НЕ ИмяКлиентскойБазы = "ERP25") Тогда
				
				rsMain.Fields.Item("TAB1_DATA_SIDE").Value  =  СокрЛП(СтрокаТЗ.ДатаДок);
				rsMain.Fields.Item("TAB1_DOC_SIDE").Value  =  СокрЛП(СтрокаТЗ.Док);
				rsMain.Fields.Item("TAB1_DT_SIDE").Value  =  СтрокаТЗ.ДТКонтрагента;
				rsMain.Fields.Item("TAB1_KT_SIDE").Value  =  СтрокаТЗ.КТКонтрагента;   			
				
				rsMain.Fields.Item("TAB1_DT_ORG").Value  =  СтрокаТЗ.КТКонтрагента;
				rsMain.Fields.Item("TAB1_KT_ORG").Value  =  СтрокаТЗ.ДТКонтрагента;
				rsMain.Fields.Item("TAB1_DATA_ORG").Value  =  СокрЛП(СтрокаТЗ.ДатаДок);
				rsMain.Fields.Item("TAB1_DOC_ORG").Value  =  СокрЛП(СтрокаТЗ.Док);
			//30.11.2023 + DOCKING 517		
			//ИначеЕсли  Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25" Тогда
			ИначеЕсли  (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда	
				ДТК = ?(СтрокаТЗ.ДТКонтрагента<0,-СтрокаТЗ.ДТКонтрагента,СтрокаТЗ.ДТКонтрагента);
				КТК = ?(СтрокаТЗ.КТКонтрагента<0,-СтрокаТЗ.КТКонтрагента,СтрокаТЗ.КТКонтрагента);   			
				
				rsMain.Fields.Item("TAB1_DATA_SIDE").Value  =  СокрЛП(СтрокаТЗ.ДатаДок);
				rsMain.Fields.Item("TAB1_DOC_SIDE").Value  =  СокрЛП(СтрокаТЗ.Док);
				rsMain.Fields.Item("TAB1_DT_SIDE").Value  =  ДТК;
				rsMain.Fields.Item("TAB1_KT_SIDE").Value  =  КТК;
				
				rsMain.Fields.Item("TAB1_DT_ORG").Value  =  КТК;
				rsMain.Fields.Item("TAB1_KT_ORG").Value  =  ДТК;
				rsMain.Fields.Item("TAB1_DATA_ORG").Value  =  СокрЛП(СтрокаТЗ.ДатаДок);
				rsMain.Fields.Item("TAB1_DOC_ORG").Value  =  СокрЛП(СтрокаТЗ.Док);
            //30.11.2023 - DOCKING 517	
				
			Иначе
			//13.01.2022 - DOCKING 368	
				rsMain.Fields.Item("TAB1_DATA_ORG").Value  =  СтрокаТЗ.ДАТАОрганизации;
				rsMain.Fields.Item("TAB1_DOC_ORG").Value  =  СокрЛП(СтрокаТЗ.ПредставлениеОрганизации);
				rsMain.Fields.Item("TAB1_DT_ORG").Value  =  СтрокаТЗ.ДТОрганизации;
				rsMain.Fields.Item("TAB1_KT_ORG").Value  =  СтрокаТЗ.КТОрганизации;
				rsMain.Fields.Item("TAB1_DATA_SIDE").Value  =  СтрокаТЗ.ДАТАКонтрагента;
				rsMain.Fields.Item("TAB1_DOC_SIDE").Value  =  СокрЛП(СтрокаТЗ.ПредставлениеКонтрагента);
				rsMain.Fields.Item("TAB1_DT_SIDE").Value  =  СтрокаТЗ.ДТКонтрагента;
				rsMain.Fields.Item("TAB1_KT_SIDE").Value  =  СтрокаТЗ.КТКонтрагента;   			
				
			КонецЕсли;
			rsMain.Post(); 

			//+202 26.05.2021
            //ОборотыПоДебету = ОборотыПоДебету + ?(СтрокаТЗ.ДТОрганизации = Неопределено,0,СтрокаТЗ.ДТОрганизации);
            //ОборотыПоКредиту = ОборотыПоКредиту +  ?(СтрокаТЗ.КТОрганизации = Неопределено,0,СтрокаТЗ.КТОрганизации);
			//ОборотыДтКонтр = ОборотыДтКонтр + ?(СтрокаТЗ.ДТКонтрагента = Неопределено,0,СтрокаТЗ.ДТКонтрагента);
			//ОборотыКтКонтр = ОборотыКтКонтр + ?(СтрокаТЗ.КТКонтрагента = Неопределено,0,СтрокаТЗ.КТКонтрагента);						
			
			//13.01.2022 + DOCKING 368
			
			//Если Объект.Конфигурация = "КУП" ИЛИ (Объект.Конфигурация = "ERP" И НЕ ИмяКлиентскойБазы = "ERP25") Тогда
			Если (Объект.Конфигурация = "КУП" И НЕ ИмяКлиентскойБазы = "КУП25" ) ИЛИ (Объект.Конфигурация = "ERP" И НЕ ИмяКлиентскойБазы = "ERP25") Тогда	
				СтрокаТЗ.ДТКонтрагента = ?(СтрокаТЗ.ДТКонтрагента = Неопределено, 0, СтрокаТЗ.ДТКонтрагента);
				СтрокаТЗ.КТКонтрагента = ?(СтрокаТЗ.КТКонтрагента = Неопределено, 0, СтрокаТЗ.КТКонтрагента);
				
				ОборотыДтКонтр = ОборотыДтКонтр + ?(СверкаСогласована,?(СтрокаТЗ.ДТКонтрагента=0 И СтруктураКонтр.ДтКонтр=0,
													СтрокаТЗ.КТОрганизации,СтрокаТЗ.ДТКонтрагента),СтрокаТЗ.ДТКонтрагента);
				ОборотыКтКонтр = ОборотыКтКонтр + ?(СверкаСогласована,?(СтрокаТЗ.КТКонтрагента=0 И СтруктураКонтр.КтКонтр=0,
													СтрокаТЗ.ДТОрганизации,СтрокаТЗ.КТКонтрагента),СтрокаТЗ.КТКонтрагента);
			//30.11.2023 + DOCKING 517
			ИначеЕсли  (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25" ) ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда	
																	
				ДТК = ?(ДТК = Неопределено, 0, ДТК);
				КТК = ?(КТК = Неопределено, 0, КТК);
				
				
				ОборотыДтКонтр = ОборотыДтКонтр + ?(СверкаСогласована,?(ДТК=0 И СтруктураКонтр.ДтКонтр=0,
													СтрокаТЗ.КТОрганизации,ДТК),ДТК);
				ОборотыКтКонтр = ОборотыКтКонтр + ?(СверкаСогласована,?(КТК=0 И СтруктураКонтр.КтКонтр=0,
													СтрокаТЗ.ДТОрганизации,КТК),КТК);
			//30.11.2023 - DOCKING 517	
			Иначе
			//13.01.2022 - DOCKING 368	
	            СтрокаТЗ.ДТОрганизации = ?(СтрокаТЗ.ДТОрганизации = Неопределено, 0, СтрокаТЗ.ДТОрганизации);
				СтрокаТЗ.КТОрганизации = ?(СтрокаТЗ.КТОрганизации = Неопределено, 0, СтрокаТЗ.КТОрганизации);
	            СтрокаТЗ.ДТКонтрагента = ?(СтрокаТЗ.ДТКонтрагента = Неопределено, 0, СтрокаТЗ.ДТКонтрагента);
				СтрокаТЗ.КТКонтрагента = ?(СтрокаТЗ.КТКонтрагента = Неопределено, 0, СтрокаТЗ.КТКонтрагента);
	            
	            ОборотыПоДебету = ОборотыПоДебету + СтрокаТЗ.ДТОрганизации;
				ОборотыПоКредиту = ОборотыПоКредиту + СтрокаТЗ.КТОрганизации;
				
				ОборотыДтКонтр = ОборотыДтКонтр + ?(СверкаСогласована,?(СтрокаТЗ.ДТКонтрагента=0 И СтруктураКонтр.ДтКонтр=0,
													СтрокаТЗ.КТОрганизации,СтрокаТЗ.ДТКонтрагента),СтрокаТЗ.ДТКонтрагента);
				ОборотыКтКонтр = ОборотыКтКонтр + ?(СверкаСогласована,?(СтрокаТЗ.КТКонтрагента=0 И СтруктураКонтр.КтКонтр=0,
													СтрокаТЗ.ДТОрганизации,СтрокаТЗ.КТКонтрагента),СтрокаТЗ.КТКонтрагента);
				//-202 26.05.2021
				
			КонецЕсли;
			
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;		
		КонецЦикла; 
		
		rsMain = Doc.DataSets();     	  		  
		rsMain.Edit();
		rsMain.Append();
		//rsMain.Post();

		//13.01.2022 + DOCKING 368
		Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
		//13.01.2022 - DOCKING 368	
			rsMain.Fields.Item("OB_DT_ORG").Value = ОборотыПоДебету;
			rsMain.Fields.Item("OB_KT_ORG").Value = ОборотыПоКредиту;
		Иначе
			rsMain.Fields.Item("OB_DT_ORG").Value = ОборотыКтКонтр;
			rsMain.Fields.Item("OB_KT_ORG").Value = ОборотыДтКонтр;
			
		КонецЕсли;
		
		
		rsMain.Fields.Item("OB_DT_SIDE").Value = ОборотыДтКонтр;
		rsMain.Fields.Item("OB_KT_SIDE").Value = ОборотыКтКонтр;
		
		//ОборотДт = Документ.ПоДаннымОрганизации.Итог("Дебет");
		//ОборотКт = Документ.ПоДаннымОрганизации.Итог("Кредит");
		//13.01.2022 + DOCKING 368
		Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
		//13.01.2022 - DOCKING 368
			ОстатокНаКонец = ОстатокНаНачало + ОборотыПоДебету - ОборотыПоКредиту;
			ОстатокНаКонецКонтр = ОстатокНаНачало - ОборотыДтКонтр + ОборотыКтКонтр;
		Иначе
			//02.05.2022 + DOCKING 396
			//ОстатокНаКонецКонтр = ОборотыДтКонтр + ОборотыКтКонтр;
			ОстатокНаКонецКонтр = -ОборотыДтКонтр + ОборотыКтКонтр;
			//02.05.2022 - DOCKING 396
		КонецЕсли;	

        //13.01.2022 + DOCKING 368
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		//13.01.2022 - DOCKING 368
		
			rsMain.Fields.Item("NA_KORIST").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			//rsMain.Fields.Item("SK_DT_ORG").Value = 0;
			//rsMain.Fields.Item("SK_KT_ORG").Value = 0;
			//rsMain.Fields.Item("DOCSUM").Value = 0;
			
			ОстатокНаКонец = 0;
			ОстатокНаКонец = ОборотыДтКонтр - ОборотыКтКонтр;
			//****************************************************
			rsMain.Fields.Item("SK_KT_ORG").Value = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
			rsMain.Fields.Item("SK_DT_ORG").Value = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
			
			//Если ОстатокНаКонец > 0 Тогда
			//	rsMain.Fields.Item("DOCSUM").Value = ОстатокНаКонец;
			//ИначеЕсли ОстатокНаКонец < 0 Тогда
			//	rsMain.Fields.Item("DOCSUM").Value = -ОстатокНаКонец;
			//КонецЕсли;
			
		Иначе
			Если ОстатокНаКонец > 0 Тогда			
				rsMain.Fields.Item("NA_KORIST").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				rsMain.Fields.Item("NA_KORIST").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
			КонецЕсли;
			
			rsMain.Fields.Item("SK_DT_ORG").Value = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
			rsMain.Fields.Item("SK_KT_ORG").Value = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);

	        //+202 26.05.2021 
	        //rsMain.Fields.Item("SK_DT_SIDE").Value = ?(ОстатокНаКонецКонтр < 0, -ОстатокНаКонецКонтр, 0);
	        //rsMain.Fields.Item("SK_KT_SIDE").Value = ?(ОстатокНаКонецКонтр > 0, ОстатокНаКонецКонтр, 0); 
	        //-202 26.05.2021   		
			//Если ОстатокНаКонецКонтр < 0 Тогда        			
			//	rsMain.Fields.Item("SK_DT_SIDE").Value = ОстатокНаКонецКонтр;
			//ИначеЕсли ОстатокНаКонецКонтр > 0 Тогда
			//	rsMain.Fields.Item("SK_KT_SIDE").Value = ОстатокНаКонецКонтр;  					
			//КонецЕсли;
			
			Если ОстатокНаКонец > 0 Тогда
				rsMain.Fields.Item("DOCSUM").Value = ОстатокНаКонец;
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				rsMain.Fields.Item("DOCSUM").Value = -ОстатокНаКонец;
			КонецЕсли;
			
		КонецЕсли;

		//11.02.2022 + DOCKING 392
		//Если СверкаСогласована =  Истина Тогда
		//11.02.2022 - DOCKING 392
		
            //+202 26.05.2021 
            rsMain.Fields.Item("SK_DT_SIDE").Value = ?(ОстатокНаКонецКонтр < 0, -ОстатокНаКонецКонтр, 0);
            rsMain.Fields.Item("SK_KT_SIDE").Value = ?(ОстатокНаКонецКонтр > 0, ОстатокНаКонецКонтр, 0); 
            //-202 26.05.2021
			//-------------------------------------------------------------
			//21.12.2021 + DOCKING 377
			//Если ОстатокНаКонец+ОстатокНаКонецКонтр<>0 Тогда
			Если ОстатокНаКонец+ОстатокНаКонецКонтр<>0 И Расхождение <> 0 И НЕ Расхождение = Неопределено Тогда
			//21.12.2021 - DOCKING 377
            	rsMain.Fields.Item("REZ_T").Value = "В результаті звірення виявлена розбіжність інформації про стан розрахунків у розмірі";
				rsMain.Fields.Item("REZ_S").Value = Расхождение;
				rsMain.Fields.Item("REZ_V").Value =  СокрЛП(ВалютаДокумента);
			КонецЕсли;	
			rsMain.Fields.Item("SV_ZD").Value =  "За даними"; 
			rsMain.Fields.Item("SV_SIDE").Value =  СокрЛП(СведенияОПокупателе.ПолноеНаименование); 
			rsMain.Fields.Item("SV_NA").Value =  "на"; 
			rsMain.Fields.Item("SV_DATA").Value =  ДатаОкончания; 

            rsMain.Fields.Item("SV_NA_KORIST_TEXT").Value =  "заборгованість на користь";
            rsMain.Fields.Item("SV_V").Value =  СокрЛП(ВалютаДокумента); 
            //+202 26.05.2021 
            //Если ОстатокНаКонецКонтр > 0 Тогда
            //	rsMain.Fields.Item("SV_NA_KORIST").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование); 
            //	rsMain.Fields.Item("SV_DOCSUM").Value = ОстатокНаКонец; 
            //ИначеЕсли ОстатокНаКонецКонтр < 0 Тогда
            //	rsMain.Fields.Item("SV_NA_KORIST").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
            //	rsMain.Fields.Item("SV_DOCSUM").Value = -ОстатокНаКонец;	
            //КонецЕсли;
            Если ОстатокНаКонецКонтр > 0 Тогда
                rsMain.Fields.Item("SV_NA_KORIST").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование); 
                rsMain.Fields.Item("SV_DOCSUM").Value = ОстатокНаКонецКонтр; 
            ИначеЕсли ОстатокНаКонецКонтр < 0 Тогда
                rsMain.Fields.Item("SV_NA_KORIST").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
                rsMain.Fields.Item("SV_DOCSUM").Value = -ОстатокНаКонецКонтр;	
            КонецЕсли;
            //-202 26.05.2021   		
        //КонецЕсли;
		
		rsMain.Post();   
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save();  
		Doc.Close();
		
		Попытка
		Если СозданиеКонтрагентовМед = Истина Тогда
			Попытка
				СозданиеКонтрагентовМедок(App, Документ, orgId);
			Исключение
				Сообщить("Не удалось создать контрагента в Медке",);
				ВызватьИсключение;
			КонецПопытки;	
		КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;  
	
КонецПроцедуры

&НаКлиенте
Функция Формирование_НН(Документ,  Бланк,  PDate,  ИД, orgId, НайденнаяСтрока)  
		
	Перем Позиция;	
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("Medoc.ZApplication"); 
	//	yes  =  App.SelectFirm(КодПоЕДРПОУ,  пФил); 
	//	ЕСЛИ yes ТОГДА 
			Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0);
			
			Попытка
				Doc.DisableScripts();
			Исключение
				Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
				Возврат Ложь
			КонецПопытки;
		//Конецесли;
		
		a131_1 = 0;
		a131_2 = 0;
		a133_1 = 0;
		a133_2 = 0;
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе = СведенияОПокупателе(Документ,КодЯзыкаПечать);
		СведенияОПродавце = СведенияОПоставщике(Документ,КодЯзыкаПечать);
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); 
		
		//запускается процедура печати документа "Налоговая накладная",  которая формирует структуру данных НН
		Если  Объект.Конфигурация = "ERP" 
			// 18.01.2022 + DOKING 369
			ИЛИ Объект.Конфигурация = "КУП"
			// 18.01.2022 - DOKING 369
			Тогда
			Попытка
				
				СтруктураПараметров = СтруктураПараметров(Документ,,НайденнаяСтрока.ТипСтрока);
				ПоляНН = СтруктураПараметров.НалоговыйДокумент;
				
				СтруктураДанныеТЧ = СтруктураПараметров.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
				
			Исключение
				Сообщить(ОписаниеОшибки());
				Сообщить(НСТР("ru = 'Заполнение по данным документа невозможно в данной версии конфигурации.'; uk = 'Заповнення даними документа неможливе на поточній версії конфигурації.'"));
				Возврат Ложь;
			КонецПопытки;
		Иначе
			
			Попытка
				Если ЗначениеЗаполнено(СтруктураДокумента.ПродажаНижеОбычнойЦены) Тогда
					СтруктураПараметров = СтруктураПараметров(Документ,Истина,НайденнаяСтрока.ТипСтрока);
					ПоляНН = СтруктураПараметров.НалоговыйДокументЗЦ;
				Иначе
					СтруктураПараметров = СтруктураПараметров(Документ,,НайденнаяСтрока.ТипСтрока);
					ПоляНН = СтруктураПараметров.НалоговыйДокумент;
				КонецЕсли; 
				
				СтруктураДанныеТЧ = СтруктураПараметров.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
				
			Исключение
				Сообщить(ОписаниеОшибки());
				Сообщить(НСТР("ru = 'Заполнение по данным документа невозможно в данной версии конфигурации.'; uk = 'Заповнення даними документа неможливе на поточній версії конфигурації.'"));
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если Объект.Конфигурация = "УПП" или Объект.Конфигурация = "УТП" или Объект.Конфигурация = "ERP" или Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "SB" Тогда
			ТекТелефоныОрганизации  =  СведенияОПродавце.Телефоны;
			Позиция1  =  Найти (ТекТелефоныОрганизации, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныОрганизации, ", ")) Тогда  
				Позиция1  =  Сред(ТекТелефоныОрганизации, 1, Позиция1-1);
			Иначе
				Позиция1 =  ТекТелефоныОрганизации;
			КонецЕсли;   		
			Позиция1  =  СтрЗаменить(Позиция1,  " ",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "(",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  ")",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "-",  ""); 
			ТекТелефоныОрганизации  =  Позиция1;       
			//---------------------------------------------------------------------
			ТекТелефоныКонтрагента  =  СведенияОПокупателе.Телефоны;
			Позиция2  =  Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2  =  Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 =  ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2  =  СтрЗаменить(Позиция2,  " ",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "(",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  ")",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента  =  Позиция2;
		Иначе	
			//ТекТелефоныОрганизации  =  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,     "Телефоны, ",           Ложь);
			//ТекТелефоныОрганизации  =  ОбщегоНазначенияБПВызовСервера.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			//ТекТелефоныКонтрагента  =  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
			//ТекТелефоныКонтрагента  =  ОбщегоНазначенияБПВызовСервера.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
			
			ОбщМодуль = ПолучитьТелефоныИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СведенияОПродавце,СведенияОПокупателе);
			
			Если ОбщМодуль <> Ложь Тогда
				ТекТелефоныОрганизации = ОбщМодуль.ТекТелефоныОрганизации;
				ТекТелефоныКонтрагента = ОбщМодуль.ТекТелефоныКонтрагента;
			Иначе
				ТекТелефоныОрганизации = "";
				ТекТелефоныКонтрагента = "";
			КонецЕсли;
			
		КонецЕсли;
		
		rsMain.Fields.Item("N11").Value  =  СокрЛП(ПоляНН.HFILL);        
		
		Попытка	
			rsMain.Fields.Item("N13").Value  = ?(ЗначениеЗаполнено(ПоляНН.HORIG1), 1, "");  
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("N14").Value  = СокрЛП(ПоляНН.HTYPR);
		Исключение
		КонецПопытки;
		
		Попытка	
			Если Строка(СтруктураДокумента.ВидОперации) = "Операции, освобожденные от  НДС" 
				или Строка(СтруктураДокумента.ВидОперации) ="Операції, звільнені від ПДВ" 
				или Строка(СтруктураДокумента.ВидОперации) ="Итоговая в рознице по освобожденному НДС"
				или Строка(СтруктураДокумента.ВидОперации) ="Підсумкова в роздробі по звільненому ПДВ" 
				или Строка(СтруктураДокумента.ВидОперации) ="Підсумкова в роздробі за операціями, що звільнені від ПДВ"
				или Строка(СтруктураДокумента.ВидОперации) ="Реализация в розницу плательщику НДС по освобожденному НДС"	
				или Строка(СтруктураДокумента.ВидОперации) ="Реалізація в роздріб платнику ПДВ по звільненому ПДВ"
				или Строка(СтруктураДокумента.ВидОперации) ="Реалізація в роздріб платникові ПДВ по звільненому ПДВ" 
				
				Тогда
				rsMain.Fields.Item("N26").Value = "Без ПДВ";
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если СтруктураДокумента.Сводная Тогда
			rsMain.Fields.Item("N27").Value = ПоляНН.R01G1;
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(ПоляНН.H03) Тогда
				rsMain.Fields.Item("N25").Value  = "1";
				Сведенная = 1;
			КонецЕсли;
		Исключение
		КонецПопытки;	
		
		// DOCKING 513 + 30.05.2023
		Если НЕПередаватьРеквизитыДоговора = Ложь Тогда
		// DOCKING 513 - 30.05.2023			
			Попытка
				rsMain.Fields.Item("N8").Value   =  Строка(СокрЛП(СтруктураДокумента.ВидДоговора)); 
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаНомер) тогда
					rsMain.Fields.Item("N81").Value  =  Строка(СокрЛП(СтруктураДокумента.ДоговорКонтрагентаНомер)); 
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) тогда
					rsMain.Fields.Item("N82").Value      =  СтруктураДокумента.ДоговорКонтрагентаДата; 
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		rsMain.Fields.Item("N4").Value   = СокрЛП(ПоляНН.HKBUY); //Строка(СокрЛП(СведенияОПокупателе.ПолноеНаименование)); 
		rsMain.Fields.Item("N3").Value   = СокрЛП(ПоляНН.HNAMEBUY); //Строка(СокрЛП(СведенияОПокупателе.ИНН));
		Попытка
			rsMain.Fields.Item("DEPT_POK").Value = СокрЛП(ПоляНН.HFBUY);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("N10").Value = СокрЛП(ПоляНН.HBOS);//Строка(СокрЛП(КтоВыписалНалоговуюНакладную));
			rsMain.Fields.Item("INN").Value = СокрЛП(ПоляНН.HKBOS);
		Исключение
		КонецПопытки;	
		
		rsMain.Fields.Item("EDR_POK").Value = СокрЛП(ПоляНН.HTINBUY);
		попытка
			rsMain.Fields.Item("KB").Value = СокрЛП(ПоляНН.HKB);
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтруктураДокумента.СпецРежимНалогообложения) Тогда
			rsMain.Fields.Item("N2_12").Value = СтруктураДокумента.СпецРежимНалогообложения;
		КонецЕсли; 
		
		// заполним налоговое обязательство по виду операции документа
		//А нужно ли это
		Видоперации = ОбъектДокументВидоперации(Документ);
		
		Если  Объект.Конфигурация = "ERP" или Объект.Конфигурация = "КУП" или ИмяКлиентскойБазы = "ERP25" Тогда
			Если СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации") Тогда
				rsMain.Fields.Item("PZOB").Value = 2;
			ИначеЕсли СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.НеНДСОперации") Тогда
				rsMain.Fields.Item("PZOB").Value = 1;
			ИначеЕсли СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента") Тогда
				rsMain.Fields.Item("PZOB").Value = 3;
			КонецЕсли;
		Иначе
			
			Если Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации") Тогда
				//rsMain.Fields.Item("PZOB").Value = 0; // ?? не нашел соответствие
			ИначеЕсли СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации") Тогда
				rsMain.Fields.Item("PZOB").Value = 2;
			ИначеЕсли СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.НеНДСОперации") Тогда
				rsMain.Fields.Item("PZOB").Value = 1;
			ИначеЕсли СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента") Тогда
				rsMain.Fields.Item("PZOB").Value = 3;
			КонецЕсли;
		КонецЕсли;
				
		НомерБезПрефикса  =  ПолучитьНомерБезНулей(Документ);
		СпецРеж = "";
		Попытка 
			Если ПроверитьРеквизитДокумента(Документ,"СпецРежимНалогообложения") Тогда
				rsMain.Fields.Item("N2_12").Value = СокрЛП(ПоляНН.HNUM1);
				СпецРеж = "/" + СокрЛП(ПоляНН.HNUM1) + "/";
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Филия = "";
		Попытка
			Если ПроверитьРеквизитДокументаПрефикс(Документ, "ОбособленноеПодразделение") Тогда
				rsMain.Fields.Item("N2_13").Value = СокрЛП(ПоляНН.HNUM2);
				Филия = СокрЛП(ПоляНН.HNUM2);
				Если НЕ ЗначениеЗаполнено(СпецРеж) Тогда				
					СпецРеж = "//";
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(НомерБезПрефикса) и НомерБезПрефикса <> "" Тогда
			rsMain.Fields.Item("N2_11").Value    =  СокрЛП(ПоляНН.HNUM);;   
		КонецЕсли;
		
		rsMain.Fields.Item("N2_1").Value = НомерБезПрефикса + СпецРеж + Филия;	
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(ПоляНН.HNAMESEL);
		rsMain.Fields.Item("FIRM_INN").Value  = СокрЛП(ПоляНН.HKSEL);
		rsMain.Fields.Item("EDRPOU").Value  = СокрЛП(ПоляНН.HTINSEL); 
		Попытка rsMain.Fields.Item("KS").Value  = СокрЛП(ПоляНН.HKS); Исключение КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("FIRM_SRPNDS").Value  =  СокрЛП(СведенияОПродавце.НомерСвидетельства);
		Исключение
		КонецПопытки;
		rsMain.Fields.Item("NAKL_TYPE").Value = 1;   // 0  =  Входящая НН 1  =  Исходящая 
		
		rsMain.Fields.Item("FIRM_PHON").Value  =  Строка(СокрЛП(ТекТелефоныОрганизации)); 
		Попытка
			rsMain.Fields.Item("N16").Value  =  СокрЛП(ПоляНН.R003G10S);
		Исключение
		КонецПопытки;
		
		rsMain  =  Doc.DataSets("TAB1");
		ИтогОснСтавка = 0;
		ИтогТеррУкр = 0;
		ИтогЭкспорт = 0;
		ИтогОсвобожден = 0;
		ИтогСтавка7 = 0;
		
		ЧСуммаНДС = СтруктураДокумента.ЧСуммаНДС;
		Если  Объект.Конфигурация = "ERP"
			//18.01.2022 + DOCKING 369
			ИЛИ Объект.Конфигурация = "КУП"
			//18.01.2022 - DOCKING 369
			ИЛИ Объект.Конфигурация = "SB"
			ИЛИ ИмяКлиентскойБазы = "ERP25"
			ИЛИ ИмяКлиентскойБазы = "КУП25"
			Тогда
			ЧСуммаСНДС = ПоляНН.R04G11;
		Иначе
			ЧСуммаСНДС = ПолучитьСуммуДокументаСНДС(Документ, "Товары")+ПолучитьСуммуДокументаСНДС(Документ, "Услуги");
		КонецЕсли;
		Если ПроверитьТабЧатьДокумента(Документ,"ОС") Тогда
			ИтогОССуммаНДС = ПолучитьИтогиПоТЧ(Документ,"ОС"); 
			ЧСуммаНДС = ЧСуммаНДС + ИтогОССуммаНДС.ИтогПоТЧ;
			ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "ОС");
		КонецЕсли;
		
		Если НЕ Объект.Конфигурация = "SB" Тогда
			Если ПроверитьТабЧатьДокумента(Документ,"НМА") Тогда
				ИтогНМАСуммаНДС = ПолучитьИтогиПоТЧ(Документ,"НМА"); 
				ЧСуммаНДС = ЧСуммаНДС + ИтогОССуммаНДС.ИтогПоТЧ;
				ЧСуммаСНДС = ЧСуммаСНДС + ПолучитьСуммуДокументаСНДС(Документ, "НМА");
			КонецЕсли;
		КонецЕсли;	
		
		СуммаНДС = Формат(ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		СуммаСНДС = Формат(ЧСуммаСНДС, "ЧГ=0; ЧДЦ=2");
		СуммаБезНДС = Формат(ЧСуммаСНДС - ЧСуммаНДС, "ЧГ=0; ЧДЦ=2");
		
		КоличествоСтрок  =  СтруктураДанныеТЧ.Количество();
		Ном = 1;
		Счетчик  =  0; 
		G109Есть = СтруктураДанныеТЧ.Найти("G109") <> Неопределено;
		Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл 
			rsMain.Edit(); 
			
			Попытка
				rsMain.Fields.Item("TAB1_A1").Value= Ном;
			Исключение
			КонецПопытки;	
			
			Попытка
				rsMain.Fields.Item("TAB1_A13").Value =  СокрЛП(СтрокаТЧ.G3S); // Номенклатура
			Исключение
			КонецПопытки;	
			
			Попытка
				rsMain.Fields.Item("TAB1_A131").Value =  СокрЛП(СтрокаТЧ.G4); // Код згыдно УКТ ЗЕД
			Исключение
			КонецПопытки;
			
			Попытка
				Если НЕ ЗначениеЗаполнено(СтруктураДокумента.ПродажаНижеОбычнойЦены) Тогда
					Попытка
						Если  СтрокаТЧ.G32 <> Неопределено  И  СтрокаТЧ.G32 <> ""
							Тогда rsMain.Fields.Item("TAB1_A132").Value = 1
						КонецЕсли;// Ознака импорта
					Исключение
					КонецПопытки;
				КонецЕсли;
			Исключение
				// DOCKING 500 + 20.03.2023
				Попытка
					Если  СтрокаТЧ.G32 <> Неопределено  И  СтрокаТЧ.G32 <> ""
						Тогда rsMain.Fields.Item("TAB1_A132").Value = 1
					КонецЕсли;// Ознака импорта
				Исключение
				КонецПопытки;
				// DOCKING 500 - 20.03.2023
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A133").Value =  СокрЛП(СтрокаТЧ.G33); // Код згыдно ДКПП
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A14").Value =  СокрЛП(СтрокаТЧ.G4S); // Единица измерения  товаров   
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A141").Value =  СокрЛП(СтрокаТЧ.G105_2S); // Единица измерения  товаров КоД
			Исключение
			КонецПопытки;	
			
			Попытка
				Если  НЕ(СокрЛП(СтрокаТЧ.G5) = "0" и Сведенная = 1) Тогда
					Если  СтрокаТЧ.G5 <> 0 Тогда
						rsMain.Fields.Item("TAB1_A15").Value =  СокрЛП(СтрокаТЧ.G5); // Количество
					КонецЕсли
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если НЕ (СокрЛП(СтрокаТЧ.G6) = "0" и Сведенная = 1) Тогда
					Если  СокрЛП(СтрокаТЧ.G6) <> "0" Тогда  // добавил условие, так как передавался "0" для "Зведеної ПН"
						rsMain.Fields.Item("TAB1_A16").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G6); // Цена продажи
					КонецЕсли;	
				КонецЕсли;	
			Исключение
			КонецПопытки;
			                        
			Попытка
				rsMain.Fields.Item("TAB1_A8").Value =  СокрЛП(СтрокаТЧ.G008);   //Код ставки
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A9").Value =  СокрЛП(СтрокаТЧ.G009);  //Код пильгы
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A10").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G010);   //Объём поставок
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A20").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G11_10);  //Сумма податку
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A11").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G011); // Код виду деятельности СХ
			Исключение
			КонецПопытки;
			
			rsMain.Post();  
			Ном = Ном + 1;
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаТЧ.G4) тогда 
				a131_1 = 1;
			Иначе
				a131_2 = 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.G33) тогда 
				a133_1 = 1;
			Иначе
				a133_2 = 1;
			КонецЕсли;
		КонецЦикла;
		
		
		//Непонятно что это вообще
		//Если (НоваяНН) И (НЕ G109Есть) И (ИтогТеррУкр <> 0 ) И (ПроверкаНовойФормыНН())Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		rsMain=Doc.DataSets() ;  
		rsMain.Edit();             
		rsMain.Append();
		rsMain.Post(); 
		Попытка
			Если a131_1 = 1 and a131_2 = 0 Тогда
				rsMain.Fields.Item("UKTPRESENCE").Value=Строка("Наявний");
			ИначеЕсли a131_1 = 1 and a131_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a131_1 = 0 and a131_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
			
			Если a133_1 = 1 and a133_2 = 0 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний");
			ИначеЕсли a133_1 = 1 and a133_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a133_1 = 0 and a133_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Тара = СокрЛП(ПоляНН.R02G11);		
			Если Тара <> "0" Тогда		
				rsMain.Fields.Item("A3_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R02G11);  //ЗЗТ-загальна сума коштів
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка
			rsMain.Fields.Item("A5_7").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G7);   //Ставка 20%
			rsMain.Fields.Item("A6_7").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G7);
			rsMain.Fields.Item("A6_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G11);  //   Общая сумма
		Исключение
		КонецПопытки;		
		
		Попытка
			rsMain.Fields.Item("A5_71").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G109);     //Ставка 7%
			rsMain.Fields.Item("A6_71").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G109);
			rsMain.Fields.Item("A6_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G11);  //   Общая сумма
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A5_72").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G14);   //Ставка 14%
			rsMain.Fields.Item("A6_72").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G14);
			rsMain.Fields.Item("A6_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R03G11);  //   Общая сумма
		Исключение
		КонецПопытки;		
		
		Попытка
			rsMain.Fields.Item("A5_8").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G8);   //Всякие ставки по 0%
		Исключение
		КонецПопытки;
		
		Попытка
			//Всякие ставки по 0%
			rsMain.Fields.Item("A5_9").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G9);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A5_10").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R01G10);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A7_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляНН.R04G11);   //   Общая сумма с ПДВ
		Исключение
		КонецПопытки;
		
		rsMain.Post();
		//-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);
		Doc.Close();
		
		Попытка
			Если СозданиеКонтрагентовМед = Истина Тогда
				Попытка
					СозданиеКонтрагентовМедок(App, Документ, orgId);
				Исключение
					Сообщить("Не удалось создать контрагента в Медке",);
					ВызватьИсключение;
				КонецПопытки;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция Формирование_Дод2(Документ,  Бланк,  PDate,  ИД, orgId, НайденнаяСтрока) 
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App = Новый COMОбъект("Medoc.ZApplication"); 
		//yes = App.SelectFirm(КодПоЕДРПОУ,  пФил); 
		//ЕСЛИ yes ТОГДА   
			Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate,  , ИД, 0);
			Попытка
				Doc.DisableScripts();
			Исключение
				Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
				Возврат Ложь
			КонецПопытки;
		//КонецЕсли;
		
		Ставка20 = 0;
		Ставка7 = 0;
		Ставка14 = 0;
		a31_1 = 0;
		a31_2 = 0;
		a33_1 = 0;
		a33_2 = 0;
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();
		
		СведенияОПокупателе =  СведенияОПокупателе(Документ,КодЯзыкаПечать);
		СведенияОПродавце   =  СведенияОПоставщике(Документ,КодЯзыкаПечать);
		
		СтруктураДокумента  = ПолучитьОбъектНаСервере(Документ);
		//14.01.2022 + DOCKING 369
		//СтруктураПараметров = СтруктураПараметров(Документ);
		СтруктураПараметров = СтруктураПараметров(Документ,,НайденнаяСтрока.ТипСтрока);
		//ИначеЕсли Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		//14.01.2022 - DOCKING 369
		ПоляРК = СтруктураПараметров.НалоговыйДокумент;
		СтруктураДанныеТЧ = СтруктураПараметров.R; //в данной таблице значений собраны строки из всех табличных частей документа,  кроме табличной части "Возвратная тара"
		
		Если Объект.Конфигурация = "УПП" или Объект.Конфигурация = "УТП" или Объект.Конфигурация = "ERP" или Объект.Конфигурация = "КУП" или Объект.Конфигурация = "SB" Тогда  // //14.01.2022 + DOCKING 369 (КУП) 
			ТекТелефоныОрганизации  =  СведенияОПродавце.Телефоны;
			Позиция1  =  Найти (ТекТелефоныОрганизации, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныОрганизации, ", ")) Тогда  
				Позиция1  =  Сред(ТекТелефоныОрганизации, 1, Позиция1-1);
			Иначе
				Позиция1 =  ТекТелефоныОрганизации;
			КонецЕсли;   		
			Позиция1  =  СтрЗаменить(Позиция1,  " ",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "(",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  ")",  "");
			Позиция1  =  СтрЗаменить(Позиция1,  "-",  ""); 
			ТекТелефоныОрганизации  =  Позиция1;       
			//---------------------------------------------------------------------
			ТекТелефоныКонтрагента  =  СведенияОПокупателе.Телефоны;
			Позиция2  =  Найти (ТекТелефоныКонтрагента, ", ");  		
			Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
				Позиция2  =  Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
			Иначе
				Позиция2 =  ТекТелефоныКонтрагента;
			КонецЕсли;   		
			Позиция2  =  СтрЗаменить(Позиция2,  " ",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "(",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  ")",  "");
			Позиция2  =  СтрЗаменить(Позиция2,  "-",  ""); 
			ТекТелефоныКонтрагента  =  Позиция2;    
		Иначе
			//ТекТелефоныОрганизации  =  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,     "Телефоны, ",           Ложь);
			//ТекТелефоныОрганизации  =  ОбщегоНазначенияБПВызовСервера.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныОрганизации);
			//ТекТелефоныКонтрагента  =  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
			//ТекТелефоныКонтрагента  =  ОбщегоНазначенияБПВызовСервера.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
			
			ОбщМодуль = ПолучитьТелефоныИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СведенияОПродавце,СведенияОПокупателе);
			
			Если ОбщМодуль <> Ложь Тогда
				ТекТелефоныОрганизации = ОбщМодуль.ТекТелефоныОрганизации;
				ТекТелефоныКонтрагента = ОбщМодуль.ТекТелефоныКонтрагента;
			Иначе
				ТекТелефоныОрганизации = "";
				ТекТелефоныКонтрагента = "";
			КонецЕсли;
			
		КонецЕсли;
		
		
		rsMain.Fields.Item("N1_11").Value = СокрЛП(ПоляРК.HNUM);      //Номер розрахунку
		СпецРеж = "";
		Если  ЗначениеЗаполнено(ПоляРК.HNUM1)
			Тогда
			rsMain.Fields.Item("N1_12").Value =  СокрЛП(ПоляРК.HNUM1);
			СпецРеж = "/" + СокрЛП(ПоляРК.HNUM1) + "/";
		КонецЕсли;
		Филия = "";
		
		//Если (ЕстьРеквизитДокумента("НалоговаяНакладная", Документ.Метаданные()))
		//И (ЗначениеЗаполнено(Документ.НалоговаяНакладная.ОбособленноеПодразделение.Префикс)) Тогда
		Если НЕ Объект.Конфигурация = "SB" Тогда
			Если ПроверитьЗаполненияПрефиксаПодразделения(Документ,"НалоговаяНакладная") Тогда
				rsMain.Fields.Item("N1_13").Value = СокрЛП(ПоляРК.HNUM2);
				Филия = СокрЛП(ПоляРК.HNUM2);
				Если НЕ ЗначениеЗаполнено(СпецРеж) Тогда				
					СпецРеж = "//";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		rsMain.Fields.Item("N1").Value =  СокрЛП(ПоляРК.HNUM) + СпецРеж + Филия;
		
		rsMain.Fields.Item("N2_11").Value = СокрЛП(ПоляРК.HPODNUM);
		rsMain.Fields.Item("N2_12").Value = СокрЛП(ПоляРК.HPODNUM1);
		rsMain.Fields.Item("N2_13").Value = СокрЛП(ПоляРК.HPODNUM2);
		
		Попытка
			rsMain.Fields.Item("N12").Value = СтруктураДокумента.Дата;
		Исключение
		КонецПопытки;
		
		rsMain.Fields.Item("N15").Value = СокрЛП(ПоляРК.HFILL);
		rsMain.Fields.Item("N2").Value = СокрЛП(ПоляРК.HPODFILL); //Дата НН 

		//Попытка	
		//	Если ЗначениеЗаполнено(СтруктураДокумента.ТипПричиныНевыдачиПокупателю) Тогда
		//		rsMain.Fields.Item("PZOB").Value = СтруктураДокумента.ТипПричиныНевыдачиПокупателю;
		//	КонецЕсли;
		//Исключение
		//КонецПопытки;
		
		Видоперации = ОбъектДокументВидоперации(Документ);
		//14.01.2022 - DOCKING 369
		Если  Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Если СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации") Тогда
				rsMain.Fields.Item("PZOB").Value = 2;
			ИначеЕсли СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента") Тогда
				rsMain.Fields.Item("PZOB").Value = 3;
			КонецЕсли;
		Иначе
		//14.01.2022 - DOCKING 369	
			Если СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат") Тогда
				rsMain.Fields.Item("PZOB").Value = 2;                                         
			ИначеЕсли СтруктураДокумента.Видоперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка") Тогда
				rsMain.Fields.Item("PZOB").Value = 3;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			rsMain.Fields.Item("N16").Value  =  ?(ЗначениеЗаполнено(ПоляРК.HERPN), 1, 0); //Підлягає реєстрації в ЄРПН покупцем
		Исключение
		КонецПопытки;
		
		Попытка    //Непонятно нужло ли это вообще
			//СОФТКОМ Петренко 20.12.17
			//Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", Документ.Метаданные()) Тогда 
			ЭлектДокумент = ПроверитьРеквизитДокументаПрилож2(Документ,"ЭлектронныйДокумент");
			//...СОФТКОМ Петренко 20.12.17
			Если ЭлектДокумент <> Неопределено Тогда	
				rsMain.Fields.Item("N14").Value  =  ?(ЭлектДокумент,1,0);
				rsMain.Fields.Item("K1").Value  =  ?(ЭлектДокумент,"","Х");
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка	
			rsMain.Fields.Item("N17").Value  = ?(ЗначениеЗаполнено(СтруктураПараметров.НалоговыйДокумент.HORIG1), 1, "");
			rsMain.Fields.Item("N18").Value  = СокрЛП(СтруктураПараметров.НалоговыйДокумент.HTYPR);
		Исключение
		КонецПопытки;
		
		//Что есть в 1C то и будем передавать
		rsMain.Fields.Item("N3").Value   =  СокрЛП(ПоляРК.HNAMEBUY); 
		rsMain.Fields.Item("N4").Value   =  СокрЛП(ПоляРК.HKBUY);
		
		Попытка
			rsMain.Fields.Item("DEPT_POK").Value = СокрЛП(ПоляРК.HFBUY);
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("EDR_POK").Value = СокрЛП(ПоляРК.HTINBUY);
		Исключение
		КонецПопытки;

		Попытка
		    rsMain.Fields.Item("KB").Value = СокрЛП(ПоляРК.HKB);
		Исключение
		КонецПопытки;
		
		Попытка //Вроде не нужно но пусть до теста
			rsMain.Fields.Item("N6").Value = СокрЛП(ТекТелефоныКонтрагента); 
			rsMain.Fields.Item("N7").Value = СокрЛП(СтруктураДокумента.КонтрагентНомерСвидетельства);
			//rsMain.Fields.Item("N8").Value = СокрЛП(СтруктураДокумента.НалоговаяНакладнаяВидДоговора);
		Исключение
		КонецПопытки;
		
		// DOCKING 513 + 30.05.2023
		Если НЕПередаватьРеквизитыДоговора = Ложь Тогда
		// DOCKING 513 - 30.05.2023
		    Попытка
			rsMain.Fields.Item("N8").Value = СокрЛП(СтруктураДокумента.НалоговаяНакладнаяВидДоговора);		
			Если ЗначениеЗаполнено(СтруктураДокумента.ДоговорКонтрагентаДата) тогда
				rsMain.Fields.Item("N81").Value      =  СтруктураДокумента.ДоговорКонтрагентаНомер;
				rsMain.Fields.Item("N82").Value      =  СтруктураДокумента.ДоговорКонтрагентаДата; 
			КонецЕсли;   
			Исключение КонецПопытки;
		КонецЕсли;
		
		Попытка	
			rsMain.Fields.Item("N10").Value      =  СокрЛП(ПоляРК.HBOS);  //   Кто составил
			rsMain.Fields.Item("INN").Value      =  СокрЛП(ПоляРК.HKBOS);     
		Исключение
		КонецПопытки;	

		rsMain.Fields.Item("NAKL_TYPE").Value = 1;   // 0  =  Входящая НН 1  =  Исходящая      
		
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(ПоляРК.HNAMESEL);  
		rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(ПоляРК.HKSEL);
		Попытка
			rsMain.Fields.Item("EDRPOU").Value = СокрЛП(ПоляРК.HTINSEL);
		Исключение
		КонецПопытки;
		
		Попытка
		rsMain.Fields.Item("KS").Value  = СокрЛП(ПоляРК.HKS); 
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("N26").Value = ?(ЗначениеЗаполнено(ПоляРК.HERPN0),1, 0);
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ПоляРК.R01G1) Тогда
			rsMain.Fields.Item("N30").Value  = ПоляРК.R01G1; //"1";
			Сведенная = 1;
		КонецЕсли;	
		
		Попытка	
			Если Строка(СтруктураДокумента.ВидОперации) = "Операции, освобожденные от  НДС (корректировка)" 
				// DOCKING 383 + 29.06.2022
				//или Строка(СтруктураДокумента.ВидОперации) = "Операції, оподатковувані ПДВ (коригування)" 
				// DOCKING 383 - 29.06.2022
				или Строка(СтруктураДокумента.ВидОперации) = "Операции, освобожденные от  НДС (возврат)" 
				или Строка(СтруктураДокумента.ВидОперации) = "Операції, звільнені від ПДВ (повернення)"
				или Строка(СтруктураДокумента.ВидОперации) = "Возврат в розницу плательщику НДС по освобожденному НДС" 
				или Строка(СтруктураДокумента.ВидОперации) = "Повернення в роздріб платникові ПДВ по звільненому ПДВ" 
				Тогда
				rsMain.Fields.Item("N28").Value  = "Без ПДВ";
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("N29").Value = СокрЛП(ПоляРК.R003G10S);
		Исключение
		КонецПопытки;
		
		
		rsMain.Post();    						
		
		rsMain = Doc.DataSets("TAB1");
		ИтогОснСтавкаДод2 = 0;
		ИтогНулеваяСтавкаДод2 = 0;
		ИтогОсвобожденДод2 = 0;
		КоличествоСтрок = СтруктураДанныеТЧ.Количество();
		Счетчик = 0;
		ИтогСтавка7 = 0;
		пCчетчик = 1;
		Для Каждого СтрокаТЧ Из СтруктураДанныеТЧ Цикл			
			rsMain.Edit(); 
			
			rsMain.Fields.Item("TAB1_A").Value = пCчетчик; //№ з/п 
			
			Если СтрокаТЧ.G001 <> 0 Тогда
				//rsMain.Fields.Item("TAB1_A01").Value = СокрЛП(СтрокаТЧ.G001); //№ з/п рядка
				rsMain.Fields.Item("TAB1_A01").Value = СтрЗаменить(СтрокаТЧ.G001,Символы.НПП,""); //№ з/п рядка

			Иначе
				rsMain.Fields.Item("TAB1_A01").Value = ""; 
			КонецЕсли;
			
			Если СтрокаТЧ.G21 <> 0 Тогда
				rsMain.Fields.Item("TAB1_A21").Value = СокрЛП(СтрокаТЧ.G21); //Код причины 
			Иначе
				rsMain.Fields.Item("TAB1_A21").Value = ""; 
			КонецЕсли;
			
			Если СтрокаТЧ.G22 <> 0 Тогда
				rsMain.Fields.Item("TAB1_A22").Value = СтрЗаменить(СокрЛП(СтрокаТЧ.G22), Символы.НПП, ""); //№ з/п групи коригування    
			Иначе
				rsMain.Fields.Item("TAB1_A22").Value = "";
			КонецЕсли;
			
			rsMain.Fields.Item("TAB1_A3").Value =  СокрЛП(СтрокаТЧ.G3S); // Номенклатура
			
			Попытка
				rsMain.Fields.Item("TAB1_A31").Value  =  СокрЛП(СтрокаТЧ.G4);  
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаТЧ.G32 <> Неопределено И СтрокаТЧ.G32 <> ""
					Тогда rsMain.Fields.Item("TAB1_A32").Value = 1
				КонецЕсли;// Ознака импорта
			Исключение
			КонецПопытки;
			Попытка
				rsMain.Fields.Item("TAB1_A33").Value  =  СокрЛП(СтрокаТЧ.G33); //ДКПП 
			Исключение
			КонецПопытки;
			
			Попытка	
				rsMain.Fields.Item("TAB1_A4").Value = СокрЛП(СтрокаТЧ.G4S);  //Ед изм
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A41").Value = СокрЛП(СтрокаТЧ.G105_2S);  //Код ед изм
			Исключение
			КонецПопытки;
			Попытка
				Если  НЕ(СокрЛП(СтрокаТЧ.G5) = "0" И Сведенная = 1) Тогда
					Если  СтрокаТЧ.G5 <> 0 Тогда
						// 08.07.2022 + DOCKING 431
						//rsMain.Fields.Item("TAB1_A5").Value =  СокрЛП(СтрокаТЧ.G5);
						rsMain.Fields.Item("TAB1_A5").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G5); // 431  
						// 08.07.2022 - DOCKING 431
					КонецЕсли
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка
				Если НЕ(СокрЛП(СтрокаТЧ.G5) = "0" И Сведенная = 1) Тогда
					Если  СтрокаТЧ.G6 <> 0 Тогда
                        //rsMain.Fields.Item("TAB1_A6").Value =  СокрЛП(Окр(СтрокаТЧ.G6, 2));  //DOCKING-302 24.06.2021
						// 08.07.2022 + DOCKING 431
						//rsMain.Fields.Item("TAB1_A6").Value =  СокрЛП(СтрокаТЧ.G6);    //DOCKING-302 24.06.2021
						rsMain.Fields.Item("TAB1_A6").Value =  ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G6);    //DOCKING-431
						// 08.07.2022 - DOCKING 431
					КонецЕсли	
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка															//Корректировки
				Если СтрокаТЧ.G7 <> 0 Тогда
					//rsMain.Fields.Item("TAB1_A7").Value = СокрЛП(Окр(СтрокаТЧ.G7, 2)); //DOCKING-302 24.06.2021
					// 08.07.2022 + DOCKING 431
					//rsMain.Fields.Item("TAB1_A7").Value = СокрЛП(СтрокаТЧ.G7); //DOCKING-302 24.06.2021
					rsMain.Fields.Item("TAB1_A7").Value = ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G7); //DOCKING-431
					// 08.07.2022 - DOCKING 431
				КонецЕсли;
			Исключение
			КонецПопытки;
			Попытка
				Если СтрокаТЧ.G8 <> 0 Тогда
					// 08.07.2022 + DOCKING 431
					//rsMain.Fields.Item("TAB1_A8").Value = СокрЛП(СтрокаТЧ.G8);
					rsMain.Fields.Item("TAB1_A8").Value = ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G8);
					// 08.07.2022 - DOCKING 431
				КонецЕсли; 
			Исключение
			КонецПопытки;
			
			Попытка
				// 08.07.2022 + DOCKING 431
				//rsMain.Fields.Item("TAB1_A011").Value = СокрЛП(СтрокаТЧ.G008);
				rsMain.Fields.Item("TAB1_A011").Value = ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G008);
				// 08.07.2022 - DOCKING 431
			Исключение
			КонецПопытки;
			
			Попытка
				rsMain.Fields.Item("TAB1_A012").Value = СокрЛП(СтрокаТЧ.G009);
			Исключение
			КонецПопытки;	
			
			Попытка
				// 08.07.2022 + DOCKING 431
				//rsMain.Fields.Item("TAB1_A013").Value = СокрЛП(СтрокаТЧ.G010);
				rsMain.Fields.Item("TAB1_A013").Value = ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G010);
				// 08.07.2022 - DOCKING 431
			Исключение
			КонецПопытки;
			
			Попытка
				// 08.07.2022 + DOCKING 431
				//rsMain.Fields.Item("TAB1_A020").Value = СокрЛП(СтрокаТЧ.G11_10);
				rsMain.Fields.Item("TAB1_A020").Value = ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G11_10);
				// 08.07.2022 - DOCKING 431
			Исключение
			КонецПопытки;
			
			Попытка
				// 08.07.2022 + DOCKING 431
				//rsMain.Fields.Item("TAB1_A014").Value = СокрЛП(СтрокаТЧ.G011);  //Код СХ
				rsMain.Fields.Item("TAB1_A014").Value = ПреобразоватьСтрокуВЧисло(СтрокаТЧ.G011);  //Код СХ
				// 08.07.2022 - DOCKING 431
			Исключение
			КонецПопытки;
			
			
			rsMain.Post(); 		
			Счетчик  =  Счетчик + 1; 
			Если  Счетчик <> КоличествоСтрок Тогда 
				rsMain.Append();  
			КонецЕсли;  
			Если ЗначениеЗаполнено(СтрокаТЧ.G4) тогда 
				a31_1 = 1;
			Иначе
				a31_2 = 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.G33) тогда 
				a33_1 = 1;
			Иначе
				a33_2 = 1;
			КонецЕсли;
			
			пCчетчик = пCчетчик + 1;
		КонецЦикла;
		////-----------------------------------------------------     
		//Если (НоваяНН) И (НЕ G111Есть) И (ИтогНулеваяСтавкаДод2 <> 0 ) И (ПроверкаНовойФормыНН())Тогда
		//	Возврат Ложь;
		//КонецЕсли; 
		
		rsMain = Doc.DataSets() ;  
		rsMain.Edit();             
		rsMain.Append();
		rsMain.Post();			
		
		Попытка
			Если a31_1 = 1 and a31_2 = 0 Тогда
				rsMain.Fields.Item("UKTPRESENCE").Value=Строка("Наявний");
			ИначеЕсли a31_1 = 1 and a31_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a31_1 = 0 and a31_2 = 1 Then
				rsMain.Fields.Item("UKTPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
			
			Если a33_1 = 1 and a33_2 = 0 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний");
			ИначеЕсли a33_1 = 1 and a33_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Наявний частково");
			ИначеЕсли a33_1 = 0 and a33_2 = 1 Then
				rsMain.Fields.Item("SERVICEPRESENCE").Value = Строка("Відсутній");
			КонецЕсли;
		Исключение
		КонецПопытки;	
		
		Попытка
			// 08.07.2022 + DOCKING 431
			rsMain.Fields.Item("A1_9").Value  =  СокрЛП(ПоляРК.R01G9);   //Ставка 20%
			rsMain.Fields.Item("A2_9").Value  =  СокрЛП(ПоляРК.R02G9);
		Исключение
		КонецПопытки;	
		
		Попытка
			// 08.07.2022 + DOCKING 431
			rsMain.Fields.Item("A1_91").Value  =  СокрЛП(ПоляРК.R01G111);   //Ставка 7%
			rsMain.Fields.Item("A2_91").Value  =  СокрЛП(ПоляРК.R02G111);
		Исключение
		КонецПопытки;

		Попытка
			// 08.07.2022 + DOCKING 431
			rsMain.Fields.Item("A1_93").Value  =  СокрЛП(ПоляРК.R01G14);   //Ставка 14%
			rsMain.Fields.Item("A2_93").Value  =  СокрЛП(ПоляРК.R03G14);
		Исключение
		КонецПопытки;
		
		
		Попытка
			Ставка20 = ПоляРК.R02G9;
		Исключение
		КонецПопытки;
		Попытка
			Ставка7 = ПоляРК.R02G111;
		Исключение
		КонецПопытки;
		Попытка			
			Ставка14 = ПоляРК.R03G14;
		Исключение
		КонецПопытки;
		
		Попытка
			rsMain.Fields.Item("A2_92").Value  = Ставка20+Ставка7+Ставка14;
		Исключение
		КонецПопытки;
		
		Попытка
			// 08.07.2022 + DOCKING 431
			//rsMain.Fields.Item("A1_10").Value  =  СокрЛП(ПоляРК.R007G03);   //Ставки 0%   902
			rsMain.Fields.Item("A1_10").Value  =  ПреобразоватьСтрокуВЧисло(ПоляРК.R007G03);   //Ставки 0%   902
			// 08.07.2022 - DOCKING 431
		Исключение
		КонецПопытки;
		Попытка
			// 08.07.2022 + DOCKING 431
			//rsMain.Fields.Item("A1_101").Value  =  СокрЛП(ПоляРК.R006G03);      //   901
			rsMain.Fields.Item("A1_101").Value  =  ПреобразоватьСтрокуВЧисло(ПоляРК.R006G03);      //   901
			// 08.07.2022 - DOCKING 431
		Исключение
		КонецПопытки;
		Попытка
			// 08.07.2022 + DOCKING 431
			//rsMain.Fields.Item("A1_11").Value  =  СокрЛП(ПоляРК.R01G11);      //    903
			rsMain.Fields.Item("A1_11").Value  =  ПреобразоватьСтрокуВЧисло(ПоляРК.R01G11);      //    903
			// 08.07.2022 - DOCKING 431			
		Исключение
		КонецПопытки;
		
		rsMain.Post();
		//-----------------------------------------------------
		
		Doc.EnableScripts();
		Doc.Refresh(); 
		Doc.Save(1);
		Doc.Close();
		
		Попытка
			Если СозданиеКонтрагентовМед = Истина Тогда
				Попытка
					СозданиеКонтрагентовМедок(App, Документ, orgId);
				Исключение
					Сообщить("Не удалось создать контрагента в Медке",);
					ВызватьИсключение;
				КонецПопытки;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция Формирование_ТТН(Документ,  Бланк,  PDate,  ИД, orgId)
	
	ЮрикФизик = ЮрикФизик();
	КодЯзыкаПечать = КодЯзыкаПечать();
	
	Попытка
		App  =  Новый COMОбъект("MEDOC.ZApplication");		
		yes  =  App.SelectFirm(КодПоЕДРПОУ,  пФил); 
		ЕСЛИ yes ТОГДА   
			Doc  =  App.OpenOrCreateByExDocID(Бланк, 0, PDate,  , ИД, 0);
			//Doc.DisableScripts(); 
		КонецЕсли;
		Попытка
			rsMain = Doc.DataSets();    
			rsMain.Edit();              
			rsMain.Append();
			rsMain.Post();
		Исключение
			Сообщить(НСТР("ru  =  'Не подключена возможность передачи данных между M.E.Doc и Вашей учетной системой. С условиями подключения можно ознакомиться в разделе «Інтеграція» в M.E.Doc'; uk  =  'Не підключено можливість передачі даних між M.E.Doc та Вашою обліковою системою. З умовами підключення можливо ознайомитись у розділі «Інтеграція» в M.E.Doc'"));
			Возврат Ложь;
		КонецПопытки;
		
		
		СтруктураДокумента = ПолучитьОбъектНаСервере(Документ); // СОФТКОМ Петренко 18.12.17
		
		СведенияОПокупателе  =  СведенияОПокупателе(Документ, КодЯзыкаПечать);// БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		//СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент,  Документ.Дата, , , КодЯзыкаПечать);
		СведенияОПоставщике = СведенияОПоставщике(Документ, КодЯзыкаПечать);	
		//Если ТипЗнч(Документ.БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		//	Банк		= Документ.БанковскийСчетОрганизации.Банк;
		//	МФО	 		= Банк.Код;
		//	НомерСчета 	= Документ.БанковскийСчетОрганизации.НомерСчета;
		//Иначе
		Если Объект.Конфигурация ="УТП" тогда
			Банк		= СведенияОПоставщике.Банк.Наименование;
			МФО	 		= СведенияОПоставщике.Банк.Код;
			НомерСчета 	= СведенияОПоставщике.Банк.КоррСчет;
		Иначе
			// покажем банковские реквизиты основного счета организации
			Банк		= СведенияОПоставщике.Банк;
			МФО	 		= СведенияОПоставщике.МФО;
			НомерСчета 	= СведенияОПоставщике.НомерСчета;
		КонецЕсли;	
		//КонецЕсли;
		ДатаДокумента =СтруктураДокумента.Дата;
		
		
		// Переменные из дополнительной формы для ТТН(восстанавливаются из внутренних переменных платформы)
		МаркаАвто                = ПолучитьДанныеИзХранилища("МаркаАвто");
		НомерАвто                = ПолучитьДанныеИзХранилища("НомерАвто");
		ТипАвто                  = ПолучитьДанныеИзХранилища("ТипАвто");
		МаркаПриц                = ПолучитьДанныеИзХранилища("МаркаПриц");
		НомерПриц                = ПолучитьДанныеИзХранилища("НомерПриц");
		ТипПриц                  = ПолучитьДанныеИзХранилища("ТипПриц");
		ЗакажчикАлко             = ПолучитьДанныеИзХранилища("ЗакажчикАлко");
		ПеревожчикАлко           = ПолучитьДанныеИзХранилища("ПеревожчикАлко");
		ВодФИО                   = ПолучитьДанныеИзХранилища("ВодФИО");
		УдостоверениеВод         = ПолучитьДанныеИзХранилища("УдостоверениеВод");
		СопроводДокумент         = ПолучитьДанныеИзХранилища("СопроводДокумент");
		ПунктРазгрузкиАлкоА      = ПолучитьДанныеИзХранилища("ПунктРазгрузкиАлкоА");  //Адресс
		ПунктРазгрузкиАлкоН      = ПолучитьДанныеИзХранилища("ПунктРазгрузкиАлкоН"); //Название
		ПунктПогрузкиАлкоА       = ПолучитьДанныеИзХранилища("ПунктПогрузкиАлкоА"); //Адресс
		ПунктПогрузкиАлкоН       = ПолучитьДанныеИзХранилища("ПунктПогрузкиАлкоН"); //Название
		ГрузополучательДолжность = ПолучитьДанныеИзХранилища("ГрузополучательДолжность");
		ГрузополучательФИО       = ПолучитьДанныеИзХранилища("ГрузополучательФИО");
		АкцизныйПодаток          = ПолучитьДанныеИзХранилища("АкцизныйПодаток");
		
		rsMain.Fields.Item("N1").Value  =  ДатаДокумента;
		rsMain.Fields.Item("N2").Value = ПолучитьНомерБезНулей(Документ); 
		rsMain.Fields.Item("FIRM_NAME").Value = СокрЛП(СведенияОПоставщике.ПолноеНаименование);
		rsMain.Fields.Item("FIRM_RS").Value = СокрЛП(НомерСчета); 
		rsMain.Fields.Item("FIRM_NMBANK").Value = СокрЛП(Банк);   
		rsMain.Fields.Item("FIRM_CBANK").Value = СокрЛП(МФО); 
		rsMain.Fields.Item("FIRM_ADR").Value = СокрЛП(СведенияОПоставщике.ЮридическийАдрес);
		
		Если ЮрикФизик = "Юрик" Тогда 
			ЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);  
		Иначе 
			ЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоДРФО); 
		КонецЕсли;
		rsMain.Fields.Item("FIRM_EDRPOU").Value = ЕДРПОУ;
		//rsMain.Fields.Item("FIRM_INN").Value = СокрЛП(СведенияОПоставщике.ИНН); 	
		//rsMain.Fields.Item("FIRM_SRPNDS").Value = СокрЛП(СведенияОПоставщике.НомерСвидетельства);
		
		Если		
			СведенияОПокупателе.КодПоЕДРПОУ = Неопределено
			Тогда	
			КонтрЕДРПОУ  =  СокрЛП(СведенияОПокупателе.КодПоДРФО); 
		Иначе 
			КонтрЕДРПОУ  =  СокрЛП(СведенияОПокупателе.КодПоЕДРПОУ);	
		КонецЕсли;
		
		rsMain.Fields.Item("N16").Value = СокрЛП(СведенияОПокупателе.ПолноеНаименование);
		rsMain.Fields.Item("EDR_POK").Value = КонтрЕДРПОУ;
		rsMain.Fields.Item("N17").Value = СокрЛП(СведенияОПокупателе.ЮридическийАдрес);
		rsMain.Fields.Item("N18").Value = СокрЛП(СведенияОПокупателе.НомерСчета); 
		rsMain.Fields.Item("N19").Value = СокрЛП(СведенияОПокупателе.Банк);
		rsMain.Fields.Item("N20").Value = СокрЛП(СведенияОПокупателе.МФО);
		
		rsMain.Fields.Item("N3").Value = МаркаАвто;
		rsMain.Fields.Item("N4").Value = НомерАвто;
		rsMain.Fields.Item("N5").Value = ТипАвто;
		rsMain.Fields.Item("N6").Value = МаркаПриц;
		rsMain.Fields.Item("N7").Value = НомерПриц;
		rsMain.Fields.Item("N8").Value = ТипПриц;
		rsMain.Fields.Item("N9").Value = ПеревожчикАлко;
		rsMain.Fields.Item("N10").Value = ЗакажчикАлко;
		rsMain.Fields.Item("N11").Value = ВодФИО;
		rsMain.Fields.Item("N12").Value = УдостоверениеВод;
		rsMain.Fields.Item("N25").Value = ПунктПогрузкиАлкоА;
		rsMain.Fields.Item("N26").Value = ПунктПогрузкиАлкоН;
		rsMain.Fields.Item("N27").Value = СтруктураДокумента.ГрузополучательНаименованиеПолное;
		rsMain.Fields.Item("N28").Value = СтруктураДокумента.АдресДоставки;
		rsMain.Fields.Item("N29").Value = СтруктураДокумента.ДоверенностьСерия;
		rsMain.Fields.Item("N30").Value = СокрЛП(СтруктураДокумента.ДоверенностьНомер);
		rsMain.Fields.Item("N31").Value = СтруктураДокумента.ДоверенностьДата;
		rsMain.Fields.Item("N32").Value = СтруктураДокумента.КонтрагентНаименование;
		rsMain.Fields.Item("N33").Value = ГрузополучательДолжность;
		rsMain.Fields.Item("N34").Value = ГрузополучательФИО;
		rsMain.Fields.Item("N39").Value = АкцизныйПодаток;
		
		rsMain.Fields.Item("N45").Value = СопроводДокумент;
		rsMain.Fields.Item("N46").Value = "Водій-експедитор";
		rsMain.Fields.Item("N47").Value = ВодФИО;
		
		ИтогСуммаСНДС = СтруктураДокумента.СуммаДокумента;
		ИтогНДС = СтруктураДокумента.ИтогНДС;
		
		Если Объект.Конфигурация = "УТП" Тогда
			ИтогСкидка = 0;
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			ИтогСкидка = 0;	
		ИначеЕсли Объект.Конфигурация = "УПП" Тогда
			ИтогСкидка = СтруктураДокумента.ИтогСкидка;
		Иначе
			ИтогСкидка = СтруктураДокумента.ИтогСкидка2;
		КонецЕсли;
		ИтогСуммаБезНДС = ИтогСуммаСНДС - ИтогНДС; 
		ИтогКоличество = СтруктураДокумента.ИтогКоличество;
		
		rsMain.Fields.Item("N35").Value = ИтогКоличество;
		rsMain.Fields.Item("N36").Value = ИтогСуммаСНДС;  
		rsMain.Fields.Item("N37").Value = ИтогСуммаСНДС; 
		rsMain.Fields.Item("N38").Value = ИтогНДС;
		
		
		Если Бланк = "J1204201" или Бланк = "F1204201" тогда
			rsMain.Fields.Item("A2_15").Value = ИтогНДС;
		ИначеЕсли Бланк = "J1204101" или Бланк = "F1204101" Тогда
			rsMain.Fields.Item("N50").Value = ИтогСуммаСНДС;
			rsMain.Fields.Item("N49").Value = ИтогСуммаСНДС;
		КонецЕсли;	
		
		Если Объект.Конфигурация = "УТП" Тогда
			rsMain.Fields.Item("N48").Value = СтруктураДокумента.ОтпускРазрешил; 
		КонецЕсли;	 
		
		rsMain.Fields.Item("NAKL_TYPE").Value = 1;
		
		
		rsMain.Post();
		
		Если Объект.Конфигурация = "УТП" или Объект.Конфигурация = "УПП" Тогда
			//	ВыборСуммы  =  "Сумма";
			ВыборСкидки = "ПроцентСкидкиНаценки";
		//11.01.2022 + DOCKING 368	
		ИначеЕсли Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда	
			ВыборСкидки = "СуммаРучнойСкидки";
		//11.01.2022 - DOCKING 368
		ИначеЕсли Объект.Конфигурация = "SB" Тогда	
			ВыборСкидки = "СуммаСкидкиНаценки";
		Иначе
			//	ВыборСуммы  =  "СуммаБезСкидки";
			ВыборСкидки = "СуммаСкидки";
		КонецЕсли;              
		

		//Результат  =  Запрос.Выполнить();
		Результат = СформироватьТТН(ВыборСкидки,Документ);
		Контр  =  0;
		Н  =  Результат.Количество();
		
		//ВыборкаДетальныеЗаписи  =  Результат.Выбрать();
		rsMain = Doc.DataSets("TAB1");  
		Для Каждого ВыборкаДетальныеЗаписи Из Результат Цикл 
			//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			//...СОФТКОМ Петренко 20.12.17	
			//rsMain.Edit(); 
			//rsMain.Fields.Item("TAB1_A1").Value = Контр + 1;
			Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			//rsMain.Fields.Item("TAB1_A81").Value = СокрЛП(Справочники.Номенклатура.НайтиПоНаименованию(Наименование).НаименованиеПолное);  
			КодУКТВЭД = ПолучитьКодУКТВЭД(Наименование);
			rsMain.Fields.Item("TAB1_A81").Value = СтрЗаменить(КодУКТВЭД," ","");
			// Поля отличающиеся в разных бланках			
			Если Бланк="J1204201" или Бланк="F1204201" Тогда
				rsMain.Fields.Item("TAB1_A13").Value = ВыборкаДетальныеЗаписи.Количество;
				rsMain.Fields.Item("TAB1_A14").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				rsMain.Fields.Item("TAB1_A15").Value = ВыборкаДетальныеЗаписи.Сумма;
				//rsMain.Fields.Item("TAB1_A83").Value = СтрЗаменить(Справочники.Номенклатура.НайтиПоНаименованию(Наименование).НоменклатураГТД.КодУКТВЭД," ",""); 
				КодУКТВЭД = ПолучитьКодУКТВЭД(Наименование);
				rsMain.Fields.Item("TAB1_A83").Value = СтрЗаменить(КодУКТВЭД," ","");
			ИначеЕсли Бланк="J1204101" или Бланк="F1204101" Тогда	
				rsMain.Fields.Item("TAB1_A15").Value = ВыборкаДетальныеЗаписи.Количество;
				//rsMain.Fields.Item("TAB1_A82").Value = СтрЗаменить(Справочники.Номенклатура.НайтиПоНаименованию(Наименование).НоменклатураГТД.КодУКТВЭД," ",""); 
				КодУКТВЭД = ПолучитьКодУКТВЭД(Наименование);
				rsMain.Fields.Item("TAB1_A82").Value = СтрЗаменить(КодУКТВЭД," ","");
				rsMain.Fields.Item("TAB1_A16").Value = ВыборкаДетальныеЗаписи.ЦенаБезНДС;
				rsMain.Fields.Item("TAB1_A17").Value = ВыборкаДетальныеЗаписи.Сумма;
			КонецЕсли;
			
			rsMain.Post();
			Контр  =  Контр + 1; 
			Если  Контр <> Н Тогда 
				rsMain.Append();
			КонецЕсли;        		
		КонецЦикла; 
		
		rsMain = Doc.DataSets();    
		rsMain.Edit();              
		rsMain.Append();
		rsMain.Post();    
		
		//СОФТКОМ Петренко 20.12.17
		Если Бланк = "J1204201" ИЛИ Бланк = "F1204201" тогда
			//	rsMain.Fields.Item("N49").Value = ВыборкаДетальныеЗаписи.Единица.Наименование;
			Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				rsMain.Fields.Item("N49").Value = Строка(ВыборкаДетальныеЗаписи.Упаковка);				
			Иначе
				rsMain.Fields.Item("N49").Value = Строка(ВыборкаДетальныеЗаписи.Единица);
			КонецЕсли;
		КонецЕсли;
		//...СОФТКОМ Петренко 20.12.17
		
		rsMain.Post();
		////-----------------------------------------------------
		Doc.EnableScripts();
		Doc.Save(1);  
		Doc.Close(); 
		App.RefreshRstDoc();
		
		Попытка
			Если СозданиеКонтрагентовМед = Истина Тогда
				Попытка
					СозданиеКонтрагентовМедок(App, Документ, orgId);
				Исключение
					Сообщить("Не удалось создать контрагента в Медке",);
					ВызватьИсключение;
				КонецПопытки;	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	Исключение
		// 02.02.2022 + DOCKING 369
		//Сообщить(ОписаниеОшибки());
		Если СтруктураДокумента <> Неопределено Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		// 02.02.2022 - DOCKING 369
		ВызватьИсключение;
	КонецПопытки;  
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина)

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
		   И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
		   И (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти))
		   И (ДокументОбъект.УчитыватьНДС)
		   И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
					И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
					И (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя))
					И (ДокументОбъект.УчитыватьНДС)
					И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
					
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если ЕстьРеквизитДокумента("Сумма", МетаданныеДокумента) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если (ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента))
				И (ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента))
				И (ЕстьРеквизитДокумента("СуммаНДС", МетаданныеДокумента))
				И (ДокументОбъект.УчитыватьНДС)
				И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокументаСНДС()

&НаКлиенте
Функция СозданиеКонтрагентовМедок(App, Документ, orgId)
	
	КодГруппыНайден = 0;
	НаличиеКонтр = 0;
	//-------------Сведения о контрагенте из документа--------------------
	Если Объект.Конфигурация = "SB" Тогда // DOCKING 459 +- 14.11.2022
		СведенияОПокупателе = ПолучитьСведенияНаСервре(Документ);
	Иначе
		СведенияОПокупателе = ПолучитьСведенияНаСервре(Документ);
	КонецЕсли;	
	
	Если Объект.Конфигурация = "УПП" или Объект.Конфигурация = "УТП" Тогда
		ТекТелефоныКонтрагента  =  СведенияОПокупателе.Телефоны;
		Позиция2  =  Найти (ТекТелефоныКонтрагента, ", ");  		
		Если ЗначениеЗаполнено(Найти(ТекТелефоныКонтрагента, ", ")) Тогда  
			Позиция2  =  Сред(ТекТелефоныКонтрагента, 1, Позиция2-1);
		Иначе
			Позиция2 =  ТекТелефоныКонтрагента;
		КонецЕсли;   		
		Позиция2  =  СтрЗаменить(Позиция2,  " ",  "");
		Позиция2  =  СтрЗаменить(Позиция2,  "(",  "");
		Позиция2  =  СтрЗаменить(Позиция2,  ")",  "");
		Позиция2  =  СтрЗаменить(Позиция2,  "-",  ""); 
		ТекТелефоныКонтрагента  =  Позиция2;
	ИначеЕсли Объект.Конфигурация = "SB" Тогда // DOCKING 459 +- 14.11.2022	
		ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");
		ТекТелефоныКонтрагента  =  ОбщМодуль.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
		
		ОбщМодуль = ПолучитьОбщийМодуль("УправлениеНебольшойФирмойСервер");
		ТекТелефоныКонтрагента  =  ОбщМодуль.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		
	ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // DOCKING 703 +- 11.04.2024		
		ОбщМодуль = ПолучитьТелефоныИзОбщегоМодуляБезКонтекста("ФормированиеПечатныхФорм",,СведенияОПокупателе);
			
		Если ОбщМодуль <> Ложь Тогда
			ТекТелефоныКонтрагента = ОбщМодуль.ТекТелефоныКонтрагента;
		Иначе
			ТекТелефоныКонтрагента = "";
		КонецЕсли;
	Иначе
		// DOCKING 522 + 20.05.2023
		//ОбщМодуль = ПолучитьОбщийМодуль("ОбщегоНазначенияБПВызовСервера");
		////ТекТелефоныКонтрагента  =  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
		////ТекТелефоныКонтрагента  =  ОбщегоНазначенияБПВызовСервера.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		//ТекТелефоныКонтрагента  =  ОбщМодуль.ОписаниеОрганизации(СведенияОПокупателе,     "Телефоны, ",           Ложь);
		//ТекТелефоныКонтрагента  =  ОбщМодуль.ПолучитьТелефонДляНалоговойНакладной(ТекТелефоныКонтрагента);
		// DOCKING 522 - 20.05.2023
		
		
		ОбщМодуль = ПолучитьТелефоныИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",,СведенияОПокупателе);
			
		Если ОбщМодуль <> Ложь Тогда
			ТекТелефоныКонтрагента = ОбщМодуль.ТекТелефоныКонтрагента;
		Иначе
			ТекТелефоныКонтрагента = "";
		КонецЕсли;
	КонецЕсли;
	
	//------------Проверка наличия и создания группы контр в медке------------------
	
	Попытка 
		Dict = App.GetDictionary();
		tab2 = Dict.Open("HBPARTNERGRP");
		Пока НЕ tab2.EOF Цикл 			
			Если
				tab2.Fields.Item("IDORG").Value = orgId и 
				tab2.Fields.Item("NAME").Value = СокрЛП("Созданные 1С") и 
				tab2.Fields.Item("NUM").Value = 88888   
				Тогда
				КодГруппы= tab2.Fields.Item("CODE").Value;
				КодГруппыНайден=КодГруппыНайден + 1; 
			КонецЕсли;
			tab2.Next(); 
		КонеЦЦикла;		  		
		
		Если КодГруппыНайден = 0 Тогда
			tab2.Last();
			tab2.Edit();  
			tab2.Append();
			КодГруппы = Dict.GetGenID("HBPARTNERGRP");
			tab2.Fields.Item("CODE").Value = СокрЛП(КодГруппы);
			tab2.Fields.Item("NUM").Value = 88888;
			tab2.Fields.Item("IDORG").Value = orgId;
			tab2.Fields.Item("NAME").Value = СокрЛП("Созданные 1С"); 
			//tab2.Post(); 
			Dict.Save();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//---------------Проверка и создания контрагентов в медке------------------
	
	Попытка
		Dict = App.GetDictionary();
		tabl = Dict.Open("HBPARTNER");
		ЕДРПОУ = ?(ЗначениеЗаполнено (СведенияОПокупателе.КодПоЕдрпоу), СведенияОПокупателе.КодПоЕдрпоу, СведенияОПокупателе.КодПоДРФО);
		Пока НЕ tabl.EOF Цикл
			Если
				tabl.Fields.Item("NUM").Value=ЕДРПОУ
				Тогда 
				НаличиеКонтр=НаличиеКонтр+1;
			КонецЕсли;
			tabl.Next(); 
		КонеЦЦикла;
		
		КлючПартнера=Dict.GetGenID("HBPARTNER");
		tabl.Last();
		tabl.Edit();  
		tabl.Append();
		tabl.Fields.Item("CODE").Value = КлючПартнера;
		tabl.Fields.Item("IDPARTNERGRP").Value = КодГруппы; 
		
		tabl.Fields.Item("NUM").Value= ЕДРПОУ;
		
		
		
		//-------------------------------------------------------------
		//HBPARTNERADR
		//tab2 = Dict.Open("HBPARTNERADR");
		//Пока НЕ tab2.EOF Цикл
		//	Если
		//		tab2.Fields.Item("IDPARTNER").Value=ЕДРПОУ
		//		Тогда 
		//		НаличиеАКонтр=НаличиеАКонтр+1;
		//	КонецЕсли;
		//	tab2.Next(); 
		//КонеЦЦикла;
		//
		//tab2.Last();
		//tab2.Edit();  
		//tab2.Append(); 
		Попытка
			tabl.Fields.Item("ADDADDRESS").Value= СокрЛП("Сучкова 235"); 
		Исключение
		КонецПопытки;
		//tab2.Post();
		////Dict.Save();
		
		//-------------------------------------------------------------
		// DOCKING 566 + 10.08.2023
		Попытка
			tabl.Fields.Item("EMAIL").Value= СокрЛП(СведенияОПокупателе.Email);
		Исключение
			
		КонецПопытки;
		
		Попытка
			tabl.Fields.Item("EMAILORG").Value= СокрЛП(СведенияОПокупателе.Email);
		Исключение
			
		КонецПопытки;
		// DOCKING 566 - 10.08.2023
		
		tabl.Fields.Item("NAME").Value= Лев(СокрЛП(СведенияОПокупателе.ПолноеНаименование), 250);
		tabl.Fields.Item("SHORTNAME").Value= СокрЛП(СведенияОПокупателе.Представление);
		tabl.Fields.Item("INDTAXNUM").Value= Лев(СокрЛП(СведенияОПокупателе.ИНН), 20);
		Попытка
			tabl.Fields.Item("ADR").Value= СокрЛП(СведенияОПокупателе.ЮридическийАдрес); 
		Исключение
		КонецПопытки;
		Попытка
			tabl.Fields.Item("CODENDS").Value= СокрЛП(СведенияОПокупателе.НомерСвидетельства); 
		Исключение
		КонецПопытки;
		Попытка
			tabl.Fields.Item("BANK").Value= СокрЛП(СведенияОПокупателе.Банк); 
			tabl.Fields.Item("MFO").Value= СокрЛП(СведенияОПокупателе.МФО);
		Исключение
		КонецПопытки;	
		//tabl.Fields.Item("NREZ").Value = ?(СведенияОПокупателе.НеЯвляетсяРезидентом=Истина, 1,0);
		//Если ЗначениеЗаполнено(Сведения.НомерСчета) Тогда
		Попытка
			tabl.Fields.Item("ACCNUM").Value= СокрЛП(СведенияОПокупателе.НомерСчета);
		Исключение
		КонецПопытки;
		//КонецЕсли;
		
		Если НЕ НаличиеКонтр=0 Тогда
			#Если Клиент Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				//07.02.2022 + DOCKING 391
				//Ответ = Вопрос("Контрагент с ЕДРПОУ "+СокрЛП(СведенияОПокупателе.КодПоЕдрпоу)+" вже існує в M.E.Doc. Створити нового контрагента на основі передаваємого документа "
				Ответ = Вопрос("Контрагент "+ НСтр("ru = 'с ЕДРПОУ'; uk = 'з ЄДРПОУ'") +" "+СокрЛП(СведенияОПокупателе.КодПоЕдрпоу)+" "+НСтр("ru = 'УЖЕ существует в M.E.Doc. Создать нового контрагента, на основании полученного документа'; uk = 'ВЖЕ існує в M.E.Doc. Створити нового контрагента, на підставі отриманого документа'")+" "
				//07.02.2022 - DOCKING 391
				+ СокрЛП(Документ)+" ?", Режим, 0);	
				Если 
					Ответ = КодВозвратаДиалога.Нет Тогда
					//Сообщить("Создание контрагента отменено");
					Сообщить(НСтр("ru = 'Создание контрагента отменено'; uk = 'Створення контрагента скасовано'") );
					
				Иначе			
					tabl.Post();
					Dict.Save();
					//Сообщить("Контрагент создан");
					Сообщить("Контрагент "+ НСтр("ru = 'создан'; uk = 'створений'") +"");
					НаличиеКонтр=1; // DOCKING-278 03.06.2021
				КонецЕсли;
			#КонецЕсли	
		КонецЕсли;	
		
		Если НаличиеКонтр=0 Тогда
			tabl.Post();
			Dict.Save();
			//Сообщить("Контрагент создан");
			Сообщить("Контрагент "+ НСтр("ru = 'создан'; uk = 'створений'") +"");
		КонецЕсли;
		
	Исключение
		//07.02.2022 + DOCKING 391
		//Сообщить("Не удалось создать контрагента в Медке",);
		Сообщить(НСтр("ru = 'Не удалось создать контрагента в Медке'; uk = 'Не вдалося створити контрагента в M.E.Doc.'") );
		//07.02.2022 - DOCKING 391
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьСведенияНаСервре(Документ)
	//Возврат БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата);
	Если Объект.Конфигурация = "SB" Тогда
		ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");	
		Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата);
	Иначе
		ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");			
		Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата);
	КонецЕсли;
	
	
	Возврат 0;
КонецФункции


 
&НаКлиенте	
Процедура ОбнПериодПДНажатие(Команда)
	ВыборПериодаОтбораПервичкиДефолтные();
КонецПроцедуры

&НаСервере	
Процедура ВыборПериодаОтбораПервичкиДефолтные()
	
	Если ПерСохраненнный = 0 Тогда   		
		НачПериода		 =  ХранилищеОбщихНастроек.Загрузить("НачПериода");
		КонПериода		 =  ХранилищеОбщихНастроек.Загрузить("КонПериода"); 
	ИначеЕсли ПерСохраненнный = 1 Тогда 
		ЭтотОбъект.НачПериода = Дата(Год(ТекущаяДата()), 01, 01);
		ЭтотОбъект.КонПериода = Дата(Текущаядата());   
	ИначеЕсли ПерСохраненнный = 2 Тогда
		ЭтотОбъект.НачПериода = Дата(Год(ТекущаяДата()), Месяц(ТекущаяДата()), 01);
		ЭтотОбъект.КонПериода = Дата(ТекущаяДата());
	ИначеЕсли ПерСохраненнный = 3 Тогда
		ЭтотОбъект.НачПериода = Дата(НачалоНедели(ТекущаяДата()));
		ЭтотОбъект.КонПериода = Дата(ТекущаяДата()); 		
	ИначеЕсли ПерСохраненнный = 4 Тогда
		ЭтотОбъект.НачПериода = Дата(ТекущаяДата());
		ЭтотОбъект.КонПериода = Дата(ТекущаяДата()); 		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере	
Функция ПолучитьТипРТУПоУмолчанию()
	
	РТУПоУмолчанию = "";
	
	Если ТипРТУСохраненный = 0 Тогда   		
		РТУПоУмолчанию = "Расходная накладная";
	ИначеЕсли ТипРТУСохраненный = 1 Тогда 
		РТУПоУмолчанию = "Акт выполненных работ";
	ИначеЕсли ТипРТУСохраненный = 2 Тогда
		РТУПоУмолчанию = "ТТН спирт этиловый";
	ИначеЕсли ТипРТУСохраненный = 3 Тогда
		РТУПоУмолчанию = "ТТН алкогольные напитки";	
	КонецЕсли;
	
	Возврат РТУПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Элемент, СтандартнаяОбработка)
	
	Объект.Конфигурация = ПолучитьИмяБазы();
	ИмяКлиентскойБазы = ПолучитьИмяКлиентскойБазы();
	МенеджерЗвит1С = неопределено;
	ПриОткрытииСервер();
	Подключение1СМедок();
	РегистрацияВКомпонентеMedoc1C();
	ПроверитьНаличиеПервички();
	//17.12.21 + DOCKING 357
	ПроверитьНаличиеНалоговых();
	//17.12.21 - DOCKING 357
	РегОтчетПостроитьЧекбоксы();
	
	//выполняем 1 раз при открытии 
	//и по запросу пользователя
	Если ПроверятьОбновуПриОткрытии = 0 Тогда
		
		Результат = ПроверитьНаличиеОбновления();
		
		//Попытка	
		Если Результат <> Неопределено Тогда
			Если Результат.ЕстьОбновление Тогда
				Кнопки = Новый СписокЗначений;
				Кнопки.Вставить(0,КодВозвратаДиалога.Да,"Перейти на сайт");
				Кнопки.Вставить(1,КодВозвратаДиалога.Отмена);
				Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбновление",ЭтаФорма,Результат.СсылкаНаОбновление);
				ПоказатьВопрос(Оповещение,НСтр("ru = 'Доступна новая версия стыковки!';uk = 'Доступна нова версія стикування!'"), Кнопки,0) ;
			КонецЕсли; 
		КонецЕсли;
		//Исключение
		//	Сообщить(НСтр("ru = 'Возможно отсутствует подключение к сети ИНТЕРНЕТ'; uk = 'Можливо відсутнє підключення до мережі ІНТЕРНЕТ'"));	
		//КонецПопытки
		
	КонецЕсли; 
	
	ПутьКФайлуМедкаНачалоВыбораИзСписка();
	
	РегОтчКодПоЕДРПОУ = РегОтчетОрганизацияПриИзмененииНаСервере();
	
	// 03.12.2021 + DOCKING 361
	
	ИмяТекущейВкладки = ЭтаФорма.Элементы.Страницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейВкладки = "ПервичныеДокументы" Тогда
		ТипДок = ПолучитьТекущийТипДок(ТипДокФорма, "ПД");
	ИначеЕсли ИмяТекущейВкладки = "НалоговыеДокументы" Тогда
		ТипДок = ПолучитьТекущийТипДок(ТипДокФорма1, "НД");
	КонецЕсли;	
	// 03.12.2021 - DOCKING 361
	
	ДоступностьКнопокПервички();

	Если Не ЗначениеЗаполнено(ПутьКФайлуМедка) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Настройки программы не выполнены!';uk = 'Налаштування програми не вказано!'");
		Сообщение.Поле = "ПутьКФайлуМедка";
		Сообщение.Сообщить();
		ЭтаФорма.ТекущийЭлемент  =  Элементы.ПутьКФайлуМедка;
	КонецЕсли;   

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбновление(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение(Параметры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриОткрытииСервер()
	
	
	ЭтотОбъект.НадписьПараметры = ХранилищеОбщихНастроек.Загрузить("НадписьПараметры");   	
	ПроверитьПараметры();
	ЭтотОбъект.ПараметрыПредприятияПоле  =  ХранилищеОбщихНастроек.Загрузить("ПараметрыПредприятияПоле"); 
	ЭтотОбъект.ПараметрыФилиалПоле       =  ХранилищеОбщихНастроек.Загрузить("ПараметрыФилиалПоле"); 
	ЭтотОбъект.ПараметрыЛогинПоле        =  ХранилищеОбщихНастроек.Загрузить("ПараметрыЛогинПоле"); 
	ЭтотОбъект.ПараметрыПарольПоле       =  ХранилищеОбщихНастроек.Загрузить("ПараметрыПарольПоле");   
	
	ЭтотОбъект.НастройкаКонтрольВерсииМедка  =  1001170;
	ЭтотОбъект.ОтпрНет  =  1;
	//ЭтотОбъект.ОтпрНетОтч  =  1; 
	//ЭтотОбъект.ПСпрКонтрагентов = 4;
	ОбратитесьКРазработчику = Нстр("ru = 'Ошибка. Обратитесь к разработчику';uk = 'Помилка. Зверніться до розробника'");
	
	ЭтотОбъект.ПерСохраненнный = ?(ЭтотОбъект.ПерСохраненнный <> Неопределено,  ХранилищеОбщихНастроек.Загрузить("ПерСохраненнный"),  1);
	ЭтотОбъект.ПерСохраненнный  =  ХранилищеОбщихНастроек.Загрузить("ПерСохраненнный");  
	//ЭтотОбъект.СпрУдалять       =  ХранилищеОбщихНастроек.Загрузить("СпрУдалять");
	
	ЭтотОбъект.ТипРТУСохраненный = ?(ЭтотОбъект.ТипРТУСохраненный <> Неопределено,  ХранилищеОбщихНастроек.Загрузить("ТипРТУСохраненный"),  0);
	ЭтотОбъект.ТипРТУСохраненный  =  ХранилищеОбщихНастроек.Загрузить("ТипРТУСохраненный");
	
	ЭтотОбъект.ЗапЛок = ?(ЭтотОбъект.ЗапЛок <> Неопределено,  ХранилищеОбщихНастроек.Загрузить("ЗапЛок"),  1);
	ЭтотОбъект.ЗапЛок  =  ХранилищеОбщихНастроек.Загрузить("ЗапЛок");
		
	ЭтотОбъект.ФР  =  ХранилищеОбщихНастроек.Загрузить("ФР"); 
	ЭтотОбъект.ОД  =  ХранилищеОбщихНастроек.Загрузить("ОД");
	ЭтотОбъект.ИП  =  ХранилищеОбщихНастроек.Загрузить("ИП");
	
	ЭтотОбъект.СозданиеКонтрагентов  =  ХранилищеОбщихНастроек.Загрузить("СозданиеКонтрагентов"); 
	ЭтотОбъект.СозданиеКонтрагентовМед  =  ХранилищеОбщихНастроек.Загрузить("СозданиеКонтрагентовМед"); 
	ЭтотОбъект.НЕоткрыватьВхДок  =  ХранилищеОбщихНастроек.Загрузить("НЕоткрыватьВхДок");
	ЭтотОбъект.ПередаватьНомерДоговора  =  ХранилищеОбщихНастроек.Загрузить("ПередаватьНомерДоговора");
	ЭтотОбъект.НЕПередаватьРеквизитыДоговора  =  ХранилищеОбщихНастроек.Загрузить("НЕПередаватьРеквизитыДоговора");
	ЭтотОбъект.СоздаватьНоменклатуру  =  ХранилищеОбщихНастроек.Загрузить("СоздаватьНоменклатуру");
	ЭтотОбъект.НЕСоздаватьНовыйДоговор  =  ХранилищеОбщихНастроек.Загрузить("НЕСоздаватьНовыйДоговор");
	
	
	ЭтотОбъект.ОтображатьСлужебныеНН = ХранилищеОбщихНастроек.Загрузить("ОтображатьСлужебныеНН");
	ЭтотОбъект.ПроверятьОбновуПриОткрытии = ХранилищеОбщихНастроек.Загрузить("ПроверятьОбновуПриОткрытии");
	
	РегОтчетОрганизация = ХранилищеОбщихНастроек.Загрузить("РегОтчетОрганизация");
	ЭтотОбъект.РегОтчетНачПериода =  ХранилищеОбщихНастроек.Загрузить("РегОтчетНачПериода");
	ЭтотОбъект.РегОтчетКонПериода = ХранилищеОбщихНастроек.Загрузить("РегОтчетКонПериода");
	ЭтотОбъект.РегОтчетТипДок = ХранилищеОбщихНастроек.Загрузить("РегОтчетТипДок");
	
	ЭтотОбъект.ТипРасчета = ХранилищеОбщихНастроек.Загрузить("ТипРасчета");
	
	ВыборЯрлыка();
	
	ПутьКФайлуМедка = ХранилищеОбщихНастроек.Загрузить("ПутьКФайлуМедка");	 	
	//ПутьКФайлуМедкаНачалоВыбораИзСпискаСерв(Ложь);
	ОрганизацияПервичка = ХранилищеОбщихНастроек.Загрузить("ОрганизацияПервичка");
	НалогДокОрганизацияПервичка = ХранилищеОбщихНастроек.Загрузить("НалогДокОрганизацияПервичка");
	Если Не ЗначениеЗаполнено(ОрганизацияПервичка) Тогда 		
		СпрОрг = ВыбратьОрганизации(); 		
		Если СпрОрг.Следующий() тогда 			 
			ОрганизацияПервичка = СпрОрг.Ссылка; 		 
		КонецЕсли; 	
	КонецЕсли; 
	
	
	КодПоЕДРПОУ 	 =  ХранилищеОбщихНастроек.Загрузить("КодПоЕДРПОУ");
	РегОтчКодПоЕДРПОУ 	 =  ХранилищеОбщихНастроек.Загрузить("РегОтчКодПоЕДРПОУ");
	
	пФил   	 =  ХранилищеОбщихНастроек.Загрузить("пФил");
	
	КодДок 	 =  ХранилищеОбщихНастроек.Загрузить("КодДок");
	Ответственный  =  ХранилищеОбщихНастроек.Загрузить("Ответственный");
	
	ЗарегистрированныеПоДанным1С  =  ХранилищеОбщихНастроек.Загрузить("ЗарегистрированныеПоДанным1С");
	ЗарегистрированныеПоДанным1СПлан  =  ХранилищеОбщихНастроек.Загрузить("ЗарегистрированныеПоДанным1СПлан"); 
	Элементы.ДаП.Доступность = ЗарегистрированныеПоДанным1СПлан;
	Элементы.ДаФ.Доступность = ЗарегистрированныеПоДанным1С;
	//----------------------------------------------------------	
	Контрагент  =  ХранилищеОбщихНастроек.Загрузить("Контрагент");
	ДоговорКонтрагента  =  ХранилищеОбщихНастроек.Загрузить("ДоговорКонтрагента");		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Элементы.ДоговорКонтрагента.Доступность = Истина;
		Элементы.КонтрагентКромеЭтого.Доступность = Истина;
	Иначе
		Элементы.ДоговорКонтрагента.Доступность = Ложь;
		Элементы.КонтрагентКромеЭтого.Доступность = Ложь;
	КонецЕсли;        
	//-----------------------------------------------------------
	ТипДокОтчета  =  ХранилищеОбщихНастроек.Загрузить("ТипДокОтчета");
	
	БезНДССтатья  =  ХранилищеОбщихНастроек.Загрузить("БезНДССтатья");
	Элементы.Сформировать.Доступность  =  Ложь;
	Элементы.ОбновлениеЕРНН.Доступность = Ложь;
	Элементы.ДополнительныеДанные.Доступность  =  Ложь;
	Элементы.ДополнительныеДанные1.Доступность  =  Ложь;

	Элементы.ВывестиСписок.Доступность  =  Ложь;
	//
	Элементы.СортироватьАЗ.Доступность  =  Ложь;
	Элементы.СортироватьЗА.Доступность  =  Ложь; 
	
	// 09.12.2021 + DOCKING 361
	Элементы.ВывестиСписок1.Доступность  =  Ложь;
	//
	Элементы.СортироватьАЗ1.Доступность  =  Ложь;
	Элементы.СортироватьЗА1.Доступность  =  Ложь; 
	
	Элементы.СортировкаВверх1.Доступность = Ложь;
	Элементы.СортировкаВниз1.Доступность = Ложь;
	Элементы.СортировкаВверх.Доступность = Ложь;
	Элементы.СортировкаВниз.Доступность = Ложь;
	// 09.12.2021 - DOCKING 361
	
	//Эле	СепараторВПервичке();
	//11.05.22 + DOCKING 406
	Если КодПоЕДРПОУ = "20079914" Тогда 
		СписокПервички.Добавить("Акт приема передачи ПО",  Нстр("ru = 'Акт приема передачи ПО';uk = 'Акт приманні передачі ПО'"));
	КонецЕсли;	
	//11.05.22 - DOCKING 406 
	
	//18.03.2024 + DOCKING 669
	Если ЭтотОбъект.КодПоЕДРПОУ = "41007704" Тогда
		СписокПервички.Добавить("ПостТоваровКлиент",  Нстр("ru = 'Поступление товаров';uk = 'Надходження товарів'"));
		СписокПервички.Добавить("ПостУслугКлиент",  Нстр("ru = 'Поступление услуг';uk = 'Надходження послуг'"));
	КонецЕсли;	
	//18.03.2024 - DOCKING 669
	Для Каждого Эл из СписокПервички Цикл
		   // 02.12.2021 + DOCKING 359
		   //Элементы.ТипДокФорма.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
		   Элементы.ТипДокФорма.СписокВыбора.Добавить(Эл.Представление, Эл.Представление);
		   // 02.12.2021 - DOCKING 359
	КонецЦикла;
	   
	// 03.12.2021 + DOCKING 361
	Для Каждого Эл из СписокНалоговых Цикл
		  Элементы.ТипДокФорма1.СписокВыбора.Добавить(Эл.Представление, Эл.Представление);
	КонецЦикла;
	// 03.12.2021 - DOCKING 361
	   
	Для Каждого Эл из СписокРегОтчетов Цикл
		   Элементы.РегОтчетТипДок.СписокВыбора.Добавить(Эл.Значение, Эл.Представление)
	КонецЦикла;
	
	// 02.08.2022 + DOCKING 382   
	Для Каждого Эл из СписокТипРасчетов Цикл
		   Элементы.ТипРасчета.СписокВыбора.Добавить(Эл.Значение, Эл.Представление)
	КонецЦикла;
	// 02.08.2022 - DOCKING 382
	
	// 30.10.2023 + DOCKING 518   
	Для Каждого Эл из СписокСтатусов Цикл
	   Элементы.СтатусПД.СписокВыбора.Добавить(Эл.Представление, Эл.Представление)
	КонецЦикла;
	Для Каждого Эл из СписокСтатусов Цикл
	   Элементы.СтатусНН.СписокВыбора.Добавить(Эл.Представление, Эл.Представление)
    КонецЦикла;
    Для Каждого Эл из СписокСтатусовЕРНН Цикл
	   Элементы.СтатусЕРНН.СписокВыбора.Добавить(Эл.Представление, Эл.Представление)
	КонецЦикла;
	ТипСтатусаПД  =  ХранилищеОбщихНастроек.Загрузить("ТипСтатусаПД");
	ТипСтатусаНН  =  ХранилищеОбщихНастроек.Загрузить("ТипСтатусаНН");
	ТипСтатусаЕРНН  =  ХранилищеОбщихНастроек.Загрузить("ТипСтатусаЕРНН");
	// 30.10.2023 - DOCKING 518
	
	//ТипДок.СписокВыбора = СписокПервички;
	ТипДокФорма	 =  ХранилищеОбщихНастроек.Загрузить("ТипДокФорма");
	ТипДокФорма1	 =  ХранилищеОбщихНастроек.Загрузить("ТипДокФорма1");
	
	ЭтотОбъект.НалогДокНачПериода =  ХранилищеОбщихНастроек.Загрузить("НалогДокНачПериода");
	ЭтотОбъект.НалогДокКонПериода = ХранилищеОбщихНастроек.Загрузить("НалогДокКонПериода");
	НалогДокОтветственный  =  ХранилищеОбщихНастроек.Загрузить("НалогДокОтветственный");
	
	//----------------------------------------------------------	
	НалогДокКонтрагент  =  ХранилищеОбщихНастроек.Загрузить("НалогДокКонтрагент");
	НалогДокДоговорКонтрагента  =  ХранилищеОбщихНастроек.Загрузить("НалогДокДоговорКонтрагента");		
	Если ЗначениеЗаполнено(НалогДокКонтрагент) Тогда
		Элементы.НалогДокДоговорКонтрагента.Доступность = Истина;
		Элементы.НалогДокКонтрагентКромеЭтого.Доступность = Истина;
	Иначе
		Элементы.НалогДокДоговорКонтрагента.Доступность = Ложь;
		Элементы.НалогДокКонтрагентКромеЭтого.Доступность = Ложь;
	КонецЕсли;        
	//-----------------------------------------------------------
	
	Для каждого Эл из  мСписокВыбораСпецРежимНалогообложения цикл
		 //Элементы.СпецРежимНалогообложения222.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
		 Элементы.СпецРежимНалогообложения.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла;
	//Элементы.СпецРежимНалогообложения.СписокВыбора  =  мСписокВыбораСпецРежимНалогообложения;
	СпецРежимНалогообложения  =  ХранилищеОбщихНастроек.Загрузить("СпецРежимНалогообложения");
	НалогДокСпецРежимНалогообложения  =  ХранилищеОбщихНастроек.Загрузить("НалогДокСпецРежимНалогообложения");
	
	ОрганизацияПриИзмененииНаСервере();
	//ОрганизацияОтчетаПриИзменении(Элементы.Организация);  
	
	Если ЭтотОбъект.НачПериода = Дата('00010101') и ЭтотОбъект.КонПериода = Дата('00010101') Тогда
		ЭтотОбъект.НачПериода = Дата(Год(Текущаядата()), 01, 01);
		ЭтотОбъект.КонПериода = КонецДня(Дата(Год(Текущаядата()), 12, 31));	
	КонецЕСли;
	
	ВыборПериодаОтбораПервичкиДефолтные(); 		
	
	//----------------------------------------------------------------------------
	//Доступнось_ДСС_НАЛ();
	//ВыборСправочникаКлюч();      
	//ПутьКФайлуМедкаПриИзменении(Истина);	
	//----------------------------------------------------------------------------
	// СписокДокуменов убрали чтоб не ел ресурсы
	//СписокДокуменов  =  Новый СписокЗначений(); 	
	//Для каждого Док из Метаданные.Документы Цикл
	//	Если НЕ Лев(Док.Синоним, 1) = "("  Тогда
	//		СписокДокуменов.Добавить(Док.Имя,  Док.Синоним);
	//	КонецЕсли;
	//КонецЦикла;
	////Элементы.ВыборДокаУС1С.СписокВыбора  = СписокДокуменов; 
	ЭтотОбъект.ОрганизацияПервичка = ОрганизацияПервичка;
	//СписокДокуменов.СортироватьПоЗначению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииСерв();
	МенеджерЗвит1С = Неопределено;
КонецПроцедуры	

&НаСервере
Процедура ПриЗакрытииСерв()
		
	ХранилищеОбщихНастроек.Сохранить("НадписьПараметры",  ,     НадписьПараметры);
	ХранилищеОбщихНастроек.Сохранить("ПараметрыПредприятияПоле", ,      ПараметрыПредприятияПоле);
	ХранилищеОбщихНастроек.Сохранить("ПараметрыФилиалПоле", ,      ПараметрыФилиалПоле);
	ХранилищеОбщихНастроек.Сохранить("ПараметрыЛогинПоле", ,      ПараметрыЛогинПоле);
	ХранилищеОбщихНастроек.Сохранить("ПараметрыПарольПоле", ,      ПараметрыПарольПоле);
	
	ХранилищеОбщихНастроек.Сохранить("НачПериода", ,      ЭтотОбъект.НачПериода); 
	ХранилищеОбщихНастроек.Сохранить("КонПериода", ,      ЭтотОбъект.КонПериода);
	ХранилищеОбщихНастроек.Сохранить("ПутьКФайлуМедка",,  ПутьКФайлуМедка);	
	ХранилищеОбщихНастроек.Сохранить("ОрганизацияПервичка", , ОрганизацияПервичка);  
	//ХранилищеОбщихНастроек.Сохранить("ОрганизацияСправочники",      ОрганизацияСправочники); 
	ХранилищеОбщихНастроек.Сохранить("КодПоЕДРПОУ", ,     КодПоЕДРПОУ);
	//ХранилищеОбщихНастроек.Сохранить("КодПоЕДРПОУСпр", ,     КодПоЕДРПОУСпр);
	ХранилищеОбщихНастроек.Сохранить("пФил", ,    		 пФил);
	ХранилищеОбщихНастроек.Сохранить("ТипДокФорма",   ,  		 ТипДокФорма);
	ХранилищеОбщихНастроек.Сохранить("ТипДок",   ,  		 ТипДок);
	ХранилищеОбщихНастроек.Сохранить("КодДок",   ,  		 КодДок);
	ХранилищеОбщихНастроек.Сохранить("СпецРежимНалогообложения",,  СпецРежимНалогообложения); 	
	ХранилищеОбщихНастроек.Сохранить("ОтображатьСлужебныеНН",,  ОтображатьСлужебныеНН); 	
	ХранилищеОбщихНастроек.Сохранить("Контрагент",,  Контрагент);   
	ХранилищеОбщихНастроек.Сохранить("Ответственный", , Ответственный);
	ХранилищеОбщихНастроек.Сохранить("ТипСтатусаПД", , ТипСтатусаПД);
	ХранилищеОбщихНастроек.Сохранить("ТипСтатусаНН", , ТипСтатусаНН);
	ХранилищеОбщихНастроек.Сохранить("ТипСтатусаЕРНН", , ТипСтатусаЕРНН);
	ХранилищеОбщихНастроек.Сохранить("ДоговорКонтрагента",,  ДоговорКонтрагента);
	ХранилищеОбщихНастроек.Сохранить("ЗарегистрированныеПоДанным1С",,   ЗарегистрированныеПоДанным1С);
	ХранилищеОбщихНастроек.Сохранить("ЗарегистрированныеПоДанным1СПлан", ,  ЗарегистрированныеПоДанным1СПлан);
	ХранилищеОбщихНастроек.Сохранить("ПерСохраненнный", ,  ПерСохраненнный); 
	ХранилищеОбщихНастроек.Сохранить("ТипРТУСохраненный", ,  ТипРТУСохраненный); 
		
	ХранилищеОбщихНастроек.Сохранить("ЗапЛок", , ЭтотОбъект.ЗапЛок); 
	
	//ХранилищеОбщихНастроек.Сохранить("НачПериодаОтч", ,  Элементы.НачПериодаОтч);
	//ХранилищеОбщихНастроек.Сохранить("КонПериодаОтч", ,  Элементы.КонПериодаОтч);
	//ХранилищеОбщихНастроек.Сохранить("ОрганизацияОтчета", ,  Элементы.ОрганизацияОтчета);
	//ХранилищеОбщихНастроек.Сохранить("ТипДокОтчета", ,  Элементы.ТипДокОтчета); 
	
	ХранилищеОбщихНастроек.Сохранить("ФР",, ЭтотОбъект.ФР);
	ХранилищеОбщихНастроек.Сохранить("ОД",, ЭтотОбъект.ОД);
	ХранилищеОбщихНастроек.Сохранить("ИП",, ЭтотОбъект.ИП);
	
	ХранилищеОбщихНастроек.Сохранить("СозданиеКонтрагентов",,    ЭтотОбъект.СозданиеКонтрагентов);
	ХранилищеОбщихНастроек.Сохранить("СозданиеКонтрагентовМед",, ЭтотОбъект.СозданиеКонтрагентовМед);
	ХранилищеОбщихНастроек.Сохранить("НЕоткрыватьВхДок",,        ЭтотОбъект.НЕоткрыватьВхДок);
	ХранилищеОбщихНастроек.Сохранить("ПередаватьНомерДоговора",, ЭтотОбъект.ПередаватьНомерДоговора);
	ХранилищеОбщихНастроек.Сохранить("НЕПередаватьРеквизитыДоговора",, ЭтотОбъект.НЕПередаватьРеквизитыДоговора);
	ХранилищеОбщихНастроек.Сохранить("СоздаватьНоменклатуру",,   ЭтотОбъект.СоздаватьНоменклатуру);
	ХранилищеОбщихНастроек.Сохранить("НЕСоздаватьНовыйДоговор",,   ЭтотОбъект.НЕСоздаватьНовыйДоговор);	

	ХранилищеОбщихНастроек.Сохранить("РегОтчетОрганизация",, ЭтотОбъект.РегОтчетОрганизация);
	ХранилищеОбщихНастроек.Сохранить("РегОтчетНачПериода",,  ЭтотОбъект.РегОтчетНачПериода);
	ХранилищеОбщихНастроек.Сохранить("РегОтчетКонПериода",,  ЭтотОбъект.РегОтчетКонПериода);
	ХранилищеОбщихНастроек.Сохранить("РегОтчетТипДок",,      ЭтотОбъект.РегОтчетТипДок);
	ХранилищеОбщихНастроек.Сохранить("РегОтчКодПоЕДРПОУ",,   ЭтотОбъект.РегОтчКодПоЕДРПОУ);
	
	ХранилищеОбщихНастроек.Сохранить("ТипДокФорма1",   ,  		 ТипДокФорма1);
	ХранилищеОбщихНастроек.Сохранить("НалогДокНачПериода", ,      ЭтотОбъект.НалогДокНачПериода); 
	ХранилищеОбщихНастроек.Сохранить("НалогДокКонПериода", ,      ЭтотОбъект.НалогДокКонПериода);
	ХранилищеОбщихНастроек.Сохранить("НалогДокОрганизацияПервичка", , НалогДокОрганизацияПервичка);
	ХранилищеОбщихНастроек.Сохранить("НалогДокСпецРежимНалогообложения",,  НалогДокСпецРежимНалогообложения);
	ХранилищеОбщихНастроек.Сохранить("НалогДокОтветственный", , НалогДокОтветственный);
	ХранилищеОбщихНастроек.Сохранить("НалогДокКонтрагент", , НалогДокКонтрагент);
	ХранилищеОбщихНастроек.Сохранить("НалогДокДоговорКонтрагента", , НалогДокДоговорКонтрагента);
	
	ХранилищеОбщихНастроек.Сохранить("ПроверятьОбновуПриОткрытии",,   ПроверятьОбновуПриОткрытии);
	
	ХранилищеОбщихНастроек.Сохранить("ТипРасчета",,      ЭтотОбъект.ТипРасчета);
	
	//------------------------------------------------------------------------------
	МенеджерЗвит1С = Неопределено;
	//Если НЕ МедКомпонент  =  Неопределено Тогда
	//	МедКомпонент.CloseAddin();
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	ОбработкаВнешнегоСобытияМедка(Источник,  Событие,  Данные);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВнешнегоСобытияМедка(Источник, Событие, Данные)
	
	Попытка			
		Если (Источник = "Medoc") 
			И (Событие = "PRIMARYDOC") Тогда
   			Отчет = МедКомпонент.GetPrimaryDoc(Данные); 			
			ИмяСхемы = Отчет.CharCode; 
			ИмяДокумента = Отчет.DocName; 
			ТипПериода = Отчет.PeriodType; 
			ДатаПериода = Отчет.PeriodDate; 
			пGUID = Отчет.DOCGUID;
			НеСоздавать = Ложь;
			//----------------------------------------------------------------------------------------------------------		
			//Если Сред(ИмяСхемы, 2, 6) = "120101" Тогда
			Если Найти(ИмяСхемы,"12010") <> 0 И Найти(ИмяДокумента,"Податкова накладна") <> 0 Тогда
				Попытка
					Если (Отчет.GetValue("MAIN",  "SEND_DPA")) = 12 Тогда 
						// DOCKING 511 + 01.06.2023
						//ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "SEND_DPA_DATE");    				
						ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "DPA_REG_TIME");    				
						// DOCKING 511 - 01.06.2023
					КонецЕсли;
					//-----------------------------------------------------------------------------------------------------------------------------------------------//  							
					
					
					КодДеятельностиВхДок = Строка(Отчет.GetValue("MAIN",  "N2_12"));
					Филиал = Строка(Отчет.GetValue("MAIN",  "N2_13"));
					Если (Филиал = "") и (КодДеятельностиВхДок = "") Тогда
						НомерВходящегоДокумента =  Строка(Отчет.GetValue("MAIN",  "N2_11"));
					Иначе
						НомерВходящегоДокумента =  Строка(Отчет.GetValue("MAIN",  "N2_11") + "/" + КодДеятельностиВхДок + "/" + Филиал);	
					КонецЕсли;
					ДатаВходящегоДокумента =  Дата(Отчет.GetValue("MAIN",  "N11"));
					НазваниеДока = (Нстр("ru = 'Налоговая накладная ';uk = 'Податкова накладна '"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрЕДРПОУ =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					спецрежим = ?(ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "N2_12")),Число(Отчет.GetValue("MAIN",  "N2_12")),0);
					ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная");
					
					СписокНН = Новый СписокЗначений;
					СписокНН.Добавить("НазваниеДока", НазваниеДока);
					СписокНН.Добавить("ДатаДокаВх",  ДатаВходящегоДокумента); 
					СписокНН.Добавить("ДатаДокаВх",  ДатаВходящегоДокумента);
					СписокНН.Добавить("ФилиалВхДок", Строка(Отчет.GetValue("MAIN",  "N2_13")));
					// DOCKING 511 + 01.06.2023
					//СписокНН.Добавить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных", Отчет.GetValue("MAIN",  "SEND_DPA_DATE"));
					СписокНН.Добавить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных", Отчет.GetValue("MAIN",  "DPA_REG_TIME"));
					// DOCKING 511 - 01.06.2023
					СписокНН.Добавить("Филиал", Строка(Отчет.GetValue("MAIN",  "N2_13")));
					СписокНН.Добавить("НомерДока", НомерВходящегоДокумента);
					СписокНН.Добавить("ИННОрганизации", Строка(СокрЛП(Отчет.GetValue("MAIN",  "N4"))));
					//СписокНН.Добавить("ЕДРПОУОрганизации", Строка(СокрЛП(Отчет.GetValue("MAIN",  "EDR_POK"))));
					СписокНН.Добавить("ЕДРПОУОрганизации", ДатьОргМЕДок());
					СписокНН.Добавить("КонтрНаименование", СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME")));
					СписокНН.Добавить("КонтрЕДРПОУ",КонтрЕДРПОУ);
					СписокНН.Добавить("КонтрИНН",КонтрИНН);
					СписокНН.Добавить("КонтрАдр", СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR")), );
					СписокНН.Добавить("КонтрТлф", СокрЛП(Отчет.GetValue("MAIN", "FIRM_PHON")), );
					СписокНН.Добавить("СумаТары", Отчет.GetValue("MAIN",  "A3_11"), );
					СписокНН.Добавить("СпецРежимНалогообложения",СокрЛП(Отчет.GetValue("MAIN",  "N2_12")), );
					СписокНН.Добавить("ДатаДог",(Отчет.GetValue("MAIN",  "N82")));
					СписокНН.Добавить("НомерДог", СокрЛП(Отчет.GetValue("MAIN",  "N81")));
					СписокНН.Добавить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных" , ДатаВключенияВЕдиныйРеестрНалоговыхНакладных);
					СписокНН.Добавить("спецрежим", спецрежим);
					СписокНН.Добавить("ВидОперации", ВидОперации);
					
					Если СписокНН.НайтиПоЗначению("ИННОрганизации") = "" Тогда
						МедКомпонент.CancelDoc("В накладній не вказаний ІПН!");
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ("В накладній не вказаний ІПН!");
						Сообщение.Сообщить();
						Возврат;
					КонецЕсли;
					
					Если Объект.Конфигурация = "БУ" 
						ИЛИ Объект.Конфигурация = "УТП" 
						ИЛИ Объект.Конфигурация = "кпЖРЕУ"
						ИЛИ Объект.Конфигурация = "ВА"
						ИЛИ Объект.Конфигурация = "СГ"
						ИЛИ Объект.Конфигурация = "ERP"    // v DOCKING-378 14.01.2022
						ИЛИ Объект.Конфигурация = "КУП" // 18.01.2022 + DOCKING 369
						ИЛИ Объект.Конфигурация = "SB" // 24.11.2022 + DOCKING 462
						ИЛИ Объект.Конфигурация = "BASPC" // 15.09.2023 + DOCKING 584
						Тогда
						СуществованиеДокаНазвание = "РегистрацияВходящегоНалоговогоДокумента";
					ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда
						СуществованиеДокаНазвание = "ЗаписьКнигиПриобретения";
					КонецЕсли;
					
					Организация = НайтиОрганизациюПоИНН(СокрЛП(СписокНН.НайтиПоЗначению("ИННОрганизации")),СокрЛП(СписокНН.НайтиПоЗначению("ЕДРПОУОрганизации")));
					Если НЕ ЗначениеЗаполнено(Организация) или Организация = Неопределено тогда
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ("Організації з ІПН = " + СокрЛП(СписокНН.НайтиПоЗначению("ИННОрганизации")) + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");
						Сообщение.Сообщить();
						МедКомпонент.CancelDoc = ("Організації з ІПН = " + СокрЛП(СписокНН.НайтиПоЗначению("ИННОрганизации")) + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"); 
						НеСоздавать = Истина;
					КонецЕсли;	
					
					Покупатель = ПолучитьКонтрагента(СписокНН.НайтиПоЗначению("КонтрИНН").Представление,СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление);		
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(СписокНН, НазваниеДока, НомерВходящегоДокумента, ДатаВходящегоДокумента);	
						Иначе
							МедКомпонент.CancelDoc("Податкова накладна " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
													+ "Контрагента з ІПН = " + КонтрИНН + " та код філії = " + СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  
													+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Податкова накладна " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
												+ "Контрагента з ІПН = " + КонтрИНН + " та код філії = " + СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"  
												+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
							НеСоздавать = Истина;
							Возврат;
						КонецЕсли;
						
					КонецЕсли;

					СписокНН.Добавить("Покупатель", Покупатель);
					//+DOCKING-259 24.06.2021
					//Если СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление = "" Тогда
					//	НомерДокаВх = НомерВходящегоДокумента;
					//Иначе
					//	НомерДокаВх = НомерВходящегоДокумента + "/" + СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление;	
					//КонецЕсли;
                    НомерДокаВх = НомерВходящегоДокумента;
					//-DOCKING-259 24.06.2021
					
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,Организация,Покупатель,Дата(СписокНН.НайтиПоЗначению("ДатаДокаВх").Представление),НомерДокаВх,ВидОперации) Тогда
						
						ТекстОтменыДокумента  =  СокрЛП(СписокНН.НайтиПоЗначению("НазваниеДока").Представление) + " № " + ?(СписокНН.НайтиПоЗначению("НомерДока").Представление = "","",Число(СписокНН.НайтиПоЗначению("НомерДока").Представление)) + " від " + 
						Формат(Дата(СписокНН.НайтиПоЗначению("ДатаДокаВх").Представление),  "ДЛФ = Д") + " вже існує в 1С!";
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст =(ТекстОтменыДокумента);
						Сообщение.Сообщить();
						МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
						//ДокументСуществует( СписокНН.НайтиПоЗначению("НазваниеДока").Представление,   Дата(СписокНН.НайтиПоЗначению("ДатаДокаВх").Представление),  Число(СписокНН.НайтиПоЗначению("НомерДока").Представление), МедКомпонент);
						НеСоздавать = Истина;
					КонецЕсли;
					
					Ном = 1;
					
					table = Отчет.First("TAB1");
					
					Пока table Цикл 			
						СписокНН.Добавить("Сумма"+Ном, Отчет.GetValue("TAB1",  "TAB1_A10")); 						
						СписокНН.Добавить("Ставка"+Ном, Отчет.GetValue("TAB1", "TAB1_A8"));
						СписокНН.Добавить("НаименованиеТовара", Отчет.GetValue("TAB1",  "TAB1_A13"));
						СписокНН.Добавить("Количество",  Отчет.GetValue("TAB1",  "TAB1_A15"));
						СписокНН.Добавить("Цена", Отчет.GetValue("TAB1",  "TAB1_A16")); 						
						Ном = Ном + 1;
						table = Отчет.Next("TAB1");						
					КонецЦикла;	
					
					Если НЕ НеСоздавать Тогда
						Ссылка = СозданиеННвх(СписокНН);
						МедКомпонент.AcceptDoc(пGUID);
						
						П = Новый Структура("Ключ", Ссылка);	
						Форма = ПолучитьФорму("Документ.РегистрацияВходящегоНалоговогоДокумента.Форма.ФормаДокумента", П);
						Если НЕоткрыватьВхДок = Ложь Тогда	
							Форма.Открыть();
						КонецЕсли;	
					КонецЕсли;	
					
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = (ОписаниеОшибки());
					Сообщение.Сообщить();
				КонецПопытки;
				//----------------------Приложение2-------------------------------------------------------------------    
			//ИначеЕсли Сред(ИмяСхемы, 2, 6) = "120121" Тогда
			ИначеЕсли Найти(ИмяСхемы,"12012") <> 0 И Найти(ИмяДокумента,"Додаток №2") <> 0 Тогда
				Попытка
					
					Если (Отчет.GetValue("MAIN",  "SEND_DPA")) = 12 Тогда 
						// DOCKING 511 + 01.06.2023
						//ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "SEND_DPA_DATE");
						ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  =  Отчет.GetValue("MAIN",  "DPA_REG_TIME");
						// DOCKING 511 - 01.06.2023
					КонецЕсли;
					
					НазваниеДока = Нстр("ru = 'Приложение 2 ';uk = 'Додаток 2 '"); 
					ДатаВходящегоДокумента = Дата(Отчет.GetValue("MAIN",  "N15"));
					НомерВходящегоДокумента = Строка(Отчет.GetValue("MAIN",  "N1_11"));
					ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат");
					
					СписокРК = Новый СписокЗначений;
					СписокРК.Добавить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных", ДатаВключенияВЕдиныйРеестрНалоговыхНакладных);
					СписокРК.Добавить("ФилиалВхДок",  Строка(Отчет.GetValue("MAIN",  "N1_13")));
					// DOCKING 511 + 01.06.2023
					//СписокРК.Добавить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных",  Отчет.GetValue("MAIN",  "SEND_DPA_DATE"));
					СписокРК.Добавить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных",  Отчет.GetValue("MAIN",  "DPA_REG_TIME"));
					// DOCKING 511 - 01.06.2023
					СписокРК.Добавить("ДатаКорректируемогоВходящегоДокумента",  Отчет.GetValue("MAIN",  "N2"));
					СписокРК.Добавить("ИННПокупателя",  СокрЛП(Отчет.GetValue("MAIN",  "FIRM_INN")));					
					СписокРК.Добавить("КонтрНаименование", СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME")));
					СписокРК.Добавить("КонтрЕДРПОУ", СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU")));
					СписокРК.Добавить("КонтрИНН",  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN")));
					СписокРК.Добавить("КонтрАдр", СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR")));
					СписокРК.Добавить("КонтрТлф", СокрЛП(Отчет.GetValue("MAIN", "FIRM_PHON")));
					СписокРК.Добавить("Филиал2",  Строка(Отчет.GetValue("MAIN",  "N2_13")));
					СписокРК.Добавить("НомерКорректируемогоВходящегоДокумента", Строка(Отчет.GetValue("MAIN",  "N2_11")));
					СписокРК.Добавить("ИННОрганизации",  Строка(СокрЛП(Отчет.GetValue("MAIN",  "N4"))));
					СписокРК.Добавить("ДатаДог",  Отчет.GetValue("MAIN",  "N82"));
					СписокРК.Добавить("НомерДог",  СокрЛП(Отчет.GetValue("MAIN",  "N81")));
					СписокРК.Добавить("СпецРежимНалогообложения" , СокрЛП(Отчет.GetValue("MAIN",  "N1_12")));
					СписокРК.Добавить("НазваниеДока", НазваниеДока);
					СписокРК.Добавить("ДатаДокаВх", ДатаВходящегоДокумента);
					СписокРК.Добавить("НомерДокаВх" , НомерВходящегоДокумента);
					СписокРК.Добавить("ЕДРПОУОрганизации", ДатьОргМЕДок());
					СписокРК.Добавить("ВидОперации", ВидОперации);
					
					Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "SB" ИЛИ Объект.Конфигурация = "BASPC" Тогда
						СуществованиеДокаНазвание = "РегистрацияВходящегоНалоговогоДокумента";
					ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда
						СуществованиеДокаНазвание = "ЗаписьКнигиПриобретения";
					КонецЕсли;	
					
					Организация = НайтиОрганизациюПоИНН(СокрЛП(СписокРК.НайтиПоЗначению("ИННОрганизации")),СокрЛП(СписокРК.НайтиПоЗначению("ЕДРПОУОрганизации")));
					Если НЕ ЗначениеЗаполнено(Организация) или Организация = Неопределено тогда
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ("Організації з ІПН = " + СокрЛП(СписокРК.НайтиПоЗначению("ИННОрганизации")) + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!");
						Сообщение.Сообщить();
						МедКомпонент.CancelDoc = ("Організації з ІПН = " + СокрЛП(СписокРК.НайтиПоЗначению("ИННОрганизации")) + " не існує в 1С!" + Символы.ПС + "Створення накладної неможливо!"); 
						НеСоздавать = Истина;
					КонецЕсли;	
					
					Покупатель = ПолучитьКонтрагента(СписокРК.НайтиПоЗначению("КонтрИНН").Представление,СписокРК.НайтиПоЗначению("ФилиалВхДок").Представление);		
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(СписокРК, НазваниеДока, НомерВходящегоДокумента, ДатаВходящегоДокумента);	
						Иначе
							МедКомпонент.CancelDoc("Додаток 2 " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
													+ "Контрагента з ІПН = " + КонтрИНН + " та код філії = " + СписокРК.НайтиПоЗначению("ФилиалВхДок").Представление + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  

													+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Додаток 2 " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
												+ "Контрагента з ІПН = " + КонтрИНН + " та код філії = " + СписокРК.НайтиПоЗначению("ФилиалВхДок").Представление + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
												+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
							НеСоздавать = Истина;
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
					
					СписокРК.Добавить("Покупатель", Покупатель);
					
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание, Организация, Покупатель, Дата(СписокРК.НайтиПоЗначению("ДатаДокаВх").Представление), НомерВходящегоДокумента, ВидОперации) Тогда
						
						ТекстОтменыДокумента  =  СокрЛП(СписокРК.НайтиПоЗначению("НазваниеДока").Представление) + " № " + Число(СписокРК.НайтиПоЗначению("НомерДокаВх").Представление) + " від " + 
						Формат(Дата(СписокРК.НайтиПоЗначению("ДатаДокаВх").Представление),  "ДЛФ = Д") + " вже існує в 1С!";
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ТекстОтменыДокумента;
						Сообщение.Сообщить();
						МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
						//ДокументСуществует( СписокНН.НайтиПоЗначению("НазваниеДока").Представление,   Дата(СписокНН.НайтиПоЗначению("ДатаДокаВх").Представление),  Число(СписокНН.НайтиПоЗначению("НомерДока").Представление), МедКомпонент);
						Возврат;
					КонецЕсли;
					
					Ном = 1;
					
					table = Отчет.First("TAB1");
					
					Пока table Цикл 			                                         
						СписокРК.Добавить("Сумма"+Ном, Отчет.GetValue("TAB1",  "TAB1_A013")); 						
						СписокРК.Добавить("Ставка"+Ном, Отчет.GetValue("TAB1", "TAB1_A011"));
						СписокРК.Добавить("НаименованиеТовара", Отчет.GetValue("TAB1",  "TAB1_A3"));
						СписокРК.Добавить("Количество",  Отчет.GetValue("TAB1",  "TAB1_A8"));
						СписокРК.Добавить("Цена", Отчет.GetValue("TAB1",  "TAB1_A6")); 						
						Ном = Ном + 1;
						table = Отчет.Next("TAB1");						
					КонецЦикла;	

					Если НЕ НеСоздавать Тогда
						Ссылка = СозданиеРКВх(СписокРК);
						МедКомпонент.AcceptDoc(пGUID);
						
						П = Новый Структура("Ключ", Ссылка);	
						Форма = ПолучитьФорму("Документ.РегистрацияВходящегоНалоговогоДокумента.Форма.ФормаДокумента", П);
						
						Если НЕоткрыватьВхДок = Ложь
							Тогда	
							Форма.Открыть();
						КонецЕсли;
					КонецЕсли; 

				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = ((ОписаниеОшибки()));
					Сообщение.Сообщить();
				КонецПопытки;
				                                                                                                                                                                           
				//-------------------------------------------------Акты, Выдатковые, и прочяя первичка-----------------------------------------------------------------------------------------
			ИначеЕсли Лев(ИмяСхемы,  7) = "1С82АВР" или Лев(ИмяСхемы,  7) = "1С77АВР" или Лев(ИмяСхемы,  6) = "1С82ВН" или Лев(ИмяСхемы,  6) = "1С77ВН" или Лев(ИмяСхемы,  7) = "1С82РАХ" или Лев(ИмяСхемы,  7) = "1С77РАХ" 
				ИЛИ Лев(ИмяСхемы,  7) = "Viyar_V"
				Тогда
				Попытка
					Если Лев(ИмяСхемы,  6) = "1С82ВН" или Лев(ИмяСхемы,  6) = "1С77ВН" ИЛИ Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
						НазваниеДока = "Видаткова накладна ";
						СуществованиеДокаНазвание = "ПоступлениеТоваровУслуг";
						Если Объект.Конфигурация = "SB" Тогда
							СуществованиеДокаНазвание = "ПриходнаяНакладная";
						КонецЕсли;
						Если (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
							СуществованиеДокаНазвание = "ПриобретениеТоваровУслуг";
						КонецЕсли;	
					ИначеЕсли  Лев(ИмяСхемы,  7) = "1С82АВР" или Лев(ИмяСхемы,  7) = "1С77АВР" Тогда
						НазваниеДока = "Акт ";
						СуществованиеДокаНазвание = "ПоступлениеТоваровУслуг";
						Если Объект.Конфигурация = "SB" Тогда
							СуществованиеДокаНазвание = "ПриходнаяНакладная";
						КонецЕсли;
						Если (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
							СуществованиеДокаНазвание = "ПриобретениеТоваровУслуг";
						КонецЕсли;	
					Иначе 
						НазваниеДока = "Рахунок ";
						СуществованиеДокаНазвание = "СчетНаОплатуПоставщика";
					КонецЕсли;
					
					ДатаДокаВх = Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					Если НЕ ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "NUM"))Тогда							
						    МедКомпонент.CancelDoc("В "+НазваниеДока+" не вказаний номер документу");
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = "В "+НазваниеДока+" не вказаний номер документу";
							Сообщение.Сообщить();							
						Возврат;
					КонецЕсли;
					НомерДокаВх = Строка(Отчет.GetValue("MAIN",  "NUM"));
					ЕДРПОУОрганизации = Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					
					Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда // 18.01.2022 + DOCKING 369 
						Если Лев(ИмяСхемы,  6) = "1С82ВН" или Лев(ИмяСхемы,  6) = "1С77ВН" или Лев(ИмяСхемы,  7) = "1С82АВР" или Лев(ИмяСхемы,  7) = "1С77АВР" ИЛИ Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
							ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
						Иначе
							ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетНаОплатуПоставщика.ПокупкаКомиссия");
						КонецЕсли;
					КонецЕсли;	
					
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
							МедКомпонент.CancelDoc("В "+НазваниеДока+" "+" не вказаний ЄДРПОУ!");
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = "В "+НазваниеДока+" "+" не вказаний ЄДРПОУ!";
							Сообщение.Сообщить();							
						Возврат;
					КонецЕсли; 
					
					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации)); 
					Если НЕ ЗначениеЗаполнено(Организация) Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст =("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Сообщение.Сообщить();
						Возврат;
					КонецЕсли;   
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					//Покупатель  =  Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",  ЕДРПОУПокупателя);
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					ФилиалВхДок = СокрЛП(Отчет.GetValue("MAIN", "FIRM_DEPT"));

					
					СписокПерв = Новый СписокЗначений;
					СписокПерв.Добавить("СуществованиеДокаНазвание",СуществованиеДокаНазвание);
					СписокПерв.Добавить("НазваниеДока",НазваниеДока);
					СписокПерв.Добавить("ДатаДокаВх",ДатаДокаВх);
					СписокПерв.Добавить("НомерДокаВх",НомерДокаВх);
					СписокПерв.Добавить("ЕДРПОУОрганизации",ЕДРПОУОрганизации);
					СписокПерв.Добавить("ЕДРПОУПокупателя",ЕДРПОУПокупателя);
					СписокПерв.Добавить("КонтрНаименование",КонтрНаименование);
					СписокПерв.Добавить("КонтрЕДРПОУ",КонтрЕДРПОУ);
					СписокПерв.Добавить("КонтрИНН",КонтрИНН);
					СписокПерв.Добавить("КонтрАдр",КонтрАдр);
					СписокПерв.Добавить("КонтрТлф",КонтрТлф);
					СписокПерв.Добавить("ФилиалВхДок",ФилиалВхДок);
					//Если НЕ Объект.Конфигурация = "КУП" Тогда // 18.01.2022 + DOCKING 369 
						СписокПерв.Добавить("ВидОперации", ВидОперации);
					//КонецЕсли;	
	
					Покупатель = НайтиПокупателя(СписокПерв.НайтиПоЗначению("КонтрЕДРПОУ").Представление);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(СписокПерв, НазваниеДока, НомерВходящегоДокумента, ДатаВходящегоДокумента);	
						Иначе
								МедКомпонент.CancelDoc(НазваниеДока+" " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
														+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
														+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");	
								Сообщение = Новый СообщениеПользователю();
								Сообщение.Текст = (НазваниеДока+" " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
													+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
													+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
								Сообщение.Сообщить();
								НеСоздавать = Истина;
								Возврат;
						КонецЕсли;
						
					КонецЕсли;

					
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх, ВидОперации) Тогда
						//ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						Попытка // 26.07.2022 + DOCKING 433
							ТекстОтменыДокумента  =  СокрЛП(СписокПерв.НайтиПоЗначению("НазваниеДока").Представление) +" № "+ Число(СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление) + " від " + 
							Формат(Дата(СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление),  "ДЛФ = Д") + " вже існує в 1С!";
						Исключение
							ТекстОтменыДокумента  =  СокрЛП(СписокПерв.НайтиПоЗначению("НазваниеДока").Представление) +" № "+ СокрЛП(СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление) + " від " + 
							Формат(Дата(СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление),  "ДЛФ = Д") + " вже існує в 1С!";
						КонецПопытки;	
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ТекстОтменыДокумента;
						Сообщение.Сообщить();
						
						МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
						
						Возврат;
					КонецЕсли; 
					
					Ном = 1;
					table  =  Отчет.First("TAB1"); 		
					Пока table Цикл 
						
						Если Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
							СписокПерв.Добавить("КодОригинал"+Ном,Отчет.GetValue("TAB1",  "TAB1_F2"));
							СписокПерв.Добавить("НоменклатураОригинал"+Ном, Отчет.GetValue("TAB1",  "TAB1_F3"));
							СписокПерв.Добавить("НомКоличество"+Ном, Отчет.GetValue("TAB1",  "TAB1_F4"));
							СписокПерв.Добавить("ЕИОригинал"+Ном,Отчет.GetValue("TAB1",  "TAB1_F5"));
							СписокПерв.Добавить("НомЦена"+Ном, Отчет.GetValue("TAB1",  "TAB1_F6"));
							СписокПерв.Добавить("НомСумма"+Ном, Отчет.GetValue("TAB1",  "TAB1_F7")); 
							
						Иначе
							
							Если Лев(ИмяСхемы, 8) = "1С77АВРБ" тогда
								СписокПерв.Добавить("НоменклатураОригинал"+Ном, Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME")); 			
							ИначеЕсли Лев(ИмяСхемы, 7) = "1С77АВР" тогда 
								СписокПерв.Добавить("НоменклатураОригинал"+Ном, Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME1"));
							Иначе	
								СписокПерв.Добавить("НоменклатураОригинал"+Ном, Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_NAME")); 
							КонецЕсли;
							
							СписокПерв.Добавить("НомКоличество"+Ном, Отчет.GetValue("TAB1",  "TAB1_A3"));
							
							Если Лев(ИмяСхемы, 7) = "1С77АВР" или Лев(ИмяСхемы,  6) = "1С77ВН" тогда 
								СписокПерв.Добавить("НомЦена"+Ном, Отчет.GetValue("TAB1",  "TAB1_A6")/Отчет.GetValue("TAB1",  "TAB1_A3"));
							Иначе	
								СписокПерв.Добавить("НомЦена"+Ном, Отчет.GetValue("TAB1",  "TAB1_A5")); 
							КонецЕсли;
							
							//СписокПерв.Добавить("Количество",  Отчет.GetValue("TAB1",  "TAB1_A5"));
							попытка  // DOCKING-327 11.08.2021 
								СписокПерв.Добавить("Ном_T"+Ном, Отчет.GetValue("TAB1",  "TAB1_T")); 
							исключение конецпопытки;
							
							СписокПерв.Добавить("НомСумма"+Ном, Отчет.GetValue("TAB1",  "TAB1_A6")); 
							СписокПерв.Добавить("ЕИОригинал"+Ном,Отчет.GetValue("TAB1",  "TAB1_NOMENKLATURA_CHARCODEUMEASURE"));
							
						КонецЕсли;	
						Ном = Ном +1;
						table = Отчет.Next("TAB1");		
					КонецЦикла;	
					//------------------------------------------------------------------------					
					
					Ссылка = СозданиеПерв(СписокПерв, ИмяСхемы, СоздаватьНоменклатуру);
					МедКомпонент.AcceptDoc(пGUID); 
					П = Новый Структура("Ключ", Ссылка);
					Если Лев(ИмяСхемы,  6) = "1С82ВН" или Лев(ИмяСхемы,  6) = "1С77ВН" или Лев(ИмяСхемы,  7) = "1С82АВР" или Лев(ИмяСхемы,  7) = "1С77АВР" или Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
						Если Объект.Конфигурация = "SB" Тогда
							Форма = ПолучитьФорму("Документ.ПриходнаяНакладная.Форма.ФормаДокумента", П);
						ИначеЕсли (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
							Форма = ПолучитьФорму("Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента", П);
						Иначе
							Форма = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента", П);
						КонецЕсли;	
					Иначе
						Форма = ПолучитьФорму("Документ.СчетНаОплатуПоставщика.Форма.ФормаДокумента", П);
					КонецЕсли;	
					Если НЕоткрыватьВхДок = Ложь
						Тогда	
						Форма.Открыть();
					КонецЕсли;
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст =(ОписаниеОшибки());
					Сообщение.Сообщить();
				КонецПопытки;
				
				//===================ТТН====================ТТН=====================ТТН===================ТТН======================ТТН============	
				
				// - DOCKING-324 12.08.2021
				
			ИначеЕсли Лев(ИмяСхемы,  5) = "102_1" или Лев(ИмяСхемы,  5) = "102_2" Тогда
				Попытка

					НазваниеДока = "Повернення товарів постачальнику ";
					СуществованиеДокаНазвание = "ВозвратТоваровПоставщику";
					
					ДатаДокаВх = Дата(Отчет.GetValue("MAIN",  "DOCDATE"));
					Если НЕ ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "NUM"))Тогда							
						МедКомпонент.CancelDoc("В "+НазваниеДока+" не вказаний номер документу");
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = "В "+НазваниеДока+" не вказаний номер документу";
						Сообщение.Сообщить();							
						Возврат;
					КонецЕсли;
					НомерДокаВх = Строка(Отчет.GetValue("MAIN",  "NUM"));
					ЕДРПОУОрганизации = Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
					
					Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда // 20.01.2022 + DOCKING 369
						ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия");
					КонецЕсли;	
					
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В "+НазваниеДока+" "+" не вказаний ЄДРПОУ!");
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = "В "+НазваниеДока+" "+" не вказаний ЄДРПОУ!";
						Сообщение.Сообщить();							
						Возврат;
					КонецЕсли; 
					
					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации)); 
					Если НЕ ЗначениеЗаполнено(Организация) Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст =("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Сообщение.Сообщить();
						Возврат;
					КонецЕсли;   
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					//КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					//КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					//ФилиалВхДок = СокрЛП(Отчет.GetValue("MAIN", "FIRM_DEPT"));
					
					
					СписокПерв = Новый СписокЗначений;
					СписокПерв.Добавить("СуществованиеДокаНазвание",СуществованиеДокаНазвание);
					СписокПерв.Добавить("НазваниеДока",НазваниеДока);
					СписокПерв.Добавить("ДатаДокаВх",ДатаДокаВх);
					СписокПерв.Добавить("НомерДокаВх",НомерДокаВх);
					СписокПерв.Добавить("ЕДРПОУОрганизации",ЕДРПОУОрганизации);
					СписокПерв.Добавить("ЕДРПОУПокупателя",ЕДРПОУПокупателя);
					СписокПерв.Добавить("КонтрНаименование",КонтрНаименование);
					СписокПерв.Добавить("КонтрЕДРПОУ",КонтрЕДРПОУ);
					//СписокПерв.Добавить("КонтрИНН",КонтрИНН);
					СписокПерв.Добавить("КонтрАдр",КонтрАдр);
					//СписокПерв.Добавить("КонтрТлф",КонтрТлф);
					//СписокПерв.Добавить("ФилиалВхДок",ФилиалВхДок);
					Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда // 20.01.2022 + DOCKING 369
						СписокПерв.Добавить("ВидОперации", ВидОперации);
					КонецЕсли;	
					
					Покупатель = НайтиПокупателя(СписокПерв.НайтиПоЗначению("КонтрЕДРПОУ").Представление);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(СписокПерв, НазваниеДока, НомерВходящегоДокумента, ДатаВходящегоДокумента);	
						Иначе
							МедКомпонент.CancelDoc(НазваниеДока+" " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
							+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
							+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");	
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = (НазваниеДока+" " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
							+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
							+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
							НеСоздавать = Истина;
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
					
					
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх, ВидОперации) Тогда
						//ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						ТекстОтменыДокумента  =  СокрЛП(СписокПерв.НайтиПоЗначению("НазваниеДока").Представление) +" № "+ Число(СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление) + " від " + 
						Формат(Дата(СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление),  "ДЛФ = Д") + " вже існує в 1С!";
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ТекстОтменыДокумента;
						Сообщение.Сообщить();
						
						МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
						
						Возврат;
					КонецЕсли; 
					

					
					Ном = 1;
					table  =  Отчет.First("TAB1"); 
					
									
					Пока table Цикл 
						
						СписокПерв.Добавить("НоменклатураОригинал"+Ном, Отчет.GetValue("TAB1",  "TAB1_MOMENKLATURA_NAME")); 			
						
						СписокПерв.Добавить("НомКоличество"+Ном, Отчет.GetValue("TAB1",  "TAB1_A3"));
						
						СписокПерв.Добавить("НомЦена"+Ном, Отчет.GetValue("TAB1",  "TAB1_A5")); 
						
						СписокПерв.Добавить("НомСумма"+Ном, Отчет.GetValue("TAB1",  "TAB1_A6")); 
						
						СписокПерв.Добавить("ЕИОригинал"+Ном,Отчет.GetValue("TAB1",  "TAB1_MOMENKLATURA_CHARCODEUMEASURE"));
						Ном = Ном +1;
						table = Отчет.Next("TAB1");		
					КонецЦикла;	
					
				
					//------------------------------------------------------------------------					
					
					Ссылка = СозданиеПерв(СписокПерв, ИмяСхемы, СоздаватьНоменклатуру);
					МедКомпонент.AcceptDoc(пGUID); 
					П = Новый Структура("Ключ", Ссылка);
					
					Форма = ПолучитьФорму("Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента", П);
					Если НЕоткрыватьВхДок = Ложь
						Тогда	
						Форма.Открыть();
					КонецЕсли;
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст =(ОписаниеОшибки());
					Сообщение.Сообщить();
				КонецПопытки;
				
				// + DOCKING-324 12.08.2021
				
			ИначеЕсли Лев(ИмяСхемы, 6) = "1С82АЗ" Или Лев(ИмяСхемы, 6) = "1С83АЗ" Тогда
				Попытка
					НазваниеДока = "Акт ";
					// 20.01.2022 + DOCKING 368
					Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
						СуществованиеДокаНазвание = "СверкаВзаиморасчетов";
					Иначе
						СуществованиеДокаНазвание = "АктСверкиВзаиморасчетов";
					КонецЕсли;	
					// 20.01.2022 - DOCKING 368									
					ДатаДокаВх = Дата(Отчет.GetValue("MAIN", "DOCDATE"));
					Если НЕ ЗначениеЗаполнено(Отчет.GetValue("MAIN",  "NUM"))Тогда							
						    МедКомпонент.CancelDoc("В "+НазваниеДока+" не вказаний номер документу");
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = "В "+НазваниеДока+" не вказаний номер документу";
							Сообщение.Сообщить();							
						Возврат;
					КонецЕсли;
					НомерДокаВх = СокрЛП(Отчет.GetValue("MAIN", "NUM"));
					// 20.01.2022 + DOCKING 369
					Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
						
						НачалоПериода = СокрЛП(Отчет.getValue("MAIN", "DATA_BEG"));
						Если ЗначениеЗаполнено(НачалоПериода) Тогда
							Если Лев(ИмяСхемы, 6) = "1С83АЗ" Тогда
								НачалоПериода = СокрЛП(СтрПолучитьСтроку(СтрЗаменить(НачалоПериода, "-", Символы.ПС),1)) + " 00:00:00";	
							КонецЕсли;
						КонецЕсли;
						КонецПериода = СокрЛП(Отчет.getValue("MAIN", "DATA_END")); 
					
					Иначе
					// 20.01.2022 - DOCKING 369	
						ВалютаДокумента = СокрЛП(Отчет.GetValue("MAIN", "VALUTA_CHARCODE"));
						
						ДатаНачала = СокрЛП(Отчет.getValue("MAIN", "DATA_BEG"));
						Если ЗначениеЗаполнено(ДатаНачала) Тогда
							Если Лев(ИмяСхемы, 6) = "1С83АЗ" Тогда
								ДатаНачала = СокрЛП(СтрПолучитьСтроку(СтрЗаменить(ДатаНачала, "-", Символы.ПС),1)) + " 00:00:00";	
							КонецЕсли;
						КонецЕсли;
						ДатаОкончания = СокрЛП(Отчет.getValue("MAIN", "DATA_END"));
					
					КонецЕсли;
					
					НаименованиеДоговора =  СокрЛП(Отчет.getValue("MAIN", "DOG_NAME"));
					ДатаДоговора = СокрЛП(Отчет.getValue("MAIN", "DOG_DATE"));
					НомерДоговора = СокрЛП(Отчет.getValue("MAIN", "DOG_NUM")); 
					
					// 20.01.2022 + DOCKING 368
					Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
					
						КонтактноеЛицо = СокрЛП(Отчет.getValue("MAIN", "VO_NAME"));
						Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
							КонтактноеЛицо = СокрЛП(Отчет.getValue("MAIN", "VO_PIB"));
						КонецЕсли;
						
						Руководитель = СокрЛП(Отчет.getValue("MAIN", "SIDE_OTV_FIO"));
						Если Не ЗначениеЗаполнено(Руководитель) Тогда
							Руководитель = СокрЛП(Отчет.getValue("MAIN", "SIDE_OTV_FIO_S"));						
						КонецЕсли;
						
					//ИначеЕсли Объект.Конфигурация = "SB" Тогда
						
					Иначе
					// 20.01.2022 - DOCKING 368	
						ПредставительКонтрагента = СокрЛП(Отчет.getValue("MAIN", "VO_NAME"));
						Если Не ЗначениеЗаполнено(ПредставительКонтрагента) Тогда
							ПредставительКонтрагента = СокрЛП(Отчет.getValue("MAIN", "VO_PIB"));
						КонецЕсли;
						
						ПредставительОрганизации = СокрЛП(Отчет.getValue("MAIN", "SIDE_OTV_FIO"));
						Если Не ЗначениеЗаполнено(ПредставительОрганизации) Тогда
							ПредставительОрганизации = СокрЛП(Отчет.getValue("MAIN", "SIDE_OTV_FIO_S"));						
						КонецЕсли;
						
					КонецЕсли;
					
					
					ОрганизацияНаименование =  СокрЛП(Отчет.getValue("MAIN", "SIDE_CD_K"));
					ЕДРПОУОрганизации = Строка(СокрЛП(Отчет.GetValue("MAIN",  "SIDE_EDRPOU_K")));
										
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
							МедКомпонент.CancelDoc("В "+НазваниеДока+" "+" не вказаний ЄДРПОУ!");
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = "В "+НазваниеДока+" "+" не вказаний ЄДРПОУ!";
							Сообщение.Сообщить();							
						Возврат;
					КонецЕсли; 
					
					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации)); 
					Если НЕ ЗначениеЗаполнено(Организация) Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст =("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Сообщение.Сообщить();
						Возврат;
					КонецЕсли;   
					ФилиалВхДок = СокрЛП(Отчет.GetValue("MAIN", "FIRM_DEPT"));
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					Покупатель = НайтиПокупателя(КонтрЕДРПОУ);
					
					СписокПерв = Новый СписокЗначений;
					СписокПерв.Добавить("СуществованиеДокаНазвание",СуществованиеДокаНазвание);
					СписокПерв.Добавить("НазваниеДока",НазваниеДока);
					СписокПерв.Добавить("ДатаДокаВх",ДатаДокаВх);
					СписокПерв.Добавить("НомерДокаВх",НомерДокаВх);
					СписокПерв.Добавить("ЕДРПОУОрганизации",ЕДРПОУОрганизации);
					СписокПерв.Добавить("Организация",Организация);
					СписокПерв.Добавить("ЕДРПОУПокупателя",ЕДРПОУПокупателя);
					СписокПерв.Добавить("КонтрНаименование",КонтрНаименование);
					СписокПерв.Добавить("КонтрЕДРПОУ",КонтрЕДРПОУ);
					СписокПерв.Добавить("НаименованиеДоговора",НаименованиеДоговора);
					СписокПерв.Добавить("ДатаДоговора",ДатаДоговора);
					СписокПерв.Добавить("НомерДоговора",НомерДоговора);
					СписокПерв.Добавить("ФилиалВхДок",ФилиалВхДок);
					
					// 20.01.2022 + DOCKING 368
					//СписокПерв.Добавить("ВалютаДокумента", ВалютаДокумента);
					//СписокПерв.Добавить("ДатаНачала", ДатаНачала);
					//СписокПерв.Добавить("ДатаОкончания",ДатаОкончания);
					//СписокПерв.Добавить("ПредставительОрганизации", ПредставительОрганизации);
	                //СписокПерв.Добавить("ПредставительКонтрагента", ПредставительКонтрагента);
					
					СписокПерв.Добавить("ВалютаДокумента", ( ?((Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"),     ""         , ВалютаДокумента)));
					СписокПерв.Добавить("ДатаНачала", ( ?((Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"), НачалоПериода  , ДатаНачала)));
					СписокПерв.Добавить("ДатаОкончания", ( ?((Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"), КонецПериода   , ДатаОкончания)));
					
					СписокПерв.Добавить("ПредставительОрганизации", ( ?((Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"), Руководитель   , ПредставительОрганизации)));
					СписокПерв.Добавить("ПредставительКонтрагента", ( ?((Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"), КонтактноеЛицо , ПредставительКонтрагента)));
					
					// 20.01.2022 - DOCKING 368
	                СписокПерв.Добавить("ОрганизацияНаименование", ОрганизацияНаименование);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(СписокПерв, НазваниеДока, НомерДокаВх, ДатаДокаВх);	
						Иначе
							МедКомпонент.CancelDoc(НазваниеДока+" " + СокрЛП(НомерДокаВх) + " від " + Формат(ДатаДокаВх,  "ДЛФ = Д") + Символы.ПС 
							+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
							+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");	
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = (НазваниеДока+" " + СокрЛП(НомерДокаВх) + " від " + Формат(ДатаДокаВх,  "ДЛФ = Д") + Символы.ПС 
							+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
							+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
							НеСоздавать = Истина;
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
					
					СписокПерв.Добавить("Контрагент",Покупатель);

					
					Если ПроверитьСуществованиеАктаСверки(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  НомерДокаВх) Тогда
						//ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						ТекстОтменыДокумента  =  СокрЛП(СписокПерв.НайтиПоЗначению("НазваниеДока").Представление) +" № "+ Число(СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление) + " від " + 
						Формат(Дата(СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление),  "ДЛФ = Д") + " вже існує в 1С!";
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ТекстОтменыДокумента;
						Сообщение.Сообщить();
						
						МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
						
						Возврат;
					КонецЕсли; 
					
					// 20.01.2022 + DOCKING 368
					Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
					// 20.01.2022 - DOCKING 368	
						ОстатокНаНачалоКт = СокрЛП(Отчет.GetValue("MAIN", "SNK_SIDE")); 
						Если ЗначениеЗаполнено(ОстатокНаНачалоКт) Тогда
							ОстатокНаНачало = -ОстатокНаНачалоКт;
						КонецЕсли;	
						
						ОстатокНаНачалоДт = СокрЛП(Отчет.GetValue("MAIN", "SND_SIDE"));
						Если ЗначениеЗаполнено(ОстатокНаНачалоДт) Тогда
							ОстатокНаНачало = ОстатокНаНачалоДт;
						КонецЕсли;	
						
						СписокПерв.Добавить("ОстатокНаНачало", ОстатокНаНачало);
						
					КонецЕсли;	

					Ном = 1;
					table  =  Отчет.First("TAB1"); 		
					
					МассивПерв = Новый Массив;
		            МассивОрг = Новый Массив;
					МассивКонтр = Новый Массив;
					МассивДог = Новый Массив;
					
					МассивПерв.Добавить(СписокПерв);
										
					СоотвФирм = Новый Структура;
					СоотвФирм.Вставить("Орг", "SIDE");
					СоотвФирм.Вставить("Контр", "ORG");
					
					СтруктураПолей = Новый Структура;
					
					//DOCKING 661 + 05.01.2024
					Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
						
						СтруктураПолей.Вставить("Дата", "TAB1_DATA_");
						СтруктураПолей.Вставить("ОписаниеДокумента", "TAB1_DOC_"); //TAB1_DOC_
						СтруктураПолей.Вставить("СуммаДолгПартнера", "TAB1_KT_");
						СтруктураПолей.Вставить("СуммаНашДолг", "TAB1_DT_");	
						
					ИначеЕсли Объект.Конфигурация = "SB" Тогда
						
						СтруктураПолей.Вставить("Дата", "TAB1_DATA_");
						СтруктураПолей.Вставить("ОписаниеДокумента", "TAB1_DOC_");
						СтруктураПолей.Вставить("СуммаДолгОрганизации", "TAB1_DT_");
						СтруктураПолей.Вставить("СуммаДолгКонтрагента", "TAB1_KT_");	
						
					Иначе
					//DOCKING 661 - 05.01.2024	
						СтруктураПолей.Вставить("Дата", "TAB1_DATA_");
						СтруктураПолей.Вставить("Представление", "TAB1_DOC_");
						СтруктураПолей.Вставить("Дебет", "TAB1_DT_");
						СтруктураПолей.Вставить("Кредит", "TAB1_KT_");
						
					КонецЕсли;	
					Пока table Цикл 
						Для Каждого Стр Из СоотвФирм Цикл
							СтруктураНеПустая = Ложь;
							Структ = Новый Структура;
							Для Каждого Стр1 Из СтруктураПолей Цикл
								ЗначПараметра =  СокрЛП(Отчет.GetValue("TAB1", Стр1.Значение + Стр.Значение));
								Если ЗначениеЗаполнено(ЗначПараметра) Тогда
									СтруктураНеПустая = Истина
								КонецЕсли;
								Структ.Вставить(Стр1.Ключ,ЗначПараметра);
							КонецЦикла;
							Если СтруктураНеПустая Тогда
								Выполнить("Массив" + Стр.Ключ + ".Добавить(Структ);");
							КонецЕсли;
						КонецЦикла;
						
						Ном = Ном +1;
						table = Отчет.Next("TAB1");		
					КонецЦикла;	
					
					МассивПерв.Вставить(1,МассивОрг);
					МассивПерв.Вставить(2,МассивКонтр);
					МассивПерв.Вставить(3,МассивДог);
					
					//------------------------------------------------------------------------					
					
					Ссылка = СозданиеАктаСверки(МассивПерв);
					МедКомпонент.AcceptDoc(пGUID); 
					П = Новый Структура("Ключ", Ссылка);
					// 20.01.2022 + DOCKING 368
					Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
					// 20.01.2022 - DOCKING 368
						Форма = ПолучитьФорму("Документ.СверкаВзаиморасчетов.Форма.ФормаДокумента", П);
					Иначе
						Форма = ПолучитьФорму("Документ.АктСверкиВзаиморасчетов.Форма.ФормаДокумента", П);
					КонецЕсли;
					
					Если НЕоткрыватьВхДок = Ложь Тогда	
						Форма.Открыть();
					КонецЕсли;
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = (ОписаниеОшибки());
					Сообщение.Сообщить();
				КонецПопытки;
								
			ИначеЕсли Сред(ИмяСхемы,  2,  6) = "120410" или Сред(ИмяСхемы,  2,  6) = "120420"  Тогда
				Попытка
					НазваниеДока = "ТТН ";
					ДатаДокаВх = Дата(Отчет.GetValue("MAIN",  "N1"));
					НомерДокаВх = Строка(Отчет.GetValue("MAIN",  "N2"));
					СуществованиеДокаНазвание="ПоступлениеТоваровУслуг";
					Если Объект.Конфигурация = "SB" Тогда
						СуществованиеДокаНазвание="ПриходнаяНакладная";
					КонецЕсли;	
					//-----------------------------------------------------  
					ЕДРПОУОрганизации = Строка(СокрЛП(Отчет.GetValue("MAIN",  "EDR_POK")));
					Если НЕ ЗначениеЗаполнено(ЕДРПОУОрганизации) Тогда
						МедКомпонент.CancelDoc("В ТТН не вказаний ЄДРПОУ!");
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ("В ТТН не вказаний ЄДРПОУ!");
						Сообщение.Сообщить();
						
						Возврат;
					КонецЕсли; 
					
					Организация = НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));  	
					Если НЕ ЗначениеЗаполнено(Организация) Тогда
						МедКомпонент.CancelDoc("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ("Організації з ЄДРПОУ = " + ЕДРПОУОрганизации + 
						" не існує в 1С!" + Символы.ПС + "Створення документу неможливо!");
						Сообщение.Сообщить();
						
						Возврат;
					КонецЕсли;     
					
					ЕДРПОУПокупателя = СокрЛП(Отчет.GetValue("MAIN",  "FIRM_EDRPOU"));
					КонтрНаименование = СокрЛП(Отчет.GetValue("MAIN", "FIRM_NAME"));
					КонтрЕДРПОУ = СокрЛП(Отчет.GetValue("MAIN", "FIRM_EDRPOU"));
					//КонтрИНН =  СокрЛП(Отчет.GetValue("MAIN", "FIRM_INN"));
					КонтрАдр = СокрЛП(Отчет.GetValue("MAIN", "FIRM_ADR"));
					//КонтрТлф = СокрЛП(Отчет.GetValue("MAIN", "FIRM_TELEFON"));
					
					
					СписокТТН = Новый СписокЗначений;
					СписокТТН.Добавить("НазваниеДока",НазваниеДока);
					СписокТТН.Добавить("ДатаДокаВх",ДатаДокаВх);
					СписокТТН.Добавить("НомерДокаВх",НомерДокаВх);
					СписокТТН.Добавить("СуществованиеДокаНазвание",СуществованиеДокаНазвание);
					СписокТТН.Добавить("ЕДРПОУОрганизации",ЕДРПОУОрганизации);
					СписокТТН.Добавить("Организация",Организация);
					СписокТТН.Добавить("ЕДРПОУПокупателя",ЕДРПОУПокупателя);
					СписокТТН.Добавить("КонтрНаименование",КонтрНаименование);
					СписокТТН.Добавить("КонтрЕДРПОУ",КонтрЕДРПОУ);
					СписокТТН.Добавить("КонтрАдр",КонтрАдр);
					СписокТТН.Добавить("Покупатель",Покупатель);
					
					Покупатель = НайтиПокупателя(СписокТТН.НайтиПоЗначению("КонтрЕДРПОУ").Представление);

					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда 
						
						Если СозданиеКонтрагентов Тогда
							Покупатель = СозданиеКонтрагента(СписокНН, НазваниеДока, НомерВходящегоДокумента, ДатаВходящегоДокумента);	
						Иначе
							МедКомпонент.CancelDoc("Видаткова накладна " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
													+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
													+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							
							Сообщение = Новый СообщениеПользователю();
							Сообщение.Текст = ("Видаткова накладна " + СокрЛП(НомерВходящегоДокумента) + " від " + Формат(ДатаВходящегоДокумента,  "ДЛФ = Д") + Символы.ПС 
												+ "Контрагента з ІПН = " + КонтрИНН + " та ЄДРПОУ = " + КонтрЕДРПОУ + " не існує в 1С!" + Символы.ПС + "Створення документу неможливо!"  
												+ Символы.ПС + "Увімкніть функцію автоматичного створення контрагента!");
							Сообщение.Сообщить();
							НеСоздавать = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ПроверитьСуществованиеДокумента(СуществованиеДокаНазвание,  Организация,  Покупатель,  ДатаДокаВх,  Строка(НомерДокаВх), ВидОперации) Тогда
						//ДокументСуществует(НазваниеДока,  ДатаДокаВх,  НомерДокаВх);
						ТекстОтменыДокумента  =  СокрЛП(СписокПерв.НайтиПоЗначению("НазваниеДока").Представление) +" № "+ Число(СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление) + " від " + 
						Формат(Дата(СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление),  "ДЛФ = Д") + " вже існує в 1С!";
						Возврат;
					КонецЕсли;       				
					//-----------------------------------------------------				
					Ном=1;
					table  =  Отчет.First("TAB1"); 
					Пока table Цикл 
						НоменклатураОригинал = СокрЛП(Отчет.GetValue("TAB1",  "TAB1_A81"));
						Если Сред(ИмяСхемы,  2,  6) = "120420" Тогда
							НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A13");
							НомЦена = Отчет.GetValue("TAB1",  "TAB1_A14");
						ИначеЕсли Сред(ИмяСхемы,  2,  6) = "120410" Тогда 
							//ЕИОригинал = СокрЛП("дал");
							НомКоличество = Отчет.GetValue("TAB1",  "TAB1_A15");
							НомЦена = Отчет.GetValue("TAB1",  "TAB1_A16");
							//ЕдИзмНоменклатуры  =  ЕИОригинал; 
						КонецЕсли;
						СписокТТН.Добавить("НоменклатураОригинал"+Ном,НоменклатураОригинал);
						СписокТТН.Добавить("НомКоличество"+Ном,НомКоличество);
						СписокТТН.Добавить("НомЦена"+Ном,НомЦена);
						
						Ном = Ном +1;
						table  =  Отчет.Next("TAB1");
					КонецЦикла;
					
					Ссылка = СозданиеТТН(СписокТТН, ИмяСхемы, СоздаватьНоменклатуру);
					МедКомпонент.AcceptDoc(пGUID);
					
					П = Новый Структура("Ключ", Ссылка);
					Если Объект.Конфигурация = "SB" Тогда
						Форма = ПолучитьФорму("Документ.ПриходнаяНакладная.Форма.ФормаДокумента", П);
					Иначе
						Форма = ПолучитьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента", П);
					КонецЕсли;	
					Если НЕоткрыватьВхДок = Ложь
						Тогда	
						Форма.Открыть();
					КонецЕсли;
				Исключение
					МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
					
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст =(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					Сообщение.Сообщить();
				КонецПопытки;
				//-----------------ТТН------------------------ТТН-----------------------ТТН--------------------------ТТН----------------			
			Иначе
				МедКомпонент.CancelDoc("Код:      " + """" + ИмяСхемы + """"+ Символы.ПС + "Назва: " + """"+ ИмяДокумента + """" + Символы.ПС + 
				"Для документу не створено можливості вигрузки до 1С!"); 
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ("Код:      " + """" + ИмяСхемы + """"+ Символы.ПС + "Назва: " + """"+ ИмяДокумента + """" + Символы.ПС + 
				"Для документу не створено можливості вигрузки до 1С!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Сообщение.Сообщить();
		
		МедКомпонент.CancelDoc(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));  
	КонецПопытки;
	
КонецПроцедуры 

&НаСервере
Функция СозданиеТТН(СписокТТН, ИмяСхемы, СоздаватьНоменклатуру)
	ТТН  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" Тогда
		ТТН.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		//ИначеЕсли ИмяБазы="УПП" ИЛИ ИмяБазы="УТ" Тогда
	КонецЕсли;
	ДатаДокаВх = СписокТТН.НайтиПоЗначению("ДатаДокаВх").Представление;
	НомерДокаВх = СписокТТН.НайтиПоЗначению("НомерДокаВх").Представление;
	ЕДРПОУОрганизации = СписокТТН.НайтиПоЗначению("ЕДРПОУОрганизации").Представление;
	Покупатель = СписокТТН.НайтиПоЗначению("Покупатель").Представление;
	ЕИОригинал = ТТН.НайтиПоЗначению("ЕИОригинал").Представление;
	// 20.01.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	// 20.01.2022 - DOCKING 368	
		ТТН.Валюта = Справочники.Валюты.НайтиПоКоду("980");
	Иначе
		
		ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);
		ТТН.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
		
	КонецЕсли;
	

	ТТН.ДатаВходящегоДокумента  =  ДатаДокаВх;
	ТТН.НомерВходящегоДокумента  =  НомерДокаВх; 
	ТТН.Дата  =  Дата(ТекущаяДата()); 
	
	// DOCKING 459 + 22.11.2022
	//ЗаполнениеДокументов.Заполнить(ТТН,  ПараметрыСеанса.ТекущийПользователь);
	Если Объект.Конфигурация <> "SB" Тогда
			
		ОбщМодуль = ПолучитьОбщийМодуль("ЗаполнениеДокументов"); 
		Если ОбщМодуль <> Ложь Тогда
			ОбщМодуль.Заполнить(ТТН,  ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
		
	КонецЕсли;
	// DOCKING 459 - 22.11.2022
	
	ОрганизацияПервичка  =  НайтиОрганизациюПоЕДРПОУ(СокрЛП(ЕДРПОУОрганизации));
	ТТН.Организация  =  ОрганизацияПервичка;
	ТТН.Контрагент  =  НайтиПокупателя(Покупатель);;
	ТТН.Комментарий="Переданий з M.E.Doc";
	Если Объект.Конфигурация = "УТ" или Объект.Конфигурация = "УТП"  Тогда
		ТТН.ОтражатьВБухгалтерскомУчете=Истина;
	КонецЕсли;
	
	Ном = 1;
	Пока СписокТТН.НайтиПоЗначению("НоменклатураОригинал"+Ном)<> Неопределено Цикл
		
		НоменклатураОригинал=СписокТТН.НайтиПоЗначению("НоменклатураОригинал"+Ном).Представление;
		НомЦена= СписокТТН.НайтиПоЗначению("НомЦена"+Ном).Представление;
		НомКоличество = СписокТТН.НайтиПоЗначению("НомКоличество"+Ном).Представление;
		НомСумма= НомЦена*НомКоличество;
		НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
		//НомСумма = НомЦена*НомКоличество;
		НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;						
		СуммаНДС=НомСумма * 0.2;
				
		Если ЗначениеЗаполнено(НоменклатураДока) Тогда
			НоваяСтрока =  ТТН.Товары.Добавить();
			НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС, ЕдИзмНоменклатуры);
		иначе
			НаОсновании =  Строка(НСтр("ru = 'ТТНа ';uk = 'ТТНу '"));
			Если СоздаватьНоменклатуру Тогда
				СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  "",  НомСтавкаНДС, "Товар");
			КонецЕсли; 
			НоваяСтрока =  ТТН.Товары.Добавить();						
			НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
			НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС, ЕдИзмНоменклатуры);
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	//-----------------------------------------------------
	ТТН.Записать();
	
	Возврат ТТН.Ссылка;
	
КонецФункции

&НаСервере
Функция СозданиеПерв(СписокПерв, ИмяСхемы, СоздаватьНоменклатуру)
	
	Если Лев(ИмяСхемы,  6) = "1С82ВН" или Лев(ИмяСхемы,  6) = "1С77ВН" или Лев(ИмяСхемы,  7) = "1С82АВР" или Лев(ИмяСхемы,  7) = "1С77АВР" или Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
		Если объект.Конфигурация = "SB" Тогда
			ДокТип = Документы.ПриходнаяНакладная.СоздатьДокумент();
		ИначеЕсли (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
			ДокТип = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		Иначе	
			ДокТип = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		КонецЕсли;	
	ИначеЕсли ИмяСхемы = "102_1" или ИмяСхемы = "102_2" тогда
		ДокТип = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
	Иначе	 
		ДокТип = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
	КонецЕсли;
	//Акт  =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	//Рах  =  Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
	Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" Тогда
		Если Лев(ИмяСхемы,  6) = "1С82ВН" или Лев(ИмяСхемы,  6) = "1С77ВН" или Лев(ИмяСхемы,  7) = "1С82АВР" или Лев(ИмяСхемы,  7) = "1С77АВР" или Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
			ДокТип.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		Иначе
			ДокТип.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПоставщика.ПокупкаКомиссия;
		КонецЕсли;
	КонецЕсли;
	ДокТип.ДатаВходящегоДокумента = СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление;
	ДокТип.НомерВходящегоДокумента = СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление; 
	ДокТип.Дата = Дата(ТекущаяДата()); 
	// 18.01.2022 + DOKING 369
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	// 18.01.2022 - DOKING 369
		Если НЕ Лев(ИмяСхемы,  7) = "1С82РАХ" Тогда
			ДокТип.Валюта = Справочники.Валюты.НайтиПоКоду("980");
		КонецЕсли;	
	Иначе
		ДокТип.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
	КонецЕсли;
	// DOCKING 459 + 22.11.2022
	//ЗаполнениеДокументов.Заполнить(ДокТип,  ПараметрыСеанса.ТекущийПользователь);
	Если Объект.Конфигурация <> "SB" Тогда
			
		ОбщМодуль = ПолучитьОбщийМодуль("ЗаполнениеДокументов"); 
		Если ОбщМодуль <> Ложь Тогда
			ОбщМодуль.Заполнить(ДокТип,  ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
		
	КонецЕсли;
	// DOCKING 459 - 22.11.2022
	
	//-----------------------------------------------------  
	
	ДокТип.Организация  =  НайтиОрганизациюПоЕДРПОУ(СписокПерв.НайтиПоЗначению("ЕДРПОУОрганизации").Представление);
	ДокТип.Контрагент  =  НайтиПокупателя(СписокПерв.НайтиПоЗначению("КонтрЕДРПОУ").Представление);;
	//-----------------------------------------------------
	// 21.01.2022 + DOKING 368
	//ДокТип.Комментарий = "Переданий з M.E.Doc";
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	// 18.01.2022 - DOKING 369
		Если НЕ Лев(ИмяСхемы,  7) = "1С82РАХ" Тогда
			ДокТип.Комментарий = "Переданий з M.E.Doc";
		КонецЕсли;
	Иначе
		ДокТип.Комментарий = "Переданий з M.E.Doc";
	КонецЕсли;	
	// 21.01.2022 - DOKING 368
	Если Объект.Конфигурация = "УТ" или Объект.Конфигурация = "УТП"  Тогда
		ДокТип.ОтражатьВБухгалтерскомУчете=Истина;
	КонецЕсли;
	
	//----------------------------------------------------- 
	Ном = 1;
	Пока СписокПерв.НайтиПоЗначению("НомЦена"+Ном) <> Неопределено Цикл 
		НоменклатураОригинал = СписокПерв.НайтиПоЗначению("НоменклатураОригинал"+Ном).Представление;
		Если Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
			КодОригинал = СписокПерв.НайтиПоЗначению("КодОригинал"+Ном).Представление;
			НоменклатураДока = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",КодОригинал);
		Иначе
			
			НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
			// 27.09.2022 + DOCKING 444
			Если НЕ ЗначениеЗаполнено(НоменклатураДока) Тогда
				Если Объект.Конфигурация = "SB" Тогда   // DOCKING 459 +- 25.11.2022
					//--------------------------------------
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.НаименованиеПолное ПОДОБНО &НоменклатураОригинал";
					
					Запрос.УстановитьПараметр("НоменклатураОригинал", "%"+НоменклатураОригинал+"%");
					РезультатЗапроса = Запрос.Выполнить();
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						НоменклатураДока = ВыборкаДетальныеЗаписи.НаименованиеПолное; 
					КонецЦикла;
					//--------------------------------------
				Иначе
					НоменклатураДока = Справочники.Номенклатура.НайтиПоРеквизиту("НаименованиеПолное",НоменклатураОригинал);
				КонецЕсли;	
			КонецЕсли;	
			// 27.09.2022 - DOCKING 444
		
		КонецЕсли;	
		
		НомКоличество = СписокПерв.НайтиПоЗначению("НомКоличество"+Ном).Представление;                                          
		НомЦена = СписокПерв.НайтиПоЗначению("НомЦена"+Ном).Представление; 
		НомСумма = СписокПерв.НайтиПоЗначению("НомСумма"+Ном).Представление;

		Если ИмяСхемы = "1С82АВР"  или ИмяСхемы = "1С82ВН"  или ИмяСхемы = "1С82РАХ"  или Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
			// 18.01.2022 + DOKING 369
			//ДокТип.СуммаВключаетНДС = Истина;
			Если (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") И (ИмяСхемы = "1С82АВР" ИЛИ ИмяСхемы = "1С82ВН") Тогда
				ДокТип.ЦенаВключаетНДС = Истина;
			ИначеЕсли (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") И НЕ ИмяСхемы = "1С82АВР" Тогда	
				ДокТип.СуммаВключаетНДС = Истина;
			Иначе
				ДокТип.СуммаВключаетНДС = Истина;
			КонецЕсли;		
			// 18.01.2022 - DOKING 369				
			НомЦена = НомЦена;
			// 24.11.2022 + DOCKING 459			
			//НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
			Если Объект.Конфигурация = "SB" Тогда				
				НомСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
			Иначе
				НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;                                                            
			КонецЕсли;
			// 24.11.2022 - DOCKING 459
			СуммаНДС = НомЦена * 0.2 / 1.2;
			
		ИначеЕсли ИмяСхемы = "1С82АВРБ" или ИмяСхемы = "1С77АВРБ" или ИмяСхемы = "1С82ВНБ" или ИмяСхемы = "1С77ВНБ" или ИмяСхемы = "1С82РАХБ" или ИмяСхемы = "1С77РАХБ" или ИмяСхемы = "102_1" Тогда
			НомЦена = НомЦена;
			// 24.11.2022 + DOCKING 459			
			//НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Если Объект.Конфигурация = "SB" Тогда				
				НомСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без ПДВ");
			Иначе
				НомСтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			// 24.11.2022 - DOCKING 459
			
			СуммаНДС = 0;	
		ИначеЕсли ИмяСхемы = "1С82АВР0" или ИмяСхемы = "1С82ВН0" или ИмяСхемы = "1С82РАХ0" Тогда
			// 18.01.2022 + DOKING 369
			//ДокТип.СуммаВключаетНДС = Ложь;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ДокТип.ЦенаВключаетНДС = Ложь;
			Иначе
				ДокТип.СуммаВключаетНДС = Ложь;
			КонецЕсли;
			// 18.01.2022 - DOKING 369
			НомЦена = НомЦена;
			// 24.11.2022 + DOCKING 459			
			//НомСтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
			Если Объект.Конфигурация = "SB" Тогда				
				НомСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Не ПДВ");
				НомСтавкаНДС = Перечисления.ВидыСтавокНДС.Общая;
			Иначе
				НомСтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
			КонецЕсли;
			// 24.11.2022 - DOCKING 459
			
			СуммаНДС = НомСумма * 0.2;
		ИначеЕсли ИмяСхемы = "102_2" или ИмяСхемы = "1С77АВР" или ИмяСхемы = "1С77ВН" или ИмяСхемы = "1С77РАХ" Тогда
			// 18.01.2022 + DOKING 369
			//ДокТип.СуммаВключаетНДС = Ложь;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ДокТип.ЦенаВключаетНДС = Ложь;
			Иначе
				ДокТип.СуммаВключаетНДС = Ложь;
			КонецЕсли;
			// 18.01.2022 - DOKING 369
			НомЦена = НомЦена;
			// 24.11.2022 + DOCKING 459			
			//НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			Если Объект.Конфигурация = "SB" Тогда				
				НомСтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
				НомСтавкаНДС = Перечисления.ВидыСтавокНДС.Общая;
			Иначе
				НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			КонецЕсли;
			// 24.11.2022 - DOCKING 459
			//НомСтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			СуммаНДС = НомСумма * 0.2;
		КонецЕсли;
		
		НомСумма = СписокПерв.НайтиПоЗначению("НомСумма"+Ном).Представление;
		ЕИОригинал = СписокПерв.НайтиПоЗначению("ЕИОригинал"+Ном).Представление;
		// 18.01.2022 + DOKING 369
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ЕдИзмНоменклатуры = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(ЕИОригинал);
		Иначе
			ЕдИзмНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);
		КонецЕсли;
		// 18.01.2022 - DOKING 369
		НомерДокаВх = СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление;
		ДатаДокаВх = СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление;
		
		Если ЗначениеЗаполнено(НоменклатураДока) Тогда
			Если Лев(ИмяСхемы, 7) = "1С82АВР" или Лев(ИмяСхемы, 7) = "1С77АВР" тогда
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
					НоваяСтрока = ДокТип.Товары.Добавить();
				ИначеЕсли Объект.Конфигурация = "SB" Тогда
					НоваяСтрока = ДокТип.Запасы.Добавить();
				Иначе
					НоваяСтрока = ДокТип.Услуги.Добавить();
				КонецЕсли;	
			ИначеЕсли Лев(ИмяСхемы, 6) = "1С82ВН" или  Лев(ИмяСхемы, 6) = "1С77ВН" или Лев(ИмяСхемы, 7) = "1С82РАХ" или  Лев(ИмяСхемы, 7) = "1С77РАХ" или ИмяСхемы = "102_1" или ИмяСхемы = "102_2"  или Лев(ИмяСхемы,  7) = "Viyar_V" тогда
				// - DOCKING-327 11.08.2021 
				попытка
					Если СокрЛП(СписокПерв.НайтиПоЗначению("Ном_T"+Ном).Представление) = "П" тогда
						НоваяСтрока = ДокТип.Услуги.Добавить();
					ИначеЕсли СокрЛП(СписокПерв.НайтиПоЗначению("Ном_T"+Ном).Представление) = "Т" тогда
						НоваяСтрока = ДокТип.Товары.Добавить();
					Иначе	
						НоваяСтрока = ДокТип.Товары.Добавить();
					КонецЕсли;
				исключение
					Если Объект.Конфигурация = "SB" Тогда
						НоваяСтрока = ДокТип.Запасы.Добавить();
					Иначе
						НоваяСтрока = ДокТип.Товары.Добавить();	
					КонецЕсли;	
					
				конецпопытки;
				// + DOCKING-327 11.08.2021
			КонецЕсли;
			// 18.01.2022 + DOKING 369
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				НомДобавить(НоваяСтрока, НоменклатураДока, НомКоличество, НомЦена, НомСумма, НомСтавкаНДС, СуммаНДС, ЕдИзмНоменклатуры);
			Иначе
				НомДобавить(НоваяСтрока, НоменклатураДока, НомКоличество, НомЦена, НомСумма, НомСтавкаНДС, СуммаНДС, ЕдИзмНоменклатуры);
			КонецЕсли;
			
		Иначе 
						
			Если СоздаватьНоменклатуру Тогда
				Если Лев(ИмяСхемы, 7) = "1С82АВР" или Лев(ИмяСхемы, 7) = "1С77АВР" тогда
					НаОсновании = Строка(НСтр("ru = 'Акта ';uk = 'Акту '"));
					СозданиеНоменклатуры(ДатаДокаВх, НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Услуг");						
				ИначеЕсли Лев(ИмяСхемы, 6) = "1С82ВН" или  Лев(ИмяСхемы, 6) = "1С77ВН"  или Лев(ИмяСхемы,  7) = "Viyar_V" тогда
					НаОсновании = Строка(НСтр("ru = 'Расходной накладной ';uk = 'Видаткової накладної '"));
					// DOCKING 590 + 19.10.2023
					Если Лев(ИмяСхемы,  7) = "Viyar_V" Тогда
						 Артикул = СписокПерв.НайтиПоЗначению("КодОригинал"+Ном).Представление;
						 СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар", Артикул);
						 // DOCKING 590 - 19.10.2023
					Иначе
						
						СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");
					КонецЕсли;
				ИначеЕсли Лев(ИмяСхемы, 7) = "1С82РАХ" или  Лев(ИмяСхемы, 7) = "1С77РАХ" тогда
					НаОсновании = Строка(НСтр("ru = 'Счета ';uk = 'Рахунку '"));
					СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");
				ИначеЕсли ИмяСхемы = "102_1" или ИмяСхемы = "102_2" тогда
					НаОсновании = Строка(НСтр("ru = 'Возврат товаров поставщику ';uk = 'Повернення товарів постачальнику '"));
					СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, "Товар");
				КонецЕсли;
			КонецЕсли; 
			
			Если Лев(ИмяСхемы, 7) = "1С82АВР" или Лев(ИмяСхемы, 7) = "1С77АВР" тогда
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
					НоваяСтрока = ДокТип.Товары.Добавить();
				ИначеЕсли Объект.Конфигурация = "SB" Тогда
					НоваяСтрока = ДокТип.Запасы.Добавить();	
				Иначе
					НоваяСтрока = ДокТип.Услуги.Добавить();
				КонецЕсли;	
			ИначеЕсли Лев(ИмяСхемы, 6) = "1С82ВН" или  Лев(ИмяСхемы, 6) = "1С77ВН" или Лев(ИмяСхемы, 7) = "1С82РАХ" или  Лев(ИмяСхемы, 7) = "1С77РАХ" или ИмяСхемы = "102_1" или ИмяСхемы = "102_2"  или Лев(ИмяСхемы,  7) = "Viyar_V" тогда
				// - DOCKING-327 11.08.2021 
				попытка
					Если СокрЛП(СписокПерв.НайтиПоЗначению("Ном_T"+Ном).Представление) = "П" тогда
						НоваяСтрока = ДокТип.Услуги.Добавить();
					ИначеЕсли СокрЛП(СписокПерв.НайтиПоЗначению("Ном_T"+Ном).Представление) = "Т" тогда
						НоваяСтрока = ДокТип.Товары.Добавить();
					Иначе	
						НоваяСтрока = ДокТип.Товары.Добавить();
					КонецЕсли;
				исключение
					//НоваяСтрока = ДокТип.Товары.Добавить();
					Если Объект.Конфигурация = "SB" Тогда
						НоваяСтрока = ДокТип.Запасы.Добавить();
					Иначе
						НоваяСтрока = ДокТип.Товары.Добавить();	
					КонецЕсли;
				конецпопытки;
				// + DOCKING-327 11.08.2021
			КонецЕсли;		
			НоменклатураДока = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатураОригинал,  Истина);
			// 27.09.2022 + DOCKING 444
			Если НЕ ЗначениеЗаполнено(НоменклатураДока) Тогда
				НоменклатураДока = Справочники.Номенклатура.НайтиПоРеквизиту("НаименованиеПолное",НоменклатураОригинал);
			КонецЕсли;	
			// 27.09.2022 - DOCKING 444
			НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС, ЕдИзмНоменклатуры);
			
		КонецЕсли;
		Ном = Ном + 1; 
	КонецЦикла;	
	//-----------------------------------------------------
	ДокТип.Записать();
	
	Возврат ДокТип.Ссылка;
КонецФункции

&НаСервере
Функция СозданиеРКВх(СписокРК)
	
	Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" ИЛИ Объект.Конфигурация = "BASPC" Тогда
		Дод2  =  Документы.РегистрацияВходящегоНалоговогоДокумента.СоздатьДокумент();
		Дод2.ВидОперации  =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат;
	ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда
		Дод2  =  Документы.ЗаписьКнигиПриобретения.СоздатьДокумент();
		Дод2.ВидОперации=Перечисления.ВидыОперацийЗаписьКнигиПриобретения.РасчетКорректировкиВозврат;    
	КонецЕсли; 
	
		Дод2.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СписокРК.НайтиПоЗначению("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных").Представление;    				
				
		//--------------------------------------------------------------------------- 
		
		// DOCKING 459 + 22.11.2022
		//ЗаполнениеДокументов.Заполнить(Дод2,  ПараметрыСеанса.ТекущийПользователь);
		Если Объект.Конфигурация <> "SB" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("ЗаполнениеДокументов"); 
			ОбщМодуль.Заполнить(Дод2,  ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
		// DOCKING 459 - 22.11.2022
		
		Дод2.Дата  =  Дата(СписокРК.НайтиПоЗначению("ДатаДокаВх").Представление);
		Дод2.ДатаВходящегоДокумента = Дата(СписокРК.НайтиПоЗначению("ДатаДокаВх").Представление);
			
		Филиал = СписокРК.НайтиПоЗначению("ФилиалВхДок").Представление;
		Если НЕ ЗначениеЗаполнено(Филиал) Тогда
			Дод2.НомерВходящегоДокумента = Строка(СписокРК.НайтиПоЗначению("НомерДокаВх").Представление);
		Иначе
			Дод2.НомерВходящегоДокумента = Строка(СписокРК.НайтиПоЗначению("НомерДокаВх").Представление);	
		КонецЕсли;
		//---------------------------------------------------------------------------
		
		Дод2.ДатаКорректируемогоВходящегоДокумента  =  Дата(СписокРК.НайтиПоЗначению("ДатаКорректируемогоВходящегоДокумента").Представление);
		Филиал2 = СписокРК.НайтиПоЗначению("Филиал2").Представление;					
		Если НЕ ЗначениеЗаполнено(Филиал2) Тогда
			Дод2.НомерКорректируемогоВходящегоДокумента = Строка(СписокРК.НайтиПоЗначению("НомерКорректируемогоВходящегоДокумента").Представление);
		Иначе
			Дод2.НомерКорректируемогоВходящегоДокумента = Строка(СписокРК.НайтиПоЗначению("НомерКорректируемогоВходящегоДокумента").Представление + "/" + Филиал2);	
		КонецЕсли;  
		//---------------------------------------------------------------------------
	 	
		Дод2.Организация = НайтиОрганизациюПоИНН(СокрЛП(СписокРК.НайтиПоЗначению("ИННОрганизации")),СокрЛП(СписокРК.НайтиПоЗначению("ЕДРПОУОрганизации")));
	
		//Покупатель = НайтиПокупателя(СписокРК.НайтиПоЗначению("КонтрЕДРПОУ").Представление);
		Покупатель = ПолучитьКонтрагента(СписокРК.НайтиПоЗначению("КонтрИНН").Представление, СписокРК.НайтиПоЗначению("ФилиалВхДок").Представление);
		Дод2.Контрагент = Покупатель;
		// DOCKING 532 + 31.07.2023
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Дод2.Партнер = Покупатель.Партнер;
		КонецЕсли;
		// DOCKING 532 - 31.07.2023
		//-------------------------------------------------------------- 
		Попытка
			ДатаДог  = Дата(СписокРК.НайтиПоЗначению("ДатаДог").Представление);
			НомерДог = СписокРК.НайтиПоЗначению("НомерДог").Представление;
			Если НЕСоздаватьНовыйДоговор = Ложь Тогда
				// 18.01.2022 + DOKING 369
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
					Дод2.Договор = СоздатьНовыйДоговор(Покупатель, ОрганизацияПервичка, ДатаДог, НомерДог, ПередаватьНомерДоговора);
				Иначе
				// 18.01.2022 - DOKING 369	
					Дод2.ДоговорКонтрагента = СоздатьНовыйДоговор(Покупатель, ОрганизацияПервичка, ДатаДог, НомерДог, ПередаватьНомерДоговора);         
				КонецЕсли;	
			КонецЕсли;
		Исключение
			// DOCKING 459 + 22.11.2022
			// --------------------------------
			// 18.01.2022 + DOKING 369
			//Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			//	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			//		Дод2.Договор, Дод2.Контрагент, Дод2.Организация, 
			//		Неопределено);
			//Иначе
			//		
			//	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			//		Дод2.ДоговорКонтрагента, Дод2.Контрагент, Дод2.Организация, 
			//		Неопределено);
			//	
			//КонецЕсли;	
			// --------------------------------
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
				ОбщМодуль.УстановитьДоговорКонтрагента(
					Дод2.Договор, Дод2.Контрагент, Дод2.Организация, 
					Неопределено);
					
			ИначеЕсли Объект.Конфигурация = "SB" Тогда
				УстановитьОсновнойДоговорКонтрагента(
					Дод2.Договор, Дод2.Контрагент, Дод2.Организация, 
					Неопределено);		
			Иначе
				ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");	
				ОбщМодуль.УстановитьДоговорКонтрагента(
					Дод2.ДоговорКонтрагента, Дод2.Контрагент, Дод2.Организация, 
					Неопределено);
				
			КонецЕсли;	
			
			// DOCKING 459 - 22.11.2022	
		КонецПопытки;
		Дод2.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СписокРК.НайтиПоЗначению("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных").Представление;
		
		// 18.01.2022 + DOKING 369
		Если НЕ Объект.Конфигурация = "КУП" Тогда
		// 18.01.2022 - DOKING 369
			Если НЕ Объект.Конфигурация = "ERP" Тогда
				Если НЕ Объект.Конфигурация = "SB" Тогда
					
					Попытка
					
						СчетУчета = ПолучитьСчетаРасчетовСКонтрагентом(Дод2.Организация, Покупатель, Дод2.ДоговорКонтрагента);
						
						Если ЗначениеЗаполнено(СчетУчета.СчетУчетаНДСПриобретений) Тогда
							СчетУчетаНДС = СчетУчета.СчетУчетаНДСПриобретений
						Иначе
							СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
						КонецЕсли;
						Дод2.СчетУчетаНДС = СчетУчетаНДС;
						Дод2.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", Дод2.Метаданные()) Тогда
			Дод2.ЭлектронныйДокумент = Истина;
		КонецЕсли;					
		Дод2.СпецРежимНалогообложения = СписокРК.НайтиПоЗначению("СпецРежимНалогообложения").Представление; 
		Дод2.Комментарий = "Переданий з M.E.Doc";				
		
		// 18.01.2022 + DOKING 369
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Дод2.Поставка.Очистить();
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			НоваяСтрока = Дод2.Запасы.Добавить();	
		Иначе
		// 18.01.2022 - DOKING 369	
			Дод2.Товары.Очистить();
		КонецЕсли;
		Ном = 1;
		
		Пока СписокРК.НайтиПоЗначению("Ставка"+Ном) <> Неопределено Цикл
			// 18.01.2022 + DOKING 369
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				НоваяСтрока = Дод2.Поставка.Добавить();
			ИначеЕсли Объект.Конфигурация = "SB" Тогда
				НоваяСтрока = Дод2.Запасы.Добавить();				
			Иначе
			// 18.01.2022 - DOKING 369	
				НоваяСтрока = Дод2.Товары.Добавить();
			КонецЕсли;	
			//20%
			Если Число(СписокРК.НайтиПоЗначению("Ставка"+Ном).Представление) = 20 Тогда
				Если (Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
				Иначе
					НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС20;
				КонецЕсли;
				Новаястрока.Сумма = СписокРК.НайтиПоЗначению("Сумма"+Ном).Представление;
				Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.2;
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
					НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
					// DOCKING 532 + 31.07.2023
					НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
					// DOCKING 532 - 31.07.2023
				Иначе
					НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				КонецЕсли;	
				Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
					НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
					НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
				ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда
					Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
				// 18.01.2022 + DOKING 369	
				ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;	
				// 18.01.2022 - DOKING 369	
				КонецЕсли; 
				//7%
			ИначеЕсли Число(СписокРК.НайтиПоЗначению("Ставка"+Ном).Представление) = 7 Тогда
				Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("7%");
				Иначе
					НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС7;
				КонецЕсли;
				Новаястрока.Сумма  = СписокРК.НайтиПоЗначению("Сумма"+Ном).Представление;
				Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.07;
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
					НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
					// DOCKING 532 + 31.07.2023
					НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
					// DOCKING 532 - 31.07.2023
				Иначе
					НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				КонецЕсли;
				Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
					НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
					НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
				ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
					Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
				// 18.01.2022 + DOKING 369	
				ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;	
				// 18.01.2022 - DOKING 369	
				КонецЕсли;
				//14%
			ИначеЕсли Число(СписокРК.НайтиПоЗначению("Ставка"+Ном).Представление) = 14 Тогда
				Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("14%");
				Иначе
					НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС14;
				КонецЕсли;
				Новаястрока.Сумма  = СписокРК.НайтиПоЗначению("Сумма"+Ном).Представление;
				Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.14;
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
					НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
					// DOCKING 532 + 31.07.2023
					НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
					// DOCKING 532 - 31.07.2023
				Иначе
					НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				КонецЕсли;
				Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
					НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
					НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
				ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
					Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
				// 18.01.2022 + DOKING 369	
				ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;	
				// 18.01.2022 - DOKING 369	
				КонецЕсли;				
				//0%
			ИначеЕсли  Число(СписокРК.НайтиПоЗначению("Ставка"+Ном).Представление)=901 или Число(СписокРК.НайтиПоЗначению("Ставка"+Ном).Представление)=902 Тогда
				
				Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("0%");
				Иначе
					НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС0;
				КонецЕсли;
				Новаястрока.Сумма  = СписокРК.НайтиПоЗначению("Сумма"+Ном).Представление;
				Новаястрока.СуммаНДС =  0;
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
					НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
					// DOCKING 532 + 31.07.2023
					НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
					// DOCKING 532 - 31.07.2023
				Иначе
					НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				КонецЕсли;
				Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
					НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
					НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  = Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;
				ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
					Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
				// 18.01.2022 + DOKING 369	
				ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;	
				// 18.01.2022 - DOKING 369	
				КонецЕсли;					
				//БезНдс
			ИначеЕсли Число(СписокРК.НайтиПоЗначению("Ставка"+Ном).Представление)=903 Тогда  
				
				Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("Без ПДВ");
				Иначе
					НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
				
				Новаястрока.Сумма  = СписокРК.НайтиПоЗначению("Сумма"+Ном).Представление;
				Новаястрока.СуммаНДС =  0;
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
					НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
					// DOCKING 532 + 31.07.2023
					НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
					// DOCKING 532 - 31.07.2023
				Иначе
					НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				КонецЕсли;
				Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
					НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
					НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаБезНК;
				ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
					Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаБезНК;
				// 18.01.2022 + DOKING 369	
				ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
					НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКИзменениеСтоимости;	
				// 18.01.2022 - DOKING 369	
				КонецЕсли; 
			КонецЕсли;
			// 18.01.2022 + DOKING 369
			Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда //
				НоваяСтрока.НаименованиеТовара = СписокРК.НайтиПоЗначению("НаименованиеТовара"+Ном);
				НоваяСтрока.Количество =  СписокРК.НайтиПоЗначению("Количество"+Ном);
				НоваяСтрока.Цена = СписокРК.НайтиПоЗначению("Цена"+Ном);
			КонецЕсли;	
			
			Ном=Ном+1;	
		КонецЦикла;
		Дод2.Записать();
		
		Возврат Дод2.Ссылка;
КонецФункции

&НаСервере
Функция СозданиеННвх(СписокНН)
	
	Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "SB" ИЛИ Объект.Конфигурация = "BASPC" Тогда
		ННВх = Документы.РегистрацияВходящегоНалоговогоДокумента.СоздатьДокумент();
		ННВх.ВидОперации  =  Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная;
	ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда
		ННВх = Документы.ЗаписьКнигиПриобретения.СоздатьДокумент();
		ННВх.ВидОперации = Перечисления.ВидыОперацийЗаписьКнигиПриобретения.НалоговаяНакладная;
	КонецЕсли;
	
	ННВх.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СписокНН.НайтиПоЗначению("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных").Представление;
	
	// DOCKING 459 + 22.11.2022
	//ЗаполнениеДокументов.Заполнить(ННВх, ПараметрыСеанса.ТекущийПользователь);
	Если Объект.Конфигурация <> "SB" Тогда
			
		ОбщМодуль = ПолучитьОбщийМодуль("ЗаполнениеДокументов"); 
		Если ОбщМодуль <> Ложь Тогда
			ОбщМодуль.Заполнить(ННВх,  ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
		
	КонецЕсли;
	// DOCKING 459 - 22.11.2022
	
	ННВх.Дата = Дата(СписокНН.НайтиПоЗначению("ДатаДокаВх").Представление); 
	ННВх.ДатаВходящегоДокумента = Дата(СписокНН.НайтиПоЗначению("ДатаДокаВх").Представление); 
    
    //+DOCKING-259  24.06.2021
	//Если СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление = "" Тогда   
	//	НомерДокаВх = Строка(СписокНН.НайтиПоЗначению("НомерДока").Представление);
	//Иначе
	//	НомерДокаВх = Строка(СписокНН.НайтиПоЗначению("НомерДока").Представление + "/" + СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление);	//DOCKING-259
	//КонецЕсли;  
    НомерДокаВх = Строка(СписокНН.НайтиПоЗначению("НомерДока").Представление);
    //-DOCKING-259  24.06.2021
	ННВх.НомерВходящегоДокумента = НомерДокаВх;
	
	ННВх.Организация = НайтиОрганизациюПоИНН(СокрЛП(СписокНН.НайтиПоЗначению("ИННОрганизации")),СокрЛП(СписокНН.НайтиПоЗначению("ЕДРПОУОрганизации")));
	
	//Покупатель = НайтиПокупателя(СписокНН.НайтиПоЗначению("КонтрЕДРПОУ").Представление);
	Покупатель = ПолучитьКонтрагента(СписокНН.НайтиПоЗначению("КонтрИНН").Представление, СписокНН.НайтиПоЗначению("ФилиалВхДок").Представление);
	ННВх.Контрагент = Покупатель;
	// DOCKING 532 + 31.07.2023
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ННВх.Партнер = Покупатель.Партнер;
	КонецЕсли;
	// DOCKING 532 - 31.07.2023
	//-------------------------------------------------------------- 
	Попытка
		ДатаДог = Дата(СписокНН.НайтиПоЗначению("ДатаДог").Представление);
		НомерДог = СписокНН.НайтиПоЗначению("НомерДог").Представление;
		Если НЕСоздаватьНовыйДоговор = Ложь Тогда
			// 18.01.2022 + DOKING 369
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ННВх.Договор = СоздатьНовыйДоговор(Покупатель, ННВх.Организация, ДатаДог, НомерДог,ПередаватьНомерДоговора);
			Иначе
			// 18.01.2022 - DOKING 369	
				ННВх.ДоговорКонтрагента = СоздатьНовыйДоговор(Покупатель, ННВх.Организация, ДатаДог, НомерДог,ПередаватьНомерДоговора);
			КонецЕсли;	
		КонецЕсли;
	Исключение
		// DOCKING 459 + 22.11.2022
		// --------------------------------
		// 18.01.2022 + DOKING 369
		//Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		//	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		//		ННВх.Договор, ННВх.Контрагент, ННВх.Организация, 
		//		Неопределено);
		//Иначе
		//	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		//		ННВх.ДоговорКонтрагента, ННВх.Контрагент, ННВх.Организация, 
		//		Неопределено);
		//КонецЕсли;
		// --------------------------------
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			ОбщМодуль.УстановитьДоговорКонтрагента(
			ННВх.Договор, ННВх.Контрагент, ННВх.Организация, 
			Неопределено);
			
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			УстановитьОсновнойДоговорКонтрагента(
			ННВх.Договор, ННВх.Контрагент, ННВх.Организация, 
			Неопределено);		
		Иначе
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");	
			ОбщМодуль.УстановитьДоговорКонтрагента(
			ННВх.ДоговорКонтрагента, ННВх.Контрагент, ННВх.Организация, 
			Неопределено);
			
		КонецЕсли;	
		
		// DOCKING 459 - 22.11.2022	
		
	КонецПопытки;
	ННВх.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = СписокНН.НайтиПоЗначению("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных").Представление;
	
	//--------------------------------------------------------------
	// 18.01.2022 + DOKING 369
	Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда			
		Попытка
			СчетУчета = ПолучитьСчетаРасчетовСКонтрагентом(ННВх.Организация, Покупатель, ННВх.ДоговорКонтрагента);
			
			Если ЗначениеЗаполнено(СчетУчета.СчетУчетаНДСПриобретений) Тогда
				СчетУчетаНДС = СчетУчета.СчетУчетаНДСПриобретений
			Иначе
				СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НайтиПоКоду("6442");
			КонецЕсли;
			ННВх.СчетУчетаНДС = СчетУчетаНДС;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	//------------------------------------------------------------------------------ 
	Если не Объект.Конфигурация = "УТ" Тогда
		Если не (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда
			ННВх.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
		КонецЕсли;	
		Если ЕстьРеквизитДокумента("ЭлектронныйДокумент", ННВх.Метаданные()) Тогда
			ННВх.ЭлектронныйДокумент =  Истина; 
		КонецЕсли;
	КонецЕсли;
	Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "BASPC" Тогда
		ННВх.СуммаВозвратнойТары =  СписокНН.НайтиПоЗначению("СумаТары"); 
	ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда
		Если ЗначениеЗаполнено(СписокНН.НайтиПоЗначению("СумаТары")) тогда
			ВозвратнаяТара = ННВх.ВозвратнаяТара.Добавить();
			//ВозвратнаяТара.НомерСтроки = 1;
			ВозвратнаяТара.Сумма =  СписокНН.НайтиПоЗначению("СумаТары"); 
			ВозвратнаяТара.НалоговоеНазначение= Справочники.НалоговыеНазначенияАктивовИЗатрат.ХозДеятельность;
		КонецЕсли;
	КонецЕсли; 
	
	ННВх.СпецРежимНалогообложения = СписокНН.НайтиПоЗначению("СпецРежимНалогообложения"); 
	ННвх.Комментарий = "Переданий з M.E.Doc";
	
	спецрежим = СписокНН.НайтиПоЗначению("спецрежим").Представление;
	
	// 18.01.2022 + DOKING 369
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		ННвх.Поставка.Очистить();
	ИначеЕсли Объект.Конфигурация = "SB" Тогда
		ННвх.Запасы.Очистить();
	Иначе
		ННвх.Товары.Очистить();
	КонецЕсли;	
	
	Ном = 1;
	Пока СписокНН.НайтиПоЗначению("Ставка"+Ном) <> Неопределено Цикл
		// 18.01.2022 + DOKING 369
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			НоваяСтрока = ННвх.Поставка.Добавить();
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			НоваяСтрока = ННвх.Запасы.Добавить();
		Иначе
			НоваяСтрока = ННвх.Товары.Добавить();
		КонецЕсли;	
		//ставка 20%	
		Если Число(СписокНН.НайтиПоЗначению("Ставка"+Ном).Представление) =20 Тогда
			Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
				НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("20%");
			Иначе
				НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС20;
			КонецЕсли;	
			Новаястрока.Сумма = СписокНН.НайтиПоЗначению("Сумма"+Ном).Представление;
			Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.2;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
				НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				// DOCKING 532 + 31.07.2023
				НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				// DOCKING 532 - 31.07.2023
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
			КонецЕсли;
			//НоваяСтрока.СуммаВзаиморасчетов =  ;
			Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
				НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
				НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
			ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
				Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
			// 18.01.2022 + DOKING 369	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;	
			// 18.01.2022 - DOKING 369	
			КонецЕсли;
			//ставка 7%
		ИначеЕсли  Число(СписокНН.НайтиПоЗначению("Ставка"+Ном).Представление) =7 Тогда
			
			Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
				НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("7%");
			Иначе
				НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС7;
			КонецЕсли;
			Новаястрока.Сумма = СписокНН.НайтиПоЗначению("Сумма"+Ном).Представление;			
			Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.07;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
				НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				// DOCKING 532 + 31.07.2023
				НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				// DOCKING 532 - 31.07.2023
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
			КонецЕсли;
			//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_71");
			Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
				НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
				НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
			ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
				Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
			// 18.01.2022 + DOKING 369	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;	
			// 18.01.2022 - DOKING 369	
			КонецЕсли;
			//ставка 14%
		ИначеЕсли  Число(СписокНН.НайтиПоЗначению("Ставка"+Ном).Представление) =14 Тогда
			
			Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
				НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("14%");
			Иначе
				НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС14;
			КонецЕсли;
			Новаястрока.Сумма = СписокНН.НайтиПоЗначению("Сумма"+Ном).Представление;			
			Новаястрока.СуммаНДС = Новаястрока.Сумма * 0.14;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
				НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				// DOCKING 532 + 31.07.2023
				НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				// DOCKING 532 - 31.07.2023
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
			КонецЕсли;
			Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
				НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
				НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
			ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
				Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
			// 18.01.2022 + DOKING 369	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;	
			// 18.01.2022 - DOKING 369	
			КонецЕсли;		
			//0% или 7%для старых
		ИначеЕсли Число(СписокНН.НайтиПоЗначению("Ставка"+Ном).Представление) =902 Тогда
			Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
				НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("0%");
			Иначе
				НоваяСтрока.СтавкаНДС  = ?( спецрежим = 7, Перечисления.СтавкиНДС.НДС7, Перечисления.СтавкиНДС.НДС0);
			КонецЕсли;

			Новаястрока.Сумма = СписокНН.НайтиПоЗначению("Сумма"+Ном).Представление;		
			Новаястрока.СуммаНДС = Новаястрока.Сумма * ?(спецрежим = 7, 0.07, 0);
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
				НоваяСтрока.СуммаСНДС = Новаястрока.Сумма + Новаястрока.СуммаНДС;
				// DOCKING 532 + 31.07.2023
				НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				// DOCKING 532 - 31.07.2023
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма + Новаястрока.СуммаНДС;
			КонецЕсли;
			//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_8");
			Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация  ="кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
				НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
				НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;
			ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
				Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
			// 18.01.2022 + DOKING 369	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;	
			// 18.01.2022 - DOKING 369	
			КонецЕсли;
			//0%
		ИначеЕсли Число(СписокНН.НайтиПоЗначению("Ставка"+Ном).Представление) =901 Тогда
			
			Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
				НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("0%");
			Иначе
				НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.НДС0;
			КонецЕсли;
			Новаястрока.Сумма = СписокНН.НайтиПоЗначению("Сумма"+Ном).Представление;		
			Новаястрока.СуммаНДС = 0;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
				НоваяСтрока.СуммаСНДС = Новаястрока.Сумма;
				// DOCKING 532 + 31.07.2023
				НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
				// DOCKING 532 - 31.07.2023
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма;
			КонецЕсли;
			//НоваяСтрока.СуммаВзаиморасчетов =  Отчет.GetValue("MAIN",  "A7_9");
			Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
				НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
				НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
			ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
				Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
			// 18.01.2022 + DOKING 369	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;	
			// 18.01.2022 - DOKING 369	
			КонецЕсли;
			//Без НДС
		ИначеЕсли Число(СписокНН.НайтиПоЗначению("Ставка"+Ном).Представление) =903 Тогда  
			
			Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
				НоваяСтрока.СтавкаНДС  =  Справочники.СтавкиНДС.НайтиПоНаименованию("Без ПДВ%");
			Иначе
				НоваяСтрока.СтавкаНДС  =  Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			Новаястрока.Сумма = СписокНН.НайтиПоЗначению("Сумма"+Ном).Представление;		
			Новаястрока.СуммаНДС = 0;
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда // 18.01.2022 + DOKING 369
				НоваяСтрока.СуммаСНДС = Новаястрока.Сумма;
				// DOCKING 532 + 31.07.2023
				НоваяСтрока.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
				// DOCKING 532 - 31.07.2023
			Иначе
				НоваяСтрока.СуммаВзаиморасчетов = Новаястрока.Сумма;
			КонецЕсли;
			Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УТП" ИЛИ Объект.Конфигурация = "кпЖРЕУ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
				НоваяСтрока.ДляХозяйственнойДеятельности =  Истина;
				НоваяСтрока.ДляОперацийОблагаемыхНДС  =  Истина; 
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРОблаг;
			ИначеЕсли Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "УТ" Тогда          						
				Новаястрока.СтатьяКнигиПриобретения = Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаБезНДСвВРНеОблаг;
			// 18.01.2022 + DOKING 369	
			ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СтатьяДекларацииНДСНалоговыйКредит  =  Справочники.СтатьиНалоговыхДеклараций.НДС_НКПокупкаСНДСвВРОблаг;	
			// 18.01.2022 - DOKING 369	
			КонецЕсли;          
		КонецЕсли;
		// 18.01.2022 + DOKING 369	
		Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
		// 18.01.2022 - DOKING 369	
			НоваяСтрока.НаименованиеТовара = СписокНН.НайтиПоЗначению("НаименованиеТовара"+Ном);
			НоваяСтрока.Количество =  СписокНН.НайтиПоЗначению("Количество"+Ном);
			НоваяСтрока.Цена = СписокНН.НайтиПоЗначению("Цена"+Ном);		
		КонецЕсли;	
		
		Ном = Ном+1;
	КонецЦикла;				
	
	ННВх.Записать();
	Возврат ННВх.Ссылка;
КонецФункции	

&НаСервере
Функция НайтиПокупателя(КодПоЕДРПОУ)
	Возврат Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ", КодПоЕДРПОУ);

КонецФункции

&НаСервере
Функция ПолучитьКонтрагента(ИННПродавца,ФилиалПродавца)
	
	Запрос  =  Новый Запрос;   				
	Запрос.Текст  =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.ИНН,
	|	Контрагенты.Ссылка,
	|	Контрагенты.КодФилиала КАК КодФилиала
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КодФилиала = &КодФилиала
	//|			ИЛИ &КодФилиала = """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодФилиала";
	// 18.01.2022 + DOKING 369
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИНН" , "ИННПлательщикаНДС" );	
	КонецЕсли;
	//Запрос.УстановитьПараметр("ИНН", ИННПродавца); 
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		Запрос.УстановитьПараметр("ИННПлательщикаНДС", ИННПродавца); 
	Иначе
		Запрос.УстановитьПараметр("ИНН", ИННПродавца); 
	КонецЕсли;	
	// 18.01.2022 - DOKING 369

	Если Объект.Конфигурация = "SB" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагенты.КодФилиала = &КодФилиала" , "" );
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.КодФилиала КАК КодФилиала" , "" );
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.Ссылка," , "Контрагенты.Ссылка" );
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО" , "" );
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КодФилиала" , "" );
		
	Иначе
		
		Запрос.УстановитьПараметр("КодФилиала", ФилиалПродавца);        
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции

&НаСервере
Функция СоздатьНовыйДоговор(Контрагент, Организация, ДатаДог, НомерДог, ПередаватьНомерДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Номер = &Номер
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Дата = &Дата";
	
	Запрос.УстановитьПараметр("Дата", ДатаДог);
	Запрос.УстановитьПараметр("Номер", НомерДог);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Если ПередаватьНомерДоговора = Истина Тогда
		
		// DOCKING 517 + 07.06.2023
		Если ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("МультиязычностьУкр");
			КодЯзИБ = ОбщМодуль.КодЯзыкаИнформационнойБазы();
		Иначе
			ОбщМодуль = ПолучитьОбщийМодуль("Локализация");
			КодЯзИБ = ОбщМодуль.КодЯзыкаИнформационнойБазы();
		КонецЕсли;
		// DOCKING 517 - 07.06.2023
		
		НайденныйДоговорОбъект  =  Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		//НайденныйДоговорОбъект.Наименование           =  НСтр("ru = '№" +" " + НомерДог + " от "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "';uk = '№" +" " + НомерДог + " від "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "'", Локализация.КодЯзыкаИнформационнойБазы());
		НайденныйДоговорОбъект.Наименование           =  НСтр("ru = '№" +" " + НомерДог + " от "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "';uk = '№" +" " + НомерДог + " від "+ Формат(ДатаДог,  "ДФ = dd.MM.yyyy") + "'", КодЯзИБ);
		НайденныйДоговорОбъект.Дата                   =  ДатаДог;
		НайденныйДоговорОбъект.Номер                  =  НомерДог;
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов  =  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов  =  Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		НайденныйДоговорОбъект.Организация = Организация;
		
		НайденныйДоговорОбъект.Владелец    = Контрагент;
		НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		
		НайденныйДоговорОбъект.СхемаНалоговогоУчета        =  Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
		НайденныйДоговорОбъект.СхемаНалоговогоУчетаПоТаре  =  Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
		
		Если Объект.Конфигурация = "БУ"  Тогда
			Если НайденныйДоговорОбъект.СложныйНалоговыйУчет  Тогда
				НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ  =  Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			Иначе
				НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ  =  НайденныйДоговорОбъект.ВедениеВзаиморасчетов;
			КонецЕсли;
		Иначе
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов  =  НайденныйДоговорОбъект.ВедениеВзаиморасчетов;  
		КонецЕсли;  				
		НайденныйДоговорОбъект.Записать();
		НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;  		
		
		Возврат НайденныйДоговор;
	Иначе
		х = 1/0;
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент, КонтрагентДоИзменений)
	
	// 03.12.2021 + DOCKING 361
	Если ПолучитьИмяТекущейВкладки() = "НД" Тогда
	// 03.12.2021 - DOCKING 361
	
		Если (ЗначениеЗаполнено(НалогДокДоговорКонтрагента)) 
			И (НалогДокДоговорКонтрагента.Владелец <> НалогДокКонтрагент) Тогда
			НалогДокДоговорКонтрагента  =  Неопределено;
		КонецЕсли;   
		
		Если КонтрагентДоИзменений<>Строка(НалогДокКонтрагент) Тогда
			ИзменениеОсновныхПараметровНалоговых();
		КонецЕсли;    
		
		Если ЗначениеЗаполнено(НалогДокКонтрагент) Тогда
			Элементы.НалогДокДоговорКонтрагента.Доступность = Истина;
			Элементы.НалогДокКонтрагентКромеЭтого.Доступность = Истина;
		Иначе
			Элементы.НалогДокДоговорКонтрагента.Доступность = Ложь;
			Элементы.НалогДокКонтрагентКромеЭтого.Доступность = Ложь;
		КонецЕсли;
	
	Иначе
		Если (ЗначениеЗаполнено(ДоговорКонтрагента)) 
			И (ДоговорКонтрагента.Владелец <> Контрагент) Тогда
			ДоговорКонтрагента  =  Неопределено;
		КонецЕсли;   
		
		Если КонтрагентДоИзменений<>Строка(Контрагент) Тогда
			ИзменениеОсновныхПараметров();
		КонецЕсли;    
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Элементы.ДоговорКонтрагента.Доступность = Истина;
			Элементы.КонтрагентКромеЭтого.Доступность = Истина;
		Иначе
			Элементы.ДоговорКонтрагента.Доступность = Ложь;
			Элементы.КонтрагентКромеЭтого.Доступность = Ложь;
		КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// 03.12.2021 + DOCKING 361
	//КонтрагентДоИзменений = Строка(Контрагент);
	Если ПолучитьИмяТекущейВкладки() = "НД" Тогда
		КонтрагентДоИзменений = Строка(НалогДокКонтрагент);
	Иначе
		КонтрагентДоИзменений = Строка(Контрагент);
	КонецЕсли;
	
	// 03.12.2021 - DOCKING 361
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ОрганизацияПервичка) Тогда
		СтандартнаяОбработка  =  Ложь;
		#Если Клиент Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru  =  'Не указана организация'; uk  =  'Не вказана організація'"));
		Сообщение.Сообщить();
		#КонецЕсли 
		Возврат;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМедкаПриИзменении(Элемент)
	Если 
		ЭтотОбъект.ЗапЛок  =  0 Тогда   
		Элементы.НадписьЯрлык.Заголовок = "\ezvit.exe";    // zstart.exe
		//Элементы.НадписьЯрлык.Заголовок = "\zstart.exe";    // zstart.exe
	ИначеЕсли 
		ЭтотОбъект.ЗапЛок  =  1 Тогда
		Элементы.НадписьЯрлык.Заголовок = "\ezvitnet.exe"; 
	ИначеЕсли 
		ЭтотОбъект.ЗапЛок  =  2 Тогда
		Элементы.НадписьЯрлык.Заголовок = "\station.exe";
	КонецЕсли;  
	
	РегистрацияВКомпонентеMedoc1C();
	Подключение1СМедок();
	ПроверитьНаличиеПервички();
	//17.12.21 + DOCKING 357
	ПроверитьНаличиеНалоговых();
    //17.12.21 + DOCKING 357

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуМедкаНачалоВыбораИзСписка()
	Перем СтрокаРегистрации;
	
	УстановленныйМедок  =  Новый СписокЗначений(); 		
	HKEY_LOCAL_MACHINE = 2147483650;
	
	Н = 0; 	
	Пока Н<>25 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDoc", "SoftWare\IntellectService\BusinessDoc" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_LOCAL_MACHINE,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			Если НЕ Лев(Файл.Имя, 2) = "1C" и НЕ Лев(Файл.Имя, 3) = "Arm" Тогда
				УстановленныйМедок.Добавить(СтрокаРегистрации);
			КонецЕсли;		
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;
	
	Н = 0; 	
	Пока Н<>10 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDocStation",  "SoftWare\IntellectService\BusinessDocStation" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_LOCAL_MACHINE,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			УстановленныйМедок.Добавить(СтрокаРегистрации);  	
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;  
	
	
	HKEY_CURRENT_USER = 2147483649;
	
	Н = 0; 	
	Пока Н<>25 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDoc", "SoftWare\IntellectService\BusinessDoc" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_CURRENT_USER,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			Если НЕ Лев(Файл.Имя, 2) = "1C" и НЕ Лев(Файл.Имя, 3) = "Arm" Тогда
				УстановленныйМедок.Добавить(СтрокаРегистрации);
			КонецЕсли;		
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;
	
	Н = 0; 	
	Пока Н<>10 Цикл 			
		ПутьККлючу = ?(Н = 0, "SoftWare\IntellectService\BusinessDocStation",  "SoftWare\IntellectService\BusinessDocStation" + Н); 			
		ИмяПараметра = "PATH";
		Reg  =  ПолучитьCOMОбъект("winmgmts:{impersonationLevel = impersonate}!\\" +
		ИмяКомпьютера()+ "\root\default:stdRegProv");
		Reg.GetStringValue(HKEY_CURRENT_USER,  ПутьККлючу,  ИмяПараметра,  СтрокаРегистрации);
		Если ЗначениеЗаполнено(СтрокаРегистрации) Тогда
			Файл = новый Файл(СокрЛП(СтрокаРегистрации));
			УстановленныйМедок.Добавить(СтрокаРегистрации);  	
		КонецЕсли;
		Н = Н+1;  		
	КонецЦикла;  
	
	Для каждого мед из УстановленныйМедок цикл
		Элементы.ПутьКФайлуМедка.СписокВыбора.Добавить(мед.Значение);
	КонецЦикла;
	
	Если УстановленныйМедок.Количество() = 1 Тогда
		ПутьКФайлуМедка  =  УстановленныйМедок[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВКомпонентеMedoc1C()
	
	Попытка 		
		инфо =  Новый СистемнаяИнформация;
		Если инфо.ТипПлатформы = ТипПлатформы.Windows_x86 или инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или инфо.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда 
			ИмяПлагина =  ЭтотОбъект.ПутьКФайлуМедка + "\32\medoc1c.dll";
		ИначеЕсли  инфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 или инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 или инфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
			ИмяПлагина =  ЭтотОбъект.ПутьКФайлуМедка + "\64\medoc1c.dll"; // comcntr medoc1c
		Иначе
			Сообщить ("Не удалось определить тип платформы");
		Конецесли;
		
		Попытка
			МедКомпонент  =  Новый("AddIn.Medoc1C");
		Исключение
			ПодключитьВнешнююКомпоненту("AddIn.Medoc1C");
		КонецПопытки;
		//здесь в компоненте регистрируются пути к базам для выгрузки из медка
		МедКомпонент.SetConnectionInfo(СтрокаСоединенияИнформационнойБазы()); 
		
	Исключение
		Возврат;
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключение1СМедок()
	
	Попытка 		
		App = Новый COMОбъект("MEDOC.ZApplication"); 
		инфо = Новый СистемнаяИнформация;
		Если инфо.ТипПлатформы = ТипПлатформы.Windows_x86 или инфо.ТипПлатформы = ТипПлатформы.Linux_x86 или инфо.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда 
			ИмяПлагина = ЭтотОбъект.ПутьКФайлуМедка + "\32\medoc1c.dll";
		ИначеЕсли  инфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 или инфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 или инфо.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
			ИмяПлагина = ЭтотОбъект.ПутьКФайлуМедка + "\64\medoc1c.dll"; // comcntr medoc1c
		Иначе
			Сообщить ("Не удалось определить тип платформы");
		Конецесли;
		
		МедКомпонент = Неопределено;
		ПодключитьВнешнююКомпоненту(ИмяПлагина, "Medoc1C", ТипВнешнейКомпоненты.COM);
		
		Попытка
			МедКомпонент = Новый("AddIn.Medoc1C");
		Исключение
			ПодключитьВнешнююКомпоненту("AddIn.Medoc1C");
			МедКомпонент = Новый("AddIn.Medoc1C");
		КонецПопытки;
		
		ОтключитьОбработчикОжидания("Подключение1СМедок");
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			Если Найти(Инфо.Причина.Описание,"Параметр задан неверно") <> 0 Тогда
				ОтключитьОбработчикОжидания("Подключение1СМедок");
			КонецЕсли;
		КонецЕсли; 
	КонецПопытки; 
	
КонецПроцедуры

&НаСервере
Функция НайтиОрганизациюПоЕДРПОУ(ЕДРПОУОрганизации)   
	
	Если Объект.Конфигурация = "БУ" Или Объект.Конфигурация = "УТ" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" ИЛИ Объект.Конфигурация = "BASPC" Тогда
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|Организации.Ссылка
		|ИЗ
		|Справочник.Организации КАК Организации 
		|ГДЕ
		|Организации.КодПоЕДРПОУ  =  &ЕДРПОУ"; 
		Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	
	Иначе
		Запрос  =  Новый Запрос;   				
		Запрос.Текст  =  "ВЫБРАТЬ
		|КодыОрганизацииСрезПоследних.Организация
		|ИЗ
		|РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату,  ) КАК КодыОрганизацииСрезПоследних
		|ГДЕ
		|КодыОрганизацииСрезПоследних.УдалитьКодПоЕДРПОУ  =  &ЕДРПОУ"; 
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата());
		Запрос.УстановитьПараметр("ЕДРПОУ",  ЕДРПОУОрганизации);        
		Выборка  =  Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Организация;
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция СозданиеКонтрагента(Список, НазваниеДока, НомерДокаВх, ДатаДокаВх) 
	
	// 18.01.2022 + DOKING 369
	Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
	// 18.01.2022 - DOKING 369
	
		СозданныеМедком = Строка("СозданныеМедком");
		ГруппаКонтрагентов = Справочники.Контрагенты.НайтиПоНаименованию(СозданныеМедком);
		
		Если НЕ ЗначениеЗаполнено(ГруппаКонтрагентов) тогда   	
			ГруппаОбъект = Справочники.Контрагенты.СоздатьГруппу();
			ГруппаОбъект.Наименование = СозданныеМедком;         
			ГруппаОбъект.Записать(); 				
		КонецЕсли;
	КонецЕсли;	
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	// 18.01.2022 + DOKING 369
	Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
	// 18.01.2022 - DOKING 369	
		НовыйКонтрагент.Родитель = ?(НЕ ЗначениеЗаполнено(ГруппаКонтрагентов), ГруппаОбъект.Ссылка, ГруппаКонтрагентов.Ссылка);
	КонецЕсли;	
	НовыйКонтрагент.Наименование = Список.НайтиПоЗначению("КонтрНаименование").Представление; 	   
	НовыйКонтрагент.НаименованиеПолное = Список.НайтиПоЗначению("КонтрНаименование").Представление;
	НовыйКонтрагент.КодПоЕДРПОУ = Список.НайтиПоЗначению("КонтрЕДРПОУ").Представление;
	// 18.01.2022 + DOKING 369
	//НовыйКонтрагент.ИНН = Список.НайтиПоЗначению("КонтрИНН").Представление;
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		НовыйКонтрагент.ИННПлательщикаНДС = Список.НайтиПоЗначению("КонтрИНН").Представление;
	Иначе
		НовыйКонтрагент.ИНН = Список.НайтиПоЗначению("КонтрИНН").Представление;
		НовыйКонтрагент.Комментарий = Строка(НСтр("ru = 'Создан M.E.Doc на основании';uk = 'Створено M.E.Doc на підставі'") + 
		НазваниеДока + "№" + Строка(НомерДокаВх) + НСтр("ru = ' от ';uk = ' від '") + Формат(ДатаДокаВх, "ДЛФ = Д"));
	КонецЕсли;
	// 18.01.2022 - DOKING 369
	Если НЕ Объект.Конфигурация = "SB" Тогда
		НовыйКонтрагент.КодФилиала = Список.НайтиПоЗначению("ФилиалВхДок").Представление;
	КонецЕсли;	
	
	НовыйКонтрагент.Записать();
	
	Адрес = СокрЛП(Список.НайтиПоЗначению("КонтрАдр").Представление);					
	Если ЗначениеЗаполнено(Адрес) Тогда
		 
		// 18.01.2022 + DOKING 369
		Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда
		// 18.01.2022 - DOKING 369
		
			НаборЗаписей = РегистрыСведений.УдалитьКонтактнаяИнформация.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.установить(НовыйКонтрагент.Ссылка);
			НаборЗаписей.Отбор.Тип.установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			НаборЗаписей.Отбор.Вид.установить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			НаборЗаписей.Прочитать();
			Запись = НаборЗаписей.Добавить();
			Запись.Объект = (НовыйКонтрагент.Ссылка);
			Запись.Тип = (Перечисления.ТипыКонтактнойИнформации.Адрес);
			Запись.Вид = (Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			Запись.Представление = КонтрАдр;
			Запись.Поле1=Справочники.СтраныМира.НайтиПоКоду("804");
			Попытка 
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
			
		
			КонтрТлф =  СокрЛП(Список.НайтиПоЗначению("КонтрТлф").Представление);					
			Если ЗначениеЗаполнено(КонтрТлф) 
				Тогда
				НаборЗаписейТел = РегистрыСведений.УдалитьКонтактнаяИнформация.СоздатьНаборЗаписей();
				НаборЗаписейТел.Отбор.Объект.установить(НовыйКонтрагент.ссылка);
				НаборЗаписейТел.Отбор.Тип.установить(Перечисления.ТипыКонтактнойИнформации.Телефон);
				НаборЗаписейТел.Отбор.Вид.установить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				НаборЗаписейТел.Прочитать();
				ЗаписьТел = НаборЗаписейТел.Добавить();
				ЗаписьТел.Объект = (НовыйКонтрагент.Ссылка);
				ЗаписьТел.Тип = (Перечисления.ТипыКонтактнойИнформации.Телефон);
				ЗаписьТел.Вид = (Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				ЗаписьТел.Представление = КонтрТлф; 				
				Попытка 
					НаборЗаписейТел.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат НовыйКонтрагент.Ссылка;
	Иначе
		Возврат Контрагент.Пустая();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДокументСуществует(ДокументНазвание,  ДатаДокаВх,  НомерДокаВх, МедКомпонент);
	ТекстОтменыДокумента  =  ДокументНазвание + НомерДокаВх + " від " +  Формат(ДатаДокаВх,  "ДЛФ = Д") + " вже існує в 1С!";
	МедКомпонент.CancelDoc(ТекстОтменыДокумента); 
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = (ТекстОтменыДокумента);
	Сообщение.Сообщить();
	Возврат;
КонецПроцедуры

&НаСервере
Процедура НомДобавить(НоваяСтрока,  НоменклатураДока,  НомКоличество,  НомЦена,  НомСумма,  НомСтавкаНДС, СуммаНДС, ЕдИзмНоменклатуры)
	
	Попытка
		НоваяСтрока.Номенклатура  =  НоменклатураДока;
		НоваяСтрока.Количество  =  НомКоличество;
		НоваяСтрока.Цена =  НомЦена;
		НоваяСтрока.Сумма = НомСумма;
		НоваяСтрока.СтавкаНДС = НомСтавкаНДС;
		НоваяСтрока.СуммаНДС = СуммаНДС;
		
		// 19.01.2022 + DOCKING 369
		Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
			Если  ЗначениеЗаполнено(ЕдИзмНоменклатуры) Тогда
				НоваяСтрока.Упаковка = ЕдИзмНоменклатуры;
			Иначе
				НоваяСтрока.Упаковка = НоменклатураДока.ЕдиницаИзмерения;
			КонецЕсли;
			Попытка НоваяСтрока.КоличествоУпаковок  =  НомКоличество; Исключение КонецПопытки;
			
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			Если  ЗначениеЗаполнено(ЕдИзмНоменклатуры) Тогда
				НоваяСтрока.ЕдиницаИзмерения = НоменклатураДока.ЕдиницаИзмерения;
			КонецЕсли;	
		Иначе
		// 19.01.2022 - DOCKING 369
			Если НоменклатураДока.Услуга = Ложь Тогда  // 27.09.2022 + DOCKING 444
				Если  ЗначениеЗаполнено(ЕдИзмНоменклатуры) Тогда
					НоваяСтрока.ЕдиницаИзмерения = ЕдИзмНоменклатуры;
					// 23.12.2021 + DOCKING 379
					НоваяСтрока.Коэффициент = 1;
					// 23.12.2021 - DOCKING 379
				Иначе
					НоваяСтрока.ЕдиницаИзмерения = НоменклатураДока.БазоваяЕдиницаИзмерения;
					// 23.12.2021 + DOCKING 379
					НоваяСтрока.Коэффициент = ?(ЗначениеЗаполнено(НоменклатураДока.БазоваяЕдиницаИзмерения), 1, 0);
					// 23.12.2021 + DOCKING 379
				КонецЕсли;
			Иначе
				НоваяСтрока.Содержание = НоменклатураДока.НаименованиеПолное;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Объект.Конфигурация = "УТ" или Объект.Конфигурация = "УТП" или Объект.Конфигурация = "УПП" Тогда
			НоваяСтрока.Содержание = НоменклатураДока;
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура СозданиеНоменклатуры(ДатаДокаВх,  НомерДокаВх,  НоменклатураОригинал,  НаОсновании,  ЕИОригинал,  НомСтавкаНДС, ВидНоменклатуры, Артикул=0)	
	
	ГруппаМедка = Справочники.Номенклатура.НайтиПоКоду("MED");
	Если НЕ ЗначениеЗаполнено(ГруппаМедка) тогда
		ГруппаОбъект  =  Справочники.Номенклатура.СоздатьГруппу();
		ГруппаОбъект.Наименование  =  "Auto_MEDoc";  
		ГруппаОбъект.Код = "MED";
		ГруппаОбъект.Записать();
	КонецЕсли;
	НоменклатураМедка = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураМедка.Родитель = Справочники.Номенклатура.НайтиПоКоду("MED");
	НоменклатураМедка.Наименование =  НоменклатураОригинал;
	НоменклатураМедка.НаименованиеПолное =  НоменклатураОригинал;
	
	// DOCKING 590 + 19.10.2023
	Если Артикул <> 0 Тогда
		НоменклатураМедка.Артикул =  Артикул;
	КонецЕсли;
	// DOCKING 590 - 19.10.2023
	
	// 20.01.2022 + DOKING 368
	Если НЕ (Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
		НоменклатураМедка.Комментарий =  Строка(НСтр("ru = 'Создана M.E.Doc на основании ';uk = 'Створена M.E.Doc на підставі '") +
		НаОсновании + Строка(НомерДокаВх) + НСтр("ru = 'от ';uk = 'від '") + ДатаДокаВх);
	КонецЕсли;
	// 20.01.2022 - DOKING 368
	Если НЕ Объект.Конфигурация = "SB" Тогда
		Если ВидНоменклатуры = "Услуг" Тогда
			НоменклатураМедка.Услуга = Истина;
		КонецЕсли;
	КонецЕсли;	

	// 20.01.2022 + DOKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
		ЕдИзмНоменклатуры  =  Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(СокрЛП(ЕИОригинал));
		Если ЗначениеЗаполнено(ЕдИзмНоменклатуры) Тогда
			НоменклатураМедка.ЕдиницаИзмерения =  ЕдИзмНоменклатуры;
			Иначе
				новЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				новЕдиницаИзмерения.Наименование = ЕИОригинал;
				новЕдиницаИзмерения.НаименованиеПолное =  ЕИОригинал;
				новЕдиницаИзмерения.ОбменДанными.Загрузка = Истина;
				новЕдиницаИзмерения.УстановитьНовыйКод();
				
				новЕдиницаИзмерения.Записать();
				ЕдИзмНоменклатуры = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(ЕИОригинал);
				НоменклатураМедка.ЕдиницаИзмерения = ЕдИзмНоменклатуры;
			КонецЕсли;
		
	Иначе
	// 20.01.2022 - DOKING 368	
			ЕдИзмНоменклатуры  =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СокрЛП(ЕИОригинал));
			Если ЗначениеЗаполнено(ЕдИзмНоменклатуры) Тогда
				Если Объект.Конфигурация = "SB" Тогда
					НоменклатураМедка.ЕдиницаИзмерения =  ЕдИзмНоменклатуры;
				Иначе
					НоменклатураМедка.БазоваяЕдиницаИзмерения =  ЕдИзмНоменклатуры;
				КонецЕсли;	
			Иначе
				новЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
				новЕдиницаИзмерения.Наименование = ЕИОригинал;
				новЕдиницаИзмерения.НаименованиеПолное =  ЕИОригинал;
				новЕдиницаИзмерения.УстановитьНовыйКод();
				новЕдиницаИзмерения.Записать();
				ЕдИзмНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕИОригинал);
				Если Объект.Конфигурация = "SB" Тогда
					НоменклатураМедка.ЕдиницаИзмерения =  ЕдИзмНоменклатуры;
				Иначе
					НоменклатураМедка.БазоваяЕдиницаИзмерения =  ЕдИзмНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Конфигурация = "SB" Тогда
		НоменклатураМедка.ВидСтавкиНДС = ВернутьПроцентВидыСтавкиНДС(НомСтавкаНДС);		
	Иначе
		НоменклатураМедка.СтавкаНДС = НомСтавкаНДС;
	КонецЕсли;	
	
	Если Объект.Конфигурация = "УТ" или Объект.Конфигурация = "УТП" или Объект.Конфигурация = "УПП" или Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Если Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатуры).Пустая() или Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатуры) = Неопределено Тогда
				Если ВидНоменклатуры = "Товар" Тогда
					новВидыНоменклатуры = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
					новВидыНоменклатуры.Наименование = "Товар";
					новВидыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
					новВидыНоменклатуры.Записать();
				Иначе
					новВидыНоменклатуры = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
					новВидыНоменклатуры.Наименование = "Услуга";
					новВидыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
					новВидыНоменклатуры.Записать();
				КонецЕсли;
				НоменклатураМедка.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатуры);
			Иначе
				НоменклатураМедка.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ВидНоменклатуры);
			КонецЕсли
	КонецЕсли;
    НоменклатураМедка.Записать();	
КонецПроцедуры

&НаСервере
Функция НайтиЕдМакета(Ед)
    
    ЕлМакетаНайден = Ложь;
    Макет = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
      
    Для Стр=1 По Макет.ВысотаТаблицы Цикл
        
          СтрК = СтрЗаменить(Строка(Стр),Символ(160),""); 
          
		  Если  Макет.Область("R" +  СтрК + "C4").Текст = Ед Тогда
			    ЕлМакетаНайден = Истина;
                Прервать;
          КонецЕсли;
    
      КонецЦикла;       
	  
	  Если ЕлМакетаНайден Тогда
             
             НовЕд = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
             НовЕд.Наименование = Макет.Область("R" +  СтрК +"C4").Текст;
             НовЕд.НаименованиеПолное = Макет.Область("R" +  СтрК +"C3").Текст;
             НовЕд.Код = Макет.Область("R" + СтрК +"C2").Текст;
             НовЕд.Записать();
			 
			 Возврат НовЕд.Ссылка;
             
         Иначе
             Сообщить("Не смогли подобрать единицу из классификатора. Такой единицы измерения не существует или она написана с ошибкой.");
        КонецЕсли;

    Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
КонецФункции
// Функция загружает данные из переданного макета в ТаблицуЗначений
&НаСервере
Функция СформироватьИзМакетаТаблицуЗначений(Макет) Экспорт
    // объявление переменных:
    Перем ТЗ;
    // инициализация переменных:
    ТЗ=Новый ТаблицаЗначений();
    //
    #Если Клиент Тогда
        //считываем столбцы макета
        Для Стр=1 По Макет.ВысотаТаблицы Цикл
            //НУМЕРАЦИЯ СТРОК:
            // - с 1
            //
            // добавим новую строку в ТЗ:
            ТекСтр=ТЗ.Добавить();
            //
            // считываем данные новой строки макета:
            ПредыдущееЗн = "";
            Для НомерСтолбца=1 По Макет.ШиринаТаблицы Цикл
                //НУМЕРАЦИЯ СТОЛБЦОВ ТЗ:
                // - с 0
                //НУМЕРАЦИЯ СТОЛБЦОВ МАКЕТА:
                // - с 1
                //т.е. Макет.Столбец[1]=ТЗ.Столбец[0]
                //
                Яч=Макет.Область(Стр, НомерСтолбца);
                // получим данные из текущей ячейки макета:
                Если Яч.СодержитЗначение Тогда
                    //если ячейка области содержит значение:
                    Зн=Яч.Значение;
                Иначе
                    Зн=Яч.Текст;
                КонецЕсли;        //Если Яч.СодержитЗначение Тогда ...
                //
                ТекЗн = Зн;
                Если (ТипЗнч(Зн)=Тип("Строка") И ПустаяСтрока(Зн))
                  ИЛИ (НЕ ПустаяСтрока(Зн) И Зн=ПредыдущееЗн) Тогда
                    //ПРИМЕЧАНИЕ: пустое значение ячейки ТЗ, если:
                    // - пустое значение в ячейке макета
                    // - текущее значение ячейки макета - копия предыдущего (важны только уникальные данные по строке, а не повторы!)
                    Зн="";
                КонецЕсли;        //Если (ТипЗнч(Зн)=Тип("Строка") И ПустаяСтрока(Зн)) ИЛИ ... Тогда ...
                //
                ПредыдущееЗн = ТекЗн;
                //
                //добавляем следующий столбец:
                Если Стр=1 Тогда
                    ТЗ.Колонки.Добавить(, Новый ОписаниеТипов("Строка"));    //имя колонки не указываем
                КонецЕсли;
                // заполняем ТЗ:
                ТекСтр[НомерСтолбца-1]=Зн;
                //
            КонецЦикла;        //Для НомерСтолбца=1 По Макет.ШиринаТаблицы Цикл ...
            //
        КонецЦикла;            //Для Стр=1 По Макет.ВысотаТаблицы Цикл ...
    #КонецЕсли
    //
    Возврат ТЗ;
    //
КонецФункции    //СформироватьИзМакетаТаблицуЗначений()

&НаСервере
Функция ПроверитьСуществованиеДокумента(Документ, Организация, Покупатель, ДатаДокаВх, НомерДокаВх, ВидОперации)
	
	// 18.01.2022 + DOKING 369
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
	// 18.01.2022 - DOKING 369
	    Запрос  =  Новый Запрос();  	
		Запрос.Текст  =  "ВЫБРАТЬ
		|	 "+Документ+".Ссылка
		|ИЗ
		|	Документ."+Документ+" КАК "+Документ+"
		|ГДЕ
		|	"+Документ+".Организация  =  &Организация
		|	И "+Документ+".Контрагент  =  &Контрагент
		|   И "+Документ+".ДатаВходящегоДокумента  =  &ДатаВходящегоДокумента
		|	И "+Документ+".НомерВходящегоДокумента  =  &НомерВходящегоДокумента";
		
		Запрос.УстановитьПараметр("Организация",  Организация);
		Запрос.УстановитьПараметр("Контрагент",  Покупатель);
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  ДатаДокаВх);  
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерДокаВх);
		Выборка  =  Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	
	Иначе
	
		Запрос  =  Новый Запрос();  	
		Запрос.Текст  =  "ВЫБРАТЬ
		|	 "+Документ+".Ссылка
		|ИЗ
		|	Документ."+Документ+" КАК "+Документ+"
		|ГДЕ
		|	"+Документ+".Организация  =  &Организация
		|	И "+Документ+".Контрагент  =  &Контрагент
		|   И "+Документ+".ДатаВходящегоДокумента  =  &ДатаВходящегоДокумента
		|	И "+Документ+".НомерВходящегоДокумента  =  &НомерВходящегоДокумента
		|   И "+Документ+".ВидОперации = &ВидОперации";
		
		Запрос.УстановитьПараметр("Организация",  Организация);
		Запрос.УстановитьПараметр("Контрагент",  Покупатель);
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  ДатаДокаВх);  
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерДокаВх);
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
		Выборка  =  Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ВыборЯрлыка()
	
	Если ЭтотОбъект.ЗапЛок = 0 Тогда
		Элементы.НадписьЯрлык.Заголовок = "\ezvit.exe";    // zstart.exe
		//Элементы.НадписьЯрлык.Заголовок = "\zstart.exe";    // zstart.exe
	ИначеЕсли ЭтотОбъект.ЗапЛок = 1 Тогда
		Элементы.НадписьЯрлык.Заголовок = "\ezvitnet.exe";	
	ИначеЕсли ЭтотОбъект.ЗапЛок = 2 Тогда
		Элементы.НадписьЯрлык.Заголовок = "\station.exe";
	Иначе
		Элементы.НадписьЯрлык.Заголовок = "";
	КонецЕсли;          
	
КонецПроцедуры   

&НаСервере
Функция НайтиОрганизациюПоИНН(ИННОрганизации,ЕДРПОУОрганизации)   
	
	Перем ОрганизацияПоКоду; 
	
	Если НЕ Объект.Конфигурация = "УТ" 
		// 18.01.2022 + DOKING 369
		И НЕ Объект.Конфигурация = "КУП"
		И НЕ Объект.Конфигурация = "ERP"
		И НЕ Объект.Конфигурация = "SB"
		// 18.01.2022 - DOKING 369 , 378
		Тогда
		Запрос  =  Новый Запрос;   				
		Запрос.Текст = "ВЫБРАТЬ
		|	КодыОрганизацииСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних(&НаДату,  ) КАК КодыОрганизацииСрезПоследних
		|ГДЕ
		|	КодыОрганизацииСрезПоследних.ИНН = &ИНН
		|	И (КодыОрганизацииСрезПоследних.Организация.КодПоЕДРПОУ = &КодПоЕДРПОУ
		|	ИЛИ &КодПоЕДРПОУ = """")";
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата());
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации);        
		Запрос.УстановитьПараметр("КодПоЕДРПОУ", ЕДРПОУОрганизации);        
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Организация;
		КонецЕсли;  
	ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы <> "ERP25") Тогда
		Запрос = Новый Запрос;   				
		Запрос.Текст  = "ВЫБРАТЬ 
		|	УчетнаяПолитикаОрганизацийСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НаДату,  ) КАК УчетнаяПолитикаОрганизацийСрезПоследних
		|ГДЕ
		|	УчетнаяПолитикаОрганизацийСрезПоследних.ИННПлательщикаНДС = &ИНН
		|	И (УчетнаяПолитикаОрганизацийСрезПоследних.Организация.КодПоЕДРПОУ = &КодПоЕДРПОУ
		|	ИЛИ &КодПоЕДРПОУ = """")
		|";
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата()); 
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации);
		Запрос.УстановитьПараметр("КодПоЕДРПОУ", ЕДРПОУОрганизации);        
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Организация;
		КонецЕсли;
		
	ИначеЕсли (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25"  Тогда
		Запрос = Новый Запрос;   				
		Запрос.Текст  = "ВЫБРАТЬ 
		|	НастройкиУчетаНДССрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&НаДату,  ) КАК НастройкиУчетаНДССрезПоследних
		|ГДЕ
		|	НастройкиУчетаНДССрезПоследних.ИННПлательщикаНДС = &ИНН
		|	И (НастройкиУчетаНДССрезПоследних.Организация.КодПоЕДРПОУ = &КодПоЕДРПОУ
		|	ИЛИ &КодПоЕДРПОУ = """")
		|";
		Запрос.УстановитьПараметр("НаДату",  ТекущаяДата()); 
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации);
		Запрос.УстановитьПараметр("КодПоЕДРПОУ", ЕДРПОУОрганизации);        
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Организация;
		КонецЕсли;	
	Иначе
		Запрос = Новый Запрос;   				
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации 
		|ГДЕ
		|	Организации.ИНН  =  &ИНН
		| 	И (Организации.КодПоЕДРПОУ = &КодПоЕДРПОУ
		|	ИЛИ &КодПоЕДРПОУ = ""ЕДРПОУОрганизации"")"; 
		Запрос.УстановитьПараметр("ИНН",  ИННОрганизации);
		Запрос.УстановитьПараметр("КодПоЕДРПОУ", ЕДРПОУОрганизации);        
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьСхемуНалогообложения(ДатаДокумента)
	
	Попытка
		Структура = Новый Структура; 
		Структура.Вставить("Организация", ОрганизацияПервичка);
		Если Объект.Конфигурация = "БУ" ИЛИ Объект.Конфигурация = "УПП" ИЛИ Объект.Конфигурация = "ВА" ИЛИ Объект.Конфигурация = "СГ" ИЛИ Объект.Конфигурация = "BASPC" Тогда
			Возврат РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПоследнее(ДатаДокумента,Структура).ИнформацияОСтатусеПлательщикаНалогов; 
		ИначеЕсли  Объект.Конфигурация = "УТП" Тогда
			Возврат РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДатаДокумента,Структура).ИнформацияОСтатусеПлательщикаНалогов;
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			Возврат "";
		КонецЕсли;
	Исключение 		
	КонецПопытки;   
	
КонецФункции

&НаКлиенте
Функция ПроверкаВерсииМедка(ВерсияМедка)	
	Если  ВерсияМедка < ЭтотОбъект.НастройкаКонтрольВерсииМедка Тогда
		ВерсияМедкаЧитабельная = ПолучитьВерсиюСТочкой( ВерсияМедка );
		ВерсияМедкаMin = ПолучитьВерсиюСТочкой(ЭтотОбъект.НастройкаКонтрольВерсииМедка);
		#Если Клиент Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Для корректной работы необходима версия не ниже ';uk = 'Для коректної роботи необхідна версія не нижче 10.00.'")+ ВерсияМедкаMin + 
		Символы.ПС + НСтр("ru = 'У Вас установлена версия ';uk = 'У Вас встановлено версію '") + ВерсияМедкаЧитабельная + Символы.ПС + 
		НСтр("ru = 'Обновите программу!';uk = 'Оновіть програму!'"));
		Сообщение.Сообщить();
		#КонецЕсли
		Возврат ложь;
	КонецЕсли;
	Возврат истина;
Конецфункции

&НаКлиенте
Функция ПолучитьВерсиюСТочкой(версия)
	констДлина = 7;
	новаястр = СтрЗаменить(Строка(версия), Символы.НПП, "");
	
	Пока СтрДлина(новаястр) < констДлина Цикл
		новаястр = "0" + новаястр;
	КонецЦикла;
	
	новаястр = Лев(новаястр,2) + "." + Сред(новаястр,3,2) + "." + Прав(новаястр,3);
	возврат новаястр;
Конецфункции

&НаСервере
//+202 26.05.2021
//Функция СоздатьТаблицуАктаСверки(Документ)

Функция СоздатьТаблицуАктаСверки(Документ, СтруктураИтогаПоКонтрагенту = Неопределено)
//-202 26.05.2021

	Если СтруктураИтогаПоКонтрагенту = Неопределено Тогда
		СтруктураИтогаПоКонтрагенту = Новый Структура;
	КонецЕсли;
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовОрганизация.Дата как ДАТАОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Представление как ПредставлениеОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Дебет КАК ДТОрганизации, 
	|	АктСверкиВзаиморасчетовОрганизация.Кредит КАК КТОрганизации
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовОрганизация    
	|ГДЕ
	|	АктСверкиВзаиморасчетовОрганизация.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Документ",  Документ); 
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	Запрос2  =  Новый Запрос;
	Запрос2.Текст  =  
	"ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовКонтрагент.Дата как ДАТАКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Представление как ПредставлениеКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Дебет КАК ДТКонтрагента, 
	|	АктСверкиВзаиморасчетовКонтрагент.Кредит КАК КТКонтрагента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК АктСверкиВзаиморасчетовКонтрагент 
	|ГДЕ
	|	АктСверкиВзаиморасчетовКонтрагент.Ссылка  =  &Документ"; 
	
	Запрос2.УстановитьПараметр("Документ",  Документ); 
	Результат2  =  Запрос2.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ДАТАКонтрагента"); 
	Результат.Колонки.Добавить("ПредставлениеКонтрагента"); 
	Результат.Колонки.Добавить("ДТКонтрагента"); 
	Результат.Колонки.Добавить("КТКонтрагента"); 
	Если Результат2.Количество() Тогда 
		Если Результат.Количество() >=  Результат2.Количество() Тогда 
			Для Н = 0 По Результат2.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
		Иначе 
			//во второй таблице больше количество строк 
			Для Н  =  0 По Результат.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
			
			Пока Н <> Результат2.Количество()  Цикл
				Н  =  Н + 1;
				Стр  =  Результат.Добавить(); 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н-1]); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//+202 26.05.2021 
    СтруктураИтогаПоКонтрагенту.Вставить("ДтКонтр", Результат.Итог("ДТКонтрагента"));
    СтруктураИтогаПоКонтрагенту.Вставить("КтКонтр", Результат.Итог("КТКонтрагента"));
    //-202 26.05.2021   
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат); 
	
КонецФункции

Функция СоздатьТаблицуАктаСверкиСБ(Документ, СтруктураИтогаПоКонтрагенту = Неопределено)
//-202 26.05.2021

	Если СтруктураИтогаПоКонтрагенту = Неопределено Тогда
		СтруктураИтогаПоКонтрагенту = Новый Структура;
	КонецЕсли;
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	СверкаВзаиморасчетовОрганизация.ДатаДокумента как ДАТАОрганизации, 
	|	СверкаВзаиморасчетовОрганизация.ОписаниеДокумента как ПредставлениеОрганизации,
	|	СверкаВзаиморасчетовОрганизация.РасчетныйДокумент.Дата КАК ДатаДок,
	|	СверкаВзаиморасчетовОрганизация.СуммаДолгКонтрагента КАК ДТОрганизации, 
	|	СверкаВзаиморасчетовОрганизация.СуммаДолгОрганизации КАК КТОрганизации
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеОрганизации КАК СверкаВзаиморасчетовОрганизация    
	|ГДЕ
	|	СверкаВзаиморасчетовОрганизация.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Документ",  Документ); 
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	Запрос2  =  Новый Запрос;
	Запрос2.Текст  =  
	"ВЫБРАТЬ
	|	СверкаВзаиморасчетовКонтрагент.ВхДатаДокумента как ДАТАКонтрагента, 
	|	СверкаВзаиморасчетовКонтрагент.ОписаниеДокумента как ПредставлениеКонтрагента, 
	|	СверкаВзаиморасчетовКонтрагент.СуммаДолгОрганизации КАК ДТКонтрагента, 
	|	СверкаВзаиморасчетовКонтрагент.СуммаДолгКонтрагента КАК КТКонтрагента
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеКонтрагента КАК СверкаВзаиморасчетовКонтрагент 
	|ГДЕ
	|	СверкаВзаиморасчетовКонтрагент.Ссылка  =  &Документ"; 
	
	Запрос2.УстановитьПараметр("Документ",  Документ); 
	Результат2  =  Запрос2.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ДАТАКонтрагента"); 
	Результат.Колонки.Добавить("ПредставлениеКонтрагента"); 
	Результат.Колонки.Добавить("ДТКонтрагента"); 
	Результат.Колонки.Добавить("КТКонтрагента");
	Результат.Колонки.Добавить("Док");
	//Результат.Колонки.Добавить("ДатаДок");
	
	Если Результат2.Количество() Тогда 
		Если Результат.Количество() >=  Результат2.Количество() Тогда 
			Для Н = 0 По Результат2.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
		Иначе 
			//во второй таблице больше количество строк 
			Для Н  =  0 По Результат.Количество() -1 Цикл 
				Стр  =  Результат[Н]; 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			КонецЦикла;
			
			Пока Н <> Результат2.Количество()  Цикл
				Н  =  Н + 1;
				Стр  =  Результат.Добавить(); 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н-1]); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//+202 26.05.2021 
    СтруктураИтогаПоКонтрагенту.Вставить("ДтКонтр", Результат.Итог("ДТКонтрагента"));
    СтруктураИтогаПоКонтрагенту.Вставить("КтКонтр", Результат.Итог("КТКонтрагента"));
    //-202 26.05.2021   
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат); 
	
КонецФункции

//13.01.2022 + DOCKING 368
&НаСервере
Функция СоздатьТаблицуАктаСверкиКУП(Документ, СтруктураИтогаПоКонтрагенту = Неопределено)
//-202 26.05.2021

	Если СтруктураИтогаПоКонтрагенту = Неопределено Тогда
		СтруктураИтогаПоКонтрагенту = Новый Структура;
	КонецЕсли;
	
	//Запрос  =  Новый Запрос;
	//Запрос.Текст  =  
	//"ВЫБРАТЬ
	//|	СверкаВзаиморасчетовОрганизация.Дата как ДАТАОрганизации, 
	//|	СверкаВзаиморасчетовОрганизация.Представление как ПредставлениеОрганизации, 
	//|	СверкаВзаиморасчетовОрганизация.Дебет КАК ДТОрганизации, 
	//|	СверкаВзаиморасчетовОрганизация.Кредит КАК КТОрганизации
	//|ИЗ
	//|	Документ.СверкаВзаиморасчетов.ПоДаннымОрганизации КАК СверкаВзаиморасчетовОрганизация    
	//|ГДЕ
	//|	СверкаВзаиморасчетовОрганизация.Ссылка  =  &Документ";
	//Запрос.УстановитьПараметр("Документ",  Документ); 
	//Результат  =  Запрос.Выполнить().Выгрузить();
	//30.11.2023 + DOCKING 517	
	Если (Объект.Конфигурация = "ERP" И ИмяКлиентскойБазы = "ERP25") ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
		Запрос2  =  Новый Запрос;
		Запрос2.Текст  =  
		"ВЫБРАТЬ
		|	СверкаВзаиморасчетовКонтрагент.ОписаниеДокумента как ПредставлениеКонтрагента, 
		|	ВЫБОР
		|		КОГДА (СверкаВзаиморасчетовКонтрагент.СуммаДолг  >=  0)
		|			И СверкаВзаиморасчетовКонтрагент.ТипРасчетов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|		ТОГДА СверкаВзаиморасчетовКонтрагент.СуммаДолг
		|		Иначе ВЫБОР
		|				КОГДА (СверкаВзаиморасчетовКонтрагент.СуммаДолг  <  0)
		|					И СверкаВзаиморасчетовКонтрагент.ТипРасчетов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|				ТОГДА СверкаВзаиморасчетовКонтрагент.СуммаДолг
		|				Иначе 0
		|				КОНЕЦ
		|	КОНЕЦ КАК ДТКонтрагента,
		|	ВЫБОР
		|		КОГДА (СверкаВзаиморасчетовКонтрагент.СуммаДолг < 0)
		|			И СверкаВзаиморасчетовКонтрагент.ТипРасчетов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|		ТОГДА СверкаВзаиморасчетовКонтрагент.СуммаДолг
		|		Иначе ВЫБОР
		|					КОГДА (СверкаВзаиморасчетовКонтрагент.СуммаДолг >= 0)
		|						И СверкаВзаиморасчетовКонтрагент.ТипРасчетов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|					ТОГДА СверкаВзаиморасчетовКонтрагент.СуммаДолг
		|					Иначе 0
		|				КОНЕЦ
		|	КОНЕЦ КАК КТКонтрагента,
		|	СверкаВзаиморасчетовКонтрагент.ОписаниеДокумента КАК Док,
		|	СверкаВзаиморасчетовКонтрагент.ОбъектРасчетов.Дата КАК ДатаДок

		|ИЗ
		|	Документ.СверкаВзаиморасчетов.ДетальныеЗаписиРасчеты КАК СверкаВзаиморасчетовКонтрагент 
		|ГДЕ
		|	СверкаВзаиморасчетовКонтрагент.Ссылка  =  &Документ"; 
		//30.11.2023 - DOCKING 517	
	Иначе
		Запрос2  =  Новый Запрос;
		Запрос2.Текст  =  
		"ВЫБРАТЬ
	//	|	СверкаВзаиморасчетовКонтрагент.Дата как ДАТАКонтрагента, 
		|	СверкаВзаиморасчетовКонтрагент.ОписаниеДокумента как ПредставлениеКонтрагента, 
		// DOCKING 396 + 02.05.2022
		|	СверкаВзаиморасчетовКонтрагент.СуммаДолгПартнера КАК КТКонтрагента, 
		|	СверкаВзаиморасчетовКонтрагент.СуммаНашДолг КАК ДТКонтрагента,
		//|	СверкаВзаиморасчетовКонтрагент.СуммаДолгПартнера КАК ДТКонтрагента, 
		//|	СверкаВзаиморасчетовКонтрагент.СуммаНашДолг КАК КТКонтрагента,
		// DOCKING 396 - 02.05.2022
		|	СверкаВзаиморасчетовКонтрагент.ОписаниеДокумента КАК Док,
		|	СверкаВзаиморасчетовКонтрагент.РасчетныйДокумент.Дата КАК ДатаДок

		|ИЗ
		|	Документ.СверкаВзаиморасчетов.ДанныеКонтрагента КАК СверкаВзаиморасчетовКонтрагент 
		|ГДЕ
		|	СверкаВзаиморасчетовКонтрагент.Ссылка  =  &Документ"; 
	КонецЕсли;	
	
	Запрос2.УстановитьПараметр("Документ",  Документ); 
	Результат2  =  Запрос2.Выполнить().Выгрузить();
//	Результат.Колонки.Добавить("ДАТАКонтрагента");
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПредставлениеКонтрагента"); 
	Результат.Колонки.Добавить("ДТКонтрагента"); 
	Результат.Колонки.Добавить("КТКонтрагента");
	Результат.Колонки.Добавить("Док");
	Результат.Колонки.Добавить("ДатаДок");
//	Если Результат2.Количество() Тогда 
		//Если Результат.Количество() >=  Результат2.Количество() Тогда 
		//	Для Н = 0 По Результат2.Количество() -1 Цикл 
		//		Стр  =  Результат[Н]; 
		//		ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
		//	КонецЦикла;
		//Иначе 
			//во второй таблице больше количество строк 
			//Для Н  =  0 По Рёезультат.Количество() -1 Цикл 
			//	Стр  =  Результат[Н]; 
			//	ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н]); 
			//КонецЦикла;
			Н = 0;
			Пока Н <> Результат2.Количество()  Цикл
				Н  =  Н + 1;
				Стр  =  Результат.Добавить(); 
				ЗаполнитьЗначенияСвойств(Стр,  Результат2[Н-1]); 
			КонецЦикла;
		//КонецЕсли;
//	КонецЕсли;
	//+202 26.05.2021
	// DOCKING 396 + 02.05.2022
    //СтруктураИтогаПоКонтрагенту.Вставить("ДтКонтр", Результат.Итог("ДТКонтрагента"));
    //СтруктураИтогаПоКонтрагенту.Вставить("КтКонтр", Результат.Итог("КТКонтрагента"));
	
	СтруктураИтогаПоКонтрагенту.Вставить("ДтКонтр", Результат.Итог("КТКонтрагента"));
    СтруктураИтогаПоКонтрагенту.Вставить("КтКонтр", Результат.Итог("ДТКонтрагента"));
	// DOCKING 396 - 02.05.2022
    //-202 26.05.2021   
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат); 
	
КонецФункции   //13.01.2022 - DOCKING 368


&НаСервере
Процедура ПроверитьПараметры()
	
	Если (ЭтотОбъект.НадписьПараметры) Тогда
		Элементы.ПараметрыПредприятияПоле.Доступность = Истина;
		Элементы.ПараметрыФилиалПоле.Доступность = Истина;
		Элементы.ПараметрыЛогинПоле.Доступность = Истина;
		Элементы.ПараметрыПарольПоле.Доступность = Истина;
	Иначе
		Элементы.ПараметрыПредприятияПоле.Доступность = Ложь;
		Элементы.ПараметрыФилиалПоле.Доступность = Ложь;
		Элементы.ПараметрыЛогинПоле.Доступность = Ложь;
		Элементы.ПараметрыПарольПоле.Доступность = Ложь;
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета  =  Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) тогда
		ВалютаРегламентированногоУчета  =  Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Результат  =  Новый Структура("
	|СчетРасчетов,  СчетАвансов, 
	|СчетРасчетовПокупателя,  СчетАвансовПокупателя, 
	|СчетУчетаТары,  СчетУчетаТарыПокупателя, 
	|СчетАвансовПоТаре,  СчетАвансовПоТареПокупателя, 
	|СчетРасчетовПриБартере,  СчетАвансовПриБартере, 
	|СчетРасчетовПокупателяПриБартере,  СчетАвансовПокупателяПриБартере, 
	|СчетУчетаНДСПриобретений, СчетУчетаНДСПриобретенийПодтвержденный, 
	|СчетУчетаНДСПродаж, СчетУчетаНДСПродажПодтвержденный, 
	|НалоговоеНазначениеПриобретений, НалоговоеНазначениеПриобретенийПоТаре, 
	|НалоговоеНазначениеПродаж,  НалоговоеНазначениеПродажПоТаре, 
	|СтавкаНДСПриобретений, СтавкаНДСПродаж, 
	|Организация,  Контрагент,  Договор,  ВидРасчетовПоДоговору,  Амортизируется");
	
	ВидРасчетовПоДоговору  =  ОпределениеВидаРасчетовПоПараметрамДоговора(Договор, ВалютаРегламентированногоУчета);
	
	// DOCKING 459 + 22.11.2022
	//СписокГруппКонтрагентов  =  ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышестоящихГрупп(Контрагент);
	//СписокГруппДоговоров  =  ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышестоящихГрупп(Договор);
	Если Объект.Конфигурация <> "SB" Тогда
				
		ОбщМодуль = ПолучитьСписокГруппИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",Контрагент,Договор);
			
		Если ОбщМодуль <> Ложь Тогда
			СписокГруппКонтрагентов = ОбщМодуль.СписокГруппКонтрагентов;
			СписокГруппДоговоров 	= ОбщМодуль.СписокГруппДоговоров;
		Иначе
			СписокГруппКонтрагентов = "";
			СписокГруппДоговоров = "";
		КонецЕсли;
		
	Иначе
		СписокГруппКонтрагентов  =  ПолучитьСписокВышестоящихГрупп(Контрагент);
		СписокГруппДоговоров  	 =  ПолучитьСписокВышестоящихГрупп(Договор);	
	КонецЕсли;
	// DOCKING 459 - 22.11.2022
	
	Запрос     =  Новый Запрос();
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("Договор",            Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",        ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация",  Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",      Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов",  Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	ШаблонЗапросаБезГде  = ", 
	|	СчетУчетаРасчетовСПоставщиком, 
	|	СчетУчетаАвансовВыданных, 
	|	СчетУчетаРасчетовСПокупателем, 
	|	СчетУчетаАвансовПолученных, 
	|	СчетУчетаРасчетовПоТареСПоставщиком, 
	|	СчетУчетаАвансовПоТареВыданных, 
	|	СчетУчетаРасчетовПоТареСПокупателем, 
	|	СчетУчетаАвансовПоТареПолученных, 
	|	СчетУчетаРасчетовСПоставщикомПриБартере, 
	|	СчетУчетаРасчетовСПокупателемПриБартере, 
	|	СчетУчетаНДСПриобретений, 
	|	СчетУчетаНДСПриобретенийПодтвержденный, 
	|	СчетУчетаНДСПродаж, 
	|	СчетУчетаНДСПродажПодтвержденный, 
	|	НалоговоеНазначениеПриобретений, 
	|	НалоговоеНазначениеПриобретенийПоТаре, 
	|	НалоговоеНазначениеПродаж, 
	|   НалоговоеНазначениеПродажПоТаре, 
	|	СтавкаНДСПриобретений, 
	|	СтавкаНДСПродаж, 
	|	Организация, 
	|	Контрагент, 
	|	Договор, 
	|	Амортизируется, 
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|";
	
	Индекс  =  1;
	
	ТекстЗапроса  =  "
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") + " КАК Приоритет" +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	
	|	Организация  =  &Организация И
	|	Контрагент   =  &Контрагент И
	|	Договор      =  &Договор И НЕ &Договор  =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс,  ГруппаДоговоров);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ	
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 		   =  &Организация И
		|	Контрагент  		   =  &Контрагент И
		|	Договор     		   =  &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ	
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &Организация И
	|	Контрагент  		   =  &Контрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс,  ГруппаКонтрагентов);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 		   =  &Организация И
		|	Контрагент             =  &ГруппаКонтрагентов" + Индекс + " И
		|	Договор     		   =  &ПустойДоговор
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &Организация И
	|	Контрагент  		   =  &ПустойКонтрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс,  ГруппаДоговоров);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация 	 	   =  &ПустаяОрганизация И
		|	Контрагент             =  &Контрагент И
		|	Договор                =  &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация 		   =  &ПустаяОрганизация И
	|	Контрагент 			   =  &Контрагент И
	|	Договор     		   =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс,  ГруппаКонтрагентов);
		
		ТекстЗапроса  =  ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс, "ЧГ = 0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
		|	Организация            =  &ПустаяОрганизация И
		|	Контрагент             =  &ГруппаКонтрагентов" + Индекс + " И
		|	Договор                =  &ПустойДоговор
		|";
		
		Индекс  =  Индекс + 1;
		
	КонецЦикла;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ВидРасчетов И
	|	Организация            =  &ПустаяОрганизация И
	|	Контрагент             =  &ПустойКонтрагент И
	|	Договор                =  &ПустойДоговор
	|";
	
	Индекс  =  Индекс + 1;
	
	ТекстЗапроса  =  ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс, "ЧГ = 0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору  =  &ПустойВидРасчетов И
	|	Организация            =  &ПустаяОрганизация И
	|	Контрагент             =  &ПустойКонтрагент И
	|	Договор                =  &ПустойДоговор
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст  =  ТекстЗапроса;
	
	Выборка  =  Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.СчетРасчетов                      =  Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                       =  Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя            =  Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя             =  Выборка.СчетУчетаАвансовПолученных;
		
		Результат.СчетУчетаТары                     =  Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетАвансовПоТаре                 =  Выборка.СчетУчетаАвансовПоТареВыданных;
		Результат.СчетУчетаТарыПокупателя           =  Выборка.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетАвансовПоТареПокупателя       =  Выборка.СчетУчетаАвансовПоТареПолученных;
		
		Результат.СчетРасчетовПриБартере            =  Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		Результат.СчетАвансовПриБартере             =  Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетРасчетовПокупателяПриБартере  =  Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетАвансовПокупателяПриБартере   =  Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		
		Результат.СчетУчетаНДСПриобретений            		 =  Выборка.СчетУчетаНДСПриобретений;
		Результат.СчетУчетаНДСПриобретенийПодтвержденный 	 =  Выборка.СчетУчетаНДСПриобретенийПодтвержденный;
		Результат.СчетУчетаНДСПродаж             			 =  Выборка.СчетУчетаНДСПродаж;
		Результат.СчетУчетаНДСПродажПодтвержденный           =  Выборка.СчетУчетаНДСПродажПодтвержденный;
		
		Результат.НалоговоеНазначениеПриобретений    		 =  Выборка.НалоговоеНазначениеПриобретений;
		Результат.НалоговоеНазначениеПриобретенийПоТаре      =  Выборка.НалоговоеНазначениеПриобретенийПоТаре;
		Результат.НалоговоеНазначениеПродаж    			     =  Выборка.НалоговоеНазначениеПродаж;
		Результат.НалоговоеНазначениеПродажПоТаре            =  Выборка.НалоговоеНазначениеПродажПоТаре;
		
		Результат.СтавкаНДСПриобретений	                 =  Выборка.СтавкаНДСПриобретений;
		Результат.СтавкаНДСПродаж            			 =  Выборка.СтавкаНДСПродаж;
		
		Результат.Амортизируется            			 =  Выборка.Амортизируется;
		
		Результат.Организация						 =  Выборка.Организация;
		Результат.Контрагент            			 =  Выборка.Контрагент;
		Результат.Договор            				 =  Выборка.Договор;
		Результат.ВидРасчетовПоДоговору            	 =  Выборка.ВидРасчетовПоДоговору;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

&НаСервере
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета) Экспорт
	
	Если ДоговорКонтрагента.ВалютаВзаиморасчетов  =  ВалютаРегламентированногоУчета 
		ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору  =  Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		
	Иначе
		ВидРасчетовПоДоговору  =  Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		
	Конецесли;
	
	Возврат ВидРасчетовПоДоговору;
	
КонецФункции      

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	КонтрагентДоИзменений = Строка(Контрагент);
	
	ЮрикФизик = ЮрикФизик(); 
	
	КодПоЕДРПОУ = ОрганизацияПриИзмененииНаСервере();
	Если КодПоЕДРПОУ = Неопределено Тогда
		Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+ОрганизацияПервичка+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+ОрганизацияПервичка+"'"));
		КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
	КонецЕсли;      
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеОтображенияКнопокПервичка()
	
	// 07.12.2021 + DOCKING 361
	Если СведенияОПоставщике = Неопределено Тогда
		
		Элементы.СформироватьСвойШаблон.Доступность = Ложь;
		Элементы.СформироватьСвойШаблон.Видимость = Ложь;
		Элементы.СформироватьСвойШаблон1.Доступность = Ложь;
		Элементы.СформироватьСвойШаблон1.Видимость = Ложь;
		
		КодПоЕДРПОУ = Неопределено;
		Возврат;
	КонецЕсли;	
	// 07.12.2021 - DOCKING 361
	
	Если СведенияОПоставщике.КодПоЕДРПОУ = "42762568" 
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "34818882" 
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "37471198" 
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "20079914"
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "36265553"
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "34379765"
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "44493086" //44493086
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "45000828" //45000828
		ИЛИ СведенияОПоставщике.КодПоЕДРПОУ = "41007704" //41007704
		Тогда
		Элементы.СформироватьСвойШаблон.Доступность = Истина;
		Элементы.СформироватьСвойШаблон.Видимость = Истина;
		Элементы.СформироватьСвойШаблон1.Видимость = Истина;
		Элементы.СформироватьСвойШаблон1.Доступность = Истина;
	Иначе
		Элементы.СформироватьСвойШаблон.Доступность = Ложь;
		Элементы.СформироватьСвойШаблон.Видимость = Ложь;
		Элементы.СформироватьСвойШаблон1.Доступность = Ложь;
		Элементы.СформироватьСвойШаблон1.Видимость = Ложь;
	КонецЕсли; 	 

КонецПроцедуры

&НаСервере
Функция ОрганизацияПриИзмененииНаСервере()
	
	КодОргДоИзменений = Строка(КодПоЕДРПОУ);  
	
	Если (ЗначениеЗаполнено(ДоговорКонтрагента))
		И (ДоговорКонтрагента.Организация <> ОрганизацияПервичка) Тогда
		ДоговорКонтрагента  =  Неопределено;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОбособленноеПодразделение)) 
		И (ОбособленноеПодразделение.Владелец <> ОрганизацияПервичка) Тогда
		ОбособленноеПодразделение  =  Неопределено;
	КонецЕсли;
	//-----------------------------------------------------------------
	
	Если НЕ ОрганизацияПервичка.Пустая() Тогда
		КодЯзыкаПечать = КодЯзыкаПечать();
		//КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		
		// DOCKING 459 + 22.11.2022
		// --------------------------------
		//Если Объект.Конфигурация = "ERP" или ПолучитьИмяБазы() = "КУП" Тогда
		//	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ОрганизацияПервичка, ТекущаяДата(),);
		//	//СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		//Иначе
		//	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ОрганизацияПервичка, ТекущаяДата(),,,КодЯзыкаПечать);
		//КонецЕсли;
		// --------------------------------
		Если Объект.Конфигурация = "ERP" или ПолучитьИмяБазы() = "КУП" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(ОрганизацияПервичка, ТекущаяДата(),);
			
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ"); 
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(ОрганизацияПервичка, ТекущаяДата(),,,КодЯзыкаПечать);
			
		Иначе
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(ОрганизацияПервичка, ТекущаяДата(),,,КодЯзыкаПечать);
		КонецЕсли;
		
		// --------------------------------
		// DOCKING 459 + 22.11.2022	
	
			Если ОрганизацияПервичка.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда			
				Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
					КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
				КонецЕсли;	
			ИначеЕсли ОрганизацияПервичка.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
					КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		
	Если КодОргДоИзменений<>Строка(КодПоЕДРПОУ)   тогда
		//
		ИзменениеОсновныхПараметров();
		//Элементы.Организация.Заголовок = СведенияОПоставщике.Представление;
	КонецЕсли; 
ОбновлениеОтображенияКнопокПервичка();// Кнопка только для указанного кода ЕДРПОУ
			
	Возврат КодПоЕДРПОУ;

КонецФункции

&НаСервере
Функция РегОтчетОрганизацияПриИзмененииНаСервере()
	
	КодОргДоИзменений = Строка(РегОтчКодПоЕДРПОУ);  
	
	Если НЕ РегОтчетОрганизация.Пустая() Тогда
		КодЯзыкаПечать = КодЯзыкаПечать();
		
		//СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РегОтчетОрганизация, ТекущаяДата(),,,КодЯзыкаПечать);
		// DOCKING 459 + 22.11.2022
		// --------------------------------
		//Если ПолучитьИмяБазы() = "КУП" ИЛИ Метаданные.Имя = "BASERP" Тогда
		//	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РегОтчетОрганизация, ТекущаяДата(),);
		//Иначе
		//	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РегОтчетОрганизация, ТекущаяДата(),,,КодЯзыкаПечать);
		//КонецЕсли;
		// --------------------------------
		Если ПолучитьИмяБазы() = "КУП" ИЛИ Метаданные.Имя = "BASERP" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(РегОтчетОрганизация, ТекущаяДата(),);
		ИначеЕсли ПолучитьИмяБазы() = "SB" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(РегОтчетОрганизация, ТекущаяДата(),,,КодЯзыкаПечать);			
		Иначе
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(РегОтчетОрганизация, ТекущаяДата(),,,КодЯзыкаПечать);
		КонецЕсли;		
		
		// --------------------------------
		// DOCKING 459 - 22.11.2022
		
		Если РегОтчетОрганизация.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				РегОтчКодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			КонецЕсли;	
		ИначеЕсли РегОтчетОрганизация.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				РегОтчКодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			КонецЕсли;	
		КонецЕсли;
		
		Если КодОргДоИзменений <> Строка(РегОтчКодПоЕДРПОУ) Тогда
			ИзменениеОсновныхПараметровРегОтчеты();
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат РегОтчКодПоЕДРПОУ;

КонецФункции

&НаСервере
Функция КодЯзыкаПечать()
	
	
	// DOCKING 517 + 07.06.2023
	//Возврат  Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	Если ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
		ОбщМодуль = ПолучитьОбщийМодуль("МультиязычностьУкр");
		КодЯзП = ОбщМодуль.ПолучитьЯзыкФормированияПечатныхФорм();
	Иначе
		ОбщМодуль = ПолучитьОбщийМодуль("Локализация");
		КодЯзП = ОбщМодуль.ПолучитьЯзыкФормированияПечатныхФорм();
	КонецЕсли;
	Возврат КодЯзП;
	// DOCKING 517 - 07.06.2023

КонецФункции	

&НаСервере
Функция ЮрикФизик()
	
	// 06.12.2021 + DOCKING 361
	Если ПолучитьИмяТекущейВкладки() = "ПД" Тогда
		ЮрФизЛицо = ОрганизацияПервичка.ЮридическоеФизическоеЛицо;
	ИначеЕсли ПолучитьИмяТекущейВкладки() = "НД" Тогда
		ЮрФизЛицо = НалогДокОрганизацияПервичка.ЮридическоеФизическоеЛицо;
	КонецЕсли;	
	//Если ОрганизацияПервичка.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
	Если ЮрФизЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
	// 06.12.2021 - DOCKING 361	
		
		ЮрикФизик = "Юрик";
		
		// DOCKING 517 + 07.06.2023
		//Если Локализация.КодЯзыкаИнтерфейса()="ru" Тогда
		//	Элементы.НадписьКодПоЕДРПОУ.Заголовок = "ЕДРПОУ";
		//ИначеЕсли Локализация.КодЯзыкаИнтерфейса()="uk" Тогда
		//	Элементы.НадписьКодПоЕДРПОУ.Заголовок = "ЄДРПОУ";
		//КонецЕсли;
	
		Если ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("МультиязычностьУкр");
		Иначе
			ОбщМодуль = ПолучитьОбщийМодуль("Локализация");
		КонецЕсли;  
		Если ОбщМодуль.КодЯзыкаИнтерфейса()="ru" Тогда
			Элементы.НадписьКодПоЕДРПОУ.Заголовок = "ЕДРПОУ";
		ИначеЕсли ОбщМодуль.КодЯзыкаИнтерфейса()="uk" Тогда
			Элементы.НадписьКодПоЕДРПОУ.Заголовок = "ЄДРПОУ";
		КонецЕсли;
		
		// DOCKING 517 - 07.06.2023
	
	Иначе 
		ЮрикФизик = "Физик";
		Элементы.НадписьКодПоЕДРПОУ.Заголовок = "ДРФО";
	КонецЕсли;
	
	Возврат ЮрикФизик;
	
КонецФункции

&НаСервере
Функция ЮрикФизикОтчет()
	
	Если РегОтчетОрганизация.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЮрикФизикОтчет = "Юрик";
	Иначе 
		ЮрикФизикОтчет = "Физик";
	КонецЕсли;
	
	Возврат ЮрикФизикОтчет;
	
КонецФункции

// 03.12.2021 + DOCKING 361
//&НаСервере      
//Функция ЮрикФизикНалогДок()  // УДАЛИТЬ ЕЕ
//	
//	Если НалогДокОрганизацияПервичка.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
//		ЮрикФизикНалогДок = "Юрик";
//		Если Локализация.КодЯзыкаИнтерфейса()="ru" Тогда
//			Элементы.НадписьКодПоЕДРПОУ.Заголовок = "ЕДРПОУ";
//		ИначеЕсли Локализация.КодЯзыкаИнтерфейса()="uk" Тогда
//			Элементы.НадписьКодПоЕДРПОУ.Заголовок = "ЄДРПОУ";
//		КонецЕсли;
//	Иначе 
//		ЮрикФизикНалогДок = "Физик";
//	КонецЕсли;
//	
//	Возврат ЮрикФизикНалогДок;
//	
//КонецФункции  // 03.12.2021 + DOCKING 361

&НаКлиенте
Процедура ПутьКФайлуМедкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Элементы.ПутьКФайлуМедка.ТекстРедактирования) Тогда
		Элементы.НетСтрокиМедка.Видимость =  Истина;    
	Иначе 
		Элементы.НетСтрокиМедка.Видимость =  Ложь;		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПараметрыПриИзменении(Элемент)
	ПроверитьПараметры();
КонецПроцедуры

&НаКлиенте
Процедура ЗапЛокПриИзменении(Элемент)
	ВыборЯрлыка();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
	
	// 09.12.21 + DOCKING 361
	//ИмяТК = ПолучитьИмяТекущейВкладки();
	ИмяТК = ЭтаФорма.Элементы.Страницы.ТекущаяСтраница.Имя;
	Если ИмяТК = "ПервичныеДокументы" Тогда
	// 09.12.21 - DOCKING 361
	
		//ИзНихЧисло = Элементы.ТаблицаДокументов.ВыделенныеСтроки.Количество();
		Помеченные = ТаблицаДокументов.НайтиСтроки(Новый Структура("Флажок",Истина));
		ИзНихЧисло = Помеченные.Количество();
		//Если ИзнИхЧисло > 0 тогда 
		Если Помеченные.Количество() > 0 тогда 
			Элементы.Сформировать.Доступность = Истина;
			//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Истина;
		Иначе
			Элементы.Сформировать.Доступность = Ложь;
			//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Ложь;
		КонецЕсли;
		
		Если (ТипДок="ВхНалоговыйДокумент") ИЛИ (ТипДок="ВхПостТовУслуг") ИЛИ (ТипДок="ВхСчет") Тогда
		    Элементы.Сформировать.Доступность=Ложь;
			Элементы.УдалитьСтрокуДокумента.Доступность=Ложь;
		Иначе
			Элементы.Сформировать.Доступность=Истина;
			Элементы.Удалить.Доступность=Истина;
		КонецЕсли;
		
		// 09.12.21 + DOCKING 361
	ИначеЕсли ИмяТК = "НалоговыеДокументы" Тогда
		
		//ИзНихЧисло = Элементы.ТаблицаДокументов.ВыделенныеСтроки.Количество();
		Помеченные = ТаблицаНалоговых.НайтиСтроки(Новый Структура("Флажок",Истина));
		ИзНихЧисло1 = Помеченные.Количество();
		//Если ИзнИхЧисло > 0 тогда 
		Если Помеченные.Количество() > 0 тогда 
			Элементы.Сформировать1.Доступность = Истина;
			//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Истина;
		Иначе
			Элементы.Сформировать1.Доступность = Ложь;
			//ЭлементыФормы.КоманднаяПанельТаблицаДокументов.Кнопки.ОбновитьСтатусыПД.Доступность  =  Ложь;
		КонецЕсли;
		
		Если (ТипДок="ВхНалоговыйДокумент") ИЛИ (ТипДок="ВхПостТовУслуг") ИЛИ (ТипДок="ВхСчет") Тогда
		    Элементы.Сформировать1.Доступность=Ложь;
			Элементы.УдалитьСтрокуДокумента1.Доступность=Ложь;
		Иначе
			Элементы.Сформировать1.Доступность=Истина;
			Элементы.Удалить1.Доступность=Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПослеУдаления(Элемент)
	ВсегоЧисло = ТаблицаДокументов.Количество();
	
	ВсегоЧисло2 	= ТаблицаНалоговых.Количество(); //DOCKING 357
	
	// 14.09.2022 + DOCKING 216
	БезНДСЧисло 	= ТаблицаДокументов.Итог("СуммаБезНДС");
	ВсегоНДСЧисло 	= ТаблицаДокументов.Итог("СуммаНДСДокумента");
	ВсегоЧисло1		= ТаблицаДокументов.Итог("СуммаДокумента");
	
	БезНДСЧисло1 	= ТаблицаНалоговых.Итог("СуммаБезНДС");
	ВсегоНДСЧисло1 	= ТаблицаНалоговых.Итог("СуммаНДСДокумента");
	ВсегоЧисло3		= ТаблицаНалоговых.Итог("СуммаДокумента");
	// 14.09.2022 - DOCKING 216
КонецПроцедуры

&НаСервере
Функция ЦветСтл()
	Возврат ЦветаСтиля.ЦветФонаКнопки	
КонецФункции

&НаСервере
Функция СведенияОПокупателе(Документ,КодЯзыкаПечать)
	Если Объект.Конфигурация = "ERP"
		//11.01.2022 + DOCKING 368
		ИЛИ Объект.Конфигурация = "КУП"
		//11.01.2022 - DOCKING 368
		Тогда
		
		//Возврат БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,) ;
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,) ;
	ИначеЕсли Объект.Конфигурация = "SB" Тогда // DOCKING 459 + 22.11.2022
			ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");
			Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать) ;
	Иначе
		//Возврат БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать) ;
		ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Контрагент, Документ.Дата,,,КодЯзыкаПечать) ;
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция РуководителиКонтрагента(Документ)
	//Возврат ОтветственныеЛицаБП.ОтветственныеЛицаКонтрагента(Документ.Контрагент, Документ.Дата);
	ОбщМодуль = ПолучитьОбщийМодуль("ОтветственныеЛицаБП");
	Возврат ОбщМодуль.ОтветственныеЛицаКонтрагента(Документ.Контрагент, Документ.Дата);
КонецФункции

&НаСервере
Функция ПолучитьДолжностьРуководителяКонтрагента(Документ,РуководителиКонтрагента)
	Возврат ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Документ.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
КонецФункции

&НаСервере
Функция ОбъектКонтрагентДокумент(Документ)
	Возврат Документ.Контрагент;	
КонецФункции

&НаСервере
Функция ПолучитьКонтактноеЛицоКонтрагентаПоУмолчанию(Контрагент)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Партнер КАК Владелец
	|ПОМЕСТИТЬ ВладелецКонтактногоЛица
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Количество = 1
	|			ТОГДА КонтактныеЛицаПартнеров.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|	КОНЕЦ КАК КонтактноеЛицо,
	|   КонтактныеЛицаПартнеров.ДолжностьПоВизитке КАК ДолжностьКонтрагента
	
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактныеЛицаПартнеров.Ссылка) КАК Количество
	|	ИЗ
	|		Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|	ГДЕ
	|		КонтактныеЛицаПартнеров.Владелец В
	|				(ВЫБРАТЬ
	|					ВладелецКонтактногоЛица.Владелец КАК Владелец
	|				ИЗ
	|					ВладелецКонтактногоЛица)
	|		И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления) КАК ВложенныйЗапрос,
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец В
	|			(ВЫБРАТЬ
	|				ВладелецКонтактногоЛица.Владелец КАК Владелец
	|			ИЗ
	|				ВладелецКонтактногоЛица)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ТЗ_ЛицоДолжность = Новый Структура;
	
	ТЗ_ЛицоДолжность.Вставить("Лицо",Выборка.КонтактноеЛицо);
	ТЗ_ЛицоДолжность.Вставить("Должность",Выборка.ДолжностьКонтрагента);
	
	Возврат ТЗ_ЛицоДолжность;
	
КонецФункции

&НаСервере
Функция СведенияОПоставщике(Документ,КодЯзыкаПечать)  
	Если Объект.Конфигурация = "ERP"
	//11.01.2022 + DOCKING 368
	ИЛИ Объект.Конфигурация = "КУП"
	//11.01.2022 - DOCKING 368
	Тогда
	    ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Организация, ТекущаяДата(),);
	ИначеЕсли Объект.Конфигурация = "SB" Тогда
		ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");
		Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Организация, ТекущаяДата(),,,КодЯзыкаПечать);	
	Иначе
		ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
		Возврат ОбщМодуль.СведенияОЮрФизЛице(Документ.Организация, ТекущаяДата(),,,КодЯзыкаПечать);
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ДанныеФизЛица(Организация, ФизЛицо, Дата)
	
	ДанныеФИО = Неопределено;
		
		Выполнить("ДанныеФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизЛицо);");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Должность
		|ИЗ
		|	Справочник.Подписи КАК ОтветственныеЛицаОрганизаций
		|ГДЕ
		|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФЛ";
		
		Запрос.УстановитьПараметр("ФЛ", ФизЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
				
		ДанныеФизЛица = Новый Структура;
		ДанныеФизЛица.Вставить("Должность", Выборка.Должность);
		ДанныеФизЛица.Вставить("Фамилия", ДанныеФИО.Фамилия);
		ДанныеФизЛица.Вставить("Имя", ДанныеФИО.Имя);
		ДанныеФизЛица.Вставить("Отчество", ДанныеФИО.Отчество);

	Возврат ДанныеФизЛица;

КонецФункции


&НаСервере
Функция ОбъектДокументДата(Документ)    
	Возврат Документ.Дата;
КонецФункции	

&НаСервере
Функция ОбъектДокументВалютаДокумента(Документ)    
	Возврат Документ.ВалютаДокумента;
КонецФункции	

&НаСервере
Функция ОбъектДокументОстатокНаНачало(Документ)    
	Возврат Документ.ОстатокНаНачало;
КонецФункции

&НаСервере
Функция ОбъектДокументСальдоНачалоПериода(Документ)    
	Возврат Документ.СальдоНачалоПериода;
КонецФункции

&НаСервере
Функция ОбъектДокументСверкаСогласована(Документ)    
	Возврат Документ.СверкаСогласована;
КонецФункции

//12.01.2022 + DOCKING 368
&НаСервере
Функция ОбъектДокументСогласованаСверка(Документ)    
	Возврат Документ.Статус = Перечисления.СтатусыСверокВзаиморасчетов.Сверена;
КонецФункции

//12.01.2022 + DOCKING 368
&НаСервере
Функция ОбъектДокументСтатус(Документ)    
	Возврат Документ.Статус;
КонецФункции

//12.01.2022 + DOCKING 368
&НаСервере
Функция ОбъектДокументКонецПериода(Документ)    
	Возврат Документ.КонецПериода;
КонецФункции

//12.01.2022 + DOCKING 368
&НаСервере
Функция ОбъектДокументНачалоПериода(Документ)    
	Возврат Документ.НачалоПериода;
КонецФункции

//12.01.2022 + DOCKING 368
&НаСервере
Функция ОбъектДокументКонтактноеЛицо(Документ)    
	Возврат Документ.КонтактноеЛицо;
КонецФункции

//12.01.2022 + DOCKING 368
&НаСервере
Функция ОбъектДокументРуководитель(Документ)    
	Возврат Документ.Руководитель;
КонецФункции

&НаСервере
Функция ОбъектДокументПодписьОтветственного(Документ)    
	Возврат Документ.ПодписьОтветственного;
КонецФункции

&НаСервере
Функция ОбъектДокументРасхождение(Документ)    
	Возврат Документ.Расхождение;
КонецФункции	

&НаСервере
Функция ОбъектДокументДатаОкончания(Документ)    
	Возврат Документ.ДатаОкончания;
КонецФункции	

&НаСервере
Функция ОбъектДокументДатаНачала(Документ)    
	Возврат Документ.ДатаНачала;
КонецФункции	

&НаСервере
Функция ОбъектДокументПредставительКонтрагента(Документ)    
	Возврат Документ.ПредставительКонтрагента;
КонецФункции

&НаСервере
Функция ОбъектДокументПредставительКонтрагентаДолжность(Документ)    
	Возврат Документ.ПредставительКонтрагента.Должность;
КонецФункции

&НаСервере
Функция ОбъектДокументДоговорКонтрагента(Документ) 
	
	ДоговорСтруктура = Новый Структура;
	Попытка
		ДоговорСтруктура.Вставить("Представление",Строка(Документ.ДоговорКонтрагента));
		ДоговорСтруктура.Вставить("Номер",Документ.ДоговорКонтрагента.Номер);
		ДоговорСтруктура.Вставить("Дата",Документ.ДоговорКонтрагента.Дата);
	Исключение
		ДоговорСтруктура.Вставить("Представление","");
		ДоговорСтруктура.Вставить("Номер","");
		ДоговорСтруктура.Вставить("Дата","");
	КонецПопытки;
	
	Возврат ДоговорСтруктура;
КонецФункции

Функция ОбъектДокументТЧДоговорКонтрагента(Документ) 
	
	ДоговорСтруктура = Новый Структура;
	ТЧДоговорыКонтрагента = Документ.ДоговорыКонтрагентов;
	Для Каждого Стр Из ТЧДоговорыКонтрагента Цикл
		ДоговорСтруктура.Вставить("Представление",	Строка(Стр.Договор));
		ДоговорСтруктура.Вставить("Номер",			Стр.Договор.НомерДоговора);
		ДоговорСтруктура.Вставить("Дата",			Стр.Договор.ДатаДоговора);		

		Прервать;
	КонецЦикла;
	
	Возврат ДоговорСтруктура;
КонецФункции

//12.01.2022 + DOCKING 368
&НаСервере
Функция ОбъектДокументДоговор(Документ) 
	
	ДоговорСтруктура = Новый Структура;
	Попытка
		ДоговорСтруктура.Вставить("Представление",Строка(Документ.Договор));
		ДоговорСтруктура.Вставить("Номер",Документ.Договор.Номер);
		ДоговорСтруктура.Вставить("Дата",Документ.Договор.Дата);
	Исключение
		ДоговорСтруктура.Вставить("Представление","");
		ДоговорСтруктура.Вставить("Номер","");
		ДоговорСтруктура.Вставить("Дата","");
	КонецПопытки;	
	
	Возврат ДоговорСтруктура;
КонецФункции

&НаСервере
Функция ОбъектДокументПредставительОрганизации(Документ)    
	Возврат Документ.ПредставительОрганизации;
КонецФункции	

&НаСервере
Функция ОбъектДокументВидоперации(Документ)    
	Возврат Документ.Видоперации;
КонецФункции

&НаСервере
Функция КодИсточникаНалоговогоНомера(ЗНАЧ НалоговыйНомер, ПлательщикЮрлицо)
	
	НалоговыйНомер = СокрЛП(НалоговыйНомер);
	ДлинаНомера = СтрДлина(НалоговыйНомер);
	
	Результат = "";
	
	Если ДлинаНомера > 0 Тогда
		
		Если ПлательщикЮрлицо Тогда
			
			Если ДлинаНомера = 9 Тогда
				//спецплательщик
				Результат = 3;
			ИначеЕсли ДлинаНомера = 8 Тогда
				//ЕДРПОУ
				Результат = 1;
			КонецЕсли;
			
		Иначе
			
			Если ДлинаНомера = 10 Тогда
				//ДРФО
				Результат = 2;
			Иначе
				//паспорт
				Результат = 4;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция СтруктураПараметров(Документ, ИспользоватьДанныеЗЦ = Ложь, ТипСтрока = 0)
	
	Если ИспользоватьДанныеЗЦ Тогда
		НалоговыйДокументОбъект  =  Документ.Ссылка.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены.ПолучитьОбъект();
	Иначе 
		НалоговыйДокументОбъект  =  Документ.Ссылка.ПолучитьОбъект();
	КонецЕсли; 
	
	МассивОбъектов = Новый Массив(1);
	МассивОбъектов[0] = НалоговыйДокументОбъект.Ссылка; //Документ.Ссылка;	
	//		
	Список = Новый СписокЗначений();
	Список.Добавить(НалоговыйДокументОбъект);
	
	Массив = Новый Массив;  
	
	Если ТипДок = "Налоговая накладная" 
		//14.01.2022 + DOCKING 369
		ИЛИ (ТипДок = "Пусто" И ТипСтрока = "Налоговая накладная")		
		//14.01.2022 - DOCKING 369
		Тогда
		СтруктураПечати = Новый Структура;
		Если  Объект.Конфигурация = "ERP" 
			//14.01.2022 + DOCKING 369
			ИЛИ Объект.Конфигурация = "КУП"		
			//14.01.2022 - DOCKING 369
			ИЛИ Объект.Конфигурация = "SB"
			Тогда
			//   Документы.НалоговаяНакладная.СформироватьПечатнуюФормуНалоговаяНакладная(МассивОбъектов, Список, Массив,Истина,);
			// Когда эта функция в ERP станет експортной нужно убрать этот весь впременый код (
			СтруктураПоказателей = Новый Структура;
			СтруктураПоказателей.Вставить("НалоговыйДокумент",Новый Структура);
			СтруктураПоказателей.Вставить("R",Новый Массив);
			
			КодЯзыкаПечать = КодЯзыкаПечать();
			СведенияОПокупателе = СведенияОПокупателе(НалоговыйДокументОбъект,КодЯзыкаПечать);
			СведенияОПродавце = СведенияОПоставщике(НалоговыйДокументОбъект,КодЯзыкаПечать);
			
			Если НЕ Объект.Конфигурация = "SB" Тогда
				Попытка СтруктураПоказателей.НалоговыйДокумент.Вставить("HFBUY", СокрЛП(НалоговыйДокументОбъект.Контрагент.КодФилиала)); Исключение КонецПопытки;
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKS", КодИсточникаНалоговогоНомера(НалоговыйДокументОбъект.Организация.КодПоЕДРПОУ, ?(НалоговыйДокументОбъект.Организация.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),Истина,Ложь)));
				
				// DOCKING 506 + 13.04.2023
				//СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS", СокрЛП(НалоговыйДокументОбъект.КтоВыписалНалоговуюНакладную));
				ОбщМодуль = ПолучитьОбщийМодуль("ФизическиеЛицаУТ");
				ЧастиИмени = ОбщМодуль.ФамилияИмяОтчество(НалоговыйДокументОбъект.КтоВыписалНалоговуюНакладную);
				ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS", СокрЛП(ПечКтоВыписалНалоговуюНакладную));
			Иначе
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS", СокрЛП(НалоговыйДокументОбъект.КтоВыписалНалоговуюНакладную));
				// DOCKING 506 - 13.04.2023
			КонецЕсли;
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HFILL", НалоговыйДокументОбъект.Дата);
			
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBOS", НалоговыйДокументОбъект.КтоВыписалНалоговуюНакладную.КодПоДРФО);
			
			// DOCKING 459 + 22.11.2022
			//----------------------------
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь));
			Если Объект.Конфигурация = "SB" Тогда
				ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");				
			Иначе
				
				ОбщМодуль = ПолучитьСтруктуруННИзОбщегоМодуляБезКонтекста("ОбщегоНазначенияБПВызовСервера",СведенияОПродавце,СведенияОПокупателе);
				Если ОбщМодуль <> Ложь Тогда
					ОписаниеОрганизации_ИНН = ОбщМодуль.ОписаниеОрганизации_ИНН;
					ОписаниеКонтагента_ИНН = ОбщМодуль.ОписаниеКонтагента_ИНН;
					ОписаниеКонтагента_КодПоЕДРПОУ = ОбщМодуль.ОписаниеКонтагента_КодПоЕДРПОУ;
					ОписаниеКонтагента_КодПоДРФО = ОбщМодуль.ОписаниеКонтагента_КодПоДРФО;
					
					ОписаниеОрганизации_КодПоЕДРПОУ = ОбщМодуль.ОписаниеОрганизации_КодПоЕДРПОУ;
					ОписаниеОрганизации_КодПоДРФО = ОбщМодуль.ОписаниеОрганизации_КодПоДРФО;
				Иначе
					ОписаниеОрганизации_ИНН = "";
					ОписаниеКонтагента_ИНН = "";
					ОписаниеКонтагента_КодПоЕДРПОУ = "";
					ОписаниеКонтагента_КодПоДРФО = "";
					
					ОписаниеОрганизации_КодПоЕДРПОУ = "";
					ОписаниеОрганизации_КодПоДРФО = "";
				КонецЕсли;
				ОбщМодуль = ПолучитьОбщийМодуль("ОбщегоНазначенияБПВызовСервера");
				
			КонецЕсли;	
			
			
			//----------------------------
			// DOCKING 560 + 14.09.2023
			ЕслиОрганизацияЮр = ПроверкаНаЮрЛицо(НалоговыйДокументОбъект.Организация);	
			Если НалоговыйДокументОбъект.Контрагент = Неопределено Тогда
				ЕслиКонтрагентЮр = Ложь;	
			Иначе
				ЕслиКонтрагентЮр = ПроверкаНаЮрЛицо(НалоговыйДокументОбъект.Контрагент);
			КонецЕсли;
			
			// DOCKING 560 - 14.09.2023
			
			//03.02.2022 + DOCKING 369
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB", КодИсточникаНалоговогоНомера(НалоговыйДокументОбъект.Контрагент.КодПоЕДРПОУ, ?(НалоговыйДокументОбъект.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),Истина,Ложь)));
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY", НалоговыйДокументОбъект.Контрагент.Наименование);
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,    "ИНН,"               ,Ложь));
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь));
			Если Объект.Конфигурация = "SB" Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL", ОбщМодуль.ОписаниеОрганизации(СведенияОПродавце,    "ИНН,"               ,Ложь));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY", НалоговыйДокументОбъект.Контрагент.НаименованиеПолное);
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY", ОбщМодуль.ОписаниеОрганизации(СведенияОПокупателе,    "ИНН,"               ,Ложь));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", ОбщМодуль.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь));
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB", "");
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM", Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НалоговыйДокументОбъект.Номер,Истина,Истина)), 7));
			Иначе
				
			    СтруктураПоказателей.НалоговыйДокумент.Вставить("HKSEL", ОписаниеОрганизации_ИНН);
				Если НЕ НалоговыйДокументОбъект.Контрагент = Неопределено  Тогда // DOCKING 574 +- 26.09.2023
					Если НалоговыйДокументОбъект.Контрагент.ПлательщикНДС  Тогда
						СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB", КодИсточникаНалоговогоНомера(НалоговыйДокументОбъект.Контрагент.КодПоЕДРПОУ, ?(НалоговыйДокументОбъект.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),Истина,Ложь)));
						СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY", НалоговыйДокументОбъект.Контрагент.НаименованиеПолное);
						// DOCKING 459 + 22.11.2022
						//СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,    "ИНН,"               ,Ложь));
						//СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь));
						СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY", ОписаниеКонтагента_ИНН);

						// DOCKING 560 + 14.09.2023
						//СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", ОписаниеКонтагента_КодПоЕДРПОУ);
						Если ЕслиКонтрагентЮр Тогда
							СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", ОписаниеКонтагента_КодПоЕДРПОУ);
						Иначе
							СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", ОписаниеКонтагента_КодПоДРФО);
						КонецЕсли;	
						// DOCKING 560 - 14.09.2023
						
						// DOCKING 459 + 22.11.2022				
					Иначе
						СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY", "Неплатник");
						СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY", "100000000000");
						СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", "");
						СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB", "");
					КонецЕсли;
				Иначе
					
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMEBUY", "Неплатник");
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HKBUY", "100000000000");
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINBUY", "");
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HKB", "");
				КонецЕсли;	
			//03.02.2022 + DOCKING 369 
				Если ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM", Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НалоговыйДокументОбъект.Номер,Истина,Истина)), 7));
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM", Прав("       " + СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НалоговыйДокументОбъект.Номер,Истина,Истина)), 7));
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNAMESEL", НалоговыйДокументОбъект.Организация.НаименованиеПолное);
			
			
			//// филиал/спецрежим
			
			//ТекНомерФилиал = "";
			//КодСпецРежима = ?(ЗначениеЗаполнено(НалоговыйДокументОбъект.СпецРежимНалогообложения), "" + НалоговыйДокументОбъект.СпецРежимНалогообложения, " "); //или пробел или одна цифра
			//НомерФилиала  = ?(ЗначениеЗаполнено(НалоговыйДокументОбъект.Организация.Префикс), Прав("    " + Формат(Число(НалоговыйДокументОбъект.Организация.Префикс),"ЧЦ=4; ЧГ=0"), 4), "");  //число  4 символа, без лидирующих нулей
			//Если ЗначениеЗаполнено(КодСпецРежима + НомерФилиала) Тогда
			//	ТекНомерФилиал	= ТекНомерФилиал + КодСпецРежима + НомерФилиала; 
			//КонецЕсли;
			//
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM1", ""); //Лев(ТекНомерФилиал, 1)
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HNUM2", ""); //Сред(ТекНомерФилиал, 2)
			
			Если  НЕ НалоговыйДокументОбъект.ТипПричиныНевыдачиПокупателю = 0 Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HORIG1",	"Х");
			КонецЕсли;
			
			
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ," ,Ложь));
			
			// DOCKING 560 + 14.09.2023
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL", ОбщМодуль.ОписаниеОрганизации(СведенияОПродавце,    "КодПоЕДРПОУ," ,Ложь));
			Если ЕслиОрганизацияЮр Тогда
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL", ОписаниеОрганизации_КодПоЕДРПОУ);
			Иначе
				СтруктураПоказателей.НалоговыйДокумент.Вставить("HTINSEL", ОписаниеОрганизации_КодПоДРФО);
			КонецЕсли;	
			// DOCKING 560 - 14.09.2023
			
			ТипПричиныСтр = "";
			Если ЗначениеЗаполнено(НалоговыйДокументОбъект.ТипПричиныНевыдачиПокупателю) Тогда
				ТипПричиныСтр = Формат(НалоговыйДокументОбъект.ТипПричиныНевыдачиПокупателю, "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
			СтруктураПоказателей.НалоговыйДокумент.Вставить("HTYPR",	"" + ТипПричиныСтр);  //			HTYPR	"02"	Строка
			
			Если Объект.Конфигурация = "SB" Тогда
				
				Если    НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации")
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации")
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации") Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	НалоговыйДокументОбъект.ЛьготаНДС);
					// 14.06.22 + DOCKING 418
					Если ЗначениеЗаполнено(НалоговыйДокументОбъект.ЛьготаНДС) Тогда
						ЛьготаЕсть = Истина;
					Иначе
						ЛьготаЕсть = Ложь;
					КонецЕсли;	
					// 14.06.22 + DOCKING 418
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	"");	
					ЛьготаЕсть = Ложь; // 14.06.22 + DOCKING 418
				КонецЕсли;
				
				КодПризнакаСводнойНаПечать = "";
				Если НЕ (НалоговыйДокументОбъект.КодПризнакаСводной = 0)Тогда 
					КодПризнакаСводнойНаПечать = Строка(НалоговыйДокументОбъект.КодПризнакаСводной);
				ИначеЕсли  (НалоговыйДокументОбъект.Сводная = Истина) Тогда 
					Если ( НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа")
						ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС")) Тогда
						
						КодПризнакаСводнойНаПечать =  "1";
						
					ИначеЕсли (НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОблагаемыеОперации")
						ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации")) Тогда
						
						КодПризнакаСводнойНаПечать =  "4";
						
					КонецЕсли;
				КонецЕсли;
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1",КодПризнакаСводнойНаПечать);	
				
				Освобожденная = Неопределено;
				Если    НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ИтоговаяРозницаОсвобожденныеОперации")
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.ОсвобожденныеОперации") 
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.РозницаКонрагентуОсвобожденныеОперации") Тогда
					
					Освобожденная = "Без ПДВ";
					
				КонецЕсли;
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	Освобожденная);
				
				
				ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
				// 25.01.2022 + DOCKING 369
				Если НалоговыйДокументОбъект.Запасы.Количество() > 0 Тогда
					ТаблицаСуммаПоСтавкам = НалоговыйДокументОбъект.Запасы.Выгрузить();
				Иначе
					ТаблицаСуммаПоСтавкам = НалоговыйДокументОбъект.ОС.Выгрузить();
				КонецЕсли;
				// 25.01.2022 - DOCKING 369
				ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");  	
			Иначе
				// -----------------------------------------------------------------------------------------------------	
				Если    НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации")
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации")
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации") Тогда
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	НалоговыйДокументОбъект.ЛьготаНДС);
					// 14.06.22 + DOCKING 418
					Если ЗначениеЗаполнено(НалоговыйДокументОбъект.ЛьготаНДС) Тогда
						ЛьготаЕсть = Истина;
					Иначе
						ЛьготаЕсть = Ложь;
					КонецЕсли;	
					// 14.06.22 + DOCKING 418
				Иначе
					СтруктураПоказателей.НалоговыйДокумент.Вставить("R003G10S",	"");	
					ЛьготаЕсть = Ложь; // 14.06.22 + DOCKING 418
				КонецЕсли;
				
				
				
				КодПризнакаСводнойНаПечать = "";
				Если НЕ (НалоговыйДокументОбъект.КодПризнакаСводной = 0)Тогда 
					КодПризнакаСводнойНаПечать = Строка(НалоговыйДокументОбъект.КодПризнакаСводной);
				ИначеЕсли  (НалоговыйДокументОбъект.Сводная = Истина) Тогда 
					Если ( НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа")
						ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаСписаниеОС")) Тогда
						
						КодПризнакаСводнойНаПечать =  "1";
						
					ИначеЕсли (НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации")
						ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации")) Тогда
						
						КодПризнакаСводнойНаПечать =  "4";
						
					КонецЕсли;
				КонецЕсли;
				
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G1",КодПризнакаСводнойНаПечать);	
				
				Освобожденная = Неопределено;
				Если    НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации")
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации") 
					ИЛИ НалоговыйДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации") Тогда
					
					Освобожденная = "Без ПДВ";
					
				КонецЕсли;
				СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G10S",	Освобожденная);
				
				
				ТаблицаСуммаПоСтавкам = Новый ТаблицаЗначений;
				// 25.01.2022 + DOCKING 369
				Если НалоговыйДокументОбъект.Товары.Количество() > 0 Тогда
					ТаблицаСуммаПоСтавкам = НалоговыйДокументОбъект.Товары.Выгрузить();
				Иначе
					ТаблицаСуммаПоСтавкам = НалоговыйДокументОбъект.ТоварыПоДаннымПользователя.Выгрузить();
				КонецЕсли;
				// 25.01.2022 - DOCKING 369
				ТаблицаСуммаПоСтавкам.Свернуть("СтавкаНДС", "СуммаБезНДС, СуммаНДС");  	
			КонецЕсли;
			// -----------------------------------------------------------------------------------------------------------------
			Если Объект.Конфигурация = "SB" ИЛИ ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25"  Тогда
				
				Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
					
					Если СтрокаТаблицы.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("20%") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.СуммаБезНДС);
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
						
					ИначеЕсли (СтрокаТаблицы.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("7%") и  '2014-12-01' > НалоговыйДокументОбъект.Дата ) 
						или (СтрокаТаблицы.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("14%") и  '2021-03-01' > НалоговыйДокументОбъект.Дата) Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.Сумма);
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("7%") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.Сумма);
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("14%") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G14", СтрокаТаблицы.Сумма);
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G14", СтрокаТаблицы.СуммаНДС);
						
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("0%") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.Сумма);
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("Без ПДВ") Тогда
						
						// DOCKING 574 + 28.09.2023
						//СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
						Если ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.СуммаБезНДС);	
						Иначе
							СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.Сумма);
						КонецЕсли;
						// DOCKING 574 - 28.09.2023
						
					КонецЕсли;
				КонецЦикла;
			
				ВсегоСумма = 0; ИтогНДС   = 0;
				// DOCKING 574 + 28.09.2023
				//ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
				//Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
				//	ВсегоСумма = СтрокаТаблицы.Сумма;
				//	ИтогНДС    = СтрокаТаблицы.СуммаНДС;
				//КонецЦикла;
				
				Если ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					ТаблицаСуммаПоСтавкам.Свернуть("", "СуммаБезНДС, СуммаНДС");
					Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
						ВсегоСумма = СтрокаТаблицы.СуммаБезНДС;
						ИтогНДС    = СтрокаТаблицы.СуммаНДС;
					КонецЦикла;
				Иначе
					ТаблицаСуммаПоСтавкам.Свернуть("", "Сумма, СуммаНДС");
					Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
						ВсегоСумма = СтрокаТаблицы.Сумма;
						ИтогНДС    = СтрокаТаблицы.СуммаНДС;
					КонецЦикла;
				КонецЕсли;	
				// DOCKING 574 - 28.09.2023

				
			Иначе
				
				Для каждого СтрокаТаблицы Из ТаблицаСуммаПоСтавкам Цикл
					
					Если СтрокаТаблицы.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7", СтрокаТаблицы.СуммаБезНДС);
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7", СтрокаТаблицы.СуммаНДС);
						
					ИначеЕсли (СтрокаТаблицы.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7") и  '2014-12-01' > НалоговыйДокументОбъект.Дата ) 
						или (СтрокаТаблицы.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14") и  '2021-03-01' > НалоговыйДокументОбъект.Дата) Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G8", СтрокаТаблицы.СуммаБезНДС);
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G109", СтрокаТаблицы.СуммаБезНДС);
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G109", СтрокаТаблицы.СуммаНДС);
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G14", СтрокаТаблицы.СуммаБезНДС);
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G14", СтрокаТаблицы.СуммаНДС);
						
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G9", СтрокаТаблицы.СуммаБезНДС);
						
					ИначеЕсли СтрокаТаблицы.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
						ИЛИ СокрЛП(СтрокаТаблицы.СтавкаНДС)  = "Без ПДВ"
						Тогда
						
						СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G10", СтрокаТаблицы.СуммаБезНДС);
						
					КонецЕсли;
				КонецЦикла;
			
				ВсегоСумма = 0; ИтогНДС   = 0;
				ТаблицаСуммаПоСтавкам.Свернуть("", "СуммаБезНДС, СуммаНДС");
				Для каждого СтрокаТаблицы из ТаблицаСуммаПоСтавкам Цикл
					ВсегоСумма = СтрокаТаблицы.СуммаБезНДС;
					ИтогНДС    = СтрокаТаблицы.СуммаНДС;
				КонецЦикла;
			КонецЕсли;
			//-------------------------------------------------------------------------------------------------------
				
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11", ИтогНДС + ВсегоСумма);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11", ИтогНДС);
			СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11", 0);
			
			
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("R01G7",	Цел(ВремТаблица[0].СуммаБезНДС * 100) / 100);   
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("R02G11",	0);
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G11",	Цел(ВремТаблица[0].СуммаНДС * 100) / 100);  
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("R03G7",	Цел(ВремТаблица[0].СуммаНДС * 100) / 100);
			//СтруктураПоказателей.НалоговыйДокумент.Вставить("R04G11",	Цел(ВремТаблица[0].СуммаСНДС * 100) / 100);   
			// 25.01.2022 + DOCKING 369
			Если Объект.Конфигурация = "SB" Тогда
				Если НалоговыйДокументОбъект.Запасы.Количество() > 0 Тогда
					НД_Товары = НалоговыйДокументОбъект.Запасы.Выгрузить();
					НД_Товары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения,КодУКТВЭД,Цена,СтавкаНДС","Количество,СуммаНДС,Сумма");
				Иначе
					НД_Товары = НалоговыйДокументОбъект.ОС.Выгрузить();
					НД_Товары.Свернуть("ОсновноеСредство,КодУКТВЭД,ЦенаОбычная,СтавкаНДС","СуммаНДС,Сумма");
				КонецЕсли;
				
				
				
			Иначе
				Если НалоговыйДокументОбъект.Товары.Количество() > 0 Тогда
					НД_Товары = НалоговыйДокументОбъект.Товары.Выгрузить();
				Иначе
					НД_Товары = НалоговыйДокументОбъект.ТоварыПоДаннымПользователя.Выгрузить();
				КонецЕсли;
				
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
					//НД_Товары.Свернуть("Номенклатура,Характеристика,Упаковка,ЕдиницаИзмерения,КодНоменклатурыПоКлассификатору,Цена,СтавкаНДС","Количество,СуммаНДС,СуммаБезНДС");
					НД_Товары.Свернуть("Номенклатура,Характеристика,Упаковка,КодНоменклатурыПоКлассификатору,Цена,СтавкаНДС","Количество,СуммаНДС,СуммаБезНДС");
				Иначе
					НД_Товары.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения,КодНоменклатурыПоКлассификатору,Цена,СтавкаНДС","Количество,СуммаНДС,СуммаБезНДС");
				КонецЕсли;
				
			КонецЕсли;
			// 25.01.2022 - DOCKING 369
			//---------------------------------------------------
			// 08.06.2022 + DOCKING 416 
			
			
			НомСтр = 0;
			// 08.06.2022 - DOCKING 416 
			Для каждого ТекСтрока Из НД_Товары Цикл
				
				СтрокаСтруктуры =  Новый Структура;
				НомСтр = НомСтр + 1;
				// 4.02.2022 + DOCKING 369
				//СтрокаСтруктуры.Вставить("G3S",	ТекСтрока.Номенклатура);
				// 06.07.2022 + DOCKING 420
				Если ЗначениеЗаполнено(ТекСтрока.Характеристика) Тогда
					СтрокаСтруктуры.Вставить("G3S",	ТекСтрока.Номенклатура.НаименованиеПолное+" ("+ТекСтрока.Характеристика+") ");
				Иначе
					СтрокаСтруктуры.Вставить("G3S",	ТекСтрока.Номенклатура.НаименованиеПолное);
				КонецЕсли;	
				// 06.07.2022 - DOCKING 420
				// 4.02.2022 - DOCKING 369
				
				// 20.03.2022 + DOCKING 495
				Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
					
					Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
						СтрокаСтруктуры.Вставить("G4S",		СокрЛП(ТекСтрока.Упаковка));
						СтрокаСтруктуры.Вставить("G105_2S",	ТекСтрока.Упаковка.Код);
							
					Иначе
						СтрокаСтруктуры.Вставить("G4S",		СокрЛП(ТекСтрока.Номенклатура.ЕдиницаИзмерения)); 	
						СтрокаСтруктуры.Вставить("G105_2S",	ТекСтрока.Номенклатура.ЕдиницаИзмерения.Код);
					
					КонецЕсли;
				
				Иначе
				// 20.03.2022 - DOCKING 495	
				
					Если ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда 
						СтрокаСтруктуры.Вставить("G4S",		СокрЛП(ТекСтрока.ЕдиницаИзмерения)); 	
						СтрокаСтруктуры.Вставить("G105_2S",	ТекСтрока.ЕдиницаИзмерения.Код);
					ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
						СтрокаСтруктуры.Вставить("G4S",		СокрЛП(ТекСтрока.Упаковка));
						// 21.01.2022 + DOCKING 369
						Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
						// 21.01.2022 - DOCKING 369	
							СтрокаСтруктуры.Вставить("G105_2S",	ТекСтрока.Упаковка.Код);
						Иначе
							СтрокаСтруктуры.Вставить("G105_2S",	ТекСтрока.Упаковка.ЕдиницаИзмерения.Код);
						КонецЕсли;
					// 3.02.2022 + DOCKING 369	
					Иначе	
						СтрокаСтруктуры.Вставить("G4S",		СокрЛП(ТекСтрока.Номенклатура.ЕдиницаИзмерения)); 	
						СтрокаСтруктуры.Вставить("G105_2S",	ТекСтрока.Номенклатура.ЕдиницаИзмерения.Код);
					// 3.02.2022 - DOCKING 369	
					КонецЕсли;
				
				
				КонецЕсли;
				
				СтрокаСтруктуры.Вставить("G33",	"");
				СтрокаСтруктуры.Вставить("G4",	"");
				//---------------------------------------------------------------------------
				Если Объект.Конфигурация = "SB" Тогда
					
					Если ЗначениеЗаполнено(ТекСтрока.КодУКТВЭД) Тогда
						Если ТекСтрока.КодУКТВЭД.Вид  = ПредопределенноеЗначение("Перечисление.ВидыКодовДляНалоговойНакладной.КодУслуги") Тогда
							СтрокаСтруктуры.Вставить("G33",	СтрЗаменить(СокрЛП(ТекСтрока.КодУКТВЭД), " ", "")); 
						Иначе
							СтрокаСтруктуры.Вставить("G4",	СтрЗаменить(СокрЛП(ТекСтрока.КодУКТВЭД), " ", "")); 
						КонецЕсли;						
						Если ТекСтрока.КодУКТВЭД.Вид  = ПредопределенноеЗначение("Перечисление.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного") Тогда
							СтрокаСтруктуры.Вставить("G32",	1); 
						КонецЕсли;
					КонецЕсли;
					
					СтрокаСтруктуры.Вставить("G5",	ТекСтрока.Количество); 
					СтрокаСтруктуры.Вставить("G6",	ТекСтрока.Цена); 
					//
					
					Если ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("20%") Тогда
						СтрокаСтруктуры.Вставить("G008",	"20");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("14%") Тогда
						СтрокаСтруктуры.Вставить("G008",	"14");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("7%") Тогда
						СтрокаСтруктуры.Вставить("G008",	"7");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("14%") Тогда
						// 4.02.2022 + DOCKING 369
						//СтрокаСтруктуры.Вставить("G008",	"0Эксп");
						СтрокаСтруктуры.Вставить("G008",	"901");
						// 4.02.2022 - DOCKING 369
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("БЕЗ ПДВ") Тогда
						// 4.02.2022 + DOCKING 369
						//СтрокаСтруктуры.Вставить("G008",	"БезНДС");
						СтрокаСтруктуры.Вставить("G008",	"903");
						// 4.02.2022 - DOCKING 369
					КонецЕсли;
					
					// 4.02.2022 + DOCKING 369
					// 14.06.2022 + DOCKING 418				
					Если ЛьготаЕсть Тогда
						СтрокаСтруктуры.Вставить("G009",	? ( ЗначениеЗаполнено(СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)),СокрЛП(ТекСтрока.Номенклатура.КодЛьготы),"99999999")         ); // Код Льготы -
					Иначе
						СтрокаСтруктуры.Вставить("G009",	? ( ЗначениеЗаполнено(СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)),СокрЛП(ТекСтрока.Номенклатура.КодЛьготы),"")         ); // Код Льготы -
					КонецЕсли;
					// 14.06.2022 - DOCKING 418				
					//СтрокаСтруктуры.Вставить("G009",	СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)     ); // Код Льготы -
					// 4.02.2022 - DOCKING 369
					
					СтрокаСтруктуры.Вставить("G010",	Цел(ТекСтрока.Сумма * 100) / 100);  
					
				ИначеЕсли  ИмяКлиентскойБазы = "ERP25" ИЛИ ИмяКлиентскойБазы = "КУП25" Тогда
					
					Если ЗначениеЗаполнено(ТекСтрока.КодНоменклатурыПоКлассификатору) Тогда
						Если ТекСтрока.КодНоменклатурыПоКлассификатору.Вид  = ПредопределенноеЗначение("Перечисление.ВидыКодовДляНалоговойНакладной.КодУслуги") Тогда
							СтрокаСтруктуры.Вставить("G33",	СтрЗаменить(СокрЛП(ТекСтрока.КодНоменклатурыПоКлассификатору), " ", "")); 
						Иначе
							СтрокаСтруктуры.Вставить("G4",	СтрЗаменить(СокрЛП(ТекСтрока.КодНоменклатурыПоКлассификатору), " ", "")); 
						КонецЕсли;						
						Если ТекСтрока.КодНоменклатурыПоКлассификатору.Вид  = ПредопределенноеЗначение("Перечисление.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного") Тогда
							СтрокаСтруктуры.Вставить("G32",	1); 
						КонецЕсли;
					КонецЕсли;
					
					СтрокаСтруктуры.Вставить("G5",	ТекСтрока.Количество); 
					СтрокаСтруктуры.Вставить("G6",	ТекСтрока.Цена); 
					//
					
					Если ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("20%") Тогда
						СтрокаСтруктуры.Вставить("G008",	"20");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("14%") Тогда
						СтрокаСтруктуры.Вставить("G008",	"14");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("7%") Тогда
						СтрокаСтруктуры.Вставить("G008",	"7");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("14%") Тогда
						// 4.02.2022 + DOCKING 369
						//СтрокаСтруктуры.Вставить("G008",	"0Эксп");
						СтрокаСтруктуры.Вставить("G008",	"901");
						// 4.02.2022 - DOCKING 369
					ИначеЕсли ТекСтрока.СтавкаНДС  = Справочники.СтавкиНДС.НайтиПоНаименованию("БЕЗ ПДВ") Тогда
						// 4.02.2022 + DOCKING 369
						//СтрокаСтруктуры.Вставить("G008",	"БезНДС");
						СтрокаСтруктуры.Вставить("G008",	"903");
						// 4.02.2022 - DOCKING 369
					КонецЕсли;
					
					// 4.02.2022 + DOCKING 369
					// 14.06.2022 + DOCKING 418				
					Если ЛьготаЕсть Тогда
						СтрокаСтруктуры.Вставить("G009",	? ( ЗначениеЗаполнено(СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)),СокрЛП(ТекСтрока.Номенклатура.КодЛьготы),"99999999")         ); // Код Льготы -
					Иначе
						СтрокаСтруктуры.Вставить("G009",	? ( ЗначениеЗаполнено(СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)),СокрЛП(ТекСтрока.Номенклатура.КодЛьготы),"")         ); // Код Льготы -
					КонецЕсли;
					// 14.06.2022 - DOCKING 418				
					//СтрокаСтруктуры.Вставить("G009",	СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)     ); // Код Льготы -
					// 4.02.2022 - DOCKING 369
					
					СтрокаСтруктуры.Вставить("G010",	Цел(ТекСтрока.СуммаБезНДС * 100) / 100);  
					
				Иначе
					
					Если ЗначениеЗаполнено(ТекСтрока.КодНоменклатурыПоКлассификатору) Тогда
						Если ТекСтрока.КодНоменклатурыПоКлассификатору.Вид  = ПредопределенноеЗначение("Перечисление.ВидыКодовДляНалоговойНакладной.КодУслуги") Тогда
							СтрокаСтруктуры.Вставить("G33",	СтрЗаменить(СокрЛП(ТекСтрока.КодНоменклатурыПоКлассификатору), " ", "")); 
						Иначе
							СтрокаСтруктуры.Вставить("G4",	СтрЗаменить(СокрЛП(ТекСтрока.КодНоменклатурыПоКлассификатору), " ", "")); 
						КонецЕсли;						
						Если ТекСтрока.КодНоменклатурыПоКлассификатору.Вид  = ПредопределенноеЗначение("Перечисление.ВидыКодовДляНалоговойНакладной.КодТовараИмпортированного") Тогда
							СтрокаСтруктуры.Вставить("G32",	1); 
						КонецЕсли;
					КонецЕсли;
					
					СтрокаСтруктуры.Вставить("G5",	ТекСтрока.Количество); 
					СтрокаСтруктуры.Вставить("G6",	ТекСтрока.Цена); 
					//
					
					Если ТекСтрока.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда
						СтрокаСтруктуры.Вставить("G008",	"20");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14") Тогда
						СтрокаСтруктуры.Вставить("G008",	"14");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7") Тогда
						СтрокаСтруктуры.Вставить("G008",	"7");
						СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
					ИначеЕсли ТекСтрока.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда
						// 4.02.2022 + DOCKING 369
							//СтрокаСтруктуры.Вставить("G008",	"0Эксп");
							СтрокаСтруктуры.Вставить("G008",	"901");
						// 4.02.2022 - DOCKING 369
					ИначеЕсли ТекСтрока.СтавкаНДС  = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") 
						ИЛИ СокрЛП(ТекСтрока.СтавкаНДС)  = "Без ПДВ"
						Тогда
						// 4.02.2022 + DOCKING 369
						//СтрокаСтруктуры.Вставить("G008",	"БезНДС");
						СтрокаСтруктуры.Вставить("G008",	"903");
						// 4.02.2022 - DOCKING 369
					КонецЕсли;

					// 4.02.2022 + DOCKING 369
					// 14.06.2022 + DOCKING 418				
					Если ЛьготаЕсть Тогда
						СтрокаСтруктуры.Вставить("G009",	? ( ЗначениеЗаполнено(СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)),СокрЛП(ТекСтрока.Номенклатура.КодЛьготы),"99999999")         ); // Код Льготы -
					Иначе
						СтрокаСтруктуры.Вставить("G009",	? ( ЗначениеЗаполнено(СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)),СокрЛП(ТекСтрока.Номенклатура.КодЛьготы),"")         ); // Код Льготы -
					КонецЕсли;
					// 14.06.2022 - DOCKING 418				
					//СтрокаСтруктуры.Вставить("G009",	СокрЛП(ТекСтрока.Номенклатура.КодЛьготы)     ); // Код Льготы -
					// 4.02.2022 - DOCKING 369
					
					СтрокаСтруктуры.Вставить("G010",	Цел(ТекСтрока.СуммаБезНДС * 100) / 100);  
					
				КонецЕсли;
				//----------------------------------------------------------------------------------------------------------------
				//СтрокаСтруктуры.Вставить("G011",	ТекСтрока.СуммаНДС);    	
				//СтрокаСтруктуры.Вставить("G11_10",	Цел(ТекСтрока.СуммаНДС * 100) / 100);
				//СтрокаСтруктуры.G009  		= ОбластьМакета.Параметры.КодЛьготы;
				//СтрокаСтруктуры.G011  		= ОбластьМакета.Параметры.КодСХ;
				//СтрокаСтруктуры.G11_10  		= ОбластьМакета.Параметры.СуммаНДС6зн;
				
				// 08.06.2022 + DOCKING 416 
				//СтрокаСтруктуры.Вставить("ROWNUM",	ТекСтрока.НомерСтроки); 
				СтрокаСтруктуры.Вставить("ROWNUM",	НомСтр); 
				// 08.06.2022 - DOCKING 416 
				
				СтруктураПоказателей.R.Добавить(СтрокаСтруктуры);
			КонецЦикла;
			
			
			Возврат СтруктураПоказателей;
		
		Иначе
			
			СтруктураПечати = Документы.НалоговаяНакладная.ПечатьДокумента(МассивОбъектов, Список, Массив,Истина,);
			// 14.06.2022 + DOCKING 418
				// 14.07.2022 + DOCKING 428			
			Если НЕ Документ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки") Тогда
				// 14.07.2022 - DOCKING 428	
				Если ЗначениеЗаполнено(СтруктураПечати.НалоговыйДокумент.R003G10S) Тогда
					ЛьготаЕсть = Истина;
				Иначе
					ЛьготаЕсть = Ложь;
				КонецЕсли;
			Иначе
				ЛьготаЕсть = Ложь;
			КонецЕсли;	
			// 14.06.2022 - DOCKING 418
			Если ИспользоватьДанныеЗЦ Тогда
				
				
				//08.02.2022 + DOCKING 369
				ТЗ_ТабличнаяЧасть = Новый ТаблицаЗначений;
				ТЗ_Товары = Новый ТаблицаЗначений;
				ТЗ_Услуги = Новый ТаблицаЗначений;
				
				ТЗ_ТабличнаяЧасть.Колонки.Добавить("G3S",,"Наименование полное");
				ТЗ_ТабличнаяЧасть.Колонки.Добавить("G009",,"Код Льготы");
				ТЗ_ТабличнаяЧасть.Колонки.Добавить("ROWNUM",,"Номер строки НН");
				
				// 08.06.2022 + DOCKING 416 
				ТЗ_Товары = НалоговыйДокументОбъект.Товары.Выгрузить();
				//ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура");     // 459
				ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура,Количество,Цена,Сумма,СуммаНДС");
				//----------------------------------------------------	
				// 13.09.2022 + DOCKING 441 
				//ТЗ_Товары.Сортировать("НомерСтрокиНН ВОЗР");
				// 13.09.2022 - DOCKING 441
				//----------------------------------------------------
				//Для Каждого Эл ИЗ НалоговыйДокументОбъект.Товары Цикл
				// 08.06.2022 - DOCKING 416
				Для Каждого Эл ИЗ ТЗ_Товары Цикл				
					НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
					НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
					Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
						КЛ = Эл.Номенклатура.КодЛьготы;
					Иначе
						Если ЛьготаЕсть Тогда
							КЛ = "99999999";
						Иначе
							КЛ = "";							
						КонецЕсли;	
					КонецЕсли;	
					НоваяСтрока.G009 = КЛ;
					НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;	
				КонецЦикла;
				// 08.06.2022 + DOCKING 416 
				ТЗ_Услуги = НалоговыйДокументОбъект.Услуги.Выгрузить();
				//ТЗ_Услуги.Свернуть("НомерСтрокиНН,Номенклатура,Содержание"); // 459
				ТЗ_Услуги.Свернуть("НомерСтрокиНН,Номенклатура,Содержание,Количество,Цена,Сумма,СуммаНДС");
				// 08.06.2022 - DOCKING 416 
				//----------------------------------------------------	
				// 13.09.2022 + DOCKING 441 
				//ТЗ_Услуги.Сортировать("НомерСтрокиНН ВОЗР");
				// 13.09.2022 - DOCKING 441
				//----------------------------------------------------
				Для Каждого Эл ИЗ ТЗ_Услуги Цикл
					НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
					// DOCKING 409 + 11.05.2022
					//НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
					НоваяСтрока.G3S = Эл.Содержание;
					// DOCKING 409 - 11.05.2022
					
					Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
						КЛ = Эл.Номенклатура.КодЛьготы;
					Иначе
						Если ЛьготаЕсть Тогда
							КЛ = "99999999";
						Иначе
							КЛ = "";							
						КонецЕсли;
					КонецЕсли;	
					НоваяСтрока.G009 = КЛ;
					НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;
				КонецЦикла;
				
				ТЗ_ТабличнаяЧасть.Сортировать("ROWNUM ВОЗР");
				ТЗ_ТабличнаяЧасть.Свернуть("ROWNUM,G3S,G009");
				
				ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G3S");
				СтруктураПечати.НалоговыйДокументЗЦ.R.ЗагрузитьКолонку(ЗначенияКолонки, "G3S");			
				
				ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G009");
				СтруктураПечати.НалоговыйДокументЗЦ.R.ЗагрузитьКолонку(ЗначенияКолонки, "G009");
				//08.02.2022 - DOCKING 369
				
				R = ПреобразоватьТаблицуЗначенийВМассив(СтруктураПечати.НалоговыйДокументЗЦ.R);
				СтруктураПечати.НалоговыйДокумент.Удалить("R");
				СтруктураПечати.НалоговыйДокументЗЦ.Удалить("R");
				СтруктураПечати.Вставить("R",R);
			Иначе
				
				//08.02.2022 + DOCKING 369
				ТЗ_ТабличнаяЧасть = Новый ТаблицаЗначений;
				ТЗ_Товары = Новый ТаблицаЗначений;
				ТЗ_Услуги = Новый ТаблицаЗначений;
				
				ТЗ_ТабличнаяЧасть.Колонки.Добавить("G3S",,"Наименование полное");
				ТЗ_ТабличнаяЧасть.Колонки.Добавить("G009",,"Код Льготы");
				ТЗ_ТабличнаяЧасть.Колонки.Добавить("ROWNUM",,"Номер строки НН");
				
				// 08.06.2022 + DOCKING 416 
				ТЗ_Товары = НалоговыйДокументОбъект.Товары.Выгрузить();
				//ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура");  // 459
				ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура,Количество,Цена,Сумма,СуммаНДС");
				//----------------------------------------------------	
				// 13.09.2022 + DOCKING 441 
				//ТЗ_Товары.Сортировать("НомерСтрокиНН ВОЗР");
				// 13.09.2022 - DOCKING 441
				//----------------------------------------------------
				//Для Каждого Эл ИЗ НалоговыйДокументОбъект.Товары Цикл
				// 08.06.2022 - DOCKING 416 
				Для Каждого Эл ИЗ ТЗ_Товары Цикл	
					НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
					НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
					Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
						КЛ = Эл.Номенклатура.КодЛьготы;
					Иначе
						Если ЛьготаЕсть Тогда
							КЛ = "99999999";
						Иначе
							КЛ = "";							
						КонецЕсли;
					КонецЕсли;	
					НоваяСтрока.G009 = КЛ;
					НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;
				КонецЦикла;
				
				// 08.06.2022 + DOCKING 416 
				ТЗ_Услуги = НалоговыйДокументОбъект.Услуги.Выгрузить();
				//ТЗ_Услуги.Свернуть("НомерСтрокиНН,Номенклатура,Содержание");
				ТЗ_Услуги.Свернуть("НомерСтрокиНН,Номенклатура,Содержание,Количество,Цена,Сумма,СуммаНДС");
				// 08.06.2022 - DOCKING 416 
				//----------------------------------------------------	
				// 13.09.2022 + DOCKING 441 
				//ТЗ_Услуги.Сортировать("НомерСтрокиНН ВОЗР");
				// 13.09.2022 - DOCKING 441
				//----------------------------------------------------
				Для Каждого Эл ИЗ ТЗ_Услуги Цикл
					НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
					// DOCKING 409 + 11.05.2022
					//НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
					НоваяСтрока.G3S = Эл.Содержание;
					// DOCKING 409 - 11.05.2022
					Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
						КЛ = Эл.Номенклатура.КодЛьготы
					Иначе
						Если ЛьготаЕсть Тогда
							КЛ = "99999999";
						Иначе
							КЛ = "";							
						КонецЕсли;
					КонецЕсли;	
					НоваяСтрока.G009 = КЛ;
					НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;
				КонецЦикла;
				
				ТЗ_ТабличнаяЧасть.Сортировать("ROWNUM ВОЗР");
				ТЗ_ТабличнаяЧасть.Свернуть("ROWNUM,G3S,G009");
				
				ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G3S");
				СтруктураПечати.НалоговыйДокумент.R.ЗагрузитьКолонку(ЗначенияКолонки, "G3S");			
				
				ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G009");
				СтруктураПечати.НалоговыйДокумент.R.ЗагрузитьКолонку(ЗначенияКолонки, "G009");
				//08.02.2022 - DOCKING 369
				
				R = ПреобразоватьТаблицуЗначенийВМассив(СтруктураПечати.НалоговыйДокумент.R);
				СтруктураПечати.НалоговыйДокумент.Удалить("R");
				Если СтруктураПечати.Свойство("НалоговыйДокументЗЦ") Тогда
					СтруктураПечати.НалоговыйДокументЗЦ.Удалить("R");
				КонецЕсли; 
				СтруктураПечати.Вставить("R",R);
			КонецЕсли; 
			
		КонецЕсли; 	
		
		Возврат СтруктураПечати;
		
	ИначеЕсли ТипДок = "Приложение 2" 
		//14.01.2022 + DOCKING 369
		ИЛИ (ТипДок = "Пусто" И ТипСтрока = "Приложение 2")		
		//14.01.2022 - DOCKING 369
		Тогда 
		СтруктураПечати = Новый Структура;
		Если  Объект.Конфигурация = "ERP" 
			//14.01.2022 + DOCKING 369
			ИЛИ Объект.Конфигурация = "КУП"		
			//14.01.2022 - DOCKING 369
			ИЛИ Объект.Конфигурация = "SB"		
			Тогда
			
			Если Объект.Конфигурация = "SB" Тогда
				
				ПарВывод = Новый Структура;
				
				ПарВывод.Вставить("ДоступнаПечатьПоКомплектно",Ложь);
				ПарВывод.Вставить("ЗаголовокФормы","");
				ПарВывод.Вставить("КодЯзыка","uk");
				
				Список2 = Новый Структура;
				Список2.Вставить("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы",Истина);
				
				ТолькоФормироватьСтруктуруПоказателейПечатнойФормы = Истина;
				//---------------------------------------------------------------------------	
				СтруктураПечати = Новый ТаблицаЗначений;
				
				СтруктураПечати.Колонки.Добавить("ИмяМакета",,"Имя макета");
				СтруктураПечати.Колонки.Добавить("ИмяВРЕГ",,"Имя ВРЕГ");
				СтруктураПечати.Колонки.Добавить("ТабличныйДокумент",,"ТабличныйДокумент");
				СтруктураПечати.Колонки.Добавить("СинонимМакета",,"Синоним Макета");
				СтруктураПечати.Колонки.Добавить("Картинка",,"Картинка");
				СтруктураПечати.Колонки.Добавить("ПолныйПутьКМакету",,"Полный Путь К Макету");
				СтруктураПечати.Колонки.Добавить("ИмяФайлаПечатнойФормы",,"Имя Файла Печатной Формы");
				
				НоваяСтрока = СтруктураПечати.Добавить();
				НоваяСтрока.ИмяМакета = "Приложение2КНалоговойНакладной";
				НоваяСтрока.ИмяВРЕГ = "ПРИЛОЖЕНИЕ2КНАЛОГОВОЙНАКЛАДНОЙ";
				//---------------------------------------------------------------------------
				
				Документы.Приложение2КНалоговойНакладной.Печать(МассивОбъектов,Список2, СтруктураПечати,ТолькоФормироватьСтруктуруПоказателейПечатнойФормы,ПарВывод);
				СтруктураПечати = СтруктураПечати[0].ТабличныйДокумент;				
			Иначе	
			    СтруктураПечати = Документы.Приложение2КНалоговойНакладной.СформироватьПечатнуюФормуПриложение2КНалоговойНакладной(МассивОбъектов,Список, Массив,,Истина);
			КонецЕсли;	
			
			
			// DOCKING 506 + 13.04.2023
			Если НЕ Объект.Конфигурация = "SB" Тогда
				//СтруктураПоказателей.НалоговыйДокумент.Вставить("HBOS", СокрЛП(НалоговыйДокументОбъект.КтоВыписалНалоговуюНакладную));
				ОбщМодуль = ПолучитьОбщийМодуль("ФизическиеЛицаУТ");
				ЧастиИмени = ОбщМодуль.ФамилияИмяОтчество(НалоговыйДокументОбъект.КтоВыписалНалоговуюНакладную);
				ПечКтоВыписалНалоговуюНакладную = СокрЛП(ЧастиИмени.Имя) + " " + ВРег(СокрЛП(ЧастиИмени.Фамилия)); 
				СтруктураПечати.НалоговыйДокумент.Вставить("HBOS", СокрЛП(ПечКтоВыписалНалоговуюНакладную));
				
			Иначе
				СтруктураПечати.НалоговыйДокумент.Вставить("HBOS", СокрЛП(НалоговыйДокументОбъект.КтоВыписалНалоговуюНакладную));
			КонецЕсли;
			// DOCKING 506 - 13.04.2023
			
			// 14.06.2022 + DOCKING 418 			
			Если ЗначениеЗаполнено(СтруктураПечати.налоговыйДокумент.R003G10S) Тогда
				ЛьготаЕсть = Истина;
			Иначе
				ЛьготаЕсть = Ложь;
			КонецЕсли;
			// 14.06.2022 - DOCKING 418
			
			//08.01.2024 + DOCKING 666 
			//03.02.2022 + DOCKING 369
			//Если НЕ Объект.Конфигурация = "SB" Тогда
			//	Если НЕ НалоговыйДокументОбъект.Контрагент.ПлательщикНДС  Тогда
			//		СтруктураПечати.НалоговыйДокумент.Вставить("HNAMESEL", "Неплатник");
			//		СтруктураПечати.НалоговыйДокумент.Вставить("HKSEL", "100000000000");
			//		СтруктураПечати.НалоговыйДокумент.Вставить("HTINSEL", "");
			//		СтруктураПечати.НалоговыйДокумент.Вставить("HKS", "");
			//	КонецЕсли;
			////03.02.2022 + DOCKING 369
			//КонецЕсли;
			//08.01.2024 - DOCKING 666 
			
			//07.02.2022 + DOCKING 369
			ТЗ_ТабличнаяЧасть = Новый ТаблицаЗначений;
			ТЗ_Товары = Новый ТаблицаЗначений;
			ТЗ_Товары2 = Новый ТаблицаЗначений;
			
			ТЗ_ТабличнаяЧасть.Колонки.Добавить("G3S",,"Наименование полное");
			ТЗ_ТабличнаяЧасть.Колонки.Добавить("G009",,"Код Льготы");
			ТЗ_ТабличнаяЧасть.Колонки.Добавить("ROWNUM",,"Номер строки НН");
			
			// 08.06.2022 + DOCKING 416 
			Если Объект.Конфигурация = "SB" Тогда
				ТЗ_Товары = НалоговыйДокументОбъект.Запасы.Выгрузить();
				//ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура,Характеристика"); // 01.12.2022 + DOCKING 467
				ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура,Характеристика,ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС");
			Иначе
				ТЗ_Товары = НалоговыйДокументОбъект.Товары.Выгрузить();				
				//ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура,Характеристика"); // 01.12.2022 + DOCKING 467
				ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура,Характеристика,Количество,Цена,СуммаБезНДС,СуммаНДС");
			КонецЕсли;
			
			
			//----------------------------------------------------	
			// 13.09.2022 + DOCKING 441 
			//ТЗ_Товары.Сортировать("НомерСтрокиНН ВОЗР");
			// 13.09.2022 - DOCKING 441
			//----------------------------------------------------
			//Для Каждого Эл ИЗ НалоговыйДокументОбъект.Товары Цикл
			// 08.06.2022 - DOCKING 416 
			Для Каждого Эл ИЗ ТЗ_Товары Цикл
				НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
				// 06.07.2022 + DOCKING 420
				//НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
				Если ЗначениеЗаполнено(Эл.Характеристика) Тогда
					НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное + "("+Эл.Характеристика+")";						
				Иначе
					НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
				КонецЕсли;
				// 06.07.2022 - DOCKING 420
				Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
					КЛ = Эл.Номенклатура.КодЛьготы
				Иначе
					Если ЛьготаЕсть Тогда
						КЛ = "99999999";
					Иначе
						КЛ = "";							
					КонецЕсли;
				КонецЕсли;	
				НоваяСтрока.G009 = КЛ;
				НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;
			КонецЦикла;
			// 08.06.2022 + DOCKING 416
			Если Объект.Конфигурация = "SB" Тогда
				ТЗ_Товары2 = НалоговыйДокументОбъект.ОС.Выгрузить();
				//ТЗ_Товары2.Свернуть("НомерСтрокиНН,ОсновноеСредство"); // 01.12.2022 + DOCKING 467
				ТЗ_Товары2.Свернуть("НомерСтрокиНН,ОсновноеСредство,КодУКТВЭД,ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС");
			Иначе
				ТЗ_Товары2 = НалоговыйДокументОбъект.ТоварыПоДаннымПользователя.Выгрузить();
				//ТЗ_Товары2.Свернуть("НомерСтрокиНН,Номенклатура");     // 01.12.2022 + DOCKING 467
				ТЗ_Товары2.Свернуть("НомерСтрокиНН,Номенклатура,Количество,Цена,СуммаБезНДС,СуммаНДС");
			КонецЕсли;	
			
			//----------------------------------------------------	
			// 13.09.2022 + DOCKING 441 
			//ТЗ_Товары2.Сортировать("НомерСтрокиНН ВОЗР");
			// 13.09.2022 - DOCKING 441
			//----------------------------------------------------
			//Для Каждого Эл ИЗ НалоговыйДокументОбъект.Товары Цикл
			// 08.06.2022 - DOCKING 416
			Для Каждого Эл ИЗ ТЗ_Товары2 Цикл
				НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
				НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
				Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
					КЛ = Эл.Номенклатура.КодЛьготы
				Иначе
					Если ЛьготаЕсть Тогда
						КЛ = "99999999";
					Иначе
						КЛ = "";							
					КонецЕсли;
				КонецЕсли;	
				НоваяСтрока.G009 = КЛ;
				НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;	
			КонецЦикла;
			
			ТЗ_ТабличнаяЧасть.Сортировать("ROWNUM ВОЗР");
			ТЗ_ТабличнаяЧасть.Свернуть("ROWNUM,G3S,G009");
			
			ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G3S");
			СтруктураПечати.НалоговыйДокумент.R.ЗагрузитьКолонку(ЗначенияКолонки, "G3S");			
			
			ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G009");
			СтруктураПечати.НалоговыйДокумент.R.ЗагрузитьКолонку(ЗначенияКолонки, "G009");
				
			//07.02.2022 - DOCKING 369
			
		Иначе
			
			  СтруктураПечати = Документы.Приложение2КНалоговойНакладной.ПечатьПриложения2КНалоговойНакладной(МассивОбъектов,Список, Массив,,Истина);
			
			// 14.06.2022 + DOCKING 418
				// 14.07.2022 + DOCKING 428			
			Если НЕ Документ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговаяНакладная.СводнаяНаПревышениеБазыНадЦенойПоставки") Тогда
				// 14.07.2022 - DOCKING 428	
				Если ЗначениеЗаполнено(СтруктураПечати.НалоговыйДокумент.R003G10S) Тогда
					ЛьготаЕсть = Истина;
				Иначе
					ЛьготаЕсть = Ложь;
				КонецЕсли;
			Иначе
				ЛьготаЕсть = Ложь;
			КонецЕсли;	
			// 14.06.2022 - DOCKING 418
			//Если НалоговыйДокументОбъект.Контрагент.ПлательщикНДС  Тогда
			//	СтруктураПечати.НалоговыйДокумент.Вставить("HKB", КодИсточникаНалоговогоНомера(НалоговыйДокументОбъект.Контрагент.КодПоЕДРПОУ, ?(НалоговыйДокументОбъект.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),Истина,Ложь)));
				//СтруктураПечати.НалоговыйДокумент.Вставить("HNAMEBUY", НалоговыйДокументОбъект.Контрагент.Наименование);
				//СтруктураПечати.НалоговыйДокумент.Вставить("HKBUY", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,    "ИНН,"               ,Ложь));
			//	СтруктураПечати.НалоговыйДокумент.Вставить("HTINBUY", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "КодПоЕДРПОУ," ,Ложь));
			//Иначе
			//	СтруктураПечати.НалоговыйДокумент.Вставить("HNAMEBUY", "Неплатник");
			//	СтруктураПечати.НалоговыйДокумент.Вставить("HKBUY", "100000000000");
			//	СтруктураПечати.НалоговыйДокумент.Вставить("HTINBUY", "");
			//	СтруктураПечати.НалоговыйДокумент.Вставить("HKB", "");
			//КонецЕсли;

			
			//07.02.2022 + DOCKING 369
			ТЗ_ТабличнаяЧасть = Новый ТаблицаЗначений;
			ТЗ_Товары = Новый ТаблицаЗначений;
			ТЗ_Услуги = Новый ТаблицаЗначений;
			
			ТЗ_ТабличнаяЧасть.Колонки.Добавить("G3S",,"Наименование полное");
			ТЗ_ТабличнаяЧасть.Колонки.Добавить("G009",,"Код Льготы");
			ТЗ_ТабличнаяЧасть.Колонки.Добавить("ROWNUM",,"Номер строки НН");
			
			// 08.06.2022 + DOCKING 416 
			ТЗ_Товары = НалоговыйДокументОбъект.Товары.Выгрузить();
			
			// 01.12.2022 + DOCKING 467
			//ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура");
			ТЗ_Товары.Свернуть("НомерСтрокиНН,Номенклатура,ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС");
			// 01.12.2022 - DOCKING 467
			//----------------------------------------------------	
			// 13.09.2022 + DOCKING 441 
			//ТЗ_Товары.Сортировать("НомерСтрокиНН ВОЗР");
			// 13.09.2022 - DOCKING 441
			//----------------------------------------------------
			//Для Каждого Эл ИЗ НалоговыйДокументОбъект.Товары Цикл
			// 08.06.2022 - DOCKING 416
			Для Каждого Эл ИЗ ТЗ_Товары Цикл
				НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
				НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
				Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
					КЛ = Эл.Номенклатура.КодЛьготы
				Иначе
					Если ЛьготаЕсть Тогда
						КЛ = "99999999";
					Иначе
						КЛ = "";							
					КонецЕсли;
				КонецЕсли;	
				НоваяСтрока.G009 = КЛ;
				НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;
			КонецЦикла;
			// 08.06.2022 + DOCKING 416 
			ТЗ_Услуги = НалоговыйДокументОбъект.Услуги.Выгрузить();
			// 01.12.2022 + DOCKING 467
			//ТЗ_Услуги.Свернуть("НомерСтрокиНН,Номенклатура,Содержание");
			ТЗ_Услуги.Свернуть("НомерСтрокиНН,Номенклатура,Содержание,ИзменениеКоличества,ИзменениеЦены,ИзменениеСуммы,ИзменениеСуммыНДС");
			// 01.12.2022 - DOCKING 467
			//----------------------------------------------------	
			// 13.09.2022 + DOCKING 441 
			//ТЗ_Услуги.Сортировать("НомерСтрокиНН ВОЗР");
			// 13.09.2022 - DOCKING 441
			//----------------------------------------------------
			//Для Каждого Эл ИЗ НалоговыйДокументОбъект.Услуги Цикл
			// 08.06.2022 - DOCKING 416
			Для Каждого Эл ИЗ ТЗ_Услуги Цикл
				НоваяСтрока = ТЗ_ТабличнаяЧасть.Добавить();
				// DOCKING 409 + 11.05.2022
					//НоваяСтрока.G3S = Эл.Номенклатура.НаименованиеПолное;
				НоваяСтрока.G3S = Эл.Содержание;
					// DOCKING 409 - 11.05.2022
				Если ЗначениеЗаполнено(Эл.Номенклатура.КодЛьготы) Тогда
					КЛ = Эл.Номенклатура.КодЛьготы
				Иначе
					Если ЛьготаЕсть Тогда
						КЛ = "99999999";
					Иначе
						КЛ = "";							
					КонецЕсли;
				КонецЕсли;	
				НоваяСтрока.G009 = КЛ;
				НоваяСтрока.ROWNUM = Эл.НомерСтрокиНН;
			КонецЦикла;
			
			//ТЗ_ТабличнаяЧасть.Сортировать("ROWNUM ВОЗР");
			ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G3S");
			СтруктураПечати.НалоговыйДокумент.R.ЗагрузитьКолонку(ЗначенияКолонки, "G3S");			
			
			ЗначенияКолонки = ТЗ_ТабличнаяЧасть.ВыгрузитьКолонку("G009");
			СтруктураПечати.НалоговыйДокумент.R.ЗагрузитьКолонку(ЗначенияКолонки, "G009");
				
		//07.02.2022 - DOCKING 369
			
		КонецЕсли;	
		
		
		
		R = ПреобразоватьТаблицуЗначенийВМассив(СтруктураПечати.НалоговыйДокумент.R);
		СтруктураПечати.НалоговыйДокумент.Удалить("R");
		СтруктураПечати.Вставить("R",R);
		
		Возврат СтруктураПечати;
	КонецЕсли;
	     
КонецФункции

&НаСервере	
Функция ПолучитьРеквизит(Ссылка, Реквизит) Экспорт
    Возврат Ссылка[Реквизит];
КонецФункции

&НаКлиенте
Процедура РегОтчетОрганизацияПриИзменении(Элемент)
	
	РегОтчКодПоЕДРПОУ = РегОтчетОрганизацияПриИзмененииНаСервере();
	
	Если РегОтчКодПоЕДРПОУ = Неопределено Тогда
		Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+РегОтчетОрганизация+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+РегОтчетОрганизация+"'"));
		РегОтчКодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
	КонецЕсли;      
	
КонецПроцедуры

&НаКлиенте
Функция ВыборОрг()
	
	спОрг = Новый Массив;	
	медокОрг = ДатьОргМЕДок();
	орги = ВыбратьОрганизации();
	Пока орги.Следующий() Цикл
		сОрг = орги.Ссылка.ПолучитьОбъект();
		Если КодЕДРПОУ(сОрг) = медокОрг Тогда
			спОрг.Добавить(сОрг);
		КонецЕсли;
	КонецЦикла;
	
	Возврат спОрг;
	
КонецФункции	

&НаСервере
Функция ВыбратьОрганизации()
	
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления"; 
	
	Возврат Запрос.Выполнить().Выбрать(); 
	
КонецФункции

&НаКлиенте
Процедура Таб4ПриИзменении(Элемент)
	Элементы.Таб41.Доступность = Таб4;
	Элементы.Таб42.Доступность = Таб4;
	Элементы.Таб43.Доступность = Таб4;
	Элементы.Таб44.Доступность = Таб4;
	Элементы.Таб45.Доступность = Таб4;
	Элементы.Таб45.Доступность = Таб4;
	Элементы.Таб46.Доступность = Таб4;
	Элементы.Таб47.Доступность = Таб4;
	Элементы.Таб48.Доступность = Таб4;
	Элементы.Таб49.Доступность = Таб4;
КонецПроцедуры

&НаКлиенте
Процедура Таб7ПриИзменении(Элемент)
	Элементы.Таб71.Доступность = Таб7;
КонецПроцедуры

&НаКлиенте
Процедура Таб4ФизПриИзменении(Элемент)
	Элементы.Таб41ф.Доступность = Таб4ф;
	Элементы.Таб44ф.Доступность = Таб4ф;
	Элементы.Таб45ф.Доступность = Таб4ф;
	Элементы.Таб45ф.Доступность = Таб4ф;
	Элементы.Таб46ф.Доступность = Таб4ф;
	Элементы.Таб47ф.Доступность = Таб4ф;
КонецПроцедуры

&НаКлиенте
Процедура Таб5ПриИзменении(Элемент)
	Элементы.Таб51.Доступность = Таб5;
	Элементы.Таб52.Доступность = Таб5;
	Элементы.Таб54.Доступность = Таб5;
КонецПроцедуры

&НаКлиенте
Процедура Таб6ПриИзменении(Элемент)
	Элементы.Таб61.Доступность = Таб6;
	Элементы.Таб62.Доступность = Таб6;
	Элементы.Таб63.Доступность = Таб6;

КонецПроцедуры

&НаКлиенте
Процедура Таб7фПриИзменении(Элемент)
	Элементы.Таб71ф.Доступность = Таб7ф;
КонецПроцедуры

&НаСервере
Функция ПроверкаНаЮрЛицо(ВыбраннаяОрганизация)
	Возврат ВыбраннаяОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
КонецФункции

&НаКлиенте
Процедура СкрытьВсеПриложения();
	
	Для Инд = 1 По 15 Цикл
		Элементы["Приложения_таб" + Инд].Видимость = Ложь;
		Элементы["Приложения_таб" + Инд].Заголовок = "";	
	КонецЦикла; 
	
	Элементы.ПриложенияВсеФлажки.Видимость = Ложь;
	Элементы.ПриложенияБезФлажков.Видимость = Ложь;

	Элементы.Группа5.Видимость = Ложь;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимыеПриложенияЕСВ()
	
	 Элементы.Приложения_таб1.Видимость = Истина;
	 Элементы.Приложения_таб1.Заголовок = "Додаток 1 (Д1) Відомості про нарахування заробітної плати (доходу, грошового забезпечення) застрахованим особам";
	 
	 Если ТипРасчета = "Справочный" Тогда
		 Элементы.Приложения_таб2.Видимость = Ложь;
	 Иначе
		 Элементы.Приложения_таб2.Видимость = Истина;
		 Элементы.Приложения_таб2.Заголовок = "Додаток 4 (ДФ) Відомості про суми нарахованого доходу, утриманого та сплаченого податку на доходи фізичних осіб та військового збору";
	 КонецЕсли;
	
	 Элементы.Приложения_таб3.Видимость = Истина;
	 Элементы.Приложения_таб3.Заголовок = "Додаток 5 (Д5) Відомості про трудові відносини осіб та період проходження військової служби";
	 
	 Элементы.Приложения_таб4.Видимость = Истина;
	 Элементы.Приложения_таб4.Заголовок = "Додаток 6 (Д6) Відомості про наявність підстав для обліку стажу окремим категоріям осіб відповідно до законодавства";	
	 
	 Элементы.ПриложенияВсеФлажки.Видимость = Истина;
	 Элементы.ПриложенияБезФлажков.Видимость = Истина;
	 
	 Элементы.Группа5.Видимость = Истина;
	 
 КонецПроцедуры
 
&НаКлиенте
Процедура ВидимыеПриложенияЕСВ_стар()
	
	 Элементы.Приложения_таб1.Видимость = Истина;
	 Элементы.Приложения_таб1.Заголовок = "Таблиця 1. Нарахування єдиного внеску";
	 
	 Элементы.Приложения_таб5.Видимость = Истина;
	 Элементы.Приложения_таб5.Заголовок = "Таблиця 5. Відомості про трудові відносини осіб та період проходження військової служби";
	 
	 Элементы.Приложения_таб6.Видимость = Истина;
	 Элементы.Приложения_таб6.Заголовок = "Таблиця 6. Відомості про нарахування заробітної плати (доходу, грошового забезпечення) застрахованим особам";
	 
	 Элементы.Приложения_таб7.Видимость = Истина;
	 Элементы.Приложения_таб7.Заголовок = "Таблиця 7. Наявність підстав для обліку стажу окремим категоріям осіб відповідно до законодавства";	
	 
	 Элементы.ПриложенияВсеФлажки.Видимость = Истина;
	 Элементы.ПриложенияБезФлажков.Видимость = Истина;
 КонецПроцедуры
 

&НаКлиенте
Процедура ВидимыеПриложенияДекларацииОПрибыли()
	
	 Элементы.Приложения_таб1.Видимость = Истина;
	 Элементы.Приложения_таб1.Заголовок = "Додаток АВ до рядка 20 АВ Податкової декларації з податку на прибуток підприємств";
	 
	 Элементы.Приложения_таб2.Видимость = Истина;
	 Элементы.Приложения_таб2.Заголовок = "Додаток ЗП до рядка 16 ЗП Податкової декларації з податку на прибуток підприємств";
	 
	 Элементы.Приложения_таб3.Видимость = Истина;
	 Элементы.Приложения_таб3.Заголовок = "Додаток ПН до рядка 23 ПН Податкової декларації з податку на прибуток підприємств";
	 
	 Элементы.Приложения_таб4.Видимость = Истина;
	 Элементы.Приложения_таб4.Заголовок = "Додаток ТЦ до Податкової декларації  з податку на прибуток підприємств";	
	 
	 Элементы.Приложения_таб5.Видимость = Истина;
	 Элементы.Приложения_таб5.Заголовок = "Додаток ВП до рядків 26-29, 31-33 Податкової декларації з податку на прибуток підприємств";	

	 Элементы.Приложения_таб6.Видимость = Истина;
	 Элементы.Приложения_таб6.Заголовок = "Додаток РІ до рядка 03 РІ Податкової декларації з податку на прибуток підприємств";	

	 Элементы.Приложения_таб7.Видимость = Истина;
	 Элементы.Приложения_таб7.Заголовок = "Додаток ПЗ до рядка 05 ПЗ Податкової декларації з податку на прибуток підприємств";	

	 Элементы.Приложения_таб8.Видимость = Истина;
	 Элементы.Приложения_таб8.Заголовок = "Додаток АМ до рядка 1.2.1 додатка РІ до рядка 03 РІ Податкової декларації з податку на прибуток підприємств";	

	 Элементы.Приложения_таб9.Видимость = Истина;
	 Элементы.Приложения_таб9.Заголовок = "Додаток ЦП до рядків 4.1.3 ЦП, 4.1.4 ЦП додатка РІ до рядка 03 РІ Податкової декларації з податку на прибуток підприємств";	
	 
	 Элементы.Приложения_таб10.Видимость = Истина;
	 Элементы.Приложения_таб10.Заголовок = "Додаток ПП до Податкової декларації з податку на прибуток підприємств";	

	 Элементы.Приложения_таб11.Видимость = Истина;
	 Элементы.Приложения_таб11.Заголовок = "Додаток КІК до рядка 06.1 КІК Податкової декларації з податку на прибуток підприємств";	
	 
	 Элементы.Приложения_таб12.Видимость = Истина;
	 //Элементы.Приложения_таб12.Заголовок = "Додаток КІК-К до рядка 02 КІК-К додатка КІК до рядка 06.1 КІК Податкової декларації з податку на прибуток підприємств";	
	 Элементы.Приложения_таб12.Заголовок = "Додаток МПЗ до рядка 06.2 МПЗ Податкової декларації з податку на прибуток підприємств";	
	 
	 Элементы.Приложения_таб13.Видимость = Истина;
	 //Элементы.Приложения_таб13.Заголовок = "Додаток КІК-ТЦ до додатка КІК до рядка 06.1 Податкової декларації з податку на прибуток підприємств";	
	 Элементы.Приложения_таб13.Заголовок = "Додаток МПЗ-З до рядка 02 МПЗ-З додатка МПЗ до рядка 06.2 МПЗ Податкової декларації з податку на прибуток підприємств";	
	 
	 Элементы.Приложения_таб14.Видимость = Истина;
	 //Элементы.Приложения_таб14.Заголовок = "Додаток КІК-ЦП до рядків 1.2 КІК-ЦП, 1.3 КІК-ЦП додатка КІК-К до рядка 02 КІК-К додатка КІК до рядка 06.1 КІК Податкової декларації з податку на прибуток підприємств";	
	 Элементы.Приложения_таб14.Заголовок = "Додаток ДІЯ до  рядка  06.3  ДІЯ  Податкової декларації  з  податку на прибуток підприємств";	
	 
	 Элементы.Приложения_таб15.Видимость = Истина;
	 Элементы.Приложения_таб15.Заголовок = "Додаток ОВ до Податкової декларації з податку на прибуток   підприємств  (рядок 26 ОВ)";	

	 Элементы.ПриложенияВсеФлажки.Видимость = Истина;
	 Элементы.ПриложенияБезФлажков.Видимость = Истина;
	 
 КонецПроцедуры
 
 &НаКлиенте
Процедура ВидимыеПриложенияДекларацииПоНДС()
	
	Элементы.Приложения_таб1.Видимость = Истина;
	
	//	Элементы.Приложения_таб1.Заголовок = "Дод.1 Розрахунок коригування сум ПДВ (Д1)";
	Элементы.Приложения_таб1.Заголовок = "Дод.1 Відомості про суми ПДВ, зазначені у ПН/РК до податкових накладних, не зареєстрованих в ЄРПН та про податковий кредит з урахуванням його коригування (Д1)";
	
	Элементы.Приложения_таб2.Видимость = Истина;
	Элементы.Приложения_таб2.Заголовок = "Дод.2 Довідка про суму від'ємного значення звітного (податкового) періоду, яка зараховується до складу податкового кредиту наступного звітного(податкового) періоду (Д2)";
	
	Элементы.Приложения_таб3.Видимость = Истина;
	Элементы.Приложения_таб3.Заголовок = "Дод.3 Розрахунок суми бюджетного відшкодування (Д3)";
	
	Элементы.Приложения_таб4.Видимость = Истина;
//	Элементы.Приложения_таб4.Заголовок = "Дод.4 Заява про повернення суми бюджетного відшкодування (Д4)";
	Элементы.Приложения_таб4.Заголовок = "Дод.4 Заяви про повернення суми бюджетного відшкодування та/або суми коштів на рахунку у СЕА ПДВ та/або врахування реєстраційної суми платника податку, що реорганізується, в обрахунку реєстр. суми правонаступника (Д4)";
	
	Элементы.Приложения_таб5.Видимость = Истина;
//	Элементы.Приложения_таб5.Заголовок = "Дод.5 Розшифровки подат. зобов. та подат. кредиту в розрізі контрагентів (Д5)";
	Элементы.Приложения_таб5.Заголовок = "Дод.5 Розрахунок сум ПДВ, не сплачених суб'єктом госп. до бюджету у зв'явку з отрим. податкових пільг, та/або показників, відповідно до яких підпр-ва (організації) належать до підпр-ва (організації) осіб з інвалідністю (Д5)";
	
	Элементы.Приложения_таб6.Видимость = Истина;
//	Элементы.Приложения_таб6.Заголовок = "Дод.6 Довідка (Д6) подається платниками, які заповнюють рядок 5 декларації, та підприємствами (орг) інвалідів";
    Элементы.Приложения_таб6.Заголовок = "Дод.6 Розрахунок (перерахунок) частки використання товарів/послуг, необоротних активів в оподат. операціях (Д6)";
	
	Элементы.Приложения_таб7.Видимость = Истина;
//	Элементы.Приложения_таб7.Заголовок = "Дод.7 Розрахунок (перерахунок) частки використ. товарів/послуг, необорот. активів в оподат. операціях (Д7)";
    Элементы.Приложения_таб7.Заголовок = "Дод.7 Заява про допущення продавцем товарів/послуг помилок при зазначенні обов'язкових реквізитів ПН та/або порушення продавцем/покупцем гранич. термінів реєстрації в ЄРПН ПН та/або РК (Д7)";
	
	Элементы.Приложения_таб8.Видимость = Ложь;
//	Элементы.Приложения_таб8.Заголовок = "Дод.8 Заява про допущення продавцем товарів/послуг помилок при зазначенні обов. реквіз ПН/РК та/або порушення продавцем/покупцем гранич. термінів реєстрації в ЄРПН (Д8)";	
	Элементы.Приложения_таб8.Заголовок = "Дод.8 Розрахунок податкових зобов'язань за операціями, визн. в ст.161 ЗУ 'Про держ. підтримку с\г України', та питомої ваги вартості с/г товарів послуг (ДС8)";
	
	Элементы.Приложения_таб9.Видимость = Ложь;
	Элементы.Приложения_таб9.Заголовок = "Дод.9 Розрах. под. зобов. за операціями, визн. в ст.161 ЗУ 'Про держ. підтримку с\г України', та питом. ваги варт. с/г товарів (ДС9)";	
	
	Элементы.ПриложенияВсеФлажки.Видимость = Истина;
	Элементы.ПриложенияБезФлажков.Видимость = Истина;

КонецПроцедуры

 &НаКлиенте
Процедура ВидимыеПриложенияУточняющейДекларацииПоНДС()
	
	Элементы.Приложения_таб1.Видимость = Истина;
	//Элементы.Приложения_таб1.Заголовок = "Дод.1 Розрахунок коригування сум ПДВ (Д1)";
	Элементы.Приложения_таб1.Заголовок = "Дод.1 Відомості про суми ПДВ, зазначені у ПН/РК до податкових накладних, не зареєстрованих в ЄРПН та про податковий кредит з урахуванням його коригування (Д1)";
	
	Элементы.Приложения_таб2.Видимость = Истина;
	Элементы.Приложения_таб2.Заголовок = "Дод.2 Довідка про суму від'ємного значення звітного (податкового) періоду, яка зараховується до складу податкового кредиту наступного звітного(податкового) періоду (Д2)";
	
	Элементы.Приложения_таб3.Видимость = Истина;
	Элементы.Приложения_таб3.Заголовок = "Дод.3 Розрахунок суми бюджетного відшкодування (Д3)";
	
	Элементы.Приложения_таб4.Видимость = Истина;
//	Элементы.Приложения_таб4.Заголовок = "Дод.4 Заява про повернення суми бюджетного відшкодування (Д4)";
	Элементы.Приложения_таб4.Заголовок = "Дод.4 Заява про повернення суми бюджетного відшкодування та/або суми коштів на рахунку у СЕА ПДВ та/або врахування реєстраційної суми платника податку, що реорганізується, в обрахунку реєстр. суми правонаступника (Д4)";
	
	Элементы.Приложения_таб5.Видимость = Истина;
	//Элементы.Приложения_таб5.Заголовок = "Дод.5 Розшифровки подат. зобов. та подат. кредиту в розрізі контрагентів (Д5)";	
	Элементы.Приложения_таб5.Заголовок = "Дод.5 Розрахунок сум ПДВ, не сплачених суб'єктом госп. до бюджету у зв'язку з отрим. податкових пільг, та/або показників, відповідно до яких підпр-ва (організації) належать до підпр-ва (організації) осіб з інвалідністю (Д5)";
	
	Элементы.Приложения_таб6.Видимость = Истина;
//	Элементы.Приложения_таб6.Заголовок = "Дод.6 Довідка (Д6) подається платниками, які заповнюють рядок 5 декларації, та підприємствами (орг) інвалідів";
	
	Элементы.Приложения_таб6.Заголовок = "Дод.6 Розрахунок (перерахунок) частки використання товарів/послуг, необоротних активів в оподат. операціях (Д6)";	
	
	Элементы.Приложения_таб7.Видимость = Ложь;
	//Элементы.Приложения_таб7.Заголовок = "Дод.7 Розрахунок (перерахунок) частки використ. товарів/послуг, необорот. активів в оподат. операціях (Д7)";	
	
	Элементы.Приложения_таб8.Видимость = Ложь;
	Элементы.Приложения_таб8.Заголовок = "Дод.8 Розрахунок податкових зобов'язань за операціями, визн. в ст.161 ЗУ 'Про держ. підтримку с\г України', та питомої ваги вартості с/г товарів послуг (ДС8)";	
	
	Элементы.ПриложенияВсеФлажки.Видимость = Истина;
	Элементы.ПриложенияБезФлажков.Видимость = Истина;

КонецПроцедуры
 
&НаКлиенте
Функция ПолучитьВыбранныеФормы(НазваниеОтчета)
	
	Приложения = Новый Массив;
	
	Если НазваниеОтчета = "ЕСВстарый" Тогда
		Если Таб41 Тогда
			Приложения.Добавить("Таб1");
		КонецЕсли;
		
		Если Таб45 Тогда
			Приложения.Добавить("Таб5");
		КонецЕсли;
		
		Если Таб46 Тогда
			Приложения.Добавить("Таб6");
		КонецЕсли;
		
		Если Таб47 Тогда
			Приложения.Добавить("Таб7");
		КонецЕсли;
		
	ИначеЕсли НазваниеОтчета = "ЕСВ" Тогда
		Если Таб41 Тогда
			Приложения.Добавить("Таб1");
		КонецЕсли;
		
		Если Таб42 Тогда
			Приложения.Добавить("Таб4");
		КонецЕсли;
		
		Если Таб43 Тогда
			Приложения.Добавить("Таб5");
		КонецЕсли;
		
		Если Таб44 Тогда
			Приложения.Добавить("Таб6");
		КонецЕсли;
		
	ИначеЕсли НазваниеОтчета = "ДекларацияОПрибыли" ИЛИ НазваниеОтчета = "ДекларацияНДС" Тогда
		
		Если Таб41 Тогда
			Приложения.Добавить("Таб1");
		КонецЕсли;
		
		Если Таб42 Тогда
			Приложения.Добавить("Таб2");
		КонецЕсли;
		
		Если Таб43 Тогда
			Приложения.Добавить("Таб3");
		КонецЕсли;
		
		Если Таб44 Тогда
			Приложения.Добавить("Таб4");
		КонецЕсли;
		
		Если Таб45 Тогда
			Приложения.Добавить("Таб5");
		КонецЕсли;
		
		Если Таб46 Тогда
			Приложения.Добавить("Таб6");
		КонецЕсли;
		
		Если Таб47 Тогда
			Приложения.Добавить("Таб7");
		КонецЕсли;
		
		Если Таб48 Тогда
			Приложения.Добавить("Таб8");
		КонецЕсли;
		
		Если Таб49 Тогда
			Приложения.Добавить("Таб9");
		КонецЕсли;
		
		Если Таб50 Тогда
			Приложения.Добавить("Таб10");
		КонецЕсли;

		Если НазваниеОтчета = "ДекларацияОПрибыли" Тогда
			
			Если Таб51 Тогда
				Приложения.Добавить("Таб11");
			КонецЕсли;
			
			Если Таб52 Тогда
				Приложения.Добавить("Таб12");
			КонецЕсли;
			
			Если Таб54 Тогда
				Приложения.Добавить("Таб13");
			КонецЕсли;
			
			Если Таб61 Тогда
				Приложения.Добавить("Таб14");
			КонецЕсли;
			
			Если Таб62 Тогда
				Приложения.Добавить("Таб15");
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли НазваниеОтчета = "УточняющийРасчетДекларацияНДС" Тогда
		
		Если Таб41 Тогда
			Приложения.Добавить("Таб1");
		КонецЕсли;
		
		Если Таб42 Тогда
			Приложения.Добавить("Таб2");
		КонецЕсли;
		
		Если Таб43 Тогда
			Приложения.Добавить("Таб3");
		КонецЕсли;
		
		Если Таб44 Тогда
			Приложения.Добавить("Таб4");
		КонецЕсли;
		
		Если Таб45 Тогда
			Приложения.Добавить("Таб5");
		КонецЕсли;
		
		Если Таб46 Тогда
			Приложения.Добавить("Таб6");
		КонецЕсли;
		
		Если Таб47 Тогда
			Приложения.Добавить("Таб7");
		КонецЕсли;
		
		Если Таб48 Тогда
			Приложения.Добавить("Таб8");
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Приложения;
	
КонецФункции

&НаКлиенте
Процедура ПоискОтчетов(Команда)
	
	ТаблицаОтчетов.Очистить();
	
	ЮрикФизикОтчет = ЮрикФизикОтчет();
	Если ЮрикФизикОтчет = "Юрик" тогда
		ЕслиЮр = Истина;
	Иначе
		ЕслиЮр = Ложь;
	КонецЕсли;	
	//ЕслиЮр = Истина;
	
	Если РегОтчетНачПериода <> Дата(1,1,1) Тогда
		НачПериодаОтч = РегОтчетНачПериода;
	Иначе
		Сообщить("Необходимо заполнить поле ""Период""");
		Возврат;
	КонецЕсли;
	
	Если РегОтчетКонПериода <> Дата(1,1,1) Тогда
		КонПериодаОтч = РегОтчетКонПериода;
	Иначе
		Сообщить("Необходимо заполнить поле ""Период""");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегОтчетТипДок) Тогда
		Сообщить("Необходимо заполнить поле ""Отчет""");
		Возврат;	
	КонецЕсли;
	
	// 02.08.2022 + DOCKING 382
	Если РегОтчетТипДок = "Отчет по единому социальному взносу (Приложение 4)" И Не ЗначениеЗаполнено(ТипРасчета) Тогда
		Сообщить("Необходимо заполнить поле ""Тип расчета""");
		Возврат;	
	КонецЕсли;
	// 02.08.2022 - DOCKING 382
	
	Если РегОтчетТипДок = "Форма 1-ПВ" Тогда
		ТипДокОтчета = "РегламентированныйОтчетПоТруду";
		
		Мес = Ложь;
		Если Месяц(НачПериодаОтч)  =  Месяц(КонПериодаОтч) Тогда
			Мес = Истина;
		КонецЕсли;	 
		Если Мес Тогда
			АктуальныйЧаркод = "S0301015";
		Иначе
			АктуальныйЧаркод = "S0301120";
		КонецЕсли;
		 
	ИначеЕсли РегОтчетТипДок = "Ф4-ФССзТВП" Тогда
		ТипДокОтчета = "РегламентированныйОтчетФСС";
		
		АктуальныйЧаркод = "C0100224"
	ИначеЕсли РегОтчетТипДок = "Форма №1ДФ" Тогда
		ТипДокОтчета = "РегламентированныйОтчетФорма1ДФ";
		
		Если ЕслиЮр Тогда
			АктуальныйЧаркод = "J0500105";
		Иначе
			АктуальныйЧаркод = "F0500105";
		КонецЕсли;
	ИначеЕсли РегОтчетТипДок = "1-м, 2-м. Финансовий отчет" Тогда
		ТипДокОтчета = "РегламентированныйОтчетБалансМП"; 
		
		АктуальныйЧаркод = "S0110014";
	ИначеЕсли РегОтчетТипДок = "1-мс, 2-мс. Финансовий отчет" Тогда
		ТипДокОтчета = "РегламентированныйОтчетБалансМПС";
		
		АктуальныйЧаркод = "S0111007";
	ИначеЕсли РегОтчетТипДок = "Форма № 1. Баланс" Тогда
		ТипДокОтчета = "РегламентированныйОтчетБаланс";
		
		АктуальныйЧаркод = "S0100115";
	ИначеЕсли РегОтчетТипДок = "Отчет по единому социальному взносу (Приложение 4)" Тогда
		ТипДокОтчета = "РегламентированныйОтчетРасчетДоходовИЕСВФизЛиц";
		
		Если ЕслиЮр Тогда
			АктуальныйЧаркод = "J0500109";
		Иначе
			АктуальныйЧаркод = "F0500109";
		КонецЕсли;
	ИначеЕсли РегОтчетТипДок = "ОтчетЕСВ" Тогда
		ТипДокОтчета = "РегламентированныйОтчетЕдиныйСоциальныйВзнос";
		
		Если ЕслиЮр Тогда
			АктуальныйЧаркод = "J3000413";
		Иначе
			АктуальныйЧаркод = "F3000413";
		КонецЕсли;
	ИначеЕсли РегОтчетТипДок = "Декларация плательщика единого налога" Тогда
		Если ЕслиЮр Тогда
			ТипДокОтчета = "РегламентированныйОтчетРасчетЕдиногоНалога";
			АктуальныйЧаркод = "J0103508";
		Иначе
			ТипДокОтчета = "РегламентированныйОтчетРасчетЕдиногоНалогаФизЛиц";
			АктуальныйЧаркод = "F0103508";
		КонецЕсли;
	ИначеЕсли РегОтчетТипДок = "Декларация по налогу на прибыль предприятий" Тогда
		ТипДокОтчета = "РегламентированныйОтчетДекларацияОПрибыли";
		
		АктуальныйЧаркод = "J0100125";
	ИначеЕсли РегОтчетТипДок = "Декларация по НДС" Тогда
		ТипДокОтчета = "РегламентированныйОтчетДекларацияНДС";
		
		Если ЕслиЮр Тогда
			АктуальныйЧаркод = "J0200125";
		Иначе
			АктуальныйЧаркод = "F0200125";
		КонецЕсли;
	ИначеЕсли РегОтчетТипДок = "Уточняющий расчет Декларация по НДС" Тогда
		ТипДокОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДС";
		
		Если ЕслиЮр Тогда
			АктуальныйЧаркод = "J0217023";
		Иначе
			АктуальныйЧаркод = "F0217023";
		КонецЕсли;
	КонецЕсли;	
	
	Если ТипДокОтчета = Неопределено Тогда
		Сообщить("Необходимо корректно заполнить поле ""Документ""");
		Возврат;
	КонецЕсли;	
	
	РезультатПоискаРегОтчетов = Неопределено;
	
	Попытка
		РезультатПоискаРегОтчетов = ЗапросПоискаРегОтчета(НачПериодаОтч, КонПериодаОтч, РегОтчетОрганизация, ТипДокОтчета)
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Элементы.ПередатьВМедокРегОтчет.Доступность  =  Истина;

	
	Для Каждого ЭлементМассива Из РезультатПоискаРегОтчетов Цикл
		НоваяСтрока  =  ТаблицаОтчетов.Добавить();
		НоваяСтрока.Ссылка = ЭлементМассива.Ссылка;	
		НоваяСтрока.ДатаПодписи = ЭлементМассива.ДатаПодписи;
		НоваяСтрока.Периодичность = ЭлементМассива.Периодичность;
		НоваяСтрока.ПредставлениеПериода = ЭлементМассива.ПредставлениеПериода;
		НоваяСтрока.ИсточникОтчета = ЭлементМассива.ИсточникОтчета;
		НоваяСтрока.ПометкаУдаления = ЭлементМассива.ПометкаУдаления;
		// DOCKING 469 + 20.12.2022
		НоваяСтрока.ДатаДокумента = ЭлементМассива.Дата;
		// DOCKING 469 - 20.12.2022
		НоваяСтрока.ВерсияДанных = ЭлементМассива.ВерсияДанных;
		НоваяСтрока.Проведен = ЭлементМассива.Проведен;
		НоваяСтрока.ВидОтчетности = ЭлементМассива.ВидОтчетности;
		НоваяСтрока.ВыбраннаяФорма = ЭлементМассива.ВыбраннаяФорма;
		НоваяСтрока.ДанныеОтчета = ЭлементМассива.ДанныеОтчета;
		НоваяСтрока.ДатаНачала = ЭлементМассива.ДатаНачала;
		НоваяСтрока.ДатаОкончания = ЭлементМассива.ДатаОкончания;
		НоваяСтрока.ДеревоНастройкиСтраниц = ЭлементМассива.ДеревоНастройкиСтраниц;
		НоваяСтрока.ЕдиницаИзмерения = ЭлементМассива.ЕдиницаИзмерения;
		НоваяСтрока.Комментарий = ЭлементМассива.Комментарий;
		НоваяСтрока.НаименованиеОтчета = ЭлементМассива.НаименованиеОтчета;
		// DOCKING 689 + 31.03.2024
		НоваяСтрока.ЧаркодОтчета = АктуальныйЧаркод;
		// DOCKING 689 - 31.03.2024
		НоваяСтрока.Организация = ЭлементМассива.Организация;
		НоваяСтрока.Период = ЭлементМассива.Период;
		НоваяСтрока.ФорматВыгрузки = ЭлементМассива.ФорматВыгрузки;
		НоваяСтрока.ПредставлениеПериода = ЭлементМассива.ПредставлениеПериода;
		НоваяСтрока.ТочностьЕдиницыИзмерения = ЭлементМассива.ТочностьЕдиницыИзмерения;		
		
	КонецЦикла;
	
	Попытка
		//обновим статусы всех отчетов
		ОбновитьСтатусыОтчетов();
	Исключение
		//ОписаниеОшибки()
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыОтчетов()
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication"); 
	Исключение
		Подключение1СМедок();		
	КонецПопытки; 
	
	Для каждого СтрОтч Из ТаблицаОтчетов Цикл
		Статус = App.GetSendSTTByExDocID(Строка(СтрОтч.Ссылка.УникальныйИдентификатор()));
		СтрОтч.СтатусОтчета = ПолучитьРасшифровкуСтатуса(Строка(Статус));
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВМедокРегОтчет(Команда)
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication"); 
		ПередатьОтчетыКлиент();
		ОбновитьСтатусыОтчетов();
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Медок не запущен.'; uk = 'Медок не запущено'"));
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьОтчетыКлиент()
	
	Попытка 
		//ОргМедок = ДатьОргМЕДок();
		ОргМедок = App.GetCurrEdrpou();
		ОргМедокФиллиал = App.GetCurrDept();
	    Орг1С = КодЕДРПОУ(РегОтчетОрганизация);
		КодПоЕДРПОУ = Орг1С;
		Если ОргМедок = СокрЛП(РегОтчКодПоЕДРПОУ) И ОргМедокФиллиал = СокрЛП(РегОтчФил) Тогда 
			orgId  =  App.SeekOrg(СокрЛП(РегОтчКодПоЕДРПОУ), СокрЛП(РегОтчФил));
		Иначе
			orgId = 0;
		КонецЕсли;

		Если orgId = 0 Тогда 
			Элементы.Сформировать.Доступность = Ложь;
			Сообщение = Новый СообщениеПользователю();
			Предупреждение(НСтр("ru = 'Предприятие открытое в М.E.Doc не соответствует выбранному в 1С : ';uk = 'Підприємство відкрите в М.E.Doc не відповідає вибраному в 1С: '") + Символы.ПС +
			НСтр("ru = 'ЕДРПОУ : ';uk = 'ЄДРПОУ'") + КодПоЕДРПОУ + Символы.ПС + НСтр("ru = 'Филиал : ';uk = 'Філія : '") + пФил + Символы.ПС + Символы.ПС + 
			НСтр("ru = 'Проверьте :';uk = 'Перевірте :'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код ЕДРПОУ корректно';uk = '- чи внесений код ЕДРПОУ коректно'") + Символы.ПС + 
			НСтр("ru = '- внесен ли код филиала корректно';uk = '- чи внесений код філії коректно'") + Символы.ПС +
			НСтр("ru = 'Если Да, создайте в M.E.Doc новое предприятие.';uk = 'Якщо Так, створіть в M.E.Doc нове підприємство.'"));
			Сообщение.Сообщить();	
			//ИзменениеОсновныхПараметровБезОчисткиТаблицы();
			Возврат;
		ИначеЕсли ОргМедок <> Орг1С Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Предприятие открытое в М.E.Doc не соответствует выбранном в 1С.';uk = 'Помилка: Підприємство відкрите в М.E.Doc не співпадає вибраному в 1С.'"),,НСтр("ru = 'Ошибка';uk = 'Помилка'"));
		    Возврат;
		КонецЕсли;   
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = (НСтр("ru = 'Ошибка при определении наличия предприятия в М.E.Doc.';uk = 'Помилка при визначенні наявності підприємства в М.E.Doc.'"));
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки; 
	
	ЕстьВыделенныеСтроки = Ложь;
	Для каждого СтрокаОтчет Из ТаблицаОтчетов Цикл
		Если СтрокаОтчет.Флажок2 Тогда
			ЕстьВыделенныеСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьВыделенныеСтроки Тогда
		Предупреждение(Нстр("ru = 'Установите флажок напротив хотя бы одного отчета !';uk = 'Встановіть прапорець навпроти хоча б одного звіту !'"));
		Возврат;
	КонецЕсли;	
	
	Приложения = Неопределено;
	
	СписокДляОткрытияОтчетов = Новый Массив();
	
	Для каждого СтрокаОтчет из ТаблицаОтчетов Цикл
		Если СтрокаОтчет.Флажок2 Тогда		
			//Документ = Элементы.ТаблицаОтчетов.ДанныеСтроки(СтрокаОтчет).Ссылка;
			//ИсточникОтчета = Элементы.ТаблицаОтчетов.ДанныеСтроки(СтрокаОтчет).ИсточникОтчета;
			Документ = СтрокаОтчет.Ссылка;
			ИсточникОтчета = СтрокаОтчет.ИсточникОтчета;
			
			Если ИсточникОтчета = "РегламентированныйОтчетБаланс" Тогда
				Приложения = Новый Массив;
				Приложения.Добавить("РегламентированныйОтчетФинансовыйРезультат");
				Приложения.Добавить("РегламентированныйОтчетДвижениеДенежныхСредств");
				Приложения.Добавить("РегламентированныйОтчетОСобственномКапитале");
				Приложения.Добавить("РегламентированныйОтчетФорма5");
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетРасчетДоходовИЕСВФизЛиц" Тогда
				Приложения = ПолучитьВыбранныеФормы("ЕСВ");
				Если Приложения.Количество() = 0 Тогда
					Предупреждение(НСтр("ru = 'Не выбрано ни одной таблицы!'; uk = 'Не вибрано жодної таблиці!'"));	
					Возврат;
				Конецесли;
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетЕдиныйСоциальныйВзнос" Тогда
				Приложения = ПолучитьВыбранныеФормы("ЕСВстарый");
				Если Приложения.Количество() = 0 Тогда
					Предупреждение(НСтр("ru = 'Не выбрано ни одной таблицы!'; uk = 'Не вибрано жодної таблиці!'"));	
					Возврат;
				Конецесли;
				
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетДекларацияОПрибыли" Тогда
				
				Приложения = ПолучитьВыбранныеФормы("ДекларацияОПрибыли");
				
				Если Приложения.Количество() = 0  Тогда
					Предупреждение(НСтр("ru = 'Не выбрано ни одной таблицы!'; uk = 'Не вибрано жодної таблиці!'"));
					Возврат;
				КонецЕсли; 
				
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетДекларацияНДС" Тогда
				
				Приложения = ПолучитьВыбранныеФормы("ДекларацияНДС");
				
				Если Приложения.Количество() = 0  Тогда
					Предупреждение(НСтр("ru = 'Не выбрано ни одной таблицы!'; uk = 'Не вибрано жодної таблиці!'"));	
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДС" Тогда
				
				Приложения = ПолучитьВыбранныеФормы("УточняющийРасчетДекларацияНДС");
				
				Если Приложения.Количество() = 0  Тогда
					Предупреждение(НСтр("ru = 'Не выбрано ни одной таблицы!'; uk = 'Не вибрано жодної таблиці!'"));	
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			ПередатьРегОтчет(Документ, Приложения, СписокДляОткрытияОтчетов);  //ПередатьВМедокРегОтчетСервер
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОД Тогда
		Для Каждого ИД Из СписокДляОткрытияОтчетов Цикл
			App.ShowDocument(ИД);
		КонецЦикла;        		
	КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьРегОтчет(Ссылка, Приложения, СписокДляОткрытияОтчетов) 
	
	ПоискРегОтчетов = ПоискОтчетаПоСсылке(Ссылка);  //массив структур возвращается
	
	ПереданныеОтчеты = 0;
	
	Пакет = Ложь;
	ИДГлавнойФормы = Неопределено;
	ИДФормПакета = Новый Массив;
	ИДпакеты = Новый Массив;
	Если Приложения <> Неопределено Тогда
		РезультатПоискаРегОтчетов = СформироватьПакетПоГлавномуОтчету(ПоискРегОтчетов, Приложения); //массив структур возвращается
		ИДГлавнойФормы = Строка(Ссылка.УникальныйИдентификатор());
		Пакет = Истина;
	Иначе
		РезультатПоискаРегОтчетов = ПоискРегОтчетов;
	КонецЕсли;
	
	Если РезультатПоискаРегОтчетов = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПоискаРегОтчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//если мы сюда попали значит уже есть COM-соединение
	//App = Новый COMОбъект("MEDOC.ZApplication"); 
	
	Для каждого СтрокаОтчет из РезультатПоискаРегОтчетов цикл
		
		ИД = Строка(СтрокаОтчет.Ссылка.УникальныйИдентификатор());
		PDate = Дата(Год(СтрокаОтчет.Дата), Месяц(СтрокаОтчет.Дата), 01);
		ЕслиЮр = ПроверкаНаЮрЛицо(СтрокаОтчет.Организация);
		
		Если App.GetSendSTTByExDocID(ИД) <> -1 и App.GetInTrashStatus(ИД) = Ложь  Тогда
			
			Сообщить(НСтр("ru = 'Документ существует в M.E.Doc:';uk = 'Документ існує в M.E.Doc:'"));
			Сообщить(НСтр("ru = 'Существующий документ будет перемещен в Корзину';uk = 'Існуючий документ буде переміщений до Корзини'"));	
			
		КонецЕсли;
		
		Если СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетФСС" Тогда
			БланкФСС = "C0100224";
			Передаем_Ф4ФСС(App, СтрокаОтчет, БланкФСС, PDate, ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД); 
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетПоТруду" Тогда
			Мес = Ложь;
			Если Месяц(СтрокаОтчет.ДатаНачала)  =  Месяц(СтрокаОтчет.ДатаОкончания) Тогда
				Мес = Истина;
			КонецЕсли;	 
			
			Если Мес Тогда
				БланкФСС = "S0301015";
				Передаем_1ПВМес(App, СтрокаОтчет, БланкФСС, PDate, ИД);
				ПереданныеОтчеты = ПереданныеОтчеты + 1;
				СписокДляОткрытияОтчетов.Добавить(ИД);
			Иначе
				БланкФСС = "S0301120";
				Передаем_1ПВКв(App, СтрокаОтчет, БланкФСС, PDate, ИД);
				ПереданныеОтчеты = ПереданныеОтчеты + 1;
				СписокДляОткрытияОтчетов.Добавить(ИД);
			КонецЕсли;
			
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетФорма1ДФ" Тогда
			Если ЕслиЮр Тогда
				Бланк1ДФ = "J0500105";
			Иначе
				Бланк1ДФ = "F0500105";
			КонецЕсли;
			Передаем_1ДФ(App, СтрокаОтчет, Бланк1ДФ, PDate, ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетБалансМП" Тогда
			БланкМП = "S0110014";
			Передаем_БалансМПДСС(App, СтрокаОтчет, БланкМП, PDate, ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетБалансМПС" Тогда
			БланкМПС = "S0111007";
			Передаем_БалансМПС(App, СтрокаОтчет, БланкМПС, PDate, ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетБаланс" Тогда
			Бланк = "S0100115";
			Передаем_БалансЕО(App, СтрокаОтчет, Бланк, PDate, ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетДвижениеДенежныхСредств" И СтрокаОтчет.ВыбраннаяФорма = "ФормаОтчета2013ПрямойМетодУФ" Тогда
			Бланк = "S0100311";
			Передаем_ПрямойМетод(App, СтрокаОтчет, Бланк, PDate, ИД);
			ИДФормПакета.Добавить(ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетДвижениеДенежныхСредств" И СтрокаОтчет.ВыбраннаяФорма = "ФормаОтчета2013НепрямойМетодУФ" Тогда
			Бланк = "S0103355";
			Передаем_НеПрямойМетод(App, СтрокаОтчет, Бланк, PDate, ИД);
			ИДФормПакета.Добавить(ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетОСобственномКапитале" Тогда
			Бланк = "S0104010";
			Передаем_Капитал(App, СтрокаОтчет, Бланк, PDate, ИД);
			ИДФормПакета.Добавить(ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетФорма5" Тогда
			Бланк = "S0105009";
			Передаем_Форма5(App, СтрокаОтчет, Бланк, PDate, ИД);
			ИДФормПакета.Добавить(ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетФинансовыйРезультат" Тогда
			БланкДСС = "S0100215";
			Передаем_ФинрезДСС(App, СтрокаОтчет, БланкДСС, PDate, ИД);
			ИДФормПакета.Добавить(ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетРасчетДоходовИЕСВФизЛиц" Тогда
			
			Если ЕслиЮр Тогда
				Бланк = "J0500109";
			Иначе
				Бланк = "F0500109";
			КонецЕсли;
			
			Передаем_ЕСВ(App, СтрокаОтчет, Бланк, PDate, ИД, Приложения);
			ИДГлавнойФормы = ИД;
			Пакет = Ложь;
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетЕдиныйСоциальныйВзнос" Тогда
			
			Если ЕслиЮр Тогда
				Бланк = "J3000413";
			Иначе
				Бланк = "F3000413";
			КонецЕсли;
			
			Передаем_ЕСВ_стар(App, СтрокаОтчет, Бланк, PDate, ИД, Приложения);
			ИДГлавнойФормы = ИД;
			Пакет = Ложь;
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
			
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетДекларацияОПрибыли" Тогда
            // 28.06.2022 + DOCKING 410
			////+DOCKING-290 13.07.2021 
			//Бланк = "J0100118";
			//Бланк = "J0100119";
			////-DOCKING-290 13.07.2021
			Бланк = "J0100125";
			// 28.06.2022 - DOCKING 410
			ИДФормПакета = Передаем_ДекларацияОПрибыли(App, СтрокаОтчет, Бланк, PDate, ИД, Приложения);
			ИДГлавнойФормы = ИД;
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетРасчетЕдиногоНалога" Тогда
			Бланк = "J0103508";
			Передаем_ДекларацияЕН_ЮР(App, СтрокаОтчет, Бланк, PDate, ИД);
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетРасчетЕдиногоНалогаФизЛиц" Тогда
			Бланк = "F0103308";
			// DOCKING 521 + 26.06.2023
			//Передаем_ДекларацияЕН_ФОП(App, СтрокаОтчет, Бланк, PDate, ИД);
			Передаем_ДекларацияЕН_ФОП(App, СтрокаОтчет, Бланк, PDate, ИД, ИДпакеты);
			Пакет = Истина;
			ИДГлавнойФормы = ИД;
			Если ИДпакеты <> Неопределено Тогда ИДФормПакета=ИДпакеты КонецЕсли;
			// DOCKING 521 - 26.06.2023
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетДекларацияНДС" Тогда
			Если ЕслиЮр Тогда
				Бланк = "J0200125";
			Иначе
				Бланк = "F0200125";
			КонецЕсли;
			Передаем_ДекларацияНДС(App, СтрокаОтчет, Бланк, PDate, ИД, Приложения);
			ИДГлавнойФормы = ИД;
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);
		ИначеЕсли СтрокаОтчет.ИсточникОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДС" Тогда
			Если ЕслиЮр Тогда
				Бланк = "J0217023";
			Иначе
				Бланк = "F0217023";
			КонецЕсли;
			Передаем_УточняющаяДекларацияНДС(App, СтрокаОтчет, Бланк, PDate, ИД, Приложения);
			ИДГлавнойФормы = ИД;
			ПереданныеОтчеты = ПереданныеОтчеты + 1;
			СписокДляОткрытияОтчетов.Добавить(ИД);

		КонецЕсли;	
		
	КонецЦикла;
	
	Если Пакет Тогда
		packetDoc = App.GetPacketDoc();
		
		Для Каждого ЭлементМассива Из ИДФормПакета Цикл	
			КодВозврата1 = packetDoc.Add(ИДГлавнойФормы, ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	Сообщить("Передано в M.E.Doc: - "+ ПереданныеОтчеты +" шт.");
	
КонецПроцедуры	
	
&НаСервере	
Функция СформироватьПакетПоГлавномуОтчету(ТаблицаРегОтчетов, Приложения)

	Массив = Новый Массив;
	
	Для каждого СтрокаОтчет из ТаблицаРегОтчетов цикл
		Запрос = Новый Запрос(); 		
		Текст = 
		"ВЫБРАТЬ
		| *
		|ИЗ
		|	Документ.РегламентированныйОтчет как РегламентированныйОтчет
		|ГДЕ
		|	РегламентированныйОтчет.Дата = &Дата
		|  И РегламентированныйОтчет.Организация = &ОрганизацияОтчета
		|  И (РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
		
		Для Каждого ЭлементМассива Из Приложения Цикл
        	Текст = Текст + "
			|	ИЛИ РегламентированныйОтчет.ИсточникОтчета = &" + ЭлементМассива;   
		КонецЦикла;
		
		Текст = Текст + " )
		|  УПОРЯДОЧИТЬ ПО
		|  РегламентированныйОтчет.ДатаПодписи УБЫВ";
	
	
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("Дата", СтрокаОтчет.Дата);
		Запрос.УстановитьПараметр("ОрганизацияОтчета", СтрокаОтчет.Организация);
		Запрос.УстановитьПараметр("ИсточникОтчета", СтрокаОтчет.ИсточникОтчета);
		
		Для Каждого ЭлементМассива Из Приложения Цикл
			Запрос.УстановитьПараметр(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
		
		Результат  =  Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			// DOCKING 570 + 26.09.2023
		//	Если Выборка.Ссылка.УникальныйИдентификатор() = СтрокаОтчет.УИД Тогда   // DOCKING 692 +-
			// DOCKING 570 - 26.09.2023
				Структура = Новый Структура;
				Для каждого Колонка Из Результат.Колонки Цикл
					Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЦикла;
				Массив.Добавить(Структура);
				
		//	КонецЕсли;
		КонецЦикла; 
				
	    Возврат Массив;
		
	КонецЦикла;
	
КонецФункции
	
&НаСервере
Функция ПоискОтчетаПоСсылке(Ссылка)
	
	Запрос = Новый Запрос(); 		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| *
	|ИЗ
	|	Документ.РегламентированныйОтчет как РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка",  Ссылка);  	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура;
		Для каждого Колонка Из Результат.Колонки Цикл
			Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		// DOCKING 570 + 26.09.2023
		Структура.Вставить("УИД", Ссылка.УникальныйИдентификатор());
		// DOCKING 570 - 26.09.2023
	КонецЦикла; 
	
	Массив = Новый Массив;
	Массив.Добавить(Структура);
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура Передаем_Ф4ФСС(App, Документ, БланкФСС, PDate, ИД)

	Попытка	
		Формирование_Ф4ФСС(App, Документ, БланкФСС, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   

КонецПроцедуры

&НаКлиенте
Процедура Передаем_ДекларацияЕН_ЮР(App, Документ, БланкФСС, PDate, ИД)

	Попытка	
		Формирование_ДекларацияЕН_ЮР(App, Документ, БланкФСС, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   

КонецПроцедуры

&НаКлиенте
Процедура Передаем_ДекларацияЕН_ФОП(App, Документ, БланкФСС, PDate, ИД, ИДпакеты)

	Попытка	
		Формирование_ДекларацияЕН_ФОП(App, Документ, БланкФСС, PDate, ИД, ИДпакеты);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   

КонецПроцедуры

&НаКлиенте
Процедура Передаем_ЕСВ(App, Документ, БланкФСС, PDate, ИД, Приложения)

	Попытка	
		//сначала очистим приложения
		УдалитьПриложенияЕСВ(App,ИД);
		Формирование_ЕСВ(App, Документ, БланкФСС, PDate, ИД, Приложения);  				
	Исключение
		УдалитьПриложенияЕСВ(App,ИД);
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   

КонецПроцедуры

&НаКлиенте
Процедура Передаем_ЕСВ_стар(App, Документ, БланкФСС, PDate, ИД, Приложения)

	Попытка	
		//сначала очистим приложения
		УдалитьПриложенияЕСВ_стар(App,ИД);
		Формирование_ЕСВ_стар(App, Документ, БланкФСС, PDate, ИД, Приложения);  				
	Исключение
		УдалитьПриложенияЕСВ(App,ИД);
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   

КонецПроцедуры


&НаКлиенте
Процедура Передаем_1ПВМес(App, Документ, БланкДСС, PDate, ИД)
	
	Попытка	
		Формирование_1ПВмес(App, Документ, БланкДСС, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_1ПВКв(App, Документ, БланкДСС, PDate, ИД)
	
	Попытка	
		Формирование_1ПВКв(App, Документ, БланкДСС, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_ФинрезДСС(App, Документ, БланкДСС, PDate, ИД)
	
	Попытка	
		Формирование_ФинрезДСС(App, Документ, БланкДСС, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_ФинрезМДЗ(App, Документ, БланкДСС, PDate, ИД)
	
	Попытка	
		Формирование_ФинрезМДЗ(App, Документ, БланкДСС, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_1ДФ(App, Документ, Бланк1ДФ, PDate, ИД)
	
	Попытка	
		Формирование_1ДФ(App, Документ, Бланк1ДФ, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_БалансМПДСС(App, Документ, Бланк, PDate, ИД)
	
	Попытка	
		Формирование_БалансМПДСС(App, Документ, Бланк, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_БалансМПС(App, Документ, Бланк, PDate, ИД)
	
	Попытка	
		Формирование_БалансМПС(App, Документ, Бланк, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_БалансЕО(App, Документ, Бланк, PDate, ИД)
		
	Попытка	
		Формирование_БалансЕО(App, Документ, Бланк, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_ПрямойМетод(App, Документ, Бланк, PDate, ИД)
		
	Попытка	
		Формирование_ПрямойМетод(App, Документ, Бланк, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_НеПрямойМетод(App, Документ, Бланк, PDate, ИД)
		
	Попытка	
		Формирование_НеПрямойМетод(App, Документ, Бланк, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_Капитал(App, Документ, Бланк, PDate, ИД)
		
	Попытка	
		Формирование_Капитал(App, Документ, Бланк, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Процедура Передаем_Форма5(App, Документ, Бланк, PDate, ИД)
		
	Попытка	
		Формирование_Форма5(App, Документ, Бланк, PDate, ИД);  				
	Исключение
		App.MoveToTrash(ИД);
		Возврат;
	КонецПопытки;   
	
КонецПроцедуры

&НаКлиенте
Функция Передаем_ДекларацияОПрибыли(App, Документ, Бланк, PDate, ИД, Приложения)
	ДочерниеДокументы = Новый Массив;
	
	Попытка	
		//сначала очистим приложения
		УдалитьПриложенияДекларацияОПрибыли(App,ИД);
		
		ДочерниеДокументы = Формирование_Декларация_Прибыль(App, Документ, Бланк, PDate, ИД, Приложения);  				
	Исключение
		App.MoveToTrash(ИД);
	КонецПопытки;
	
	Возврат ДочерниеДокументы;

КонецФункции

&НаКлиенте
Функция Передаем_ДекларацияНДС(App, Документ, Бланк, PDate, ИД, Приложения)
	ДочерниеДокументы = Новый Массив;
	
	Попытка	
		//сначала очистим приложения
		УдалитьПриложенияДекларацияОПрибыли_НДС(App,ИД);
		
		ДочерниеДокументы = Формирование_ДекларацияНДС(App, Документ, Бланк, PDate, ИД, Приложения);  				
	Исключение
		App.MoveToTrash(ИД);
	КонецПопытки;
	
	Возврат ДочерниеДокументы;

КонецФункции

&НаКлиенте
Функция Передаем_УточняющаяДекларацияНДС(App, Документ, Бланк, PDate, ИД, Приложения)
	ДочерниеДокументы = Новый Массив;
	
	Попытка	
		//сначала очистим приложения
		УдалитьПриложенияДекларацияОПрибыли_НДС(App,ИД);
		
		ДочерниеДокументы = Формирование_УточняющаяДекларацияНДС(App, Документ, Бланк, PDate, ИД, Приложения);  				
	Исключение
		App.MoveToTrash(ИД);
	КонецПопытки;
	
	Возврат ДочерниеДокументы;

КонецФункции

#Область ДекларацияНДС

&НаКлиенте
Функция Формирование_ДекларацияНДС(App, Документ, Бланк, PDate, ИД, Приложения)
	ДочерниеДокументы = Новый Массив;
	
	ИДПарент = 0;
	
	ЧаркодТаб1 = "";
	ЧаркодТаб2 = "";
	ЧаркодТаб3 = "";
	ЧаркодТаб4 = "";
	ЧаркодТаб5 = "";
	ЧаркодТаб6 = "";
	ЧаркодТаб7 = "";
	ЧаркодТаб8 = "";
	

    Если Бланк = "J0200125" Тогда
    	ЧаркодТаб1 = "J0200525";   
    	ЧаркодТаб2 = "J0215225";   
    	ЧаркодТаб3 = "J0200625";   
    	ЧаркодТаб4 = "J0299825";   
    //	ЧаркодТаб5 = "J0215124"; //
    	ЧаркодТаб5 = "J0299325";   
    	ЧаркодТаб6 = "J0215725";   
    	ЧаркодТаб7 = "J0215825"; 
    	ЧаркодТаб8 = "J0215325";	
    ИначеЕсли Бланк = "F0200125" Тогда
    	ЧаркодТаб1 = "F0200425";
    	ЧаркодТаб2 = "F0215225";
    	ЧаркодТаб3 = "F0200525";
    	ЧаркодТаб4 = "F0299825";
   // 	ЧаркодТаб5 = "F0215124";
    	ЧаркодТаб5 = "F0299325";
    	ЧаркодТаб6 = "F0215725";
    	ЧаркодТаб7 = "F0215825";
    	ЧаркодТаб8 = "F0215325";
    КонецЕсли;	

	
	Попытка
		Doc  = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД, 0);
		ИДПарент = Формирование_Декларация_НДС_Главный(Doc, Бланк, Документ);	
		Doc.Save(1);
	Исключение
		Сообщить("Ошибка: Перечень таблиц не передался. Передача остановлена");
		Doc  = App.MoveToTrash(ИД);
	КонецПопытки;
	
	Если ИДПарент <> 0 Тогда
		
		Для Каждого ЭлементМассива Из Приложения Цикл
			
			//Додаток_1
			Если ЭлементМассива = "Таб1" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб1, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-1", 0);	
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод1(Doc, ЧаркодТаб1, Документ);
					ДочерниеДокументы.Добавить(ИД+"-1");
				Исключение
					Сообщить("Ошибка: Додаток 1 не создан");
					Doc  = App.MoveToTrash(ИД+"-1");
				КонецПопытки;
				
				//Додаток_2
			ИначеЕсли ЭлементМассива = "Таб2" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб2, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-2", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод2(Doc, ЧаркодТаб2, Документ);
					ДочерниеДокументы.Добавить(ИД+"-2");
				Исключение
					Сообщить("Ошибка: Додаток 2 не создан");
					Doc  = App.MoveToTrash(ИД+"-2");
				КонецПопытки;
				
				//Додаток_3
			ИначеЕсли ЭлементМассива = "Таб3" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб3, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-3", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод3(Doc, ЧаркодТаб3, Документ);
					ДочерниеДокументы.Добавить(ИД+"-3");
				Исключение
					Сообщить("Ошибка: Додаток 3 не создан");
					Doc  = App.MoveToTrash(ИД+"-3");
				КонецПопытки;
				
				//Додаток_4
			ИначеЕсли ЭлементМассива = "Таб4" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб4, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-4", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод4(Doc, ЧаркодТаб4, Документ);
					ДочерниеДокументы.Добавить(ИД+"-4");
				Исключение
					Сообщить("Ошибка: Додаток 4 не создан");
					Doc  = App.MoveToTrash(ИД+"-4");
				КонецПопытки;
				
				//Додаток_5
			ИначеЕсли ЭлементМассива = "Таб5" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб5, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-5", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод5(Doc, ЧаркодТаб5, Документ);
					ДочерниеДокументы.Добавить(ИД+"-5");
				Исключение
					Сообщить("Ошибка: Додаток 5 не создан");
					Doc  = App.MoveToTrash(ИД+"-5");
				КонецПопытки;
				
				//Додаток_6
			ИначеЕсли ЭлементМассива = "Таб6" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб6, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-6", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод6(Doc, ЧаркодТаб6, Документ);
					ДочерниеДокументы.Добавить(ИД+"-6");
				Исключение
					Сообщить("Ошибка: Додаток 6 не создан");
					Doc  = App.MoveToTrash(ИД+"-6");
				КонецПопытки;				
				
				//Додаток_7
			ИначеЕсли ЭлементМассива = "Таб7" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб7, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-7", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод7(Doc, ЧаркодТаб7, Документ);
					ДочерниеДокументы.Добавить(ИД+"-7");
				Исключение
					Сообщить("Ошибка: Додаток 7 не создан");
					Doc  = App.MoveToTrash(ИД+"-7");
				КонецПопытки;
				
				//Додаток_8
			ИначеЕсли ЭлементМассива = "Таб8" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб8, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-8", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод8(Doc, ЧаркодТаб8, Документ);
					ДочерниеДокументы.Добавить(ИД+"-8");
				Исключение
					Сообщить("Ошибка: Додаток 8 не создан");
					Doc  = App.MoveToTrash(ИД+"-8");
				КонецПопытки;
				
			//	//Додаток_9
			//ИначеЕсли ЭлементМассива = "Таб9" Тогда
			//	
			//	Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб9, ОпределитьКодПериода(Документ.Дата,"ДекларацияНДС"), PDate, , ИД+"-9", 0);
			//	Doc.IDParent = ИДПарент;
			//	Попытка
			//		Формирование_Декларация_НДС_Дод9(Doc, ЧаркодТаб9, Документ);
			//		ДочерниеДокументы.Добавить(ИД+"-9");
			//	Исключение
			//		Сообщить("Ошибка: Додаток 9 не создан");
			//		Doc  = App.MoveToTrash(ИД+"-9");
			//	КонецПопытки;
			//	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДочерниеДокументы;
	
КонецФункции

&НаКлиенте
Функция Формирование_Декларация_НДС_Главный(Doc, Бланк, Документ)
	
	ИДПарент = 0;
	
    ////+DOCKING-291 06.07.2021 
    //Если Бланк = "J0200121" ИЛИ Бланк = "F0200121"  Тогда
    Если Бланк = "J0200125" ИЛИ Бланк = "F0200125"  Тогда
    ////-DOCKING-291 06.07.2021
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДекларация;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДекларация");
		
		rsMain = Doc.DataSets(); 
		НачалоОтчета(rsMain);	
		
		с = Новый Структура;
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		//Если Док.HM <> "" Тогда
		//	rsMain.Fields.Item("N6").value = true;
		//КонецЕсли;
		Если Док.HA <> "" Тогда
			rsMain.Fields.Item("N1").value = true;
		КонецЕсли;
		Если Док.HK <> "" Тогда
			rsMain.Fields.Item("N2").value = true;
		КонецЕсли;
		Если Док.HD1 <> "" Тогда
			rsMain.Fields.Item("N16").value = true;
		КонецЕсли;
		Если Док.HD2 <> "" Тогда
			rsMain.Fields.Item("N17").value = true;
		КонецЕсли;
		Если Док.HD3 <> "" Тогда
			rsMain.Fields.Item("N18").value = true;
		КонецЕсли;
		Если Док.HD4 <> "" Тогда
			rsMain.Fields.Item("N19").value = true;
		КонецЕсли;
		Если Док.HD5 <> "" Тогда
			rsMain.Fields.Item("N20").value = true;
		КонецЕсли;
		Если Док.HD6 <> "" Тогда
			rsMain.Fields.Item("N21").value = true;
		КонецЕсли;
		Если Док.HD7 <> "" Тогда
			rsMain.Fields.Item("N22").value = true;
		КонецЕсли;
		// DOCKING 530 + 26.05.2023
		//Если Док.HD8 <> "" Тогда
		//	rsMain.Fields.Item("N23").value = true;
		//КонецЕсли;
		// DOCKING 530 - 26.05.2023
		
		Если Док.HD2P <> "" Тогда
			rsMain.Fields.Item("N24").value = true;
		КонецЕсли;
		//Если Док.HD1P <> "" Тогда
		//	rsMain.Fields.Item("N12").value = true;
		//КонецЕсли;
		//Если Док.HD2P <> "" Тогда
		//	rsMain.Fields.Item("N25").value = true;
		//КонецЕсли;
		Если Док.HJAR <> "" Тогда
			rsMain.Fields.Item("N15").value = true;
		КонецЕсли;
		Если Док.HVMD <> 0 Тогда
			rsMain.Fields.Item("N14").value = Док.HVMD;
		КонецЕсли;
		
		с.Вставить("A100", "R11GA");
		с.Вставить("B100", "R11GB");
		с.Вставить("A120", "R12GA");
		с.Вставить("B120", "R12GB");
		с.Вставить("A130", "R13GA");
		с.Вставить("B130", "R13GB");
		с.Вставить("A210", "R21GA");
		с.Вставить("A212", "R22GA");
		с.Вставить("A220", "R30GA");
		с.Вставить("A410", "R41GA");
		с.Вставить("B410", "R41GB");
		с.Вставить("A411", "R411GA");
		с.Вставить("B411", "R411GB");
		с.Вставить("A420", "R42GA");
		с.Вставить("B420", "R42GB");
		с.Вставить("A421", "R421GA");
		с.Вставить("B421", "R421GB");
		с.Вставить("A430", "R43GA");
		с.Вставить("B430", "R43GB");
		с.Вставить("A431", "R431GA");
		с.Вставить("B431", "R431GB");
		с.Вставить("A300", "R50GA");
		с.Вставить("A311", "R51GA");
		с.Вставить("A312", "R511GA");
		с.Вставить("A700", "R61GA");
		с.Вставить("B700", "R61GB");
		с.Вставить("A720", "R62GA");
		с.Вставить("B720", "R62GB");
		с.Вставить("A830", "R70GA");
		с.Вставить("B830", "R70GB");
		с.Вставить("A820", "R80GA");
		с.Вставить("B820", "R80GB");
		с.Вставить("B900", "R90GB");
		с.Вставить("A1010", "R101GA");
		с.Вставить("B1010", "R101GB");
		с.Вставить("A1012", "R102GA");
		с.Вставить("B1012", "R102GB");
		с.Вставить("A1013", "R103GA");
		с.Вставить("B1013", "R103GB");
		с.Вставить("A1030", "R104GA");
		с.Вставить("A1210", "R111GA");
		с.Вставить("B1210", "R111GB");
		с.Вставить("A1212", "R112GA");
		с.Вставить("B1212", "R112GB");
		с.Вставить("A1213", "R113GA");
		с.Вставить("B1213", "R113GB");
		с.Вставить("A1220", "R120GA");
		с.Вставить("B1220", "R120GB");
		с.Вставить("A1240", "R131GA");
		с.Вставить("B1240", "R131GB");
		с.Вставить("A1242", "R132GA");
		с.Вставить("B1242", "R132GB");
		с.Вставить("A1620", "R140GA");
		с.Вставить("B1620", "R140GB");
		с.Вставить("A1500", "R150GA");
		с.Вставить("B1500", "R150GB");
		с.Вставить("B1600", "R160GB");
		с.Вставить("B1601", "R161GB");
		с.Вставить("B1602", "R162GB");
		с.Вставить("B1603", "R163GB");
		с.Вставить("B1700", "R170GB");
		с.Вставить("B1800", "R180GB");
		с.Вставить("B1900", "R190GB");
		с.Вставить("C1910", "R191G3");
		с.Вставить("B1910", "R191GB");
		с.Вставить("B2000", "R200GB");
		с.Вставить("B2010", "R201GB");
		с.Вставить("B2020", "R202GB");
		с.Вставить("B2021", "R2021GB");
		с.Вставить("B2022", "R2022GB");
		с.Вставить("B2030", "R203GB");
		с.Вставить("B2100", "R210GB");

        //с.Вставить("N3", "HBD"); // DOCKING 530 -
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
		
		
		ИДПарент = Doc.CardCode;	
	КонецЕсли;	
	
	Возврат ИДПарент;
	
КонецФункции

//===========================//
&НаКлиенте
Функция Формирование_УточняющаяДекларацияНДС(App, Документ, Бланк, PDate, ИД, Приложения)
	ДочерниеДокументы = Новый Массив;
	
	ИДПарент = 0;
	
	ЧаркодТаб1 = "";
	ЧаркодТаб2 = "";
	ЧаркодТаб3 = "";
	ЧаркодТаб4 = "";
	ЧаркодТаб5 = "";
	ЧаркодТаб6 = "";
	ЧаркодТаб7 = "";
	ЧаркодТаб9 = "";
	
	Если Бланк = "J0217025" Тогда
		ЧаркодТаб1 = "J0200525";
		ЧаркодТаб2 = "J0215225";
		ЧаркодТаб3 = "J0200625";
		ЧаркодТаб4 = "J0299825";
		ЧаркодТаб5 = "J0215125";
		ЧаркодТаб6 = "J0299325";
		ЧаркодТаб7 = "J0215725";
		ЧаркодТаб9 = "J0215325";	
	ИначеЕсли Бланк = "F0217025" Тогда
		ЧаркодТаб1 = "F0200425";
		ЧаркодТаб2 = "F0215225";
		ЧаркодТаб3 = "F0200525";
		ЧаркодТаб4 = "F0299825";
		ЧаркодТаб5 = "F0215125";
		ЧаркодТаб6 = "F0299325";
		ЧаркодТаб7 = "F0215725";
		ЧаркодТаб9 = "F0215325";
	КонецЕсли;	
		
	Попытка
		Doc  = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД, 0);
		ИДПарент = Формирование_УточняющаяДекларация_НДС_Главный(Doc, Бланк, Документ);			
	Исключение
		Сообщить("Ошибка: Перечень таблиц не передался. Передача остановлена");
		Doc  = App.MoveToTrash(ИД);
	КонецПопытки;
	
	Если ИДПарент <> 0 Тогда
		
		Для Каждого ЭлементМассива Из Приложения Цикл
			
			//Додаток_1
			Если ЭлементМассива = "Таб1" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб1, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-1", 0);	
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод1(Doc, ЧаркодТаб1, Документ);
					//Формирование_УточняющаяДекларация_НДС_Дод1(Doc, ЧаркодТаб1, Документ);
					ДочерниеДокументы.Добавить(ИД+"-1");
				Исключение
					Сообщить("Ошибка: Додаток 1 не создан");
					Doc  = App.MoveToTrash(ИД+"-1");
				КонецПопытки;
				
				//Додаток_2
			ИначеЕсли ЭлементМассива = "Таб2" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб2, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-2", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод2(Doc, ЧаркодТаб2, Документ);
					//Формирование_УточняющаяДекларация_НДС_Дод2(Doc, ЧаркодТаб2, Документ);
					ДочерниеДокументы.Добавить(ИД+"-2");
				Исключение
					Сообщить("Ошибка: Додаток 2 не создан");
					Doc  = App.MoveToTrash(ИД+"-2");
				КонецПопытки;
				
				//Додаток_3
			ИначеЕсли ЭлементМассива = "Таб3" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб3, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-3", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод3(Doc, ЧаркодТаб3, Документ);
					//Формирование_УточняющаяДекларация_НДС_Дод3(Doc, ЧаркодТаб3, Документ);
					ДочерниеДокументы.Добавить(ИД+"-3");
				Исключение
					Сообщить("Ошибка: Додаток 3 не создан");
					Doc  = App.MoveToTrash(ИД+"-3");
				КонецПопытки;
				
				//Додаток_4
			ИначеЕсли ЭлементМассива = "Таб4" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб4, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-4", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод4(Doc, ЧаркодТаб4, Документ);
					//Формирование_УточняющаяДекларация_НДС_Дод4(Doc, ЧаркодТаб4, Документ);
					ДочерниеДокументы.Добавить(ИД+"-4");
				Исключение
					Сообщить("Ошибка: Додаток 4 не создан");
					Doc  = App.MoveToTrash(ИД+"-4");
				КонецПопытки;
				
				//Додаток_5
			ИначеЕсли ЭлементМассива = "Таб5" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб6, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-5", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод5(Doc, ЧаркодТаб6, Документ);
				//	Формирование_УточняющаяДекларация_НДС_Дод6(Doc, ЧаркодТаб6, Документ);
					ДочерниеДокументы.Добавить(ИД+"-5");
				Исключение
					Сообщить("Ошибка: Додаток 5 не создан");
					Doc  = App.MoveToTrash(ИД+"-5");
				КонецПопытки;
				
				//Додаток_6
			ИначеЕсли ЭлементМассива = "Таб6" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб7, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-6", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод6(Doc, ЧаркодТаб7, Документ);
					//Формирование_УточняющаяДекларация_НДС_Дод7(Doc, ЧаркодТаб7, Документ);
					ДочерниеДокументы.Добавить(ИД+"-6");
				Исключение
					Сообщить("Ошибка: Додаток 6 не создан");
					Doc  = App.MoveToTrash(ИД+"-6");
				КонецПопытки;				
				
				//Додаток_7
			ИначеЕсли ЭлементМассива = "Таб7" Тогда
				
				//Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб8, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-7", 0);
				//Doc.IDParent = ИДПарент;
				//Попытка
				//	Формирование_Декларация_НДС_Дод9(Doc, ЧаркодТаб8, Документ);
				//	ДочерниеДокументы.Добавить(ИД+"-7");
				//Исключение
				//	Сообщить("Ошибка: Додаток 7 не создан");
				//	Doc  = App.MoveToTrash(ИД+"-7");
				//КонецПопытки;
								
				//Додаток_9
			ИначеЕсли ЭлементМассива = "Таб8" Тогда
				
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб9, ОпределитьКодПериода(Документ.Дата,"УточняющийРасчетДекларацияНДС"), PDate, , ИД+"-9", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_НДС_Дод8(Doc, ЧаркодТаб9, Документ);
					//Формирование_УточняющаяДекларация_НДС_Дод9(Doc, ЧаркодТаб9, Документ);
					ДочерниеДокументы.Добавить(ИД+"-9");
				Исключение
					Сообщить("Ошибка: Додаток 9 не создан");
					Doc  = App.MoveToTrash(ИД+"-9");
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДочерниеДокументы;
	
КонецФункции

&НаКлиенте
Функция Формирование_УточняющаяДекларация_НДС_Главный(Doc, Бланк, Документ)
	
	ИДПарент = 0;
	
	Если Бланк = "J0217025" ИЛИ Бланк = "F0217025"  Тогда
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДекларация");
		
		rsMain = Doc.DataSets(); 
		НачалоОтчета(rsMain);	
		
		с = Новый Структура;
		
		Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
			rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
		КонецЕсли;
		Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
			rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
		КонецЕсли;
		Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
			rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
		КонецЕсли;
		
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли; 
		с.Вставить("NDOG", "HNDGV");		
		
		Если Док.HVPP <> "" Тогда
			rsMain.Fields.Item("N1").value = true;
		КонецЕсли;
		Если Док.HD1 <> "" Тогда
			rsMain.Fields.Item("N3").value = true;
		КонецЕсли;
		Если Док.HD2 <> "" Тогда
			rsMain.Fields.Item("N4").value = true;
		КонецЕсли;
		Если Док.HD3 <> "" Тогда
			rsMain.Fields.Item("N5").value = true;
		КонецЕсли;
		Если Док.HD4 <> "" Тогда
			rsMain.Fields.Item("N6").value = true;
		КонецЕсли;
		Если Док.HD5 <> "" Тогда
			rsMain.Fields.Item("N7").value = true;
		КонецЕсли;
		Если Док.HD6 <> "" Тогда
			rsMain.Fields.Item("N8").value = true;
		КонецЕсли;
		Если Док.HD7 <> "" Тогда
			rsMain.Fields.Item("N9").value = true;
		КонецЕсли;
		
		Попытка
			Если Док.HD9 <> "" Тогда
				rsMain.Fields.Item("N10").value = true;
			КонецЕсли;
		Исключение 
			// 25.10.2022 + DOCKING 336
			//rsMain.Fields.Item("N10").value = NULL;	
			Попытка 
				rsMain.Fields.Item("N10").value = NULL;	
			Исключение КонецПопытки;	
			// 25.10.2022 - DOCKING 336
		КонецПопытки;
		
		Если Док.HBD <> "" Тогда
			rsMain.Fields.Item("N11").value = Док.HBD;
		КонецЕсли;
		
		с.Вставить("A1_4", "R11GA4");
		с.Вставить("A1_5", "R11GA");
		с.Вставить("A1_6", "R11GA6");
		с.Вставить("A2_4", "R11GB4");
		с.Вставить("A2_5", "R11GB");
		с.Вставить("A2_6", "R11GB6");
		с.Вставить("A3_4", "R12GA4");
		с.Вставить("A3_5", "R12GA");
		с.Вставить("A3_6", "R12GA6");
		с.Вставить("A4_4", "R12GB4");
		с.Вставить("A4_5", "R12GB");
		с.Вставить("A4_6", "R12GB6");
		// 25.10.2022 + DOCKING 336
		с.Вставить("A60_4", "R13GA4");
		с.Вставить("A60_5", "R13GA");
		с.Вставить("A60_6", "R13GA6");
		с.Вставить("A61_4", "R13GB4");
		с.Вставить("A61_5", "R13GB");
		с.Вставить("A61_6", "R13GB6");
		// 25.10.2022 - DOCKING 336
		с.Вставить("A5_4", "R21GA4");
		с.Вставить("A5_5", "R21GA");
		с.Вставить("A5_6", "R21GA6");
		с.Вставить("A53_4", "R22GA4");
		с.Вставить("A53_5", "R22GA");
		с.Вставить("A53_6", "R22GA6");
		с.Вставить("A6_4", "R30GA4");
		с.Вставить("A6_5", "R30GA");
		с.Вставить("A6_6", "R30GA6");
		с.Вставить("A7_4", "R41GA4");
		с.Вставить("A7_5", "R41GA");
		с.Вставить("A7_6", "R41GA6");
		с.Вставить("A8_4", "R41GB4");
		с.Вставить("A8_5", "R41GB");
		с.Вставить("A8_6", "R41GB6");
		// 25.10.2022 + DOCKING 336		
		с.Вставить("A55_4", "R411GA4");
		с.Вставить("A55_5", "R411GA");
		с.Вставить("A55_6", "R411GA6");
		с.Вставить("A56_4", "R411GB4");
		с.Вставить("A56_5", "R411GB");
		с.Вставить("A56_6", "R411GB6");
		// 25.10.2022 - DOCKING 336		
		с.Вставить("A9_4", "R42GA4");
		с.Вставить("A9_5", "R42GA");
		с.Вставить("A9_6", "R42GA6");
		с.Вставить("A10_4", "R42GB4");
		с.Вставить("A10_5", "R42GB");
		с.Вставить("A10_6", "R42GB6");
		// 25.10.2022 + DOCKING 336					
		с.Вставить("A57_4", "R421GA4");
		с.Вставить("A57_5", "R421GA");
		с.Вставить("A57_6", "R421GA6");
		с.Вставить("A58_4", "R421GB4");
		с.Вставить("A58_5", "R421GB");
		с.Вставить("A58_6", "R421GB6");
		с.Вставить("A62_4", "R43GA4");
		с.Вставить("A62_5", "R43GA");
		с.Вставить("A62_6", "R43GA6");
		с.Вставить("A63_4", "R43GB4");
		с.Вставить("A63_5", "R43GB");
		с.Вставить("A63_6", "R43GB6");
		с.Вставить("A64_4", "R431GA4");
		с.Вставить("A64_5", "R431GA");
		с.Вставить("A64_6", "R431GA6");
		с.Вставить("A65_4", "R431GB4");
		с.Вставить("A65_5", "R431GB");
		с.Вставить("A65_6", "R431GB6");
		// 25.10.2022 - DOCKING 336		
		с.Вставить("A11_4", "R50GA4");
		с.Вставить("A11_5", "R50GA");
		с.Вставить("A11_6", "R50GA6");
		с.Вставить("A54_4", "R51GA4");
		с.Вставить("A54_5", "R51GA");
		с.Вставить("A54_6", "R51GA6");
		
		с.Вставить("A59_4", "R511GA4");
		с.Вставить("A59_5", "R511GA");
		с.Вставить("A59_6", "R511GA6");
		
		//с.Вставить("A12_4", "R60GA4");
		//с.Вставить("A12_5", "R60GA");
		//с.Вставить("A12_6", "R60GA6");
		//с.Вставить("A13_4", "R60GB4");
		//с.Вставить("A13_5", "R60GB");
		//с.Вставить("A13_6", "R60GB6");
		// 25.10.2022 DOCKING 336 (в макете 2021 года удалена строка)
		//с.Вставить("A12_4", "R60GA4");
		//с.Вставить("A12_5", "R60GA");
		//с.Вставить("A12_6", "R60GA6");
		//с.Вставить("A13_4", "R60GB4");
		//с.Вставить("A13_5", "R60GB");
		//с.Вставить("A13_6", "R60GB6");
		с.Вставить("A12_4", "R61GA4");
		с.Вставить("A12_5", "R61GA");
		с.Вставить("A12_6", "R61GA6");
		с.Вставить("A13_4", "R61GB4");
		с.Вставить("A13_5", "R61GB");
		с.Вставить("A13_6", "R61GB6");
		
		с.Вставить("A66_4", "R62GA4");
		с.Вставить("A66_5", "R62GA");
		с.Вставить("A66_6", "R62GA6");
		с.Вставить("A67_4", "R62GB4");
		с.Вставить("A67_5", "R62GB");
		с.Вставить("A67_6", "R62GB6");
		// 27.10.2021 *** DOCKING 336
		с.Вставить("A14_4", "R70GA4");
		с.Вставить("A14_5", "R70GA");
		с.Вставить("A14_6", "R70GA6");
		с.Вставить("A15_4", "R70GB4");
		с.Вставить("A15_5", "R70GB");
		с.Вставить("A15_6", "R70GB6");
		с.Вставить("A16_4", "R80GA4");
		с.Вставить("A16_5", "R80GA");
		с.Вставить("A16_6", "R80GA6");
		с.Вставить("A17_4", "R80GB4");
		с.Вставить("A17_5", "R80GB");
		с.Вставить("A17_6", "R80GB6");
		с.Вставить("A18_4", "R90GB4");
		с.Вставить("A18_5", "R90GB");
		с.Вставить("A18_6", "R90GB6");
		с.Вставить("A19_4", "R101GA4");
		с.Вставить("A19_5", "R101GA");
		с.Вставить("A19_6", "R101GA6");
		с.Вставить("A20_4", "R101GB4");
		с.Вставить("A20_5", "R101GB");
		с.Вставить("A20_6", "R101GB6");
		с.Вставить("A21_4", "R102GA4");
		с.Вставить("A21_5", "R102GA");
		с.Вставить("A21_6", "R102GA6");
		с.Вставить("A22_4", "R102GB4");
		с.Вставить("A22_5", "R102GB");
		с.Вставить("A22_6", "R102GB6");
		с.Вставить("A23_4", "R103GA4");
		с.Вставить("A23_5", "R103GA");
		с.Вставить("A23_6", "R103GA6");
		с.Вставить("A24_4", "R111GA4");
		с.Вставить("A24_5", "R111GA");
		с.Вставить("A24_6", "R111GA6");
		с.Вставить("A25_4", "R111GB4");
		с.Вставить("A25_5", "R111GB");
		с.Вставить("A25_6", "R111GB6");
		с.Вставить("A26_4", "R112GA4");
		с.Вставить("A26_5", "R112GA");
		с.Вставить("A26_6", "R112GA6");
		с.Вставить("A27_4", "R112GB4");
		с.Вставить("A27_5", "R112GB");
		с.Вставить("A27_6", "R112GB6");
		
		с.Вставить("A70_4", "R113GA4");
		с.Вставить("A70_5", "R113GA");
		с.Вставить("A70_6", "R113GA6");
		с.Вставить("A71_4", "R113GB4");
		с.Вставить("A71_5", "R113GB");
		с.Вставить("A71_6", "R113GB6");
		
		с.Вставить("A28_4", "R120GA4");
		с.Вставить("A28_5", "R120GA");
		с.Вставить("A28_6", "R120GA6");
		с.Вставить("A29_4", "R120GB4");
		с.Вставить("A29_5", "R120GB");
		с.Вставить("A29_6", "R120GB6");
		// 25.10.2022 DOCKING 336 (в макете 2021 года удалена строка)
		//с.Вставить("A30_4", "R130GA4");
		//с.Вставить("A30_5", "R130GA");
		//с.Вставить("A30_6", "R130GA6");
		//с.Вставить("A31_4", "R130GB4");
		//с.Вставить("A31_5", "R130GB");
		//с.Вставить("A31_6", "R130GB6");
		с.Вставить("A30_4", "R131GA4");
		с.Вставить("A30_5", "R131GA");
		с.Вставить("A30_6", "R131GA6");
		с.Вставить("A31_4", "R131GB4");
		с.Вставить("A31_5", "R131GB");
		с.Вставить("A31_6", "R131GB6");
		
		с.Вставить("A72_4", "R132GA4");
		с.Вставить("A72_5", "R132GA");
		с.Вставить("A72_6", "R132GA6");
		с.Вставить("A73_4", "R132GB4");
		с.Вставить("A73_5", "R132GB");
		с.Вставить("A73_6", "R132GB6");
		// 25.10.2022 *** DOCKING 336
		с.Вставить("A32_4", "R140GA4");
		с.Вставить("A32_5", "R140GA");
		с.Вставить("A32_6", "R140GA6");
		с.Вставить("A33_4", "R140GA4");
		с.Вставить("A33_5", "R140GB");
		с.Вставить("A33_6", "R140GB6");
		с.Вставить("A34_4", "R150GA4");
		с.Вставить("A34_5", "R150GA");
		с.Вставить("A34_6", "R150GA6");
		с.Вставить("A35_4", "R150GB4");
		с.Вставить("A35_5", "R150GB");
		с.Вставить("A35_6", "R150GB6");
		с.Вставить("A36_4", "R160GB4");
		с.Вставить("A36_5", "R160GB");
		с.Вставить("A36_6", "R160GB6");
		с.Вставить("A37_4", "R161GB4");
		с.Вставить("A37_5", "R161GB");
		с.Вставить("A37_6", "R161GB6");
		с.Вставить("A38_4", "R162GB4");
		с.Вставить("A38_5", "R162GB");
		с.Вставить("A38_6", "R162GB6");
		с.Вставить("A39_4", "R163GB4");
		с.Вставить("A39_5", "R163GB");
		с.Вставить("A39_6", "R163GB6");
		с.Вставить("A40_4", "R170GB4");
		с.Вставить("A40_5", "R170GB");
		с.Вставить("A40_6", "R170GB6");
		с.Вставить("A41_4", "R180GB4");
		с.Вставить("A41_5", "R180GB");
		с.Вставить("A41_6", "R180GB6");
		с.Вставить("A42_6", "R181GB6");
		с.Вставить("A43_3", "R182G3");
		с.Вставить("A43_6", "R182GB6");
		с.Вставить("A44_4", "R190GB4");
		с.Вставить("A44_5", "R190GB");
		с.Вставить("A44_6", "R190GB6");
		с.Вставить("A45_3", "R191G3");
		с.Вставить("A45_4", "R191GB4");
		с.Вставить("A45_5", "R191GB");
		с.Вставить("A45_6", "R191GB6");
		с.Вставить("A46_4", "R200GB4");
		с.Вставить("A46_5", "R200GB");
		с.Вставить("A46_6", "R200GB6");
		с.Вставить("A47_4", "R201GB4");
		с.Вставить("A47_5", "R201GB");
		с.Вставить("A47_6", "R201GB6");
		с.Вставить("A48_4", "R202GB4");
		с.Вставить("A48_5", "R202GB");
		с.Вставить("A48_6", "R202GB6");
		с.Вставить("A49_4", "R2021GB4");
		с.Вставить("A49_5", "R2021GB");
		с.Вставить("A49_6", "R2021GB6");
		с.Вставить("A50_4", "R2022GB4");
		с.Вставить("A50_5", "R2022GB");
		с.Вставить("A50_6", "R2022GB6");
		с.Вставить("A51_4", "R203GB4");
		с.Вставить("A51_5", "R203GB");
		с.Вставить("A51_6", "R203GB6");
		с.Вставить("A52_4", "R210GB4");
		с.Вставить("A52_5", "R210GB");
		с.Вставить("A52_6", "R210GB6");
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
		
		//TAB2
		rsTAB2 = Doc.DataSets("TAB2");
		rsTAB2.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			
			СуществуетСтрока = Ложь;
			
			rsTAB2.Edit();
			Для Каждого Поле Из Док Цикл
				
				Если Поле.Ключ = "ДT2RXXXXG1D_"+НомерСтроки Тогда
					Если Поле.Значение <> Дата(1,1,1) Тогда
						СуществуетСтрока = Истина;
						rsTAB2.Fields.Item("TAB2_A1").Value = Поле.Значение;				 
					КонецЕсли;
				ИначеЕсли Поле.Ключ = "ДT2RXXXXG2S_"+НомерСтроки Тогда
					rsTAB2.Fields.Item("TAB2_A2").Value = Поле.Значение;
					СуществуетСтрока = Истина;
				ИначеЕсли Поле.Ключ = "ДT2RXXXXG3_"+НомерСтроки Тогда
					rsTAB2.Fields.Item("TAB2_A3").Value = Поле.Значение;
					СуществуетСтрока = Истина;					  
				КонецЕсли;
				
			КонецЦикла;
			rsTAB2.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsTAB2.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsTAB2.Delete();
			КонецЕсли;
			
		КонецЦикла;
		КонецОтчета(Doc);	
		
		ИДПарент = Doc.CardCode;	
	КонецЕсли;	
	
	Возврат ИДПарент;
	
КонецФункции

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод1(Doc, БланкДод1, Документ)
	
	Если БланкДод1 = "J0200525" ИЛИ БланкДод1 = "F0200425" Тогда 
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение1");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;
		
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
			
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли; 
		
		// ПОМЕНЯТЬ ЭТУ СТРУКТУРУ
		//с.Вставить("R09G6", "R0111G6"); //!!!
		
		//с.Вставить("R09G9", "R0111G9");
		//с.Вставить("R10G6", "R0112G6"); //!!!
		//с.Вставить("R10G7", "R0112G7"); //!!!
		//с.Вставить("R10G8", "R0112G8"); //!!!
		//с.Вставить("R10G9", "R0112G9"); //!!!
		//с.Вставить("R08G6", "R0121G6"); //!!!
		//с.Вставить("R08G7", "R0121G7");
		//с.Вставить("R08G8", "R0121G8");
		//с.Вставить("R08G9", "R0121G9");
		//с.Вставить("R11G6", "R0122G6"); //!!!
		//с.Вставить("R11G7", "R0122G7"); //!!!
		//с.Вставить("R11G8", "R0122G8"); //!!!
		//с.Вставить("R11G9", "R0122G9"); //!!!
		//с.Вставить("R12G6", "R0123G6"); //!!!
		//с.Вставить("R12G7", "R0123G7"); //!!!
		//с.Вставить("R12G8", "R0123G8"); //!!!
		//с.Вставить("R13G6", "R0124G6"); //!!!
		//с.Вставить("R13G7", "R0124G7"); //!!!
		//с.Вставить("R13G8", "R0124G8"); //!!!
		//с.Вставить("R13G9", "R0124G9"); //!!!
		//с.Вставить("R15G6", "R021G6");  //!!!
		//с.Вставить("R15G7", "R021G7");  //!!!
		//с.Вставить("R15G8", "R021G8");  //!!!
		//с.Вставить("R15G9", "R021G9");  //!!!
		//с.Вставить("R16G6", "R0211G6"); //!!!
		//с.Вставить("R16G7", "R0211G7"); //!!!
		//с.Вставить("R16G8", "R0211G8"); //!!!
		//с.Вставить("R17G6", "R0212G6"); //!!!
		//с.Вставить("R17G7", "R0212G7"); //!!!
		//с.Вставить("R18G6", "R0213G6"); //!!!
		//с.Вставить("R18G7", "R0213G7"); //!!!
		//с.Вставить("R18G9", "R0213G9"); //!!!
		//с.Вставить("R03G4", "R022G4");
		//с.Вставить("R03G5", "R022G5");
		//с.Вставить("R03G6", "R022G6");
		//с.Вставить("R03G7", "R022G7");  //!!!
		//с.Вставить("R04G4", "R0221G4");
		//с.Вставить("R04G5", "R0221G5");
		//с.Вставить("R04G6", "R0221G6");
		с.Вставить("R06G4", "R0222G4");
		с.Вставить("R06G5", "R0222G5");
		//с.Вставить("R06G7", "R0222G7"); //!!!
		//с.Вставить("R07G4", "R0223G4");
		//с.Вставить("R07G5", "R0223G5");
		//с.Вставить("R05G4", "R0224G4"); //!!!
		//с.Вставить("R05G6", "R0224G6"); //!!!
		
		//***************************************
		//с.Вставить("R01G4","R001G4");
		//с.Вставить("R01G5","R001G5");
		//с.Вставить("R01G6","R001G6");
		//с.Вставить("R01G7","R001G7");
		
		//с.Вставить("R01G4","R0121G6");
		//с.Вставить("R01G5","R0121G7");
		//с.Вставить("R01G6","R0121G8");
		//с.Вставить("R01G7","R0121G9");

		// из формы 2021 года пропали эти поля
		//с.Вставить("R010G4","R0011G4");
		//с.Вставить("R010G5","R0011G5");
		//с.Вставить("R010G6","R0011G6");
		//с.Вставить("R010G7","R0011G7");
		//с.Вставить("R020G4","R0012G4");
		//с.Вставить("R020G5","R0012G5");
		//с.Вставить("R020G6","R0012G6");
		//с.Вставить("R020G7","R0012G7");
		//с.Вставить("R030G4","R0013G4");
		//с.Вставить("R030G5","R0013G5");
		//с.Вставить("R030G6","R0013G6");
		//с.Вставить("R030G7","R0013G7");
		//с.Вставить("R040G4","R0014G4");
		//с.Вставить("R040G5","R0014G5");
		//с.Вставить("R040G6","R0014G6");
		//с.Вставить("R040G7","R0014G7");
		// *** из формы 2021 года пропали эти поля
		
		с.Вставить("R02G4","R0121G6");
		с.Вставить("R02G5","R0121G7");
		с.Вставить("R02G6","R0121G8");
		с.Вставить("R02G7","R0121G9");
		// 
		//с.Вставить("R021G4","R011G4");  //из формы 2021 года пропали эти поля
		//с.Вставить("R021G5","R011G5");  //из формы 2021 года пропали эти поля
		//с.Вставить("R021G7","R011G7");  // из формы 2021 года пропали эти поля
		//с.Вставить("R060G4","R012G4");    // 600000000000 (переноситься до рядка 4.1 декларації)
		//с.Вставить("R060G5","R012G5");    // 600000000000 (переноситься до рядка 4.1 декларації)
		//с.Вставить("R060G7","R012G7");    // 600000000000 (переноситься до рядка 4.1 декларації)
		//с.Вставить("R070G4","R0121G4");   // 600000000000 (переноситься до рядка 4.1 декларації)
		
		
		//с.Вставить("R070G6","R0121G6");
		//с.Вставить("R070G7","R0121G7");
		
		
		с.Вставить("R050G4","R0123G6");
		с.Вставить("R050G5","R0123G7");
		с.Вставить("R050G7","R0123G8");
	////	с.Вставить("R061G4","R0124G6");
		с.Вставить("R061G5","R0124G7");
		с.Вставить("R062G4","R0124G6");
		с.Вставить("R062G6","R0124G8");
		
		с.Вставить("R08G6","R0111G6");
		с.Вставить("R08G7","R0111G7");
		с.Вставить("R08G8","R0111G8");
		с.Вставить("R09G6","R0112G6");
		с.Вставить("R09G7", "R0112G7");
		с.Вставить("R09G8", "R0112G8");
		
		
		
		
		//с.Вставить("R09G7","R0120G7");
		//с.Вставить("R09G8","R0120G8");
		с.Вставить("R03G4","R022G4");
		с.Вставить("R03G5","R022G5");
		с.Вставить("R03G6","R022G6");
		с.Вставить("R04G4","R0221G4");
		с.Вставить("R04G5","R0221G5");
		с.Вставить("R04G6","R0221G6");
		с.Вставить("R06G4","R0222G4"); /////
		с.Вставить("R06G5","R0222G5");
		с.Вставить("R07G4","R0223G4");
		с.Вставить("R07G5","R0223G5");


		//***************************************
		

		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			НомерСтроки = 0;
			Если (Поле.Ключ = "T111R")  Тогда 
				
				//TAB8 (По новому)
				//rsTab = Doc.DataSets("TAB9");
				rsTab = Doc.DataSets("TAB8");
				rsTab.Clear();
				rsTab.Edit();
				
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.T111RG2) = "" Тогда
						продолжить;
					Конецесли;  
					Номерстроки = НомерСтроки + 1;
					
					rsTab.Fields.Item("TAB8_A2").Value = Стр.T111RG2;
					rsTab.Fields.Item("TAB8_A3").Value = Стр.T111RG3D;  
					rsTab.Fields.Item("TAB8_A4"+Строка(НомерСтроки)+"").Value = Стр.T111RG4S; 
					Если Стр.T111RG5 Тогда
						rsTab.Fields.Item("TAB8_CX").Value = "true";   
					Конецесли;
					rsTab.Fields.Item("TAB8_A6").Value = Стр.T111RG6;  
					rsTab.Fields.Item("TAB8_A7").Value = Стр.T111RG7;  	
					
					Если Стр.T111RG8 <> 0 Тогда
						rsTab.Fields.Item("TAB8_A8").Value = Стр.T111RG8;   
					КонецЕсли; 
					//Если Стр.T111RG9 <> 0 Тогда
					//	rsTab.Fields.Item("TAB8_A9").Value = Стр.T111RG9;      
					//КонецЕсли; 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если (Поле.Ключ = "T112R") Тогда 
				
				//TAB10
			//	rsTab = Doc.DataSets("TAB10");
				rsTab = Doc.DataSets("TAB9");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.T112RG2) = "" Тогда
						продолжить;
					Конецесли;
					
					Номерстроки = НомерСтроки + 1;
					rsTab.Fields.Item("TAB9_A2").Value = Стр.T112RG2;
					rsTab.Fields.Item("TAB9_A3").Value = Стр.T112RG3D;  
					rsTab.Fields.Item("TAB9_A4"+Строка(НомерСтроки)+"").Value = Стр.T112RG4S; 
					Если Стр.T112RG5 Тогда
						rsTab.Fields.Item("TAB9_CX").Value = "true";   
					Конецесли;
					rsTab.Fields.Item("TAB9_A6").Value = Стр.T112RG6;  
					rsTab.Fields.Item("TAB9_A7").Value = Стр.T112RG7;  	
					
					Если Стр.T112RG8 <> 0 Тогда
						rsTab.Fields.Item("TAB9_A8").Value = Стр.T112RG8;   
					КонецЕсли; 
					//Если Стр.T112RG9 <> 0 Тогда
					//	rsTab.Fields.Item("TAB9_A9").Value = Стр.T112RG9;    
					//КонецЕсли; 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			                                  			
			Если (Поле.Ключ = "T121R")  Тогда 
				
				//TAB8
				//rsTab = Doc.DataSets("TAB8");
				rsTab = Doc.DataSets("TAB1");  // без строк ??
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.T121RG2) = "" Тогда
						продолжить;
					Конецесли;
					rsTab.Fields.Item("TAB1_A6").Value = Стр.T121RG2;
					//rsTab.Fields.Item("TAB1_A7").Value = Стр.T121RG3D;  // !!  ПЕРЕМЕННАЯ В МЕДКЕ НЕПРАВИЛЬНОГО ТИПА, число вместо даты
					//rsTab.Fields.Item("TAB1_B7").Value = Стр.T121RG4S; 
					Если Стр.T121RG5 Тогда
					//	rsTab.Fields.Item("TAB1_CX").Value = "true";     //   !!  ПЕРЕМЕННАЯ В МЕДКЕ НЕПРАВИЛЬНОГО ТИПА, число вместо булево
					Конецесли;
					rsTab.Fields.Item("TAB1_A3").Value = Стр.T121RG6;  
					rsTab.Fields.Item("TAB1_A4").Value = Стр.T121RG7;  	
					
					Если Стр.T121RG8 <> 0 Тогда
						rsTab.Fields.Item("TAB1_A41").Value = Стр.T121RG8;   
					КонецЕсли; 
					Если Стр.T121RG9 <> 0 Тогда
						rsTab.Fields.Item("TAB1_A13").Value = Стр.T121RG9;    
					КонецЕсли; 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;  
			
			Если (Поле.Ключ = "T22R") Тогда 
				
				//TAB2
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.T22RG2) = "" Тогда
						продолжить;
					Конецесли;
					rsTab.Fields.Item("TAB2_A6").Value = Стр.T22RG2;
					rsTab.Fields.Item("TAB2_A7").Value = Стр.T22RG311; 
					rsTab.Fields.Item("TAB2_B7").Value = Стр.T22RG312;
					
					Если Стр.T22RG32 Тогда
					//	rsTab.Fields.Item("TAB2_CX").Value = "true";    //   !!  ПЕРЕМЕННАЯ В МЕДКЕ НЕПРАВИЛЬНОГО ТИПА, число вместо булево
					Конецесли;
					
					rsTab.Fields.Item("TAB2_A3").Value = Стр.T22RG4;
					rsTab.Fields.Item("TAB2_A4").Value = Стр.T22RG5; 
					rsTab.Fields.Item("TAB2_A41").Value = Стр.T22RG6;
					//rsTab.Fields.Item("TAB2_A42").Value = Стр.T22RG7;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
	 
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры // 27.10.2021 *** DOCKING 348

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод2(Doc, БланкДод2, Документ)
	
	Если БланкДод2 = "J0215225" ИЛИ БланкДод2 = "F0215225" Тогда 
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение2");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
	
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
			
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;	
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		с.Вставить("A1_5", "R01G5");
		с.Вставить("A2_5", "R02G5");
		с.Вставить("A2_6", "R02G6");	
		//с.Вставить("N1", "R03G1S");
		с.Вставить("N2", "R03G2");
		с.Вставить("A3_3", "R04G3");	
		с.Вставить("A4_5", "R05G5");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "П2T1R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T1RG3) Тогда
						rsTab.Fields.Item("TAB1_A3").Value = Стр.T1RG3;
					КонецЕсли;
					Если ЗначениеЗаполнено(Стр.T1RG4) Тогда
						rsTab.Fields.Item("TAB1_A4").Value = Стр.T1RG4;
					КонецЕсли;
					rsTab.Fields.Item("TAB1_A5").Value = Стр.T1RG5;
					rsTab.Fields.Item("TAB1_A6").Value = Стр.T1RG6;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П2T2R" Тогда
				
				//TAB2///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB2_A2").Value = Стр.T2RG2;
					rsTab.Fields.Item("TAB2_A3").Value = Стр.T2RG3;
					Если Стр.T2RG4D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB2_A4").Value = Стр.T2RG4D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB2_A5").Value = Стр.T2RG5S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П2T3R" Тогда
				
				//TAB3///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB3_A2").Value = Стр.T3RG2;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.T3RG3;
					
					Если ЗначениеЗаполнено(Стр.T3RG4A) Тогда
						rsTab.Fields.Item("TAB3_A41").Value = Стр.T3RG4A;
					КонецЕсли;
					Если ЗначениеЗаполнено(Стр.T3RG4B) Тогда
						rsTab.Fields.Item("TAB3_A42").Value = Стр.T3RG4B;
					КонецЕсли;
					rsTab.Fields.Item("TAB3_A5").Value = Стр.T3RG5;
					Если Стр.T3RG6D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB3_A6").Value = Стр.T3RG6D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB3_A7").Value = Стр.T3RG7S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;		

		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры // 27.10.2021 *** DOCKING 348

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод3(Doc, БланкДод3, Документ)
	
	Если БланкДод3 = "J0200625" ИЛИ БланкДод3 = "F0200525" Тогда 
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение3");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
			
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;	
		//----------------------

		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли; 
		с.Вставить("NDOG", "HNDGV");
		
		Если Док.R010G3 <> 0 Тогда
			rsMain.Fields.Item("A1").Value = Док.R010G3;	
		КонецЕсли; 
		
		Если Док.R020G3 <> 0 Тогда
			rsMain.Fields.Item("A2").Value = Док.R020G3;	
		КонецЕсли; 
		
		Если Док.R030G3 <> 0 Тогда
			rsMain.Fields.Item("A3").Value = Док.R030G3;	
		КонецЕсли; 
		
		с.Вставить("A1_5", "R01G5");
		с.Вставить("A1_7", "R01G7");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "П3T1R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB1_A2").Value = Стр.T1RG2;	
					Если ЗначениеЗаполнено(Стр.T1RG3) Тогда
						rsTab.Fields.Item("TAB1_A3").Value = Стр.T1RG3;
					КонецЕсли;		
					Если ЗначениеЗаполнено(Стр.T1RG4) Тогда
						rsTab.Fields.Item("TAB1_A4").Value = Стр.T1RG4;
					КонецЕсли;	
					rsTab.Fields.Item("TAB1_A5").Value = Стр.T1RG5;
					rsTab.Fields.Item("TAB1_A6").Value = Стр.T1RG6;
					rsTab.Fields.Item("TAB1_A7").Value = Стр.T1RG7;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;		
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры    // 27.10.2021 *** DOCKING 348

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод4(Doc, БланкДод4, Документ)
	
	Если БланкДод4 = "J0299825" ИЛИ БланкДод4 = "F0299825" Тогда   
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение4");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;	
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.R0303G2) Тогда
			rsMain.Fields.Item("N3").value = Док.R0303G2;
		КонецЕсли;
		Если ЗначениеЗаполнено(Док.R0303G3) Тогда
			rsMain.Fields.Item("N4").value = Док.R0303G3;
		КонецЕсли;

		с.Вставить("NDOG", "HNDGV");
		с.Вставить("N5", "R0304G2");	
		с.Вставить("N6", "R0304G2");
		с.Вставить("N7", "R0305G3S");
		//с.Вставить("N9", "R0401G3");
		с.Вставить("A2_1", "R06G1");
		с.Вставить("A2_2", "R06G2");
		с.Вставить("A2_3", "R06G3");
		с.Вставить("A2_4", "R06G4");
		с.Вставить("N10", "R0402G2S");
		с.Вставить("N11", "R0403G1S");
		с.Вставить("N12", "R07G4");
		с.Вставить("N2", "R08G1");
		с.Вставить("A3_3", "R09G3");
		с.Вставить("A4_4", "R010G4");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		
		Для Каждого Поле Из ТЧ Цикл   
			
			Если Поле.Ключ = "П4T1R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB1_A2").Value = Стр.T1RG2;
					rsTab.Fields.Item("TAB1_A3").Value = Стр.T1RG3S;
					rsTab.Fields.Item("TAB1_A4").Value = Стр.T1RG4;
					//rsTab.Fields.Item("TAB1_A5").Value = Стр.T3RG5;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П4T4R" Тогда
				
				//TAB2///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB2_A2").Value = Стр.T4RG2;
					rsTab.Fields.Item("TAB2_A3").Value = Стр.T4RG3;
					Если Стр.T4RG4D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB2_A4").Value = Стр.T4RG4D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB2_A5").Value = Стр.T4RG5S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П4T5R" Тогда
				
				//TAB3///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB3_A2").Value = Стр.T5RG2;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.T5RG3;
					rsTab.Fields.Item("TAB3_A4").Value = Стр.T5RG4;
					Если Стр.T5RG5D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB3_A5").Value = Стр.T5RG5D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB3_A6").Value = Стр.T5RG6S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;		
	
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры   // 27.10.2021 *** DOCKING 348

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод5(Doc, БланкДод5, Документ)
	
	Если БланкДод5 = "J0215125" ИЛИ БланкДод5 = "F0215125" Тогда      
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаСправка");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;	
		
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;
		//----------------------

		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли; 
		с.Вставить("NDOG", "HNDGV");

		с.Вставить("A1", "R011G4");
		с.Вставить("A3", "R012G4");
		с.Вставить("A4", "R01G4");
		с.Вставить("A41","R02G4");
		с.Вставить("A5", "R02G5"); 
		с.Вставить("A6", "R02G6");
		с.Вставить("A7", "R02G7");
		с.Вставить("A8", "R02G8");
		с.Вставить("A9", "R02G9");
		с.Вставить("N6", "R04G2");
		с.Вставить("N7", "R05G2");
		с.Вставить("N8", "R06G2"); 


		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");					
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "С1T11R" Тогда
				
				//TAB1
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T11RG2S) Тогда
						rsTab.Fields.Item("TAB1_A2").Value = Стр.T11RG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB1_A3").Value = Стр.T11RG3S;
					rsTab.Fields.Item("TAB1_A4").Value = Стр.T11RG4;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "С1T12R" Тогда
				
				//TAB3
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T12RG2S) Тогда
						rsTab.Fields.Item("TAB3_A2").Value = Стр.T12RG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.T12RG3S;
					rsTab.Fields.Item("TAB3_A4").Value = Стр.T12RG4;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "T2R" Тогда
				
				//TAB2
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T2RG2S) Тогда
						rsTab.Fields.Item("TAB2_A2").Value = Стр.T2RG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB2_A3").Value = Стр.T2RG3;
					
					rsTab.Fields.Item("TAB2_A41").Value = Стр.T2RG4;
					rsTab.Fields.Item("TAB2_A4").Value = Стр.T2RG5;
					rsTab.Fields.Item("TAB2_A6").Value = Стр.T2RG6;
					rsTab.Fields.Item("TAB2_A7").Value = Стр.T2RG7;
					rsTab.Fields.Item("TAB2_A8").Value = Стр.T2RG8;
					rsTab.Fields.Item("TAB2_A9").Value = Стр.T2RG9;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры    // 27.10.2021 *** DOCKING 348

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод6(Doc, БланкДод6, Документ)
	
	Если БланкДод6 = "J0299325" ИЛИ БланкДод6 = "F0299325" Тогда 

		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаСправка");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;	
		
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;
		//----------------------

		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли; 
		с.Вставить("NDOG", "HNDGV");

		с.Вставить("A1", "R011G4");
		с.Вставить("A3", "R012G4");
		с.Вставить("A4", "R01G4");
		с.Вставить("A41","R02G4");
		с.Вставить("A5", "R02G5"); 
		с.Вставить("A6", "R02G6");
		с.Вставить("A7", "R02G7");
		с.Вставить("A8", "R02G8");
	//	с.Вставить("A9", "R02G9");
		с.Вставить("N6", "R04G2");
		с.Вставить("N7", "R05G2");
		с.Вставить("N8", "R06G2"); 


		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");					
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "С1T11R" Тогда
				
				//TAB1
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T11RG2S) Тогда
						rsTab.Fields.Item("TAB1_A2").Value = Стр.T11RG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB1_A3").Value = Стр.T11RG3S;
					rsTab.Fields.Item("TAB1_A4").Value = Стр.T11RG4;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "С1T12R" Тогда
				
				//TAB3
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T12RG2S) Тогда
						rsTab.Fields.Item("TAB3_A2").Value = Стр.T12RG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.T12RG3S;
					rsTab.Fields.Item("TAB3_A4").Value = Стр.T12RG4;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "С1T2R" Тогда
				
				//TAB2
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T2RG2S) Тогда
						rsTab.Fields.Item("TAB2_A2").Value = Стр.T2RG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB2_A3").Value = Стр.T2RG3;
					
					rsTab.Fields.Item("TAB2_A41").Value = Стр.T2RG4;
					rsTab.Fields.Item("TAB2_A4").Value = Стр.T2RG5;
					rsTab.Fields.Item("TAB2_A6").Value = Стр.T2RG6;
					rsTab.Fields.Item("TAB2_A7").Value = Стр.T2RG7;
					rsTab.Fields.Item("TAB2_A8").Value = Стр.T2RG8;
				//	rsTab.Fields.Item("TAB2_A9").Value = Стр.T2RG9;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры    // 27.10.2021 *** DOCKING 348

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод7(Doc, БланкДод7, Документ)
	
	Если БланкДод7 = "J0215725" ИЛИ БланкДод7 = "F0215725" Тогда   
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение6");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;
		//----------------------

		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		
		с.Вставить("A1_4","R011G4");
		с.Вставить("A1_5","R011G5");
		с.Вставить("A1_6","R011G6");
		с.Вставить("A1_7","R011G7");
		с.Вставить("A2_4","R012G4");
		с.Вставить("A2_5","R012G5");
		с.Вставить("A2_6","R012G6");
		с.Вставить("A2_7","R012G7");
		с.Вставить("A3_4","R0131G4");
		с.Вставить("A3_5","R0131G5");
		с.Вставить("A3_6","R0131G6");
		с.Вставить("A3_7","R0131G7");
		с.Вставить("A4_4","R0132G4");
		с.Вставить("A4_5","R0132G5");
		с.Вставить("A4_6","R0132G6");
		с.Вставить("A4_7","R0132G7");
		с.Вставить("A5_4","R0133G4");
		с.Вставить("A5_5","R0133G5");
		с.Вставить("A5_6","R0133G6");
		с.Вставить("A5_7","R0133G7");
		с.Вставить("A6_6","R02G6");
		с.Вставить("A6_7","R02G7");
		с.Вставить("A6_8","R02G8");
		с.Вставить("A6_9","R02G9");
	//	с.Вставить("A6_10","R02G10"); // этих переменных
	//	с.Вставить("A6_11","R02G11"); // нет в макете
		с.Вставить("A9_3","R031G3");
		с.Вставить("A9_4","R031G4");
		с.Вставить("A9_5","R031G5");
		с.Вставить("A9_6","R031G6");
		с.Вставить("A9_7","R031G7");
		с.Вставить("A10_3","R032G3");
		с.Вставить("A10_4","R032G4");
		с.Вставить("A10_5","R032G5");
		с.Вставить("A10_6","R032G6");
		с.Вставить("A10_7","R032G7");
		с.Вставить("A11_3","R033G3");
		с.Вставить("A11_4","R033G4");
		с.Вставить("A11_5","R033G5");
		с.Вставить("A11_6","R033G6");
		с.Вставить("A11_7","R033G7");
		с.Вставить("A12_1","R041G1");
		с.Вставить("A12_2","R041G2");
		с.Вставить("A12_3","R041G3");
		с.Вставить("A12_4","R041G4");
		с.Вставить("A12_5","R041G5");
		с.Вставить("A12_6","R041G6");
		с.Вставить("A12_7","R041G7");
		с.Вставить("A12_8","R041G8");
		с.Вставить("A12_9","R041G9");
		с.Вставить("A12_10","R041G10");
		с.Вставить("A12_11","R041G11");
		с.Вставить("A12_12","R041G12");
		с.Вставить("A12_13","R041G13");
		с.Вставить("A12_14","R041G14");
		
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   
			
			Если Поле.Ключ = "П6T2R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.T2RG2D) Тогда
						rsTab.Fields.Item("TAB1_A2").Value = Стр.T2RG2D;
					КонецЕсли; 
					Если ЗначениеЗаполнено(Стр.T2RG4D) Тогда
						rsTab.Fields.Item("TAB1_A4").Value = Стр.T2RG4D;
					КонецЕсли;  
					
					rsTab.Fields.Item("TAB1_A6").Value = Стр.T2RG6;
					rsTab.Fields.Item("TAB1_A7").Value = Стр.T2RG7; 
					rsTab.Fields.Item("TAB1_A8").Value = Стр.T2RG8;
					rsTab.Fields.Item("TAB1_A9").Value = Стр.T2RG9;
					//rsTab.Fields.Item("TAB1_A10").Value = Стр.T2RG10; 
					//rsTab.Fields.Item("TAB1_A11").Value = Стр.T2RG11; 
					rsTab.Fields.Item("TAB1_A3").Value = Стр.T2RG3S; 
					rsTab.Fields.Item("TAB1_A5").Value = Стр.T2RG5S;

					rsTab.Post();
					rsTab.Append(); 
					
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

// 25.10.2022 DOCKING 336
&НаКлиенте
Процедура Формирование_УточняющаяДекларация_НДС_Дод9(Doc, БланкДод9, Документ)
	
	Если БланкДод9 = "J0215325" ИЛИ БланкДод9 = "F0215325" Тогда
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение8");
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш + "" + Док.ГодОш + "" + Док.ГодОш + "" + Док.ГодОш +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш + "" + Док.ГодОш + "" + Док.ГодОш + "" + Док.ГодОш +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш + "" + Док.МесОш + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш + "" + Док.МесОш + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"")) Тогда
				rsMain.Fields.Item("NYEAR").value = Число(Док.ГодОш1 + "" + Док.ГодОш2 + "" + Док.ГодОш3 + "" + Док.ГодОш4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEAR").value = NULL;
		КонецПопытки;
		
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.МесОш1 + "" + Док.МесОш2 + "")) Тогда
				rsMain.Fields.Item("NMONTH").value = Число(Док.МесОш1 + "" + Док.МесОш2 + "");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NMONTH").value = NULL;
		КонецПопытки;
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		с.Вставить("N1", "HPV");
		с.Вставить("N2", "HPVN");
		с.Вставить("N3", "R0101G3");
		с.Вставить("N4", "R0102G3");
		Если Док.Свойство("R006G3D") Тогда
			Если Док.R006G3D <> Дата(1,1,1) Тогда
			   с.Вставить("N5", "R006G3D");	
			КонецЕсли;   
		КонецЕсли;
		с.Вставить("A1_21", "R0201G2A");
		с.Вставить("A2_21", "R0202G2A");
		с.Вставить("A3_21", "R0203G2A");
		с.Вставить("A4_21", "R0204G2A");
		с.Вставить("A5_21", "R0205G2A");
		с.Вставить("A6_21", "R0206G2A");
		с.Вставить("A7_21", "R0207G2A");
		с.Вставить("A8_21", "R0208G2A");
		с.Вставить("A9_21", "R0209G2A");
		с.Вставить("A10_21", "R0210G2A");
		с.Вставить("A11_21", "R0211G2A");
		с.Вставить("A12_21", "R0212G2A");
		
		с.Вставить("A1_22", "R0201G2B");
		с.Вставить("A2_22", "R0202G2B");
		с.Вставить("A3_22", "R0203G2B");
		с.Вставить("A4_22", "R0204G2B");
		с.Вставить("A5_22", "R0205G2B");
		с.Вставить("A6_22", "R0206G2B");
		с.Вставить("A7_22", "R0207G2B");
		с.Вставить("A8_22", "R0208G2B");
		с.Вставить("A9_22", "R0209G2B");
		с.Вставить("A10_22", "R0210G2B");
		с.Вставить("A11_22", "R0211G2B");
		с.Вставить("A12_22", "R0212G2B");
		
		с.Вставить("A1_3", "R0201G3");
		с.Вставить("A2_3", "R0202G3");
		с.Вставить("A3_3", "R0203G3");
		с.Вставить("A4_3", "R0204G3");
		с.Вставить("A5_3", "R0205G3");
		с.Вставить("A6_3", "R0206G3");
		с.Вставить("A7_3", "R0207G3");
		с.Вставить("A8_3", "R0208G3");
		с.Вставить("A9_3", "R0209G3");
		с.Вставить("A10_3", "R0210G3");
		с.Вставить("A11_3", "R0211G3");
		с.Вставить("A12_3", "R0212G3");
		с.Вставить("A13_3", "R02G3");
		
		Если Док.Свойство("R03G3") Тогда
			с.Вставить("A14_3", "R03G3");
		КонецЕсли;
		
		Если Док.Свойство("R04G3") Тогда
			с.Вставить("A15_3", "R04G3");
		КонецЕсли; 
		
		с.Вставить("A1_4", "R0201G4");
		с.Вставить("A2_4", "R0202G4");
		с.Вставить("A3_4", "R0203G4");
		с.Вставить("A4_4", "R0204G4");
		с.Вставить("A5_4", "R0205G4");
		с.Вставить("A6_4", "R0206G4");
		с.Вставить("A7_4", "R0207G4");
		с.Вставить("A8_4", "R0208G4");
		с.Вставить("A9_4", "R0209G4");
		с.Вставить("A10_4", "R0210G4");
		с.Вставить("A11_4", "R0211G4");
		с.Вставить("A12_4", "R0212G4");
		с.Вставить("A13_4", "R02G4");
		
		Если Док.Свойство("R03G4") Тогда
			с.Вставить("A14_4", "R03G4");
		КонецЕсли;
		
		Если Док.Свойство("R04G4") Тогда
			с.Вставить("A15_4", "R04G4");
		КонецЕсли; 
		
		с.Вставить("A1_5", "R0201G5");
		с.Вставить("A2_5", "R0202G5");
		с.Вставить("A3_5", "R0203G5");
		с.Вставить("A4_5", "R0204G5");
		с.Вставить("A5_5", "R0205G5");
		с.Вставить("A6_5", "R0206G5");
		с.Вставить("A7_5", "R0207G5");
		с.Вставить("A8_5", "R0208G5");
		с.Вставить("A9_5", "R0209G5");
		с.Вставить("A10_5", "R0210G5");
		с.Вставить("A11_5", "R0211G5");
		с.Вставить("A12_5", "R0212G5");
		с.Вставить("A13_5", "R02G5");
		
		Если Док.Свойство("R03G5") Тогда
			с.Вставить("A14_5", "R03G5");
		КонецЕсли;
		
		Если Док.Свойство("R04G5") Тогда
			с.Вставить("A15_5", "R04G5");
		КонецЕсли; 
		
		с.Вставить("A1_6", "R0201G6");
		с.Вставить("A2_6", "R0202G6");
		с.Вставить("A3_6", "R0203G6");
		с.Вставить("A4_6", "R0204G6");
		с.Вставить("A5_6", "R0205G6");
		с.Вставить("A6_6", "R0206G6");
		с.Вставить("A7_6", "R0207G6");
		с.Вставить("A8_6", "R0208G6");
		с.Вставить("A9_6", "R0209G6");
		с.Вставить("A10_6", "R0210G6");
		с.Вставить("A11_6", "R0211G6");
		с.Вставить("A12_6", "R0212G6");
		с.Вставить("A13_6", "R02G6");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

//===========================//
#Область Приложения_ДекларацияНДС

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод1(Doc, БланкДод1, Документ)
	
	Если БланкДод1 = "J0200525" ИЛИ БланкДод1 = "F0200425" Тогда 
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение1");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли; 
		
		с.Вставить("R09G6", "R0111G6");
		с.Вставить("R09G7", "R0111G7");
		с.Вставить("R09G8", "R0111G8");
		с.Вставить("R09G9", "R0111G9");
		с.Вставить("R10G6", "R0112G6");
		с.Вставить("R10G7", "R0112G7");
		с.Вставить("R10G8", "R0112G8");
		// DOCKING 530 + 07.07.2023
		//с.Вставить("R10G9", "R0112G9");
		// DOCKING 530 + 07.07.2023
		с.Вставить("R08G6", "R0121G6");
		с.Вставить("R08G7", "R0121G7");
		с.Вставить("R08G8", "R0121G8");
		с.Вставить("R08G9", "R0121G9");
		// DOCKING 530 + 07.07.2023
		//с.Вставить("R11G6", "R0122G6");
		//с.Вставить("R11G7", "R0122G7");
		//с.Вставить("R11G8", "R0122G8");
		//с.Вставить("R11G9", "R0122G9");
		// DOCKING 530 - 07.07.2023
		с.Вставить("R12G6", "R0123G6");
		с.Вставить("R12G7", "R0123G7");
		с.Вставить("R12G8", "R0123G8");
		с.Вставить("R13G6", "R0124G6");
		с.Вставить("R13G7", "R0124G7");
		с.Вставить("R13G8", "R0124G8");
		с.Вставить("R13G9", "R0124G9");
		с.Вставить("R15G6", "R021G6");
		с.Вставить("R15G7", "R021G7");
		с.Вставить("R15G8", "R021G8");
		с.Вставить("R15G9", "R021G9");
		с.Вставить("R16G6", "R0211G6");
		с.Вставить("R16G7", "R0211G7");
		с.Вставить("R16G8", "R0211G8");
		с.Вставить("R17G6", "R0212G6");
		с.Вставить("R17G7", "R0212G7");
		// DOCKING 530 + 07.07.2023
		//с.Вставить("R18G6", "R0213G6");
		//с.Вставить("R18G7", "R0213G7");
		//с.Вставить("R18G9", "R0213G9");
		// DOCKING 530 - 07.07.2023
		с.Вставить("R03G4", "R022G4");
		с.Вставить("R03G5", "R022G5");
		с.Вставить("R03G6", "R022G6");
		с.Вставить("R03G7", "R022G7");
		с.Вставить("R04G4", "R0221G4");
		с.Вставить("R04G5", "R0221G5");
		с.Вставить("R04G6", "R0221G6");
		// DOCKING 530 + 07.07.2023
		//с.Вставить("R06G4", "R0222G4");
		//с.Вставить("R06G5", "R0222G5");
		//с.Вставить("R06G7", "R0222G7");
		// DOCKING 530 - 07.07.2023
		с.Вставить("R07G4", "R0223G4");
		с.Вставить("R07G5", "R0223G5");
		с.Вставить("R05G4", "R0224G4");
		с.Вставить("R05G6", "R0224G6");
		

		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если (Поле.Ключ = "П1T111R")  Тогда 
				
				//TAB9
				rsTab = Doc.DataSets("TAB9");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.П1T111RXXXXG2) = "" Тогда
						продолжить;
					Конецесли;  
					
					rsTab.Fields.Item("TAB9_A2").Value = Стр.П1T111RXXXXG2;
					rsTab.Fields.Item("TAB9_A3").Value = Стр.П1T111RXXXXG3D;  
					rsTab.Fields.Item("TAB9_A4").Value = Стр.П1T111RXXXXG4S; 
					Если Стр.П1T111RXXXXG5 Тогда
						// DOCKING 530 + 07.07.2023
						//rsTab.Fields.Item("TAB9_CX").Value = "1";
						rsTab.Fields.Item("TAB9_Z").Value = "1";
						// DOCKING 530 - 07.07.2023   
					Конецесли;
					rsTab.Fields.Item("TAB9_A6").Value = Стр.П1T111RXXXXG6;  
					rsTab.Fields.Item("TAB9_A7").Value = Стр.П1T111RXXXXG7;  	
					
					Если Стр.П1T111RXXXXG8 <> 0 Тогда
						rsTab.Fields.Item("TAB9_A8").Value = Стр.П1T111RXXXXG8;   
					КонецЕсли; 
					Если Стр.П1T111RXXXXG9 <> 0 Тогда
						rsTab.Fields.Item("TAB9_A9").Value = Стр.П1T111RXXXXG9;      
					КонецЕсли; 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если (Поле.Ключ = "П1T112R") Тогда 
				
				//TAB10
				rsTab = Doc.DataSets("TAB10");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.П1T112RXXXXG2) = "" Тогда
						продолжить;
					Конецесли;

					rsTab.Fields.Item("TAB10_A2").Value = Стр.П1T112RXXXXG2;
					rsTab.Fields.Item("TAB10_A3").Value = Стр.П1T112RXXXXG3D;  
					rsTab.Fields.Item("TAB10_A4").Value = Стр.П1T112RXXXXG4S; 
					Если Стр.П1T112RXXXXG5 Тогда
						rsTab.Fields.Item("TAB10_Z").Value = 1;   
					Конецесли;
					rsTab.Fields.Item("TAB10_A6").Value = Стр.П1T112RXXXXG6;  
					rsTab.Fields.Item("TAB10_A7").Value = Стр.П1T112RXXXXG7;  	
					
					Если Стр.П1T112RXXXXG8 <> 0 Тогда
						rsTab.Fields.Item("TAB10_A8").Value = Стр.П1T112RXXXXG8;   
					КонецЕсли; 
					// DOCKING 530 + 07.07.2023
					//Если Стр.П1T112RXXXXG9 <> 0 Тогда
					//	rsTab.Fields.Item("TAB10_A9").Value = Стр.П1T112RXXXXG9;    
					//КонецЕсли; 
					// DOCKING 530 - 07.07.202 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			                                  			
			Если (Поле.Ключ = "П1T121R")  Тогда 
				
				//TAB8
				rsTab = Doc.DataSets("TAB8");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.П1T121RXXXXG2) = "" Тогда
						продолжить;
					Конецесли;
					rsTab.Fields.Item("TAB8_A2").Value = Стр.П1T121RXXXXG2;
					rsTab.Fields.Item("TAB8_A3").Value = Стр.П1T121RXXXXG3D;  
					rsTab.Fields.Item("TAB8_A4").Value = Стр.П1T121RXXXXG4S; 
					Если Стр.П1T121RXXXXG5 Тогда
						// DOCKING 530 + 07.07.2023
						//rsTab.Fields.Item("TAB8_CX").Value = "1";   
						rsTab.Fields.Item("TAB8_Z").Value = "1";   
						// DOCKING 530 - 07.07.202   
					Конецесли;
					rsTab.Fields.Item("TAB8_A6").Value = Стр.П1T121RXXXXG6;  
					rsTab.Fields.Item("TAB8_A7").Value = Стр.П1T121RXXXXG7;  	
					
					Если Стр.П1T121RXXXXG8 <> 0 Тогда
						rsTab.Fields.Item("TAB8_A8").Value = Стр.П1T121RXXXXG8;   
					КонецЕсли; 
					Если Стр.П1T121RXXXXG9 <> 0 Тогда
						rsTab.Fields.Item("TAB8_A9").Value = Стр.П1T121RXXXXG9;    
					КонецЕсли; 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;  
			
			// DOCKING 530 + 07.07.2023
			
			//Если (Поле.Ключ = "П1T122R") Тогда 
			//	
			//	//TAB11
			//	rsTab = Doc.DataSets("TAB11");
			//	rsTab.Clear();
			//	rsTab.Edit();
			//	Для каждого Стр Из Поле.Значение Цикл
			//		Если СокрЛП(Стр.П1T122RXXXXG2) = "" Тогда
			//			продолжить;
			//		Конецесли;
			//		rsTab.Fields.Item("TAB11_A2").Value = Стр.П1T122RXXXXG2;
			//		rsTab.Fields.Item("TAB11_A3").Value = Стр.П1T122RXXXXG3D;  
			//		rsTab.Fields.Item("TAB11_A4").Value = Стр.П1T122RXXXXG4S; 
			//		Если Стр.П1T122RXXXXG5 Тогда
			//			rsTab.Fields.Item("TAB11_CX").Value = "1";   
			//		Конецесли;
			//		rsTab.Fields.Item("TAB11_A6").Value = Стр.П1T122RXXXXG6;  
			//		rsTab.Fields.Item("TAB11_A7").Value = Стр.П1T122RXXXXG7;  	
			//		
			//		Если Стр.П1T122RXXXXG8 <> 0 Тогда
			//			rsTab.Fields.Item("TAB11_A8").Value = Стр.П1T122RXXXXG8;   
			//		КонецЕсли; 
			//		Если Стр.П1T122RXXXXG9 <> 0 Тогда
			//			rsTab.Fields.Item("TAB11_A9").Value = Стр.П1T122RXXXXG9;    
			//		КонецЕсли; 
			//		
			//		rsTab.Post();
			//		rsTab.Append();
			//	КонецЦикла;
			//	rsTab.Delete();
			//КонецЕсли;

			// DOCKING 530 - 07.07.2023
			
			Если (Поле.Ключ = "П1T123R")  Тогда 
				
				//TAB12
				rsTab = Doc.DataSets("TAB12");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.П1T123RXXXXG2) = "" Тогда
						продолжить;
					Конецесли;
					rsTab.Fields.Item("TAB12_A2").Value = Стр.П1T123RXXXXG2;
					rsTab.Fields.Item("TAB12_A3").Value = Стр.П1T123RXXXXG3D;  
					rsTab.Fields.Item("TAB12_A4").Value = Стр.П1T123RXXXXG4S; 
					Если Стр.П1T123RXXXXG5 Тогда
						// DOCKING 530 + 07.07.2023
						//rsTab.Fields.Item("TAB12_CX").Value = "1";
						rsTab.Fields.Item("TAB12_Z").Value = "1";
						// DOCKING 530 - 07.07.2023   
					Конецесли;
					rsTab.Fields.Item("TAB12_A6").Value = Стр.П1T123RXXXXG6;  
					rsTab.Fields.Item("TAB12_A7").Value = Стр.П1T123RXXXXG7;  	
					
					Если Стр.П1T123RXXXXG8 <> 0 Тогда
						rsTab.Fields.Item("TAB12_A8").Value = Стр.П1T123RXXXXG8;   
					КонецЕсли; 
					//Если Стр.П1T123RXXXXG9 <> 0 Тогда
					//	rsTab.Fields.Item("TAB12_A9").Value = Стр.П1T123RXXXXG9;    
					//КонецЕсли; 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;

			Если (Поле.Ключ = "П1T124R") Тогда 
				
				//TAB13
				rsTab = Doc.DataSets("TAB13");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.П1T124RXXXXG2) = "" Тогда
						продолжить;
					Конецесли;
					rsTab.Fields.Item("TAB13_A2").Value = Стр.П1T124RXXXXG2;
					rsTab.Fields.Item("TAB13_A3").Value = Стр.П1T124RXXXXG3D;  
					rsTab.Fields.Item("TAB13_A4").Value = Стр.П1T124RXXXXG4S; 
					Если Стр.П1T124RXXXXG5 Тогда
						// DOCKING 530 -07.07.2023
						//rsTab.Fields.Item("TAB13_CX").Value = "1";   
						rsTab.Fields.Item("TAB13_Z").Value = "1";   
						// DOCKING 530 -07.07.2023   
					Конецесли;
					rsTab.Fields.Item("TAB13_A6").Value = Стр.П1T124RXXXXG6;  
					rsTab.Fields.Item("TAB13_A7").Value = Стр.П1T124RXXXXG7;  	
					
					Если Стр.П1T124RXXXXG8 <> 0 Тогда
						rsTab.Fields.Item("TAB13_A8").Value = Стр.П1T124RXXXXG8;   
					КонецЕсли; 
					Если Стр.П1T124RXXXXG9 <> 0 Тогда
						rsTab.Fields.Item("TAB13_A9").Value = Стр.П1T124RXXXXG9;    
					КонецЕсли; 
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			
			Если (Поле.Ключ = "П1T21R") Тогда 
				
				//TAB3
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.П1T21RXXXXG2) = "" Тогда
						продолжить;
					Конецесли;
					rsTab.Fields.Item("TAB3_A2").Value = Стр.П1T21RXXXXG2;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.П1T21RXXXXG31;  
					rsTab.Fields.Item("TAB3_B3").Value = Стр.П1T21RXXXXG32;
					
					Если Стр.П1T21RXXXXG4 Тогда
						rsTab.Fields.Item("TAB3_K4").Value = "1";   
					Конецесли;
					Если Стр.П1T21RXXXXG5 Тогда
						// DOCKING 530 + 07.07.2023
						//rsTab.Fields.Item("TAB3_CX").Value = "1";   
						rsTab.Fields.Item("TAB3_NA").Value = "1";   
						// DOCKING 530 - 07.07.2023   
					Конецесли;
					
					rsTab.Fields.Item("TAB3_A6").Value = Стр.П1T21RXXXXG6;  
					rsTab.Fields.Item("TAB3_A7").Value = Стр.П1T21RXXXXG7;  	
					
					rsTab.Fields.Item("TAB3_A8").Value = Стр.П1T21RXXXXG8;   
					rsTab.Fields.Item("TAB3_A9").Value = Стр.П1T21RXXXXG9;    
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли; 
			
			Если (Поле.Ключ = "П1T22R") Тогда 
				
				//TAB2
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					Если СокрЛП(Стр.П1T22RXXXXG2) = "" Тогда
						продолжить;
					Конецесли;
					rsTab.Fields.Item("TAB2_A6").Value = Стр.П1T22RXXXXG2;
					rsTab.Fields.Item("TAB2_A7").Value = Стр.П1T22RXXXXG311; 
					rsTab.Fields.Item("TAB2_B7").Value = Стр.П1T22RXXXXG312;
					
					Если Стр.П1T22RXXXXG32 Тогда
						// DOCKING 530 + 07.07.2023
						//rsTab.Fields.Item("TAB2_CX").Value = "1";   
						rsTab.Fields.Item("TAB2_NA").Value = "1";   
						// DOCKING 530 - 07.07.2023   
					Конецесли;
					
					rsTab.Fields.Item("TAB2_A3").Value = Стр.П1T22RXXXXG4;
					rsTab.Fields.Item("TAB2_A4").Value = Стр.П1T22RXXXXG5; 
					rsTab.Fields.Item("TAB2_A41").Value = Стр.П1T22RXXXXG6;
					rsTab.Fields.Item("TAB2_A42").Value = Стр.П1T22RXXXXG7;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод2(Doc, БланкДод2, Документ)
	
	Если БланкДод2 = "J0215225" ИЛИ БланкДод2 = "F0215225" Тогда    
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение2");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
	
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		с.Вставить("A1_5", "R01G5");
		с.Вставить("A2_5", "R02G5");
		с.Вставить("A2_6", "R02G6");	
		//с.Вставить("N1", "R03G1S");
		с.Вставить("N2", "R03G2");
		с.Вставить("A3_3", "R04G3");	
		с.Вставить("A4_5", "R05G5");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "П2T1R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.П2T1RXXXXG3) Тогда
						rsTab.Fields.Item("TAB1_A3").Value = Стр.П2T1RXXXXG3;
					КонецЕсли;
					Если ЗначениеЗаполнено(Стр.П2T1RXXXXG4) Тогда
						rsTab.Fields.Item("TAB1_A4").Value = Стр.П2T1RXXXXG4;
					КонецЕсли;
					rsTab.Fields.Item("TAB1_A5").Value = Стр.П2T1RXXXXG5;
					rsTab.Fields.Item("TAB1_A6").Value = Стр.П2T1RXXXXG6;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П2T2R" Тогда
				
				//TAB2///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB2_A2").Value = Стр.П2T2RXXXXG2;
					rsTab.Fields.Item("TAB2_A3").Value = Стр.П2T2RXXXXG3;
					Если Стр.П2T2RXXXXG4D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB2_A4").Value = Стр.П2T2RXXXXG4D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB2_A5").Value = Стр.П2T2RXXXXG5S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П2T3R" Тогда
				
				//TAB3///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB3_A2").Value = Стр.П2T3RXXXXG2;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.П2T3RXXXXG3;
					
					Если ЗначениеЗаполнено(Стр.П2T3RXXXXG4A) Тогда
						rsTab.Fields.Item("TAB3_A41").Value = Стр.П2T3RXXXXG4A;
					КонецЕсли;
					Если ЗначениеЗаполнено(Стр.П2T3RXXXXG4B) Тогда
						rsTab.Fields.Item("TAB3_A42").Value = Стр.П2T3RXXXXG4B;
					КонецЕсли;
					rsTab.Fields.Item("TAB3_A5").Value = Стр.П2T3RXXXXG5;
					Если Стр.П2T3RXXXXG6D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB3_A6").Value = Стр.П2T3RXXXXG6D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB3_A7").Value = Стр.П2T3RXXXXG7S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;		

		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод3(Doc, БланкДод3, Документ)
	
	Если БланкДод3 = "J0200625" ИЛИ БланкДод3 = "F0200525" Тогда 
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение3");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		//----------------------

		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли; 
		с.Вставить("NDOG", "HNDGV");
		
		Если Док.R010G3 <> 0 Тогда
			rsMain.Fields.Item("A1").Value = Док.R010G3;	
		КонецЕсли; 
		
		Если Док.R020G3 <> 0 Тогда
			rsMain.Fields.Item("A2").Value = Док.R020G3;	
		КонецЕсли; 
		
		Если Док.R030G3 <> 0 Тогда
			rsMain.Fields.Item("A3").Value = Док.R030G3;	
		КонецЕсли; 
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "П3T1R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB1_A2").Value = Стр.П3T1RXXXXG2;	
					Если ЗначениеЗаполнено(Стр.П3T1RXXXXG3) Тогда
						rsTab.Fields.Item("TAB1_A3").Value = Стр.П3T1RXXXXG3;
					КонецЕсли;		
					Если ЗначениеЗаполнено(Стр.П3T1RXXXXG4) Тогда
						rsTab.Fields.Item("TAB1_A4").Value = Стр.П3T1RXXXXG4;
					КонецЕсли;	
					rsTab.Fields.Item("TAB1_A5").Value = Стр.П3T1RXXXXG5;
					rsTab.Fields.Item("TAB1_A6").Value = Стр.П3T1RXXXXG6;
					rsTab.Fields.Item("TAB1_A7").Value = Стр.П3T1RXXXXG7;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;		
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод4(Doc, БланкДод4, Документ)
	
	Если БланкДод4 = "J0299825" ИЛИ БланкДод4 = "F0299825" Тогда   
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение4");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;	
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.R0303G2) Тогда
			rsMain.Fields.Item("N3").value = Док.R0303G2;
		КонецЕсли;
		Если ЗначениеЗаполнено(Док.R0303G3) Тогда
			rsMain.Fields.Item("N4").value = Док.R0303G3;
		КонецЕсли;

		с.Вставить("NDOG", "HNDGV");
		с.Вставить("N5", "R0304G2");	
		с.Вставить("N6", "R0304G2");
		с.Вставить("N7", "R0305G3S");
		с.Вставить("N9", "R0401G3");
		с.Вставить("A2_1", "R06G1");
		с.Вставить("A2_2", "R06G2");
		с.Вставить("A2_3", "R06G3");
		с.Вставить("A2_4", "R06G4");
		с.Вставить("N10", "R0402G2S");
		с.Вставить("N11", "R0403G1S");
		с.Вставить("N12", "R07G4");
		с.Вставить("N2", "R08G1");
		с.Вставить("A3_3", "R09G3");
		с.Вставить("A4_4", "R010G4");
		// 26.10.2022 + DOCKING 336
		с.Вставить("A5_1", "R07G1");
		с.Вставить("A5_2", "R07G2S");
		с.Вставить("A5_3", "R07G3S");
		// 26.10.2022 - DOCKING 336
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		
		Для Каждого Поле Из ТЧ Цикл   
			
			Если Поле.Ключ = "П4T1R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB1_A2").Value = Стр.П4T1RXXXXG2;
					rsTab.Fields.Item("TAB1_A3").Value = Стр.П4T1RXXXXG3S;
					rsTab.Fields.Item("TAB1_A4").Value = Стр.П4T1RXXXXG4;
					//rsTab.Fields.Item("TAB1_A5").Value = Стр.П4T3RXXXXG5;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П4T4R" Тогда
				
				//TAB2///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB2_A2").Value = Стр.П4T4RXXXXG2;
					rsTab.Fields.Item("TAB2_A3").Value = Стр.П4T4RXXXXG3;
					Если Стр.П4T4RXXXXG4D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB2_A4").Value = Стр.П4T4RXXXXG4D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB2_A5").Value = Стр.П4T4RXXXXG5S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "П4T5R" Тогда
				
				//TAB3///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB3_A2").Value = Стр.П4T5RXXXXG2;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.П4T5RXXXXG3;
					rsTab.Fields.Item("TAB3_A4").Value = Стр.П4T5RXXXXG4;
					Если Стр.П4T5RXXXXG5D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB3_A5").Value = Стр.П4T5RXXXXG5D;
					КонецЕсли; 
					rsTab.Fields.Item("TAB3_A6").Value = Стр.П4T5RXXXXG6S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;		
	
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод5(Doc, БланкДод5, Документ)
	
	Если БланкДод5 = "J0299325" ИЛИ БланкДод5 = "F0299325" Тогда      
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаСправка");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;	
		
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		//----------------------

		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		Если Док.HDDGV <> Дата(1,1,1) Тогда
			rsMain.Fields.Item("DDOG").value = Док.HDDGV;
		КонецЕсли; 
		с.Вставить("NDOG", "HNDGV");

		с.Вставить("A1", "R011G4");
		с.Вставить("A3", "R012G4");
		с.Вставить("A4", "R01G4");
		с.Вставить("A41","R02G4");
		с.Вставить("A5", "R02G5"); 
		с.Вставить("A6", "R02G6");
		с.Вставить("A7", "R02G7");
		с.Вставить("A8", "R02G8");
		с.Вставить("A9", "R02G9");
		с.Вставить("N6", "R04G2");
		с.Вставить("N7", "R05G2");
		с.Вставить("N8", "R06G2"); 


		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");					
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   //Док
			
			Если Поле.Ключ = "С1T11R" Тогда
				
				//TAB1
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.С1T11RXXXXG2S) Тогда
						rsTab.Fields.Item("TAB1_A2").Value = Стр.С1T11RXXXXG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB1_A3").Value = Стр.С1T11RXXXXG3S;
					rsTab.Fields.Item("TAB1_A4").Value = Стр.С1T11RXXXXG4;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "С1T12R" Тогда
				
				//TAB3
				rsTab = Doc.DataSets("TAB3");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.С1T12RXXXXG2S) Тогда
						rsTab.Fields.Item("TAB3_A2").Value = Стр.С1T12RXXXXG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB3_A3").Value = Стр.С1T12RXXXXG3S;
					rsTab.Fields.Item("TAB3_A4").Value = Стр.С1T12RXXXXG4;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			Если Поле.Ключ = "С1T2R" Тогда
				
				//TAB2
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.С1T2RXXXXG2S) Тогда
						rsTab.Fields.Item("TAB2_A2").Value = Стр.С1T2RXXXXG2S;
					КонецЕсли;
					rsTab.Fields.Item("TAB2_A3").Value = Стр.С1T2RXXXXG3;
					
					rsTab.Fields.Item("TAB2_A41").Value = Стр.С1T2RXXXXG4;
					rsTab.Fields.Item("TAB2_A4").Value = Стр.С1T2RXXXXG5;
					rsTab.Fields.Item("TAB2_A6").Value = Стр.С1T2RXXXXG6;
					rsTab.Fields.Item("TAB2_A7").Value = Стр.С1T2RXXXXG7;
					rsTab.Fields.Item("TAB2_A8").Value = Стр.С1T2RXXXXG8;
					rsTab.Fields.Item("TAB2_A9").Value = Стр.С1T2RXXXXG9;

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод6(Doc, БланкДод6, Документ)
	
	Если БланкДод6 = "J0215725" ИЛИ БланкДод6 = "F0215725" Тогда 

		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение6");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		//----------------------

		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		
		с.Вставить("A1_4","R011G4");
		с.Вставить("A1_5","R011G5");
		с.Вставить("A1_6","R011G6");
		с.Вставить("A1_7","R011G7");
		с.Вставить("A2_4","R012G4");
		с.Вставить("A2_5","R012G5");
		с.Вставить("A2_6","R012G6");
		с.Вставить("A2_7","R012G7");
		с.Вставить("A3_4","R0131G4");
		с.Вставить("A3_5","R0131G5");
		с.Вставить("A3_6","R0131G6");
		с.Вставить("A3_7","R0131G7");
		с.Вставить("A4_4","R0132G4");
		с.Вставить("A4_5","R0132G5");
		с.Вставить("A4_6","R0132G6");
		с.Вставить("A4_7","R0132G7");
		с.Вставить("A5_4","R0133G4");
		с.Вставить("A5_5","R0133G5");
		с.Вставить("A5_6","R0133G6");
		с.Вставить("A5_7","R0133G7");
		с.Вставить("A6_6","R02G6");
		с.Вставить("A6_7","R02G7");
		с.Вставить("A6_8","R02G8");
		с.Вставить("A6_9","R02G9");
		с.Вставить("A6_10","R02G10");
		с.Вставить("A6_11","R02G11");
		с.Вставить("A9_3","R031G3");
		с.Вставить("A9_4","R031G4");
		с.Вставить("A9_5","R031G5");
		с.Вставить("A9_6","R031G6");
		с.Вставить("A9_7","R031G7");
		с.Вставить("A10_3","R032G3");
		с.Вставить("A10_4","R032G4");
		с.Вставить("A10_5","R032G5");
		с.Вставить("A10_6","R032G6");
		с.Вставить("A10_7","R032G7");
		с.Вставить("A11_3","R033G3");
		с.Вставить("A11_4","R033G4");
		с.Вставить("A11_5","R033G5");
		с.Вставить("A11_6","R033G6");
		с.Вставить("A11_7","R033G7");
		с.Вставить("A12_1","R041G1");
		с.Вставить("A12_2","R041G2");
		с.Вставить("A12_3","R041G3");
		с.Вставить("A12_4","R041G4");
		с.Вставить("A12_5","R041G5");
		с.Вставить("A12_6","R041G6");
		с.Вставить("A12_7","R041G7");
		с.Вставить("A12_8","R041G8");
		с.Вставить("A12_9","R041G9");
		с.Вставить("A12_10","R041G10");
		с.Вставить("A12_11","R041G11");
		с.Вставить("A12_12","R041G12");
		с.Вставить("A12_13","R041G13");
		с.Вставить("A12_14","R041G14");
		
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   
			
			Если Поле.Ключ = "П6T2R" Тогда
				
				//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл
					
					Если ЗначениеЗаполнено(Стр.П6T2RXXXXG2D) Тогда
						rsTab.Fields.Item("TAB1_A2").Value = Стр.П6T2RXXXXG2D;
					КонецЕсли; 
					Если ЗначениеЗаполнено(Стр.П6T2RXXXXG4D) Тогда
						rsTab.Fields.Item("TAB1_A4").Value = Стр.П6T2RXXXXG4D;
					КонецЕсли;  
					
					rsTab.Fields.Item("TAB1_A6").Value = Стр.П6T2RXXXXG6;
					rsTab.Fields.Item("TAB1_A7").Value = Стр.П6T2RXXXXG7; 
					rsTab.Fields.Item("TAB1_A8").Value = Стр.П6T2RXXXXG8;
					rsTab.Fields.Item("TAB1_A9").Value = Стр.П6T2RXXXXG9;
					rsTab.Fields.Item("TAB1_A10").Value = Стр.П6T2RXXXXG10; 
					rsTab.Fields.Item("TAB1_A11").Value = Стр.П6T2RXXXXG11; 
					rsTab.Fields.Item("TAB1_A3").Value = Стр.П6T2RXXXXG3S; 
					rsTab.Fields.Item("TAB1_A5").Value = Стр.П6T2RXXXXG5S;

					rsTab.Post();
					rsTab.Append(); 
					
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод7(Doc, БланкДод7, Документ)
	
	Если БланкДод7 = "J0215825" ИЛИ БланкДод7 = "F0215825" Тогда   
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение7");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		rsMain.Fields.Item("FIRM_INN").value = Док.HNPDV;


		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		//Если Док.HZU <> "" Тогда
		//	rsMain.Fields.Item("HZU").value = true;
		//КонецЕсли;

		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");					
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		Для Каждого Поле Из ТЧ Цикл   
			
			Если Поле.Ключ = "П7T1R" Тогда
				
				//TAB2
				rsTab = Doc.DataSets("TAB2");
				rsTab.Clear();
				rsTab.Edit();
				Для каждого Стр Из Поле.Значение Цикл  
					
					Если ЗначениеЗаполнено(Стр.П7T1RXXXXG5D) Тогда
						rsTab.Fields.Item("TAB2_A4").Value = Стр.П7T1RXXXXG5D;
					КонецЕсли;  

					rsTab.Fields.Item("TAB2_A9").Value = Стр.П7T1RXXXXG2S; 
					rsTab.Fields.Item("TAB2_A2").Value = Стр.П7T1RXXXXG3S;
					rsTab.Fields.Item("TAB2_A5").Value = Стр.П7T1RXXXXG6S;
					rsTab.Fields.Item("TAB2_A8").Value = Стр.П7T1RXXXXG9S; 
					
					rsTab.Fields.Item("TAB2_A3").Value = Стр.П7T1RXXXXG4;
					rsTab.Fields.Item("TAB2_A6").Value = Стр.П7T1RXXXXG7;
					rsTab.Fields.Item("TAB2_A7").Value = Стр.П7T1RXXXXG8; 

					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
				rsTab.Delete();
			КонецЕсли;
			
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод8(Doc, БланкДод8, Документ)
	
	Если БланкДод8 = "J0215325" ИЛИ БланкДод8 = "F0215325" Тогда 
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение8");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли; 
		  
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		//----------------------
		
		с.Вставить("N1","HPV");
		с.Вставить("N2","HPVN");
		с.Вставить("FIRM_INN","HNPDV");
		с.Вставить("N3","R0101G3");
		с.Вставить("N4","R0102G3");
		с.Вставить("A1_21","R0201G2A");
		с.Вставить("A1_22","R0201G2B");
		с.Вставить("A1_3","R0201G3");
		с.Вставить("A1_4","R0201G4");
		с.Вставить("A1_5","R0201G5");
		с.Вставить("A1_6","R0201G6");
		с.Вставить("A2_21","R0202G2A");
		с.Вставить("A2_22","R0202G2B");
		с.Вставить("A2_3","R0202G3");
		с.Вставить("A2_4","R0202G4");
		с.Вставить("A2_5","R0202G5");
		с.Вставить("A2_6","R0202G6");
		с.Вставить("A3_21","R0203G2A");
		с.Вставить("A3_22","R0203G2B");
		с.Вставить("A3_3","R0203G3");
		с.Вставить("A3_4","R0203G4");
		с.Вставить("A3_5","R0203G5");
		с.Вставить("A3_6","R0203G6");
		с.Вставить("A4_21","R0204G2A");
		с.Вставить("A4_22","R0204G2B");
		с.Вставить("A4_3","R0204G3");
		с.Вставить("A4_4","R0204G4");
		с.Вставить("A4_5","R0204G5");
		с.Вставить("A4_6","R0204G6");
		с.Вставить("A5_21","R0205G2A");
		с.Вставить("A5_22","R0205G2B");
		с.Вставить("A5_3","R0205G3");
		с.Вставить("A5_4","R0205G4");
		с.Вставить("A5_5","R0205G5");
		с.Вставить("A5_6","R0205G6");
		с.Вставить("A6_21","R0206G2A");
		с.Вставить("A6_22","R0206G2B");
		с.Вставить("A6_3","R0206G3");
		с.Вставить("A6_4","R0206G4");
		с.Вставить("A6_5","R0206G5");
		с.Вставить("A6_6","R0206G6");
		с.Вставить("A7_21","R0207G2A");
		с.Вставить("A7_22","R0207G2B");
		с.Вставить("A7_3","R0207G3");
		с.Вставить("A7_4","R0207G4");
		с.Вставить("A7_5","R0207G5");
		с.Вставить("A7_6","R0207G6");
		с.Вставить("A8_21","R0208G2A");
		с.Вставить("A8_22","R0208G2B");
		с.Вставить("A8_3","R0208G3");
		с.Вставить("A8_4","R0208G4");
		с.Вставить("A8_5","R0208G5");
		с.Вставить("A8_6","R0208G6");
		с.Вставить("A9_21","R0209G2A");
		с.Вставить("A9_22","R0209G2B");
		с.Вставить("A9_3","R0209G3");
		с.Вставить("A9_4","R0209G4");
		с.Вставить("A9_5","R0209G5");
		с.Вставить("A9_6","R0209G6");
		с.Вставить("A10_21","R0210G2A");
		с.Вставить("A10_22","R0210G2B");
		с.Вставить("A10_3","R0210G3");
		с.Вставить("A10_4","R0210G4");
		с.Вставить("A10_5","R0210G5");
		с.Вставить("A10_6","R0210G6");
		с.Вставить("A11_21","R0211G2A");
		с.Вставить("A11_22","R0211G2B");
		с.Вставить("A11_3","R0211G3");
		с.Вставить("A11_4","R0211G4");
		с.Вставить("A11_5","R0211G5");
		с.Вставить("A11_6","R0211G6");
		с.Вставить("A12_21","R0212G2A");
		с.Вставить("A12_22","R0212G2B");
		с.Вставить("A12_3","R0212G3");
		с.Вставить("A12_4","R0212G4");
		с.Вставить("A12_5","R0212G5");
		с.Вставить("A12_6","R0212G6");
		с.Вставить("A13_3","R02G3");
		с.Вставить("A13_4","R02G4");
		с.Вставить("A13_5","R02G5");
		с.Вставить("A13_6","R02G6");
		с.Вставить("A14_3","R03G3");
		с.Вставить("A14_4","R03G4");
		с.Вставить("A14_5","R03G5");
		с.Вставить("A15_3","R04G3");
		с.Вставить("A15_4","R04G4");
		с.Вставить("A15_5","R04G5");
		
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_НДС_Дод9(Doc, БланкДод9, Документ)
	
	Если БланкДод9 = "J0215321" ИЛИ БланкДод9 = "F0215321" Тогда
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение9");
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		//Для Уточнюющей декларации
		Попытка 
			Если ЗначениеЗаполнено(Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"")) Тогда
				rsMain.Fields.Item("NYEARPM").value = Число(Док.ГодОш_1 + "" + Док.ГодОш_2 + "" + Док.ГодОш_3 + "" + Док.ГодОш_4 +"");
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("NYEARPM").value = NULL;
		КонецПопытки;
		Попытка
			Если ЗначениеЗаполнено (Число(Док.КвОш)) Тогда
				rsMain.Fields.Item("KVP").value = Число(Док.КвОш);
			КонецЕсли;
		Исключение
			    rsMain.Fields.Item("KVP").value = NULL;
		КонецПопытки;
		Попытка	
			Если ЗначениеЗаполнено (Число(Док.МесОш_1 + "" + Док.МесОш_2 + "")) Тогда
				rsMain.Fields.Item("NMONTHP").value = Число(Док.МесОш_1 + "" + Док.МесОш_2 + "");
			КонецЕсли;		
		Исключение
			    rsMain.Fields.Item("NMONTHP").value = NULL;
		КонецПопытки;
		//----------------------
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		с.Вставить("N1", "HPV");
		с.Вставить("N2", "HPVN");
		с.Вставить("N3", "R0101G3");
		с.Вставить("N4", "R0102G3");
		Если Док.Свойство("R006G3D") Тогда
			Если Док.R006G3D <> Дата(1,1,1) Тогда
			   с.Вставить("N5", "R006G3D");	
			КонецЕсли;   
		КонецЕсли;
		с.Вставить("A1_21", "R0201G2A");
		с.Вставить("A2_21", "R0202G2A");
		с.Вставить("A3_21", "R0203G2A");
		с.Вставить("A4_21", "R0204G2A");
		с.Вставить("A5_21", "R0205G2A");
		с.Вставить("A6_21", "R0206G2A");
		с.Вставить("A7_21", "R0207G2A");
		с.Вставить("A8_21", "R0208G2A");
		с.Вставить("A9_21", "R0209G2A");
		с.Вставить("A10_21", "R0210G2A");
		с.Вставить("A11_21", "R0211G2A");
		с.Вставить("A12_21", "R0212G2A");
		
		с.Вставить("A1_22", "R0201G2B");
		с.Вставить("A2_22", "R0202G2B");
		с.Вставить("A3_22", "R0203G2B");
		с.Вставить("A4_22", "R0204G2B");
		с.Вставить("A5_22", "R0205G2B");
		с.Вставить("A6_22", "R0206G2B");
		с.Вставить("A7_22", "R0207G2B");
		с.Вставить("A8_22", "R0208G2B");
		с.Вставить("A9_22", "R0209G2B");
		с.Вставить("A10_22", "R0210G2B");
		с.Вставить("A11_22", "R0211G2B");
		с.Вставить("A12_22", "R0212G2B");
		
		с.Вставить("A1_3", "R0201G3");
		с.Вставить("A2_3", "R0202G3");
		с.Вставить("A3_3", "R0203G3");
		с.Вставить("A4_3", "R0204G3");
		с.Вставить("A5_3", "R0205G3");
		с.Вставить("A6_3", "R0206G3");
		с.Вставить("A7_3", "R0207G3");
		с.Вставить("A8_3", "R0208G3");
		с.Вставить("A9_3", "R0209G3");
		с.Вставить("A10_3", "R0210G3");
		с.Вставить("A11_3", "R0211G3");
		с.Вставить("A12_3", "R0212G3");
		с.Вставить("A13_3", "R02G3");
		
		Если Док.Свойство("R03G3") Тогда
			с.Вставить("A14_3", "R03G3");
		КонецЕсли;
		
		Если Док.Свойство("R04G3") Тогда
			с.Вставить("A15_3", "R04G3");
		КонецЕсли; 
		
		с.Вставить("A1_4", "R0201G4");
		с.Вставить("A2_4", "R0202G4");
		с.Вставить("A3_4", "R0203G4");
		с.Вставить("A4_4", "R0204G4");
		с.Вставить("A5_4", "R0205G4");
		с.Вставить("A6_4", "R0206G4");
		с.Вставить("A7_4", "R0207G4");
		с.Вставить("A8_4", "R0208G4");
		с.Вставить("A9_4", "R0209G4");
		с.Вставить("A10_4", "R0210G4");
		с.Вставить("A11_4", "R0211G4");
		с.Вставить("A12_4", "R0212G4");
		с.Вставить("A13_4", "R02G4");
		
		Если Док.Свойство("R03G4") Тогда
			с.Вставить("A14_4", "R03G4");
		КонецЕсли;
		
		Если Док.Свойство("R04G4") Тогда
			с.Вставить("A15_4", "R04G4");
		КонецЕсли; 
		
		с.Вставить("A1_5", "R0201G5");
		с.Вставить("A2_5", "R0202G5");
		с.Вставить("A3_5", "R0203G5");
		с.Вставить("A4_5", "R0204G5");
		с.Вставить("A5_5", "R0205G5");
		с.Вставить("A6_5", "R0206G5");
		с.Вставить("A7_5", "R0207G5");
		с.Вставить("A8_5", "R0208G5");
		с.Вставить("A9_5", "R0209G5");
		с.Вставить("A10_5", "R0210G5");
		с.Вставить("A11_5", "R0211G5");
		с.Вставить("A12_5", "R0212G5");
		с.Вставить("A13_5", "R02G5");
		
		Если Док.Свойство("R03G5") Тогда
			с.Вставить("A14_5", "R03G5");
		КонецЕсли;
		
		Если Док.Свойство("R04G5") Тогда
			с.Вставить("A15_5", "R04G5");
		КонецЕсли; 
		
		с.Вставить("A1_6", "R0201G6");
		с.Вставить("A2_6", "R0202G6");
		с.Вставить("A3_6", "R0203G6");
		с.Вставить("A4_6", "R0204G6");
		с.Вставить("A5_6", "R0205G6");
		с.Вставить("A6_6", "R0206G6");
		с.Вставить("A7_6", "R0207G6");
		с.Вставить("A8_6", "R0208G6");
		с.Вставить("A9_6", "R0209G6");
		с.Вставить("A10_6", "R0210G6");
		с.Вставить("A11_6", "R0211G6");
		с.Вставить("A12_6", "R0212G6");
		с.Вставить("A13_6", "R02G6");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");			
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ДекларацияПрибыль

&НаКлиенте
Функция Формирование_Декларация_Прибыль(App, Документ, Бланк, PDate, ИД, Приложения)
	ДочерниеДокументы = Новый Массив;
	
	ИДПарент = 0;
	
	ЧаркодТаб1 = "";
	ЧаркодТаб2 = "";
	ЧаркодТаб3 = "";
	ЧаркодТаб4 = "";
	ЧаркодТаб5 = "";
	ЧаркодТаб6 = "";
	ЧаркодТаб7 = "";
	ЧаркодТаб8 = "";
	ЧаркодТаб9 = "";
	ЧаркодТаб10 = "";
	ЧаркодТаб11 = "";
	ЧаркодТаб12 = "";
	ЧаркодТаб13 = "";
	ЧаркодТаб14 = "";
	ЧаркодТаб15 = "";
	
		////+DOCKING-290 13.07.2021 
	//Если Бланк = "J0100118" Тогда
	//	ЧаркодТаб1 = "J0111618";
	//	ЧаркодТаб2 = "J0111418";
	//	ЧаркодТаб3 = "J0111518";
	//	ЧаркодТаб4 = "J0112818";
	//	ЧаркодТаб5 = "J0111718";
	//	ЧаркодТаб6 = "J0111818";
	//	ЧаркодТаб7 = "J0111318";
	//	ЧаркодТаб8 = "J0110618";
	//	ЧаркодТаб9 = "J0110318";
	//	ЧаркодТаб10 = "J0112018";
	//КонецЕсли;
	//Если Бланк = "J0100119" Тогда
	//	ЧаркодТаб1 = "J0111619";
	//	ЧаркодТаб2 = "J0111419";
	//	ЧаркодТаб3 = "J0111519";
	//	ЧаркодТаб4 = "J0112819";
	//	ЧаркодТаб5 = "J0111719";
	//	ЧаркодТаб6 = "J0111819";
	//	ЧаркодТаб7 = "J0111319";
	//	ЧаркодТаб8 = "J0110619";
	//	ЧаркодТаб9 = "J0110319";
	//	ЧаркодТаб10 = "J0112019";
	//	ЧаркодТаб11 = "J0114419";
	//	ЧаркодТаб12 = "J0114519";
	//	ЧаркодТаб13 = "J0114619";
	//	ЧаркодТаб14 = "J0114719";
	//КонецЕсли;
    ////-DOCKING-290 13.07.2021
	// 28.06.2022 + DOCKING 410	
	Если Бланк = "J0100125" Тогда
    	ЧаркодТаб1 = "J0111625";
    	ЧаркодТаб2 = "J0111425";
    	ЧаркодТаб3 = "J0111525";
    	ЧаркодТаб4 = "J0112825";
    	ЧаркодТаб5 = "J0111725";
    	ЧаркодТаб6 = "J0111825";
    	ЧаркодТаб7 = "J0111325";
    	ЧаркодТаб8 = "J0110625";
    	ЧаркодТаб9 = "J0110325";
    	ЧаркодТаб10 = "J0112025";
    	ЧаркодТаб11 = "J0114425";
		// DOCKING 527 + 08.08.2023
		//ЧаркодТаб12 = "J0114523";
		//ЧаркодТаб13 = "J0114623";
		//ЧаркодТаб14 = "J0114723";
		ЧаркодТаб12 = "J0114825";
    	ЧаркодТаб13 = "J0114925";
    	ЧаркодТаб14 = "J0115025";
		ЧаркодТаб15 = "J0115925";
		// DOCKING 527 - 08.08.2023
    КонецЕсли;
	// 28.06.2022 - DOCKING 410
	Попытка
		Doc  = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата,"ДекларацияПрибыль"), PDate, , ИД, 0);
		ИДПарент = Формирование_Декларация_Прибыль_Главный(Doc, Бланк, Документ);			
	Исключение
		Сообщить("Ошибка: Перечень таблиц не передался. Передача остановлена");
		Doc  = App.MoveToTrash(ИД);
		ИДПарент = 0;
	КонецПопытки;
	
	Если ИДПарент <> 0 Тогда
		
		Для Каждого ЭлементМассива Из Приложения Цикл
			
			Если ЭлементМассива = "Таб1" Тогда
				
				//Додаток_АВ
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб1, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-1", 0);	
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_АВ(Doc, ЧаркодТаб1, Документ);
					ДочерниеДокументы.Добавить(ИД+"-1");
				Исключение
					Сообщить("Ошибка: Додаток АВ не создан");
					Doc  = App.MoveToTrash(ИД+"-1");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб2" Тогда
				
				//Додаток ЗП
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб2, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-2", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_ЗП(Doc, ЧаркодТаб2, Документ);
					ДочерниеДокументы.Добавить(ИД+"-2");
				Исключение
					Сообщить("Ошибка: Додаток ЗП не создан");
					Doc  = App.MoveToTrash(ИД+"-2");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб4" Тогда
				
				//Додаток ТЦ
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб4, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-4", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_ТЦ(Doc, ЧаркодТаб4, Документ);
					ДочерниеДокументы.Добавить(ИД+"-4");
				Исключение
					Сообщить("Ошибка: Додаток ТЦ не создан");
					Doc = App.MoveToTrash(ИД+"-4");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб5" Тогда
				
				//Додаток ВП
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб5, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-5", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_ВП(Doc, ЧаркодТаб5, Документ);
					ДочерниеДокументы.Добавить(ИД+"-5");
				Исключение
					Сообщить("Ошибка: Додаток ВП не создан");
					Doc  = App.MoveToTrash(ИД+"-5");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб6" Тогда
				
				//Додаток РИ
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб6, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-6", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_РИ(Doc, ЧаркодТаб6, Документ);
					ДочерниеДокументы.Добавить(ИД+"-6");
				Исключение
					Сообщить("Ошибка: Додаток РИ не создан");
					Doc  = App.MoveToTrash(ИД+"-6");
				КонецПопытки;				
				
			ИначеЕсли ЭлементМассива = "Таб7" Тогда
				
				//Додаток ПЗ
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб7, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-7", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_ПЗ(Doc, ЧаркодТаб7, Документ);
					ДочерниеДокументы.Добавить(ИД+"-7");
				Исключение
					Сообщить("Ошибка: Додаток ПЗ не создан");
					Doc  = App.MoveToTrash(ИД+"-7");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб8" Тогда
				
				//Додаток АМ
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб8, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-8", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_АМ(Doc, ЧаркодТаб8, Документ);
					ДочерниеДокументы.Добавить(ИД+"-8");
				Исключение
					Сообщить("Ошибка: Додаток АМ не создан");
					Doc  = App.MoveToTrash(ИД+"-8");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб9" Тогда
				
				//Додаток ЦП
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб9, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-9", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_ЦП(Doc, ЧаркодТаб9, Документ);
					ДочерниеДокументы.Добавить(ИД+"-9");
				Исключение
					Сообщить("Ошибка: Додаток ЦП не создан");
					Doc  = App.MoveToTrash(ИД+"-9");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб10" Тогда
				
				//Додаток ПП
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб10, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-10", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_ПП(Doc, ЧаркодТаб10, Документ);
					ДочерниеДокументы.Добавить(ИД+"-10");
				Исключение
					Сообщить("Ошибка: Додаток ПП не создан");
					Doc  = App.MoveToTrash(ИД+"-10");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб3" Тогда
				//Додаток ПН
				Попытка
					Формирование_Декларация_Прибыль_ПН(Doc, ЧаркодТаб3, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы);
				Исключение
					Сообщить("Ошибка: Додаток ПН не создан");
					Doc  = App.MoveToTrash(ИД+"-11");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб11" Тогда
				
				//Додаток КІК
				Попытка
					Формирование_Декларация_Прибыль_КИК(Doc, ЧаркодТаб11, Документ, App, PDate, ИД+"-11", ИДПарент, ДочерниеДокументы);
				Исключение
					Сообщить("Ошибка: Додаток КІК не создан");
					Doc  = App.MoveToTrash(ИД+"-11");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб12" Тогда
				
				////Додаток КІК-К
				//Попытка
				//	Формирование_Декларация_Прибыль_КИК_К(Doc, ЧаркодТаб12, Документ, App, PDate, ИД+"-12", ИДПарент, ДочерниеДокументы);
				//Исключение
				//	Сообщить("Ошибка: Додаток КІК-К не создан");
				//	Doc  = App.MoveToTrash(ИД+"-12");
				//КонецПопытки;
				
				//Додаток МПЗ
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб12, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-12", 0);
				Doc.IDParent = ИДПарент;
				
				Попытка
					Формирование_Декларация_Прибыль_МПЗ(Doc, ЧаркодТаб12, Документ, App, PDate, ИД+"-12", ИДПарент, ДочерниеДокументы);
					ДочерниеДокументы.Добавить(ИД+"-12");
				Исключение
					Сообщить("Ошибка: Додаток МПЗ не создан");
					Doc  = App.MoveToTrash(ИД+"-12");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб13" Тогда
				
								
				//Додаток МПЗ_З
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб13, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-13", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_Прибыль_МПЗ_З(Doc, ЧаркодТаб13, Документ, App, PDate, ИД+"-13", ИДПарент, ДочерниеДокументы);
					ДочерниеДокументы.Добавить(ИД+"-13");
				Исключение
					Сообщить("Ошибка: Додаток МПЗ-З не создан");
					Doc  = App.MoveToTrash(ИД+"-13");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб14" Тогда
				
				////Додаток КІК-ЦП
				//Попытка
				//	Формирование_Декларация_Прибыль_КИК_ЦП(Doc, ЧаркодТаб14, Документ, App, PDate, ИД+"-14", ИДПарент, ДочерниеДокументы);
				//Исключение
				//	Сообщить("Ошибка: Додаток КІК-ЦП не создан");
				//	Doc  = App.MoveToTrash(ИД+"-14");
				//КонецПопытки;
				
				//Додаток ДІЯ
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб14, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-14", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_Прибыль_ДІЯ(Doc, ЧаркодТаб14, Документ, App, PDate, ИД+"-14", ИДПарент, ДочерниеДокументы);
					ДочерниеДокументы.Добавить(ИД+"-14");
				Исключение
					Сообщить("Ошибка: Додаток ДІЯ не создан");
					Doc  = App.MoveToTrash(ИД+"-14");
				КонецПопытки;
				
			ИначеЕсли ЭлементМассива = "Таб15" Тогда
				
				////Додаток КІК-ЦП
				//Попытка
				//	Формирование_Декларация_Прибыль_КИК_ЦП(Doc, ЧаркодТаб15, Документ, App, PDate, ИД+"-15", ИДПарент, ДочерниеДокументы);
				//Исключение
				//	Сообщить("Ошибка: Додаток КІК-ЦП не создан");
				//	Doc  = App.MoveToTrash(ИД+"-15");
				//КонецПопытки;	
				
				//Додаток ОВ
				Doc = App.OpenOrCreateByExDocID(ЧаркодТаб15, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"-15", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_Декларация_Прибыль_ОВ(Doc, ЧаркодТаб15, Документ, App, PDate, ИД+"-15", ИДПарент, ДочерниеДокументы);
					ДочерниеДокументы.Добавить(ИД+"-15");
				Исключение
					Сообщить("Ошибка: Додаток ОВ не создан");
					Doc  = App.MoveToTrash(ИД+"-15");
				КонецПопытки;
  
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДочерниеДокументы;
КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_Главный(Doc, Бланк, Документ)
	
	ИДПарент = 0;
	
    ////+DOCKING-290 13.07.2021 
	//Если Бланк = "J0100118"  Тогда
	//Если Бланк = "J0100119"  Тогда
    ////-DOCKING-290 13.07.2021
	// 28.06.2022 + DOCKING 403	
	Если Бланк = "J0100125"  Тогда	
	// 28.06.2022 - DOCKING 403	
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДекларация");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		rsMain = Doc.DataSets(); 
		НачалоОтчета(rsMain);	
		с = Новый Структура;
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если Док.H1KVP <> "" Тогда
			rsMain.Fields.Item("H1KVP").value = true;
		КонецЕсли;
		Если Док.HHYP <> "" Тогда
			rsMain.Fields.Item("HHYP").value = true;
		КонецЕсли;
		Если Док.H3KVP <> "" Тогда
			rsMain.Fields.Item("H3KVP").value = true;
		КонецЕсли;
////+DOCKING-290 04.08.2021 
        //Если Док.H091 <> "" Тогда
        //	rsMain.Fields.Item("N40").value = true;
        //КонецЕсли;		
////-DOCKING-290 04.08.2021
		Если Док.H092 <> "" Тогда
			rsMain.Fields.Item("N6").value = true;
		КонецЕсли;
		Если Док.H093 <> "" Тогда
			rsMain.Fields.Item("N7").value = true;
		КонецЕсли;
		Если Док.H094 <> "" Тогда
			rsMain.Fields.Item("N8").value = true;
		КонецЕсли;
		Если Док.H095 <> "" Тогда
			rsMain.Fields.Item("N9").value = true;
		КонецЕсли;
		Если Док.H096 <> "" Тогда
			rsMain.Fields.Item("N10").value = true;
		КонецЕсли;
		Если Док.H097 <> "" Тогда
			rsMain.Fields.Item("N11").value = true;
		КонецЕсли;
		Если Док.H098 <> "" Тогда
			rsMain.Fields.Item("N12").value = true;
		КонецЕсли;
		Если Док.HLIQ <> "" Тогда
			rsMain.Fields.Item("N38").value = true;
		КонецЕсли;
		Если Док.H099 <> "" Тогда
			rsMain.Fields.Item("N41").value = true;
		КонецЕсли;
        ////+DOCKING-290 28.07.2021 
        Если Док.H101 <> "" Тогда
			rsMain.Fields.Item("N45").value = true;
		КонецЕсли;
		
		Попытка
			Если Док.H103 <> "" Тогда
				rsMain.Fields.Item("N46").value = true;
			КонецЕсли;
		Исключение КонецПопытки;
		
		Попытка			
			Если Док.HLIQ <> "" Тогда
				rsMain.Fields.Item("N38").value = true;
			КонецЕсли;
		Исключение КонецПопытки;
		
		Попытка	
			Если Док.H104 <> "" Тогда
				rsMain.Fields.Item("N49").value = true;
			КонецЕсли; 
		Исключение КонецПопытки;
		
		Попытка	
			Если Док.H105 <> "" Тогда
				rsMain.Fields.Item("N50").value = true;
			КонецЕсли;
		Исключение КонецПопытки;
		
		Попытка
			Если Док.H106 <> "" Тогда
				rsMain.Fields.Item("N53").value = true;
			КонецЕсли;
		Исключение КонецПопытки;	
        
        Если Док.H01 <> "" Тогда
			rsMain.Fields.Item("PERKV").value = true;
        КонецЕсли;
        
        Если Док.H02 <> "" Тогда
			rsMain.Fields.Item("PERY").value = true;
        КонецЕсли;
        ////-DOCKING-290 28.07.2021
		Если Док.HD1 <> "" Тогда
			rsMain.Fields.Item("N18").value = true;
		КонецЕсли;
		Если Док.HD2 <> "" Тогда
			rsMain.Fields.Item("N19").value = true;
		КонецЕсли;
		Если Док.HD4 <> "" Тогда
			rsMain.Fields.Item("N21").value = true;
		КонецЕсли;
		Если Док.HD5 <> "" Тогда
			rsMain.Fields.Item("N22").value = true;
		КонецЕсли;
		Если Док.HD6 <> "" Тогда
			rsMain.Fields.Item("N23").value = true;
		КонецЕсли;
		Если Док.HD7 <> "" Тогда
			rsMain.Fields.Item("N24").value = true;
		КонецЕсли;
		Если Док.HD8 <> "" Тогда
			rsMain.Fields.Item("N25").value = true;
		КонецЕсли;
		Если Док.HD9 <> "" Тогда
			rsMain.Fields.Item("N26").value = true;
		КонецЕсли;
		Если Док.HD10 <> "" Тогда
			rsMain.Fields.Item("N27").value = true;
		КонецЕсли;
        ////+DOCKING-290 28.07.2021 
        Если Док.HD13 <> 0 Тогда
        	rsMain.Fields.Item("N44").value = true;
        Иначе
        	rsMain.Fields.Item("N44").value = "";
        КонецЕсли;
        ////-DOCKING-290 28.07.2021
		
		//DOCKING 527 + 07.06.2023 
		Попытка
			Если Док.HD15 <> "" Тогда
	        	rsMain.Fields.Item("N51").value = true;
			КонецЕсли;
		Исключение КонецПопытки;	
		Если Док.HD11 <> "" Тогда
			rsMain.Fields.Item("N42").value = true;
		КонецЕсли;
		Если Док.HD12 <> "" Тогда
			rsMain.Fields.Item("N43").value = true;
		КонецЕсли;
		Если Док.HD13 <> "" Тогда
			rsMain.Fields.Item("N44").value = true;
		КонецЕсли;
		Попытка
			Если Док.HD14 <> "" Тогда
				rsMain.Fields.Item("N48").value = true;
			КонецЕсли;
		Исключение КонецПопытки;		
		Попытка
			Если Док.HD16 <> "" Тогда
				rsMain.Fields.Item("N52").value = true;
			КонецЕсли;
		Исключение КонецПопытки;	
        //DOCKING 527 - 07.06.2023 
		
		Если Док.HJ1 <> "" Тогда
			rsMain.Fields.Item("N1").value = true;
		КонецЕсли;
		Если Док.HJ2 <> "" Тогда
			rsMain.Fields.Item("N39").value = true;
		КонецЕсли;
		Если Док.HZYP <> 0 Тогда
			rsMain.Fields.Item("NYEARP").Value = Док.HZYP;
		Иначе
			rsMain.Fields.Item("NYEARP").Value = NULL;
		КонецЕсли; 
		
		Если Док.HF1 = "+" Тогда
			rsMain.Fields.Item("N29").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF2 = "+" Тогда
			rsMain.Fields.Item("N30").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF3 = "+" Тогда
			rsMain.Fields.Item("N31").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF4 = "+" Тогда
			rsMain.Fields.Item("N32").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF5 = "+" Тогда
			rsMain.Fields.Item("N33").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF6 = "+" Тогда
			rsMain.Fields.Item("N34").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF7 = "+" Тогда
			rsMain.Fields.Item("N35").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF8 = "+" Тогда
			rsMain.Fields.Item("N36").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HF9 = "+" Тогда
			rsMain.Fields.Item("N37").Value = Истина;	
		КонецЕсли;
		
		// 28.06.2022 + DOCKING 410
		Попытка
			Если Док.R071G1S <> 0 Тогда
				rsMain.Fields.Item("NAME_PN").Value = Док.R071G1S;
			КонецЕсли;
			Если Док.R071G2S <> 0 Тогда
				rsMain.Fields.Item("EDRPOU_PN").Value = Док.R071G2S;
			КонецЕсли;
			Если Док.R071G3S <> 0 Тогда
				rsMain.Fields.Item("INN_PN").Value = Док.R071G3S;
			КонецЕсли;
			Если Док.R071G4S <> 0 Тогда
				rsMain.Fields.Item("ADR_PN").Value = Док.R071G4S;
			КонецЕсли;
			Если Док.R071G5S <> 0 Тогда
				rsMain.Fields.Item("DPANM_PN").Value = Док.R071G5S;
			КонецЕсли;
		Исключение КонецПопытки;	
		// 28.06.2022 - DOCKING 410
		
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A03", "R003G3");
		//DOCKING 527 + 07.06.2023
		//с.Вставить("A031", "R0031G3");
		//с.Вставить("A032", "R0032G3");
		//DOCKING 527 - 07.06.2023
		с.Вставить("A04", "R004G3");
		с.Вставить("A05", "R005G3");
		с.Вставить("N13", "R006G1");
		с.Вставить("A06", "R006G3");
        ////+DOCKING-290 28.07.2021 
		с.Вставить("A061", "R0061G3");
        ////-DOCKING-290 28.07.2021

		
		с.Вставить("A062", "R0062G3");
		с.Вставить("A063", "R0063G3");
		с.Вставить("A064", "R0064G3");
		с.Вставить("A0641", "R00641G3");
		с.Вставить("A0642", "R00642G3");
		с.Вставить("N54", "R0064G1");
		
		
		с.Вставить("A07", "R007G3");
		с.Вставить("A071", "R0071G3");
		с.Вставить("A072", "R0072G3");
		с.Вставить("N14", "R008G1");
		с.Вставить("A08", "R008G3");
		с.Вставить("A09", "R009G3");
		с.Вставить("A091", "R0091G3");
		с.Вставить("A0911", "R00911G3");
		с.Вставить("A0912", "R00912G3");
		с.Вставить("A092", "R0092G3");
		с.Вставить("N15", "R010G1");
		с.Вставить("A10", "R010G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("N16", "R012G1");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("N17", "R015G1");
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		с.Вставить("A18", "R018G3");
		с.Вставить("A19", "R019G3");
		с.Вставить("A20", "R020G3");
		с.Вставить("A21", "R021G3");
		с.Вставить("A22", "R022G3");
		с.Вставить("A23", "R023G3");
		с.Вставить("A24", "R024G3");
		с.Вставить("A25", "R025G3");
		с.Вставить("A26", "R026G3");
		с.Вставить("A27", "R027G3");
		с.Вставить("A28", "R028G3");
		с.Вставить("A29", "R029G3");
		с.Вставить("A30", "R030G3");
		с.Вставить("A31", "R031G3");
		с.Вставить("A32", "R032G3");
		с.Вставить("A33", "R033G3");
		с.Вставить("A34", "R034G3");
		с.Вставить("N20", "HD3");
		с.Вставить("N28", "HPAGES");
		
		//DOCKING 527 + 07.06.2023 
		с.Вставить("A062", "R0062G3");
		с.Вставить("A063", "R0063G3");
		
		с.Вставить("A35", "R035G3");
		с.Вставить("A36", "R036G3");
		с.Вставить("A37", "R037G3");
        //DOCKING 527 - 28.07.2021
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
				Ноль = "00000"
			ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
				Ноль = "0000" 	
			ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
				Ноль = "000"
			ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
				Ноль = "00"
			ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
				Ноль = "0"
			Иначе 
				Ноль = ""
			КонецЕсли;
			
			СуществуетСтрока = Ложь;
			rsMain.Edit();
			Для Каждого Поле Из Док Цикл	
				Если Найти(Поле.Ключ, "T1R"+Ноль+НомерСтроки+"G2S_1") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A2").Value = Поле.Значение;
				КонецЕсли;
			КонецЦикла;
			rsMain.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsMain.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsMain.Delete();
			КонецЕсли;
			
		КонецЦикла;	
		//TAB2
		rsMain = Doc.DataSets("TAB2");
		rsMain.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтрокиТ = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			Если  НомерСтрокиТ > 0 и НомерСтрокиТ < 10 Тогда
				Ноль = "00000"
			ИначеЕсли НомерСтрокиТ >= 10 и НомерСтрокиТ < 100 Тогда
				Ноль = "0000" 	
			ИначеЕсли НомерСтрокиТ >= 100 и НомерСтрокиТ < 1000 Тогда
				Ноль = "000"
			ИначеЕсли НомерСтрокиТ >= 1000 и НомерСтрокиТ < 10000 Тогда
				Ноль = "00"
			ИначеЕсли НомерСтрокиТ >= 10000 и НомерСтрокиТ < 100000 Тогда
				Ноль = "0"
			Иначе 
				Ноль = ""
			КонецЕсли;
			
			СуществуетСтрока = Ложь;
			rsMain.Edit();
			Для Каждого Поле Из Док Цикл	
				Если Найти(Поле.Ключ, "T2R"+Ноль+НомерСтрокиТ+"G2S_1") = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB2_A2").Value = Поле.Значение;
				КонецЕсли;
			КонецЦикла;
			rsMain.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsMain.Append();
				НомерСтрокиТ = НомерСтрокиТ + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;
		КонецОтчета(Doc);
		ИДПарент = Doc.CardCode;	
	КонецЕсли;	
	
	Возврат ИДПарент;

	
КонецФункции

#Область Приложения_ДекларацияПрибыль

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_АВ(Doc, БланкАВ, Документ)
	
	//Если БланкАВ="J0111618" Тогда 
	//Если БланкАВ="J0111619" Тогда	
	Если БланкАВ="J0111625" Тогда	
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеАВ;	
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеАВ");
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A1", "R001G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("A15", "R015G3");
		с.Вставить("A2", "R002G3");
		с.Вставить("A3", "R003G3");
		с.Вставить("A4", "R004G3");
		с.Вставить("A5", "R005G3");
		с.Вставить("N1", "R006G1");
		с.Вставить("A6", "R006G3");
				
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_ЗП(Doc, БланкЗП, Документ)
	
	//Если БланкЗП="J0111419" Тогда
	Если БланкЗП="J0111425" Тогда	
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеЗП");
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A16", "R016G3");
		с.Вставить("A161", "R0161G3");
		с.Вставить("A162", "R0162G3");
		с.Вставить("A163", "R0163G3");
		с.Вставить("A164", "R0164G3");
		с.Вставить("A1641", "R01641G3");
		с.Вставить("A1642", "R01642G3");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_ТЦ(Doc, БланкТЦ, Документ)
	
	//Если БланкТЦ="J0112819" Тогда
	Если БланкТЦ="J0112825" Тогда	
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеТЦ;
		//ТЧ = Документ.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеТЦ");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);	
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		// DOCKING 527 + 10.08.2023	
		//с.Вставить("A1_14", "R01G14");
		//с.Вставить("A1_15", "R01G15");
		//с.Вставить("A1_16", "R01G16");
		//с.Вставить("A1_17", "R01G17");
		//с.Вставить("A2_14", "R02G14");
		//с.Вставить("A2_15", "R02G15");
		//с.Вставить("A2_16", "R02G16");
		//с.Вставить("A2_17", "R02G17");
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").Value = true;
		КонецЕсли;
		
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").Value = true;
		КонецЕсли;
		
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").Value = true;
		КонецЕсли;
		
		с.Вставить("FIRM_EDRPOU", "HTIN");
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
		с.Вставить("A1_17", "R01G17");
		с.Вставить("A1_19", "R01G19");
		с.Вставить("A2_17", "R02G17");
		с.Вставить("A2_19", "R02G19");
		
		// DOCKING 527 + 10.08.2023
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		rsMain.Edit();
		Для Каждого Поле Из ТЧ Цикл
			Если Поле.Ключ = "TCT1R" Тогда
				Для каждого Стр Из Поле.Значение Цикл
					
					rsMain.Fields.Item("TAB1_A1").Value = Стр.TCT1RXXXXG1S;
					rsMain.Fields.Item("TAB1_A2").Value = Стр.TCT1RXXXXG2S;
					Если Стр.TCT1RXXXXG3D <> Дата(1,1,1) Тогда
						rsMain.Fields.Item("TAB1_A5").Value = Стр.TCT1RXXXXG3D;
					КонецЕсли;	
					rsMain.Fields.Item("TAB1_A6").Value = Стр.TCT1RXXXXG4S;
					rsMain.Fields.Item("TAB1_A7").Value = Стр.TCT1RXXXXG5S;
					rsMain.Fields.Item("TAB1_A8").Value = Стр.TCT1RXXXXG6S;
					rsMain.Fields.Item("TAB1_A9").Value = Стр.TCT1RXXXXG7S;
					rsMain.Fields.Item("TAB1_A10").Value = Стр.TCT1RXXXXG8S;
					rsMain.Fields.Item("TAB1_A11").Value = Стр.TCT1RXXXXG9S;
					Если Стр.TCT1RXXXXG10D <> Дата(1,1,1) Тогда
						rsMain.Fields.Item("TAB1_A12").Value = Стр.TCT1RXXXXG10D;
					КонецЕсли;
					Если Стр.TCT1RXXXXG11D <> Дата(1,1,1) Тогда
						rsMain.Fields.Item("TAB1_A13").Value = Стр.TCT1RXXXXG11D;
					КонецЕсли;	
					rsMain.Fields.Item("TAB1_A14").Value = Стр.TCT1RXXXXG12S;
					rsMain.Fields.Item("TAB1_A15").Value = Стр.TCT1RXXXXG13;
					rsMain.Fields.Item("TAB1_A16").Value = Стр.TCT1RXXXXG14;
					rsMain.Fields.Item("TAB1_A17").Value = Стр.TCT1RXXXXG15;
					rsMain.Fields.Item("TAB1_A18").Value = Стр.TCT1RXXXXG16;
					rsMain.Fields.Item("TAB1_A19").Value = Стр.TCT1RXXXXG17;
					
					rsMain.Post();
					rsMain.Append();
					//КонецЦикла;
					
					
				КонецЦикла;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;
		
		
		//КонецЦикла;	
		//TAB2
		rsMain = Doc.DataSets("TAB2");
		rsMain.Clear();
		rsMain.Edit();
		Для Каждого Поле Из ТЧ Цикл
			
			Если Поле.Ключ = "TCT2R" Тогда
				Для каждого Стр Из Поле.Значение Цикл
					
					rsMain.Fields.Item("TAB2_A1").Value = Стр.TCT2RXXXXG1S;
					rsMain.Fields.Item("TAB2_A2").Value = Стр.TCT2RXXXXG2S;
					Если Стр.TCT2RXXXXG3D <> Дата(1,1,1) Тогда
						rsMain.Fields.Item("TAB2_A5").Value = Стр.TCT2RXXXXG3D;
					КонецЕсли;	
					rsMain.Fields.Item("TAB2_A6").Value = Стр.TCT2RXXXXG4S;
					rsMain.Fields.Item("TAB2_A7").Value = Стр.TCT2RXXXXG5S;
					rsMain.Fields.Item("TAB2_A8").Value = Стр.TCT2RXXXXG6S;
					rsMain.Fields.Item("TAB2_A9").Value = Стр.TCT2RXXXXG7S;
					rsMain.Fields.Item("TAB2_A10").Value = Стр.TCT2RXXXXG8S;
					rsMain.Fields.Item("TAB2_A11").Value = Стр.TCT2RXXXXG9S;
					Если Стр.TCT2RXXXXG10D <> Дата(1,1,1) Тогда
						rsMain.Fields.Item("TAB2_A12").Value = Стр.TCT2RXXXXG10D;
					КонецЕсли;
					Если Стр.TCT2RXXXXG11D <> Дата(1,1,1) Тогда
						rsMain.Fields.Item("TAB2_A13").Value = Стр.TCT2RXXXXG11D;
					КонецЕсли;	
					rsMain.Fields.Item("TAB2_A14").Value = Стр.TCT2RXXXXG12S;
					rsMain.Fields.Item("TAB2_A15").Value = Стр.TCT2RXXXXG13;
					rsMain.Fields.Item("TAB2_A16").Value = Стр.TCT2RXXXXG14;
					rsMain.Fields.Item("TAB2_A17").Value = Стр.TCT2RXXXXG15;
					rsMain.Fields.Item("TAB2_A18").Value = Стр.TCT2RXXXXG16;
					rsMain.Fields.Item("TAB2_A19").Value = Стр.TCT2RXXXXG17;
					
					
					rsMain.Post();
					rsMain.Append();
					
				КонецЦикла;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;
		
		
		КонецОтчета(Doc);		
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_ВП(Doc, БланкВП, Документ)
	
	//Если БланкВП = "J0111719" Тогда
	Если БланкВП = "J0111725" Тогда	
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеВП;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеВП");
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A03", "R003G3");
		с.Вставить("A04", "R004G3");
		с.Вставить("A05", "R005G3");
		с.Вставить("A06", "R006G3");
		с.Вставить("A061", "R0061G3");
		//DOCKING 527 + 07.06.2023 
		с.Вставить("A062", "R0062G3");
		с.Вставить("A063", "R0063G3");
		
		с.Вставить("A064", "R0064G3");
		с.Вставить("A0641", "R00641G3");
		с.Вставить("A0642", "R00642G3");
		
		//с.Вставить("A031", "R0031G3");
		//с.Вставить("A032", "R0032G3");
        //DOCKING 527 - 28.07.202
		с.Вставить("A07", "R007G3");
		с.Вставить("A071", "R0071G3");
		с.Вставить("A072", "R0072G3");
		с.Вставить("A08", "R008G3");
		с.Вставить("A09", "R009G3");
		с.Вставить("A091", "R0091G3");
		с.Вставить("A0911", "R00911G3");
		с.Вставить("A0912", "R00912G3");
		с.Вставить("A092", "R0092G3");
		с.Вставить("A10", "R010G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		с.Вставить("A18", "R018G3");
		с.Вставить("A19", "R019G3");
		с.Вставить("A20", "R020G3");
		с.Вставить("A21", "R021G3");
		с.Вставить("A22", "R022G3");
		с.Вставить("A23", "R023G3");
		с.Вставить("A24", "R024G3");
		с.Вставить("A25", "R025G3");
		с.Вставить("A26", "R026G3");
		с.Вставить("A27", "R027G3");
		с.Вставить("A28", "R028G3");
		с.Вставить("A29", "R029G3");
		с.Вставить("A30", "R030G3");
		с.Вставить("A31", "R031G3");
		с.Вставить("A32", "R032G3");
		//DOCKING 527 + 10.08.2023
		с.Вставить("A33", "R033G3");
		с.Вставить("A34", "R034G3");
		с.Вставить("A35", "R035G3");
		с.Вставить("A36", "R036G3");
		с.Вставить("A37", "R037G3");
		с.Вставить("A38", "R038G3");
		с.Вставить("A42", "R042G3");
		//DOCKING 527 + 10.08.2023
		
		Если Док.HF1 <> "" Тогда
			rsMain.Fields.Item("N6").Value = Истина;
		КонецЕсли; 
		Если Док.HF2 <> "" Тогда
			rsMain.Fields.Item("N7").Value = Истина;
		КонецЕсли; 
		Если Док.HF3 <> "" Тогда
			rsMain.Fields.Item("N8").Value = Истина;
		КонецЕсли; 
		Если Док.HF4 <> "" Тогда
			rsMain.Fields.Item("N9").Value = Истина;
		КонецЕсли; 		
		Если Док.HF5 <> "" Тогда
			rsMain.Fields.Item("N10").Value = Истина;
		КонецЕсли; 		
		Если Док.HF6 <> "" Тогда
			rsMain.Fields.Item("N11").Value = Истина;
		КонецЕсли; 
		Если Док.HF7 <> "" Тогда
			rsMain.Fields.Item("N12").Value = Истина;
		КонецЕсли; 		
		Если Док.HF8 <> "" Тогда
			rsMain.Fields.Item("N13").Value = Истина;
		КонецЕсли; 		
		Если Док.HF9 <> "" Тогда
			rsMain.Fields.Item("N14").Value = Истина;
		КонецЕсли; 		
		
		Если Док.HZYP <> 0 Тогда
			rsMain.Fields.Item("NYEARP").Value = Док.HZYP;
		КонецЕсли; 
		
		Если Док.H1KVP <> "" Тогда
			rsMain.Fields.Item("H1KVP").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HHYP <> "" Тогда
			rsMain.Fields.Item("HHYP").Value = Истина;	
		КонецЕсли; 
		
		Если Док.H3KVP <> "" Тогда
			rsMain.Fields.Item("H3KVP").Value = Истина;	
		КонецЕсли; 
		
		Если Док.HYP <> "" Тогда
			rsMain.Fields.Item("HYP").Value = Истина;	
		КонецЕсли; 		
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_РИ(Doc, БланкРИ, Документ)
	
	//Если БланкРИ="J0111819" Тогда
	Если БланкРИ="J0111825" Тогда	
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеРИ;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеРИ");
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A111", "R0111G3");
		с.Вставить("A121", "R0121G3");
		с.Вставить("A1111", "R01111G3");
		с.Вставить("A1211", "R01211G3");
		с.Вставить("A1212", "R01212G3");
		с.Вставить("A112", "R0112G3");
		с.Вставить("A122", "R0122G3");
		с.Вставить("A113", "R0113G3");
		с.Вставить("A123", "R0123G3");
		с.Вставить("A114", "R0114G3");
		с.Вставить("A211", "R0211G3");
		с.Вставить("A221", "R0221G3");
		с.Вставить("A2211", "R02211G3");
		с.Вставить("A212", "R0212G3");
		с.Вставить("A222", "R0222G3");
		с.Вставить("A223", "R0223G3");
		с.Вставить("A213", "R0213G3");
		с.Вставить("A214", "R0214G3");
		с.Вставить("A224", "R0224G3");
		с.Вставить("A2241", "R02241G3");
		с.Вставить("A215", "R0215G3");
		//с.Вставить("A225", "R0225G3");
		//с.Вставить("A226", "R0226G3");
		//с.Вставить("A227", "R0227G3");
		с.Вставить("A311", "R0311G3");
		
		// DOCKING 527 + 10.08.2023
		с.Вставить("A31102", "R031102G3");
		с.Вставить("A3115", "R03115G3");
		с.Вставить("A4223", "R04223G3");
		с.Вставить("A4123", "R04123G3");
		с.Вставить("A4222", "R04222G3");
		с.Вставить("A4223", "R04223G3");
		с.Вставить("A4224", "R04224G3");
		с.Вставить("A4225", "R04225G3");
		// DOCKING 527 - 10.08.2023
		
 		// 28.06.2022 + DOCKING 410
		с.Вставить("A3114", "R03114G3");
		с.Вставить("A326", "R0326G3");
		// 28.06.2022 - DOCKING 410
		с.Вставить("A321", "R0321G3");
		с.Вставить("A322", "R0322G3");
		с.Вставить("A323", "R0323G3");
		с.Вставить("A3231", "R03231G3");
		с.Вставить("A3232", "R03232G3");		
		с.Вставить("A3233", "R03233G3");		
		с.Вставить("A3234", "R03234G3");		
        с.Вставить("A3241", "R03241G3");		
        с.Вставить("A3163", "R03163G3");
		с.Вставить("A3171", "R03171G3");		
		с.Вставить("A3172", "R03172G3");		
        с.Вставить("A4151", "R04151G3");
		// DOCKING 672 + 19.02.2024
		с.Вставить("A4152", "R04152G3");		
		с.Вставить("A4251", "R04251G3");		
		с.Вставить("A4252", "R04252G3");		
		// DOCKING 672 - 19.02.2024
		с.Вставить("A41171", "R041171G3");		
		с.Вставить("A42161", "R042161G3");		
		с.Вставить("A42162", "R042162G3");	
		с.Вставить("A4120", "R04120G3");		
		с.Вставить("A4220", "R04220G3");		
		с.Вставить("A4121", "R04121G3");		
		с.Вставить("A4221", "R04221G3");		
		с.Вставить("A324", "R0324G3");
		с.Вставить("A325", "R0325G3");
		с.Вставить("A312", "R0312G3");
		с.Вставить("A313", "R0313G3");
		с.Вставить("A314", "R0314G3");
		с.Вставить("A315", "R0315G3");
		с.Вставить("A316", "R0316G3");
		с.Вставить("A3161", "R03161G3");
		с.Вставить("A3162", "R03162G3");
		с.Вставить("A317", "R0317G3");
		с.Вставить("A318", "R0318G3");
		с.Вставить("A319", "R0319G3");
		с.Вставить("A3110", "R03110G3");
		с.Вставить("A31101", "R031101G3");
		с.Вставить("A3111", "R03111G3");
		с.Вставить("A3112", "R03112G3");
		с.Вставить("A3113", "R03113G3");
		с.Вставить("A3114", "R03114G3");
		с.Вставить("A411", "R0411G3");
		с.Вставить("A421", "R0421G3");
		с.Вставить("A412", "R0412G3");
		с.Вставить("A422", "R0422G3");
		с.Вставить("A413", "R0413G3");
		с.Вставить("A414", "R0414G3");
		с.Вставить("A415", "R0415G3");
		с.Вставить("A423", "R0423G3");
		с.Вставить("A424", "R0424G3");
		с.Вставить("A425", "R0425G3");
		с.Вставить("A426", "R0426G3");
		с.Вставить("A416", "R0416G3");
		с.Вставить("A417", "R0417G3");
		с.Вставить("A418", "R0418G3");
		с.Вставить("A419", "R0419G3");
		с.Вставить("A4110", "R04110G3");
		с.Вставить("A4111", "R04111G3");
		с.Вставить("A4112", "R04112G3");
		с.Вставить("A427", "R0427G3");
		с.Вставить("A4113", "R04113G3");
		с.Вставить("A428", "R0428G3");
		с.Вставить("A4114", "R04114G3");
		с.Вставить("A429", "R0429G3");
		с.Вставить("A4115", "R04115G3");
		с.Вставить("A4210", "R04210G3");
		с.Вставить("A4116", "R04116G3");
		с.Вставить("A4211", "R04211G3");
		с.Вставить("A4212", "R04212G3");
		с.Вставить("A4117", "R04117G3");
		с.Вставить("A4118", "R04118G3");
		с.Вставить("A4119", "R04119G3");
		с.Вставить("A4213", "R04213G3");
		с.Вставить("A4214", "R04214G3");
		с.Вставить("A4215", "R04215G3");
		с.Вставить("A4216", "R04216G3");
		с.Вставить("A4217", "R04217G3");
		с.Вставить("A4218", "R04218G3");
		с.Вставить("A4219", "R04219G3");
		с.Вставить("A4141", "R04141G3");
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A03", "R003G3");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_ПЗ(Doc, БланкПЗ, Документ)
	
	//Если БланкПЗ = "J0111319" Тогда
	Если БланкПЗ = "J0111325" Тогда	
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеПЗ");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A05", "R005G3");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		rsMain.Edit();
		Для Каждого Поле Из ТЧ Цикл
			Если Поле.Ключ = "PZT1R" Тогда
				Для каждого Стр Из Поле.Значение Цикл

					rsMain.Fields.Item("TAB1_A4").Value = Стр.PZT1RXXXXG1;
					rsMain.Fields.Item("TAB1_A1").Value = Стр.PZT1RXXXXG2;
					rsMain.Fields.Item("TAB1_A2").Value = Стр.PZT1RXXXXG3;
					rsMain.Fields.Item("TAB1_A3").Value = Стр.PZT1RXXXXG4;
					rsMain.Fields.Item("TAB1_A5").Value = Стр.PZT1RXXXXP1;
					
					rsMain.Post();
					rsMain.Append();
					
				КонецЦикла;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;
		
		
		//КонецЦикла;	
		//TAB2
		rsMain = Doc.DataSets("TAB2");
		rsMain.Clear();
		rsMain.Edit();
		Для Каждого Поле Из ТЧ Цикл
			
			Если Поле.Ключ = "PZT2R" Тогда
				Для каждого Стр Из Поле.Значение Цикл
					
					rsMain.Fields.Item("TAB2_A2").Value = Стр.PZT2RXXXXG2S;
					rsMain.Fields.Item("TAB2_A3").Value = Стр.PZT2RXXXXG3S;
					rsMain.Fields.Item("TAB2_A4").Value = Стр.PZT2RXXXXG4S;
					rsMain.Fields.Item("TAB2_A5").Value = Стр.PZT2RXXXXG5S;
					rsMain.Fields.Item("TAB2_A6").Value = Стр.PZT2RXXXXG6;
					rsMain.Fields.Item("TAB2_A1").Value = Стр.PZT2RXXXXОснование;
					
					rsMain.Post();
					rsMain.Append();
					
				КонецЦикла;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;
		КонецОтчета(Doc);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_АМ(Doc, БланкАМ, Документ)
	
	//Если БланкАМ="J0110619" Тогда
	Если БланкАМ="J0110625" Тогда	
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеАМ;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеАМ");
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A2_3", "R0102G3");
		с.Вставить("A2_4", "R0102G4");
		с.Вставить("A2_5", "R0102G5");
		с.Вставить("A3_3", "R0103G3");
		с.Вставить("A3_4", "R0103G4");
		с.Вставить("A3_5", "R0103G5");
		// DOCKING 527 + 10.08.2023
		с.Вставить("A31_3", "R01031G3");
		с.Вставить("A31_4", "R01031G4");
		с.Вставить("A31_5", "R01031G5");
		
		с.Вставить("A41_3", "R01041G3");
		с.Вставить("A41_4", "R01041G4");
		с.Вставить("A41_5", "R01041G5");
		
		с.Вставить("A51_3", "R01051G3");
		с.Вставить("A51_4", "R01051G4");
		с.Вставить("A51_5", "R01051G5");
		
		с.Вставить("A91_3", "R01091G3");
		с.Вставить("A91_4", "R01091G4");
		с.Вставить("A91_5", "R01091G5");
		
		// DOCKING 527 - 10.08.2023
		с.Вставить("A4_3", "R0104G3");
		с.Вставить("A4_4", "R0104G4");
		с.Вставить("A4_5", "R0104G5");
		с.Вставить("A5_3", "R0105G3");
		с.Вставить("A5_4", "R0105G4");
		с.Вставить("A5_5", "R0105G5");
		с.Вставить("A6_3", "R0106G3");
		с.Вставить("A6_4", "R0106G4");
		с.Вставить("A6_5", "R0106G5");
		с.Вставить("A7_3", "R0107G3");
		с.Вставить("A7_4", "R0107G4");
		с.Вставить("A7_5", "R0107G5");
		с.Вставить("A8_3", "R0108G3");
		с.Вставить("A8_4", "R0108G4");
		с.Вставить("A8_5", "R0108G5");
		с.Вставить("A9_3", "R0109G3");
		с.Вставить("A9_4", "R0109G4");
		с.Вставить("A9_5", "R0109G5");
		с.Вставить("A12_3", "R0112G3");
		с.Вставить("A12_4", "R0112G4");
		с.Вставить("A12_5", "R0112G5");
		с.Вставить("A14_3", "R0114G3");
		с.Вставить("A14_4", "R0114G4");
		с.Вставить("A14_5", "R0114G5");
		с.Вставить("A15_3", "R0115G3");
		с.Вставить("A15_4", "R0115G4");
		с.Вставить("A15_5", "R0115G5");
		с.Вставить("A16_3", "R0116G3");
		с.Вставить("A16_4", "R0116G4");
		с.Вставить("A16_5", "R0116G5");
		с.Вставить("A17_3", "R0117G3");
		с.Вставить("A17_4", "R0117G4");
		с.Вставить("A17_5", "R0117G5");
		// 28.06.2022 + DOCKING 410
		с.Вставить("A18_3", "R0118G3");
		с.Вставить("A18_4", "R0118G4");
		с.Вставить("A18_5", "R0118G5");
		// 28.06.2022 - DOCKING 410	
		с.Вставить("H1_2", "R0201G2");
		с.Вставить("H1_3", "R0201G3");
		с.Вставить("H1_4", "R0201G4");
		с.Вставить("H1_5", "R0201G5");
		с.Вставить("H2_2", "R0202G2");
		с.Вставить("H2_3", "R0202G3");
		с.Вставить("H2_4", "R0202G4");
		с.Вставить("H2_5", "R0202G5");
		с.Вставить("H3_2", "R0203G2");
		с.Вставить("H3_3", "R0203G3");
		с.Вставить("H3_4", "R0203G4");
		с.Вставить("H3_5", "R0203G5");
		с.Вставить("H4_2", "R0204G2");
		с.Вставить("H4_3", "R0204G3");
		с.Вставить("H4_4", "R0204G4");
		с.Вставить("H4_5", "R0204G5");
		с.Вставить("H5_2", "R0205G2");
		с.Вставить("H5_3", "R0205G3");
		с.Вставить("H5_4", "R0205G4");
		с.Вставить("H5_5", "R0205G5");
		с.Вставить("H6_2", "R0206G2");
		с.Вставить("H6_3", "R0206G3");
		с.Вставить("H6_4", "R0206G4");
		с.Вставить("H6_5", "R0206G5");
		с.Вставить("H7_3", "R0207G3");
		с.Вставить("H7_4", "R0207G4");
		с.Вставить("H7_5", "R0207G5");
		с.Вставить("A121", "R00121G3");
		с.Вставить("A01_1", "R03G1");
		с.Вставить("A01_2", "R03G2");
		с.Вставить("A01_3", "R03G3");
				
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;
	

	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_ЦП(Doc, БланкЦП, Документ)
	
	//Если БланкЦП = "J0110319" Тогда
	Если БланкЦП = "J0110325" Тогда	
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеЦП;	
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеЦП");
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		с.Вставить("A01", "R01G3");
		с.Вставить("A011", "R011G3");
		с.Вставить("A0111", "R0111G3");
		с.Вставить("A012", "R012G3");
		с.Вставить("A0121", "R0121G3");
		с.Вставить("A013", "R013G3");
		с.Вставить("A014", "R014G3");
		с.Вставить("A015", "R015G3");
		с.Вставить("A016", "R016G3");
		с.Вставить("A017", "R017G3");
		с.Вставить("A018", "R018G3");
		с.Вставить("A019", "R019G3");
		с.Вставить("A0110", "R0110G3");
		с.Вставить("A01111", "R01110G3");
		с.Вставить("A0112", "R0112G3");
		с.Вставить("A0113", "R0113G3");
		с.Вставить("A02", "R02G3");
		с.Вставить("A021", "R021G3");
		с.Вставить("A0211", "R0211G3");
		с.Вставить("A022", "R022G3");
		с.Вставить("A0221", "R0221G3");
		с.Вставить("A023", "R023G3");
		с.Вставить("A024", "R024G3");
		с.Вставить("A025", "R025G3");
		с.Вставить("A026", "R026G3");
		с.Вставить("A027", "R027G3");
		с.Вставить("A028", "R028G3");
		с.Вставить("A029", "R029G3");
		с.Вставить("A0210", "R0210G3");
		с.Вставить("A02111", "R02110G3");
		с.Вставить("A0212", "R0212G3");
		с.Вставить("A0213", "R0213G3");
		с.Вставить("A03", "R03G3");
		с.Вставить("A413", "R0413G3");
		с.Вставить("A4131", "R04131G3");
		с.Вставить("A4132", "R04132G3");
		с.Вставить("A04", "R04G3");
		с.Вставить("A414", "R0414G3");

			
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Декларация_Прибыль_ПП(Doc, БланкПП, Документ)
	
	//Если БланкПП = "J0112019" Тогда
	Если БланкПП = "J0112025" Тогда	
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаПриложениеЦП;	
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеПП");
		
			  
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		
		Попытка
			Если Док.H1KV <> "" Тогда
				rsMain.Fields.Item("H1KV").value = true;
			КонецЕсли;
		Исключение
			Попытка
				Если Док.H1KV1 <> "" Тогда
					rsMain.Fields.Item("H1KV").value = true;
				КонецЕсли;
			Исключение КонецПопытки;	
		КонецПопытки;	
		
		Попытка
			Если Док.HHY <> "" Тогда
				rsMain.Fields.Item("HHY").value = true;
			КонецЕсли;
		Исключение
			Попытка
				Если Док.HHY1 <> "" Тогда
					rsMain.Fields.Item("HHY").value = true;
				КонецЕсли;
			Исключение КонецПопытки;	
		КонецПопытки;
		
		Если Док.H3KV <> "" Тогда
			rsMain.Fields.Item("H3KV").value = true;
		КонецЕсли;
		Если Док.HY <> "" Тогда
			rsMain.Fields.Item("HY").value = true;
		КонецЕсли;
		
		с.Вставить("REP_NYEAR", "HZY");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			//Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
			//	Ноль = "XXXXX"
			//ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
				Ноль = "XXXX"; 	
			//ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
			//	Ноль = "XXX"
			//ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
			//	Ноль = "XX"
			//ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
			//	Ноль = "X"
			//Иначе 
			//	Ноль = ""
			//КонецЕсли;
			
			СуществуетСтрока = Ложь;   
			rsMain.Edit();
			Для Каждого Поле Из Док Цикл
				         
				Если Найти(Поле.Ключ, "PPT1R"+Ноль+"G1_"+НомерСтроки) = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A1").Value = Поле.Значение;
				ИначеЕсли Найти(Поле.Ключ, "PPT1R"+Ноль+"G2S_"+НомерСтроки) = 1 Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A2").Value = Поле.Значение;
				ИначеЕсли Найти(Поле.Ключ, "PPT1R"+Ноль+"G3_"+НомерСтроки) = 1 Тогда   
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A3").Value = Поле.Значение;	 
				ИначеЕсли Найти(Поле.Ключ, "PPT1R"+Ноль+"G4D_"+НомерСтроки) = 1 Тогда   
					Если Поле.Значение <> Дата(1,1,1) Тогда
						СуществуетСтрока = Истина;
						rsMain.Fields.Item("TAB1_A4").Value = Поле.Значение;
					КонецЕсли;
				ИначеЕсли Найти(Поле.Ключ, "PPT1R"+Ноль+"G5D_"+НомерСтроки) = 1 Тогда  
					Если Поле.Значение <> Дата(1,1,1) Тогда
						СуществуетСтрока = Истина;
						rsMain.Fields.Item("TAB1_A5").Value = Поле.Значение;
					КонецЕсли;
				ИначеЕсли Найти(Поле.Ключ, "PPT1R"+Ноль+"G6_"+НомерСтроки) = 1 Тогда   
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A6").Value = Поле.Значение;
				ИначеЕсли Найти(Поле.Ключ, "PPT1R"+Ноль+"G7_"+НомерСтроки) = 1 Тогда   
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A7").Value = Поле.Значение;
				ИначеЕсли Найти(Поле.Ключ, "PPT1R"+Ноль+"G8_"+НомерСтроки) = 1 Тогда   
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A8").Value = Поле.Значение;	
				КонецЕсли;
			КонецЦикла;
			rsMain.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsMain.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;		
		КонецОтчета(Doc);	
	КонецЕсли;

		
КонецПроцедуры

&НаКлиенте
Функция Формирование_Декларация_Прибыль_ПН(Doc, БланкПН, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)
	
	//Если БланкПН = "J0111519" Тогда
	Если БланкПН = "J0111525" Тогда	
		
		Док = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);
		
		НомерСтроки = 1;
		НомерСтрокиН = 0;
		СуществуетСтрока = Ложь;
		НомерДод = 1;
		
		//НомерДод = 1;
		//НовыйИд = ИД;
		//
		Для Каждого Поле Из Док.ПриложениеПН Цикл	//Док.ПриложениеПН
			
			НовыйИд = ИД + НомерДод;
			Doc  = App.OpenOrCreateByExDocID(БланкПН, ОпределитьКодПериода(Документ.Дата,"ДекларацияПрибыль"), PDate, , НовыйИд, 0);
			Doc.IDParent = ИДПарент;	
			rsMain = Doc.DataSets();	
			rsMain.Edit();       
			rsMain.Append();
			rsMain.Post();
			

			//ДобавитьНовуюСтроку = Истина;
			
			rsMain.Fields.Item("RUK").Value = Поле.Данные.HBOS;
			rsMain.Fields.Item("BUH").Value = Поле.Данные.HBUH;
			
			Если ЗначениеЗаполнено(Поле.Данные.H1KV) Тогда 
				rsMain.Fields.Item("HZ").Value = true;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Поле.Данные.H1KV) Тогда 
				rsMain.Fields.Item("HZN").Value = Поле.Данные.HZN;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Поле.Данные.H1KV) Тогда  
				rsMain.Fields.Item("H1KV").Value = true;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Поле.Данные.HY) Тогда
				rsMain.Fields.Item("HY").Value = true;
			КонецЕсли;
			
			rsMain.Fields.Item("A0_3").Value = Поле.Данные.R0134G3;
			rsMain.Fields.Item("A1_3").Value = Поле.Данные.R0101G3;
			rsMain.Fields.Item("A2_3").Value = Поле.Данные.R0102G3;
			rsMain.Fields.Item("A3_3").Value = Поле.Данные.R0103G3;
			rsMain.Fields.Item("A4_3").Value = Поле.Данные.R0104G3;
			rsMain.Fields.Item("A5_3").Value = Поле.Данные.R0105G3;
			rsMain.Fields.Item("A6_3").Value = Поле.Данные.R0106G3;
			rsMain.Fields.Item("A7_3").Value = Поле.Данные.R0107G3;
			rsMain.Fields.Item("A8_3").Value = Поле.Данные.R0108G3;
			rsMain.Fields.Item("A9_3").Value = Поле.Данные.R0109G3;
			rsMain.Fields.Item("A10_3").Value = Поле.Данные.R0110G3;
			rsMain.Fields.Item("A11_3").Value = Поле.Данные.R0111G3;
			rsMain.Fields.Item("A0_6").Value = Поле.Данные.R0134G6;
			rsMain.Fields.Item("A1_5").Value = Поле.Данные.R0101G5;
			rsMain.Fields.Item("A1_6").Value = Поле.Данные.R0101G6;
			rsMain.Fields.Item("A2_5").Value = Поле.Данные.R0102G5;
			rsMain.Fields.Item("A2_6").Value = Поле.Данные.R0102G6;
			rsMain.Fields.Item("A3_5").Value = Поле.Данные.R0103G5;
			rsMain.Fields.Item("A3_6").Value = Поле.Данные.R0103G6;
			rsMain.Fields.Item("A4_5").Value = Поле.Данные.R0104G5;
			rsMain.Fields.Item("A4_6").Value = Поле.Данные.R0104G6;
			rsMain.Fields.Item("A5_5").Value = Поле.Данные.R0105G5;
			rsMain.Fields.Item("A5_6").Value = Поле.Данные.R0105G6;
			rsMain.Fields.Item("A6_5").Value = Поле.Данные.R0106G5;
			rsMain.Fields.Item("A6_6").Value = Поле.Данные.R0106G6;
			rsMain.Fields.Item("A7_5").Value = Поле.Данные.R0107G5;
			rsMain.Fields.Item("A7_6").Value = Поле.Данные.R0107G6;
			rsMain.Fields.Item("A8_5").Value = Поле.Данные.R0108G5;
			rsMain.Fields.Item("A8_6").Value = Поле.Данные.R0109G5;
			rsMain.Fields.Item("A9_5").Value = Поле.Данные.R0109G5;
			rsMain.Fields.Item("A9_6").Value = Поле.Данные.R0109G6;
			rsMain.Fields.Item("A10_5").Value = Поле.Данные.R0110G5;
			rsMain.Fields.Item("A10_6").Value = Поле.Данные.R0110G6;
			rsMain.Fields.Item("A11_5").Value = Поле.Данные.R0111G5;
			rsMain.Fields.Item("A11_6").Value = Поле.Данные.R0111G6;
			rsMain.Fields.Item("A02_5").Value = Поле.Данные.R0218G5;
			rsMain.Fields.Item("A02_6").Value = Поле.Данные.R0218G6;
			rsMain.Fields.Item("N2").Value = Поле.Данные.R0304G1S;
			rsMain.Fields.Item("N3").Value = Поле.Данные.HNAMENR;
			rsMain.Fields.Item("N4").Value = Поле.Данные.HLOCNR;
			rsMain.Fields.Item("N5").Value = Поле.Данные.H01G2S;
			rsMain.Fields.Item("N6").Value = Поле.Данные.H01G2;
			Если Поле.Данные.H01G3 <> "" Тогда
				//rsMain.Fields.Item("N7").Value = Поле.Данные.H01G3;
				Попытка	rsMain.Fields.Item("N7").Value = Поле.Данные.H01G3; Исключение КонецПопытки;
			КонецЕсли;
			rsMain.Fields.Item("N8").Value = Поле.Данные.HTINNR;
			Попытка
				rsMain.Fields.Item("N9").Value = Поле.Данные.H01;
			Исключение КонецПопытки;	
			rsMain.Fields.Item("A1_7").Value = Поле.Данные.R0101G7;
			rsMain.Fields.Item("A1_8").Value = Поле.Данные.R0101G8;
			rsMain.Fields.Item("A2_7").Value = Поле.Данные.R0102G7;
			rsMain.Fields.Item("A2_8").Value = Поле.Данные.R0102G8;
			rsMain.Fields.Item("A3_7").Value = Поле.Данные.R0103G7;
			rsMain.Fields.Item("A3_8").Value = Поле.Данные.R0103G8;
			rsMain.Fields.Item("A4_7").Value = Поле.Данные.R0104G7;
			rsMain.Fields.Item("A4_8").Value = Поле.Данные.R0104G8;
			rsMain.Fields.Item("A5_7").Value = Поле.Данные.R0105G7;
			rsMain.Fields.Item("A5_8").Value = Поле.Данные.R0105G8;
			rsMain.Fields.Item("A6_7").Value = Поле.Данные.R0106G7;
			rsMain.Fields.Item("A6_8").Value = Поле.Данные.R0106G8;
			rsMain.Fields.Item("A7_7").Value = Поле.Данные.R0107G7;
			rsMain.Fields.Item("A7_8").Value = Поле.Данные.R0107G8;
			rsMain.Fields.Item("A8_7").Value = Поле.Данные.R0108G7;
			rsMain.Fields.Item("A8_8").Value = Поле.Данные.R0108G8;
			rsMain.Fields.Item("A9_7").Value = Поле.Данные.R0109G7;
			rsMain.Fields.Item("A9_8").Value = Поле.Данные.R0109G8;
			rsMain.Fields.Item("A10_7").Value = Поле.Данные.R0110G7;
			rsMain.Fields.Item("A10_8").Value = Поле.Данные.R0110G8;
			rsMain.Fields.Item("A11_7").Value = Поле.Данные.R0111G7;
			rsMain.Fields.Item("A11_8").Value = Поле.Данные.R0111G8;
			rsMain.Fields.Item("A12_3").Value = Поле.Данные.R0112G3;
			rsMain.Fields.Item("A13_3").Value = Поле.Данные.R0113G3;
			rsMain.Fields.Item("A14_3").Value = Поле.Данные.R0114G3;
			rsMain.Fields.Item("A15_3").Value = Поле.Данные.R0115G3;
			rsMain.Fields.Item("A16_3").Value = Поле.Данные.R0116G3;
			rsMain.Fields.Item("A17_3").Value = Поле.Данные.R0117G3;
			rsMain.Fields.Item("A18_3").Value = Поле.Данные.R0118G3;
			rsMain.Fields.Item("A19_3").Value = Поле.Данные.R0119G3;
			rsMain.Fields.Item("A12_5").Value = Поле.Данные.R0112G5;
			rsMain.Fields.Item("A12_6").Value = Поле.Данные.R0112G6;
			rsMain.Fields.Item("A12_7").Value = Поле.Данные.R0112G7;
			rsMain.Fields.Item("A12_8").Value = Поле.Данные.R0112G8;
			rsMain.Fields.Item("A13_5").Value = Поле.Данные.R0113G5;
			rsMain.Fields.Item("A13_6").Value = Поле.Данные.R0113G6;
			rsMain.Fields.Item("A13_7").Value = Поле.Данные.R0113G7;
			rsMain.Fields.Item("A13_8").Value = Поле.Данные.R0113G8;
			rsMain.Fields.Item("A14_5").Value = Поле.Данные.R0114G5;
			rsMain.Fields.Item("A14_6").Value = Поле.Данные.R0114G6;
			rsMain.Fields.Item("A14_7").Value = Поле.Данные.R0114G7;
			rsMain.Fields.Item("A14_8").Value = Поле.Данные.R0114G8;
			rsMain.Fields.Item("A15_5").Value = Поле.Данные.R0115G5;
			rsMain.Fields.Item("A15_6").Value = Поле.Данные.R0115G6;
			rsMain.Fields.Item("A15_7").Value = Поле.Данные.R0115G7;
			rsMain.Fields.Item("A15_8").Value = Поле.Данные.R0115G8;
			rsMain.Fields.Item("A16_5").Value = Поле.Данные.R0116G5;
			rsMain.Fields.Item("A16_6").Value = Поле.Данные.R0116G6;
			rsMain.Fields.Item("A16_7").Value = Поле.Данные.R0116G7;
			rsMain.Fields.Item("A16_8").Value = Поле.Данные.R0116G8;
			rsMain.Fields.Item("A17_5").Value = Поле.Данные.R0117G5;
			rsMain.Fields.Item("A17_6").Value = Поле.Данные.R0117G6;
			rsMain.Fields.Item("A17_7").Value = Поле.Данные.R0117G7;
			rsMain.Fields.Item("A17_8").Value = Поле.Данные.R0117G8;
			rsMain.Fields.Item("A18_5").Value = Поле.Данные.R0118G5;
			rsMain.Fields.Item("A18_6").Value = Поле.Данные.R0118G6;
			rsMain.Fields.Item("A18_7").Value = Поле.Данные.R0118G7;
			rsMain.Fields.Item("A18_8").Value = Поле.Данные.R0118G8;
			rsMain.Fields.Item("A19_5").Value = Поле.Данные.R0119G5;
			rsMain.Fields.Item("A19_6").Value = Поле.Данные.R0119G6;
			rsMain.Fields.Item("A19_7").Value = Поле.Данные.R0119G7;
			rsMain.Fields.Item("A19_8").Value = Поле.Данные.R0119G8;
			rsMain.Fields.Item("A20_3").Value = Поле.Данные.R0120G3;
			rsMain.Fields.Item("A21_3").Value = Поле.Данные.R0121G3;
			rsMain.Fields.Item("A22_3").Value = Поле.Данные.R0122G3;
			rsMain.Fields.Item("A23_3").Value = Поле.Данные.R0123G3;
			rsMain.Fields.Item("A24_3").Value = Поле.Данные.R0124G3;
			rsMain.Fields.Item("A20_5").Value = Поле.Данные.R0120G5;
			rsMain.Fields.Item("A20_6").Value = Поле.Данные.R0120G6;
			rsMain.Fields.Item("A20_7").Value = Поле.Данные.R0120G7;
			rsMain.Fields.Item("A21_5").Value = Поле.Данные.R0121G5;
			rsMain.Fields.Item("A21_6").Value = Поле.Данные.R0121G6;
			rsMain.Fields.Item("A21_7").Value = Поле.Данные.R0121G7;
			rsMain.Fields.Item("A22_5").Value = Поле.Данные.R0122G5;
			rsMain.Fields.Item("A22_6").Value = Поле.Данные.R0122G6;
			rsMain.Fields.Item("A22_7").Value = Поле.Данные.R0122G7;
			rsMain.Fields.Item("A23_5").Value = Поле.Данные.R0123G5;
			rsMain.Fields.Item("A23_6").Value = Поле.Данные.R0123G6;
			rsMain.Fields.Item("A23_7").Value = Поле.Данные.R0123G7;
			rsMain.Fields.Item("A25_3").Value = Поле.Данные.R0125G3;
			rsMain.Fields.Item("A26_3").Value = Поле.Данные.R0126G3;
			rsMain.Fields.Item("A27_3").Value = Поле.Данные.R0127G3;
			rsMain.Fields.Item("A28_3").Value = Поле.Данные.R0128G3;
			rsMain.Fields.Item("A29_3").Value = Поле.Данные.R0129G3;
			rsMain.Fields.Item("A26_5").Value = Поле.Данные.R0126G5;
			rsMain.Fields.Item("A26_6").Value = Поле.Данные.R0126G6;
			rsMain.Fields.Item("A26_7").Value = Поле.Данные.R0126G7;
			rsMain.Fields.Item("A26_8").Value = Поле.Данные.R0126G8;
			rsMain.Fields.Item("A0_7").Value = Поле.Данные.R0134G7;
			rsMain.Fields.Item("A0_8").Value = Поле.Данные.R0134G8;
			rsMain.Fields.Item("A30_3").Value = Поле.Данные.R0130G3;
			rsMain.Fields.Item("A31_3").Value = Поле.Данные.R0131G3;
			rsMain.Fields.Item("A32_3").Value = Поле.Данные.R0132G3;
			rsMain.Fields.Item("A33_3").Value = Поле.Данные.R0133G3;
			rsMain.Fields.Item("A30_5").Value = Поле.Данные.R0130G5;
			rsMain.Fields.Item("A30_6").Value = Поле.Данные.R0130G6;
			rsMain.Fields.Item("A30_7").Value = Поле.Данные.R0130G7;
			rsMain.Fields.Item("A30_8").Value = Поле.Данные.R0130G8;
			rsMain.Fields.Item("A31_5").Value = Поле.Данные.R0131G5;
			rsMain.Fields.Item("A31_6").Value = Поле.Данные.R0131G6;
			rsMain.Fields.Item("A31_7").Value = Поле.Данные.R0131G7;
			rsMain.Fields.Item("A31_8").Value = Поле.Данные.R0131G8;
			rsMain.Fields.Item("A32_5").Value = Поле.Данные.R0132G5;
			rsMain.Fields.Item("A32_6").Value = Поле.Данные.R0132G6;
			rsMain.Fields.Item("A32_7").Value = Поле.Данные.R0132G7;
			rsMain.Fields.Item("A32_8").Value = Поле.Данные.R0132G8;
			rsMain.Fields.Item("A33_5").Value = Поле.Данные.R0133G5;
			rsMain.Fields.Item("A33_6").Value = Поле.Данные.R0133G6;
			rsMain.Fields.Item("A33_7").Value = Поле.Данные.R0133G7;
			rsMain.Fields.Item("A33_8").Value = Поле.Данные.R0133G8;
			rsMain.Fields.Item("A20_8").Value = Поле.Данные.R0120G8;
			rsMain.Fields.Item("A21_8").Value = Поле.Данные.R0121G8;
			rsMain.Fields.Item("A22_8").Value = Поле.Данные.R0122G8;
			rsMain.Fields.Item("A23_8").Value = Поле.Данные.R0123G8;
			// 28.06.2022 + DOCKING 410
			Попытка rsMain.Fields.Item("NAME_BN").Value = Поле.Данные.R01G1S; Исключение КонецПопытки;
			Попытка rsMain.Fields.Item("CITY_BN").Value = Поле.Данные.R01G2S; Исключение КонецПопытки;
			Попытка rsMain.Fields.Item("ADR_BN").Value = Поле.Данные.R01G3S; Исключение КонецПопытки;
			Попытка rsMain.Fields.Item("CITYCD_BN").Value = Поле.Данные.R01G4; Исключение КонецПопытки;
			Попытка rsMain.Fields.Item("EDRPOU_BN").Value = Поле.Данные.R01G5S; Исключение КонецПопытки;
			Попытка rsMain.Fields.Item("N10").Value = Поле.Данные.R01G6; Исключение КонецПопытки;
			Попытка rsMain.Fields.Item("N11").Value = Поле.Данные.R01G7; Исключение КонецПопытки;
			// 28.06.2022 + DOCKING 410			
			rsTab = Doc.DataSets("TAB1");
			rsTab.Edit();
			rsTab.Clear();
			rsTab.First();
			
			//Пока НомерСтроки <> НомерСтрокиН Цикл
			Для Каждого ЭлементПоля Из Поле.Данные Цикл
				
				НомерСтрокиН = НомерСтрокиН+1;
				
				Если  НомерСтроки > 0 и НомерСтроки < 10 Тогда
					Ноль = "00000"
				ИначеЕсли НомерСтроки >= 10 и НомерСтроки < 100 Тогда
					Ноль = "0000" 	
				ИначеЕсли НомерСтроки >= 100 и НомерСтроки < 1000 Тогда
					Ноль = "000"
				ИначеЕсли НомерСтроки >= 1000 и НомерСтроки < 10000 Тогда
					Ноль = "00"
				ИначеЕсли НомерСтроки >= 10000 и НомерСтроки < 100000 Тогда
					Ноль = "0"
				Иначе 
					Ноль = ""
				КонецЕсли;
				
				Попытка
					СуществуетСтрока = Ложь;
					
					Если Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G2D") = 1 Тогда
						Если ЭлементПоля.Значение <> Дата(1,1,1) Тогда
							rsTab.Fields.Item("TAB1_A2").Value = ЭлементПоля.Значение;
						КонецЕсли;
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G3") = 1 Тогда
						rsTab.Fields.Item("TAB1_A3").Value = ЭлементПоля.Значение;
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G4") = 1 Тогда
						rsTab.Fields.Item("TAB1_A4").Value = ЭлементПоля.Значение;							 
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G5") = 1 Тогда
						rsTab.Fields.Item("TAB1_A5").Value = ЭлементПоля.Значение;							 
					ИначеЕсли Найти(ЭлементПоля.Ключ, "T2R"+Ноль+НомерСтроки+"G6") = 1 Тогда
						rsTab.Fields.Item("TAB1_A6").Value = ЭлементПоля.Значение;
						СуществуетСтрока = Истина;
					КонецЕсли;
					rsTab.Post(); 
					
					Если  СуществуетСтрока = Истина Тогда
						rsTab.Post();
						rsTab.Append();
						НомерСтроки = НомерСтроки +1;
					КонецЕсли;
					rsTab.Next();	
					
				Исключение
					//Ничего не делать	
				КонецПопытки;
				
				
			КонецЦикла;
			
			Doc.EnableScripts();
			Doc.Save(1); 
			Doc.Close();			
			////+DOCKING-290 04.08.2021 
			ДочерниеДокументы.Добавить(НовыйИд);	
			////-DOCKING-290 04.08.2021
			НомерДод = НомерДод +1;
			
		КонецЦикла;
		rsMain.Post();
		Doc.EnableScripts();
		Doc.Save(1); 
		Doc.Close();		
	КонецЕсли;
	
	Возврат ДочерниеДокументы;
КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_КИК(Doc, БланкКИК, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)

	//Если БланкКИК="J0114419" Тогда
	Если БланкКИК="J0114425" Тогда	
		
       // Док = Документ.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов;
        Док = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);
		 
        НомерДод = 1;
		НовыйИд = ИД;
		
		Для Каждого Поле Из Док.ПриложениеКИК Цикл	//ПриложениеКИК
			
			НовыйИд = ИД + НомерДод;
			Doc  = App.OpenOrCreateByExDocID(БланкКИК, ОпределитьКодПериода(Документ.Дата,"ДекларацияПрибыль"), PDate, , НовыйИд, 0);
			Doc.IDParent = ИДПарент;
			rsMain = Doc.DataSets();
			rsMain.Edit();       
			rsMain.Append();
			rsMain.Post();
			
            rsMain.Fields.Item("N1").Value = Поле.Данные.R04G1;
            rsMain.Fields.Item("N2").Value = Поле.Данные.R04G2;
            rsMain.Fields.Item("N3").Value = Поле.Данные.HNAMENR;
            rsMain.Fields.Item("N4").Value = Поле.Данные.HLOCNR;
            rsMain.Fields.Item("N5").Value = Поле.Данные.H01G2S;
            rsMain.Fields.Item("N6").Value = Поле.Данные.H01G2;
            Если Поле.Данные.H01G3 <> "" Тогда
                rsMain.Fields.Item("N7").Value = true; 
            КонецЕсли; 
            rsMain.Fields.Item("N8").Value = Поле.Данные.HTINNR;
            rsMain.Fields.Item("N9").Value = Поле.Данные.H01;
            rsMain.Fields.Item("N10").Value = Поле.Данные.R06G1;
			//DOCKING 527 + 07.06.2023	
			//rsMain.Fields.Item("N11").Value = Поле.Данные.HD1;
			//rsMain.Fields.Item("N12").Value = Поле.Данные.HD2;
			//rsMain.Fields.Item("N13").Value = Поле.Данные.HD3;
			//
			//rsMain.Fields.Item("RUK").Value = Поле.Данные.HBOS;
			//rsMain.Fields.Item("BUH").Value = Поле.Данные.HBUH;
			//DOCKING 527 + 07.06.2023            
            Если ЗначениеЗаполнено(Поле.Данные.HZ) Тогда
                rsMain.Fields.Item("HZ").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZN) Тогда
                rsMain.Fields.Item("HZN").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZU) Тогда
                rsMain.Fields.Item("HZU").Value = true;
            КонецЕсли;
            
			Попытка
				Если ЗначениеЗаполнено(Поле.Данные.H1KV) Тогда
                	rsMain.Fields.Item("H1KV").Value = true;
				КонецЕсли;
			Исключение КонецПопытки;	
            
			Попытка
				Если ЗначениеЗаполнено(Поле.Данные.HHY) Тогда
                	rsMain.Fields.Item("HHY").Value = true;
				КонецЕсли;
			Исключение КонецПопытки;		
			
			Попытка
	            Если ЗначениеЗаполнено(Поле.Данные.H3KV) Тогда
                	rsMain.Fields.Item("H3KV").Value = true;
				КонецЕсли;
			Исключение КонецПопытки;		
            
			Попытка
				Если ЗначениеЗаполнено(Поле.Данные.HY) Тогда
                	rsMain.Fields.Item("HY").Value = true;
				КонецЕсли;
			Исключение КонецПопытки;	
            
            rsMain.Fields.Item("A01").Value = Поле.Данные.R01G3;
            rsMain.Fields.Item("A02").Value = Поле.Данные.R02G3;
            rsMain.Fields.Item("A03").Value = Поле.Данные.R03G3;
            rsMain.Fields.Item("A04").Value = Поле.Данные.R04G3;
            rsMain.Fields.Item("A05").Value = Поле.Данные.R05G3;
			rsMain.Fields.Item("A06").Value = Поле.Данные.R06G3;
			Doc.EnableScripts();
			Doc.Save(1); 
			Doc.Close(); 
			
            ДочерниеДокументы.Добавить(НовыйИд);	
                        
            НомерДод = НомерДод +1;
        КонецЦикла;
	КонецЕсли;
	
	Возврат ДочерниеДокументы;

КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_КИК_К(Doc, БланкКК, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)

	//Если БланкКК="J0114519" Тогда
	Если БланкКК="J0114523" Тогда	
		
        //Док = Документ.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов;
        Док = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);
		
        НомерДод = 1;
		НовыйИд = ИД;
		
		Для Каждого Поле Из Док.ПриложениеКК Цикл	
			
			НовыйИд = ИД + НомерДод;
			Doc  = App.OpenOrCreateByExDocID(БланкКК, ОпределитьКодПериода(Документ.Дата,"ДекларацияПрибыль"), PDate, , НовыйИд, 0);
			Doc.IDParent = ИДПарент;
			rsMain = Doc.DataSets();
			rsMain.Edit();       
			rsMain.Append();
			rsMain.Post();
			
                      
            rsMain.Fields.Item("REP_NYEAR").Value = Поле.Данные.HZY;
            rsMain.Fields.Item("FIRM_EDRPOU").Value = Поле.Данные.HTIN;
            
            rsMain.Fields.Item("RUK").Value = Поле.Данные.HBOS;
            rsMain.Fields.Item("BUH").Value = Поле.Данные.HBUH;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZ) Тогда
                rsMain.Fields.Item("HZ").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZN) Тогда
                rsMain.Fields.Item("HZN").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZU) Тогда
                rsMain.Fields.Item("HZU").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.H1KV) Тогда
                rsMain.Fields.Item("H1KV").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HHY) Тогда
                rsMain.Fields.Item("HHY").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.H3KV) Тогда
                rsMain.Fields.Item("H3KV").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HY) Тогда
                rsMain.Fields.Item("HY").Value = true;
            КонецЕсли;
            
            rsMain.Fields.Item("N3").Value = Поле.Данные.HNAMENR;
            rsMain.Fields.Item("N4").Value = Поле.Данные.HLOCNR;
            rsMain.Fields.Item("N5").Value = Поле.Данные.H01G2S;
            rsMain.Fields.Item("N6").Value = Поле.Данные.H01G2;
            rsMain.Fields.Item("N8").Value = Поле.Данные.HTINNR;
            Если Поле.Данные.H01G3 <> "" Тогда
                rsMain.Fields.Item("N7").Value = true;
            КонецЕсли; 
            rsMain.Fields.Item("N9").Value = Поле.Данные.H01;
            
            rsMain.Fields.Item("A11").Value = Поле.Данные.R011G3;
            rsMain.Fields.Item("A12").Value = Поле.Данные.R012G3;
            rsMain.Fields.Item("A13").Value = Поле.Данные.R013G3;
            rsMain.Fields.Item("A14").Value = Поле.Данные.R014G3;
            rsMain.Fields.Item("A15").Value = Поле.Данные.R015G3;
            rsMain.Fields.Item("A16").Value = Поле.Данные.R016G3;
            rsMain.Fields.Item("A17").Value = Поле.Данные.R017G3;
            rsMain.Fields.Item("A18").Value = Поле.Данные.R018G3;
            rsMain.Fields.Item("A19").Value = Поле.Данные.R019G3;
            rsMain.Fields.Item("A110").Value = Поле.Данные.R0110G3;
            rsMain.Fields.Item("A111").Value = Поле.Данные.R0111G3;
            rsMain.Fields.Item("A21").Value = Поле.Данные.R021G3;
            rsMain.Fields.Item("A22").Value = Поле.Данные.R022G3;
            rsMain.Fields.Item("A23").Value = Поле.Данные.R023G3;
            rsMain.Fields.Item("A24").Value = Поле.Данные.R024G3;
            rsMain.Fields.Item("A25").Value = Поле.Данные.R025G3;
            rsMain.Fields.Item("A26").Value = Поле.Данные.R026G3;
            rsMain.Fields.Item("A27").Value = Поле.Данные.R027G3;
            rsMain.Fields.Item("A28").Value = Поле.Данные.R028G3;
            rsMain.Fields.Item("A29").Value = Поле.Данные.R029G3;
            rsMain.Fields.Item("A210").Value = Поле.Данные.R0210G3;
            rsMain.Fields.Item("A211").Value = Поле.Данные.R0211G3;
            rsMain.Fields.Item("A01").Value = Поле.Данные.R01G3;
            rsMain.Fields.Item("A02").Value = Поле.Данные.R02G3;
			rsMain.Fields.Item("A03").Value = Поле.Данные.R03G3;
			
			Doc.EnableScripts();
			Doc.Save(1); 
			Doc.Close();
			ДочерниеДокументы.Добавить(НовыйИд);	
			
            НомерДод = НомерДод +1;
        КонецЦикла;
	КонецЕсли;
	
	Возврат ДочерниеДокументы;

КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_КИК_ТЦ(Doc, БланкКТЦ, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)

	//Если БланкКТЦ="J0114619" Тогда
	Если БланкКТЦ="J0114623" Тогда	
		
		Док = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);

        НомерДод = 1;
		НовыйИд = ИД;
		
		Для Каждого Поле Из Док.ПриложениеКТЦ Цикл	
			
			НовыйИд = ИД + НомерДод;
			Doc  = App.OpenOrCreateByExDocID(БланкКТЦ, ОпределитьКодПериода(Документ.Дата,"ДекларацияПрибыль"), PDate, , НовыйИд, 0);
			Doc.IDParent = ИДПарент;
			rsMain = Doc.DataSets();
			rsMain.Edit();       
			rsMain.Append();
			rsMain.Post();
	
            
            rsMain.Fields.Item("N3").Value = Поле.Данные.HNAMENR;
            rsMain.Fields.Item("N4").Value = Поле.Данные.HLOCNR;
            rsMain.Fields.Item("N5").Value = Поле.Данные.H01G2S;
            rsMain.Fields.Item("N6").Value = Поле.Данные.H01G2;
            Если Поле.Данные.H01G3 <> "" Тогда
                rsMain.Fields.Item("N7").Value = Истина; 
            КонецЕсли; 
            rsMain.Fields.Item("N8").Value = Поле.Данные.HTINNR;
            rsMain.Fields.Item("N9").Value = Поле.Данные.H01;
            
            rsMain.Fields.Item("REP_NYEAR" ).Value = Поле.Данные.HZY;
            rsMain.Fields.Item("FIRM_EDRPOU" ).Value = Поле.Данные.HTIN;

            rsMain.Fields.Item("RUK").Value = Поле.Данные.HBOS;
            rsMain.Fields.Item("BUH").Value = Поле.Данные.HBUH;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZ) Тогда
                rsMain.Fields.Item("HZ").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZN) Тогда
                rsMain.Fields.Item("HZN").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZU) Тогда
                rsMain.Fields.Item("HZU").Value = true;
            КонецЕсли;
    
            rsMain.Fields.Item("A1_14").Value = Поле.Данные.R01G14;
            rsMain.Fields.Item("A1_15").Value = Поле.Данные.R01G15;
            rsMain.Fields.Item("A1_16").Value = Поле.Данные.R01G16;
            rsMain.Fields.Item("A1_17").Value = Поле.Данные.R01G17;
            rsMain.Fields.Item("A2_14").Value = Поле.Данные.R02G14;
            rsMain.Fields.Item("A2_15").Value = Поле.Данные.R02G15;
            rsMain.Fields.Item("A2_16").Value = Поле.Данные.R02G16;
            rsMain.Fields.Item("A2_17").Value = Поле.Данные.R02G17;
      
            Для Каждого ЭлСтр Из Поле.ДанныеДопСтрок Цикл   
				
				Если ЭлСтр.Ключ = "KTT1R" Тогда
					
					//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
					rsTab = Doc.DataSets("TAB1");
					rsTab.Clear();
					rsTab.Edit();
					Для каждого Стр Из ЭлСтр.Значение Цикл
												
                        rsTab.Fields.Item("TAB1_A1").Value = Стр.KTT1RXXXXG1S;
                        rsTab.Fields.Item("TAB1_A2").Value = Стр.KTT1RXXXXG2S;
                        Если Стр.KTT1RXXXXG3D <> Дата(1,1,1) Тогда
                            rsTab.Fields.Item("TAB1_A3").Value = Стр.KTT1RXXXXG3D;
                        //Иначе
                        //    rsTab.Fields.Item("TAB1_A3").Value = Дата(1900,1,1);
                        КонецЕсли;
                        rsTab.Fields.Item("TAB1_A4").Value = Стр.KTT1RXXXXG4S;
                        rsTab.Fields.Item("TAB1_A5").Value = Стр.KTT1RXXXXG5S;
                        rsTab.Fields.Item("TAB1_A6").Value = Стр.KTT1RXXXXG6S;
                        rsTab.Fields.Item("TAB1_A7").Value = Стр.KTT1RXXXXG7S;
                        rsTab.Fields.Item("TAB1_A8").Value = Стр.KTT1RXXXXG8S;
                        rsTab.Fields.Item("TAB1_A9").Value = Стр.KTT1RXXXXG9S;
                        Если Стр.KTT1RXXXXG10D <> Дата(1,1,1) Тогда
                            rsTab.Fields.Item("TAB1_A10").Value = Стр.KTT1RXXXXG10D;
                        КонецЕсли;
                        Если Стр.KTT1RXXXXG11D <> Дата(1,1,1) Тогда
                            rsTab.Fields.Item("TAB1_A11").Value = Стр.KTT1RXXXXG11D;
                        КонецЕсли;
                        rsTab.Fields.Item("TAB1_A12").Value = Стр.KTT1RXXXXG12S;
                        rsTab.Fields.Item("TAB1_A13").Value = Стр.KTT1RXXXXG13;
                        rsTab.Fields.Item("TAB1_A14").Value = Стр.KTT1RXXXXG14;
                        rsTab.Fields.Item("TAB1_A15").Value = Стр.KTT1RXXXXG15;
                        rsTab.Fields.Item("TAB1_A16").Value = Стр.KTT1RXXXXG16;
                        rsTab.Fields.Item("TAB1_A17").Value = Стр.KTT1RXXXXG17;

						rsTab.Post();
						rsTab.Append();
					КонецЦикла;
					rsTab.Delete();
				КонецЕсли;
				Если ЭлСтр.Ключ = "KTT2R" Тогда
					
					//TAB2///////////////////////////////////////////////////////////////////////////////////////////////////////////////
					rsTab = Doc.DataSets("TAB2");
					rsTab.Clear();
					rsTab.Edit();
					Для каждого Стр Из ЭлСтр.Значение Цикл
						
                        rsTab.Fields.Item("TAB2_A1").Value = Стр.KTT2RXXXXG1S;
                        rsTab.Fields.Item("TAB2_A2").Value = Стр.KTT2RXXXXG2S;
                        Если Стр.KTT2RXXXXG3D <> Дата(1,1,1) Тогда
                            rsTab.Fields.Item("TAB2_A3").Value = Стр.KTT2RXXXXG3D;
                        КонецЕсли;
                        rsTab.Fields.Item("TAB2_A4").Value = Стр.KTT2RXXXXG4S;
                        rsTab.Fields.Item("TAB2_A5").Value = Стр.KTT2RXXXXG5S;
                        rsTab.Fields.Item("TAB2_A6").Value = Стр.KTT2RXXXXG6S;
                        rsTab.Fields.Item("TAB2_A7").Value = Стр.KTT2RXXXXG7S;
                        rsTab.Fields.Item("TAB2_A8").Value = Стр.KTT2RXXXXG8S;
                        rsTab.Fields.Item("TAB2_A9").Value = Стр.KTT2RXXXXG9S;
                        Если Стр.KTT2RXXXXG10D <> Дата(1,1,1) Тогда
                            rsTab.Fields.Item("TAB2_A10").Value = Стр.KTT2RXXXXG10D;
                        КонецЕсли;
                        Если Стр.KTT2RXXXXG11D <> Дата(1,1,1) Тогда
                            rsTab.Fields.Item("TAB2_A11").Value = Стр.KTT2RXXXXG11D;
                        КонецЕсли;
                        rsTab.Fields.Item("TAB2_A12").Value = Стр.KTT2RXXXXG12S;
                        rsTab.Fields.Item("TAB2_A13").Value = Стр.KTT2RXXXXG13;
                        rsTab.Fields.Item("TAB2_A14").Value = Стр.KTT2RXXXXG14;
                        rsTab.Fields.Item("TAB2_A15").Value = Стр.KTT2RXXXXG15;
                        rsTab.Fields.Item("TAB2_A16").Value = Стр.KTT2RXXXXG16;
                        rsTab.Fields.Item("TAB2_A17").Value = Стр.KTT2RXXXXG17;

						rsTab.Post();
						rsTab.Append();
					КонецЦикла;
					rsTab.Delete();
				КонецЕсли;
				
			КонецЦикла;
			
			Doc.EnableScripts();
			Doc.Save(1); 
			Doc.Close();     
			
            ДочерниеДокументы.Добавить(НовыйИд);	
                        
            НомерДод = НомерДод +1;
        КонецЦикла;
	КонецЕсли;
	
	Возврат ДочерниеДокументы;


КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_КИК_ЦП(Doc, БланкКЦП, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)

	//Если БланкКЦП="J0114719" Тогда
	Если БланкКЦП="J0114723" Тогда	
		
        //Док = Документ.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов;
        Док = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);
		
        НомерДод = 1;
		НовыйИд = ИД;
		
		Для Каждого Поле Из Док.ПриложениеКЦП Цикл	
			
			НовыйИд = ИД + НомерДод;
			Doc  = App.OpenOrCreateByExDocID(БланкКЦП, ОпределитьКодПериода(Документ.Дата,"ДекларацияПрибыль"), PDate, , НовыйИд, 0);
			Doc.IDParent = ИДПарент;
			rsMain = Doc.DataSets();
			rsMain.Edit();       
			rsMain.Append();
			rsMain.Post();
            
            rsMain.Fields.Item("N3").Value = Поле.Данные.HNAMENR;
            rsMain.Fields.Item("N4").Value = Поле.Данные.HLOCNR;
            rsMain.Fields.Item("N5").Value = Поле.Данные.H01G2S;
            rsMain.Fields.Item("N6").Value = Поле.Данные.H01G2;
            Если Поле.Данные.H01G3 <> "" Тогда
                rsMain.Fields.Item("N7").Value = Истина; 
            КонецЕсли; 
            rsMain.Fields.Item("N8").Value = Поле.Данные.HTINNR;
            rsMain.Fields.Item("N9").Value = Поле.Данные.H01;
            
            rsMain.Fields.Item("RUK").Value = Поле.Данные.HBOS;
            rsMain.Fields.Item("BUH").Value = Поле.Данные.HBUH;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZ) Тогда
                rsMain.Fields.Item("HZ").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZN) Тогда
                rsMain.Fields.Item("HZN").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HZU) Тогда
                rsMain.Fields.Item("HZU").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.H1KV) Тогда
                rsMain.Fields.Item("H1KV").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HHY) Тогда
                rsMain.Fields.Item("HHY").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.H3KV) Тогда
                rsMain.Fields.Item("H3KV").Value = true;
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Поле.Данные.HY) Тогда
                rsMain.Fields.Item("HY").Value = true;
            КонецЕсли;
            
            rsMain.Fields.Item("REP_NYEAR" ).Value = Поле.Данные.HZY;
            rsMain.Fields.Item("FIRM_EDRPOU" ).Value = Поле.Данные.HTIN;
            
            rsMain.Fields.Item("A01").Value = Поле.Данные.R01G3;
            rsMain.Fields.Item("A02").Value = Поле.Данные.R02G3;
            rsMain.Fields.Item("A03").Value = Поле.Данные.R03G3;
            rsMain.Fields.Item("A04").Value = Поле.Данные.R04G3;
            rsMain.Fields.Item("A011").Value = Поле.Данные.R011G3;
            rsMain.Fields.Item("A0111").Value = Поле.Данные.R01110G3;
            rsMain.Fields.Item("A012").Value = Поле.Данные.R012G3;
            rsMain.Fields.Item("A0121").Value = Поле.Данные.R0121G3;
            rsMain.Fields.Item("A013").Value = Поле.Данные.R013G3;
            rsMain.Fields.Item("A014").Value = Поле.Данные.R014G3;
            rsMain.Fields.Item("A015").Value = Поле.Данные.R015G3;
            rsMain.Fields.Item("A016").Value = Поле.Данные.R016G3;
            rsMain.Fields.Item("A017").Value = Поле.Данные.R017G3;
            rsMain.Fields.Item("A018").Value = Поле.Данные.R018G3;
            rsMain.Fields.Item("A019").Value = Поле.Данные.R019G3;
            rsMain.Fields.Item("A0110").Value = Поле.Данные.R0110G3;
            rsMain.Fields.Item("A01111").Value = Поле.Данные.R0111G3;
            rsMain.Fields.Item("A0112").Value = Поле.Данные.R0112G3;
            rsMain.Fields.Item("A0113").Value = Поле.Данные.R0113G3;
            rsMain.Fields.Item("A021").Value = Поле.Данные.R021G3;
            rsMain.Fields.Item("A02111").Value = Поле.Данные.R0211G3;
            rsMain.Fields.Item("A022").Value = Поле.Данные.R022G3;
            rsMain.Fields.Item("A0221").Value = Поле.Данные.R0221G3;
            rsMain.Fields.Item("A023").Value = Поле.Данные.R023G3;
            rsMain.Fields.Item("A024").Value = Поле.Данные.R024G3;
            rsMain.Fields.Item("A025").Value = Поле.Данные.R025G3;
            rsMain.Fields.Item("A026").Value = Поле.Данные.R026G3;
            rsMain.Fields.Item("A027").Value = Поле.Данные.R027G3;
            rsMain.Fields.Item("A028").Value = Поле.Данные.R028G3;
            rsMain.Fields.Item("A029").Value = Поле.Данные.R029G3;
            rsMain.Fields.Item("A0210").Value = Поле.Данные.R0210G3;
            rsMain.Fields.Item("A0211").Value = Поле.Данные.R02110G3;
            rsMain.Fields.Item("A0212").Value = Поле.Данные.R0212G3;
            rsMain.Fields.Item("A0213").Value = Поле.Данные.R0213G3;
            rsMain.Fields.Item("A12").Value = Поле.Данные.R0012G3;
            rsMain.Fields.Item("A121").Value = Поле.Данные.R00121G3;
            rsMain.Fields.Item("A122").Value = Поле.Данные.R00122G3;
            rsMain.Fields.Item("A13").Value = Поле.Данные.R0013G3;
			
			Doc.EnableScripts();
			Doc.Save(1); 
			Doc.Close();
			
            ДочерниеДокументы.Добавить(НовыйИд);	
                        
            НомерДод = НомерДод +1;
        КонецЦикла;
	КонецЕсли;
	
	Возврат ДочерниеДокументы;

КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_МПЗ(Doc, БланкМПЗ, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)

	//Если БланкКК="J0114519" Тогда
	Если БланкМПЗ="J0114825" Тогда	
		
   		Попытка
			Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеМПЗ");
		Исключение
			Сообщить(НСтр("ru = 'Приложения МП3 отсутствует в данной конфигурации'; uk = 'Додаток МП3 відсутній в цій конфигурації'"));
			ВызватьИсключение;
		КонецПопытки;	
		
			  
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);

		
		с.Вставить("REP_NYEAR", "HZY");
		с.Вставить("FIRM_EDRPOU", "HTIN");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
			//rsMain.Fields.Item("REP_NYEAR").Value = Поле.Данные.HZY;
			//rsMain.Fields.Item("FIRM_EDRPOU").Value = Поле.Данные.TIN;
			//
			//rsMain.Fields.Item("RUK").Value = Поле.Данные.HBOS;
			//rsMain.Fields.Item("BUH").Value = Поле.Данные.HBUH;
            
            Если Док.HZ <> "" Тогда
                rsMain.Fields.Item("HZ").Value = true;
            КонецЕсли;
            
            Если Док.HZN <> "" Тогда
                rsMain.Fields.Item("HZN").Value = true;
            КонецЕсли;
            
            Если Док.HZU <> "" Тогда
                rsMain.Fields.Item("HZU").Value = true;
			КонецЕсли;
			
			Если Док.H01 <> "" Тогда
                rsMain.Fields.Item("N1").Value = true;
            КонецЕсли;
          	
			с.Вставить("A01", "R01G3");
			с.Вставить("A02", "R02G3");
			с.Вставить("A03", "R03G3");
			с.Вставить("A04", "R04G3");
			с.Вставить("A031", "R031G3");
			с.Вставить("A032", "R032G3");
			с.Вставить("A033", "R033G3");
			с.Вставить("A034", "R034G3");
			с.Вставить("A035", "R035G3");
			с.Вставить("A036", "R036G3");
			с.Вставить("A037", "R037G3");
			 
			
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
			КонецОтчета(Doc);
			
			
	КонецЕсли;
	
	Возврат ДочерниеДокументы;

КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_МПЗ_З(Doc, БланкМПЗЗ, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)
	
	//Если БланкКТЦ="J0114619" Тогда
	Если БланкМПЗЗ="J0114925" Тогда	
		
		//ТЧ = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);	
		НомерДод = 1;
		НовыйИд = ИД;
		
		Попытка
			Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеМЗЗ");
		Исключение
			Сообщить(НСтр("ru = 'Приложения М33 отсутствует в данной конфигурации'; uk = 'Додаток М33 відсутній в цій конфигурації'"));
			ВызватьИсключение;
		КонецПопытки;	
		
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		
		с.Вставить("REP_NYEAR", "HZY");
		с.Вставить("FIRM_EDRPOU", "HTIN");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
		
		
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").Value = true;
		КонецЕсли;
		
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").Value = true;
		КонецЕсли;
		
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").Value = true;
		КонецЕсли;
		
		с.Вставить("A1_5", "R01G5");
		с.Вставить("A1_6", "R01G6");
		с.Вставить("A2_5", "R02G5");
		с.Вставить("A2_6", "R02G6");
		с.Вставить("A3_6", "R03G6");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		rsMain.Edit();
		Для Каждого Поле Из ТЧ Цикл
			Если Поле.Ключ = "MZT1R" Тогда
				Для каждого Стр Из Поле.Значение Цикл

					rsMain.Fields.Item("TAB1_A2").Value = Стр.MZT1RXXXXG2S;
					rsMain.Fields.Item("TAB1_A3").Value = Стр.MZT1RXXXXG3;
					rsMain.Fields.Item("TAB1_A4").Value = Стр.MZT1RXXXXG4;
					rsMain.Fields.Item("TAB1_A5").Value = Стр.MZT1RXXXXG5;
					rsMain.Fields.Item("TAB1_A6").Value = Стр.MZT1RXXXXG6;
					
					
					rsMain.Post();
					rsMain.Append();
					
				КонецЦикла;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;
		
		
		//КонецЦикла;	
		//TAB2
		rsMain = Doc.DataSets("TAB2");
		rsMain.Clear();
		rsMain.Edit();
		Для Каждого Поле Из ТЧ Цикл
			
			Если Поле.Ключ = "MZT2R" Тогда
				Для каждого Стр Из Поле.Значение Цикл
					
					rsMain.Fields.Item("TAB2_A2").Value = Стр.MZT2RXXXXG2S;
					rsMain.Fields.Item("TAB2_A3").Value = Стр.MZT2RXXXXG3;
					rsMain.Fields.Item("TAB2_A4").Value = Стр.MZT2RXXXXG4;
					rsMain.Fields.Item("TAB2_A5").Value = Стр.MZT2RXXXXG5;
					rsMain.Fields.Item("TAB2_A6").Value = Стр.MZT2RXXXXG6;
					
					rsMain.Post();
					rsMain.Append();
					
				КонецЦикла;
				rsMain.Delete();
			КонецЕсли;
		КонецЦикла;

		////////////////////******************************************************
		КонецОтчета(Doc);
		ДочерниеДокументы.Добавить(НовыйИд);	
		
		НомерДод = НомерДод +1;
	//КонецЦикла;
КонецЕсли;

Возврат ДочерниеДокументы;


КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_ДІЯ(Doc, БланкДІЯ, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)

	//Если БланкКЦП="J0114719" Тогда
	Если БланкДІЯ="J0115025" Тогда	
		
        //Док = Документ.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов;
       // Док = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);
		
	    Попытка
		   Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеДИЯ");
		Исключение
			Сообщить(НСтр("ru = 'Приложения ДИЯ отсутствует в данной конфигурации'; uk = 'Додаток ДІЯ відсутній в цій конфигурації'"));
			ВызватьИсключение;
		КонецПопытки;   
		
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		
		с.Вставить("REP_NYEAR", "HZY");
		с.Вставить("FIRM_EDRPOU", "HTIN");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
        НомерДод = 1;
		НовыйИд = ИД;
		
		//Для Каждого Поле Из Док.ПриложениеДИЯ Цикл	
			
			НовыйИд = ИД + НомерДод;
			
			Если Док.HZ <> "" Тогда
				rsMain.Fields.Item("HZ").Value = true;
			КонецЕсли;
			Если Док.HZN <> "" Тогда
				rsMain.Fields.Item("HZN").Value = true;
			КонецЕсли;
			Если Док.HZU <> "" Тогда
                rsMain.Fields.Item("HZU").Value = Истина; 
            КонецЕсли;
            
           	с.Вставить("A01_3", "R001G3");
			с.Вставить("A011_3", "R0011G3");
			с.Вставить("A012_3", "R0012G3");
			с.Вставить("A013_3", "R0013G3");
			с.Вставить("A02_3", "R002G3");
			с.Вставить("A02_5", "R002G5");
			с.Вставить("A02_6", "R002G6");
			
			с.Вставить("A03_3", "R003G3");
			с.Вставить("A031_3", "R0031G3");
			с.Вставить("A032_3", "R0032G3");
			
			с.Вставить("A04_3", "R004G3");
			с.Вставить("A05_3", "R005G3");
			с.Вставить("A06_3", "R006G3");
			с.Вставить("A06_5", "R006G5");
			с.Вставить("A06_6", "R006G6");
			
			с.Вставить("A07_3", "R007G3");
			с.Вставить("A071_3", "R0071G3");
			с.Вставить("A072_3", "R0072G3");
			с.Вставить("A08_3", "R008G3");
			с.Вставить("A09_3", "R009G3");
			с.Вставить("A10_3", "R010G3");
			с.Вставить("A10_5", "R010G5");
			с.Вставить("A10_6", "R010G6");
			с.Вставить("A11_3", "R011G3");
			с.Вставить("A111_3", "R0111G3");
			с.Вставить("A12_3", "R012G3");
			с.Вставить("A13_3", "R013G3");
			с.Вставить("A13_5", "R013G5");
			с.Вставить("A13_6", "R013G6");
			
			с.Вставить("A14_3", "R014G3");
			с.Вставить("A141_3", "R0141G3");
			с.Вставить("A142_3", "R0142G3");
			с.Вставить("A143_3", "R0143G3");
			с.Вставить("A144_3", "R0144G3");
			с.Вставить("A145_3", "R0145G3");
			с.Вставить("A146_3", "R0146G3");
			
			с.Вставить("A15_3", "R015G3");
			с.Вставить("A15_5", "R015G5");
			с.Вставить("A15_6", "R015G6");
			
			с.Вставить("A16_3", "R016G3");
			с.Вставить("A161_3", "R0161G3");
			с.Вставить("A162_3", "R0162G3");
			с.Вставить("A163_3", "R0163G3");
			с.Вставить("A164_3", "R0164G3");
			с.Вставить("A165_3", "R0165G3");
			
			с.Вставить("A17_3", "R017G3");
			с.Вставить("A17_5", "R017G5");
			с.Вставить("A17_6", "R017G6");

			
			с.Вставить("A18_3","R018G3");
			с.Вставить("A181_3","R0181G3");
			с.Вставить("A182_3","R0182G3");
			с.Вставить("A183_3","R0183G3");
			с.Вставить("A184_3","R0184G3");
			с.Вставить("A185_3","R0185G3");
			с.Вставить("A186_3","R0186G3");
			с.Вставить("A187_3","R0187G3");
			с.Вставить("A188_3","R0188G3");
			с.Вставить("A189_3","R0189G3");
			
			с.Вставить("A19_3","R019G3");
			с.Вставить("A19_5","R019G5");
			с.Вставить("A19_6","R019G6");            
			
			с.Вставить("A20_3","R020G3");
			с.Вставить("A20_5","R020G5");
			с.Вставить("A20_6","R020G6");            
			
			с.Вставить("A21_3","R021G3");
			с.Вставить("A21_5","R021G5");
			с.Вставить("A21_6","R021G6");            
            
            
            с.Вставить("A22_3","R022G3");
			с.Вставить("A221_3","R0221G3");
			с.Вставить("A222_3","R0222G3");
			с.Вставить("A223_3","R0223G3");
			с.Вставить("A2231_3","R02231G3");
			с.Вставить("A2232_3","R02232G3");
			с.Вставить("A2233_3","R02233G3");
			с.Вставить("A2234_3","R02234G3");
			с.Вставить("A2235_3","R02235G3");
			с.Вставить("A224_3","R0223G3");
			с.Вставить("A2241_3","R02241G3");
			с.Вставить("A2242_3","R02242G3");
			с.Вставить("A2243_3","R02243G3");
			
			с.Вставить("A23_3","R023G3");
			с.Вставить("A23_5","R023G5");
			с.Вставить("A23_6","R023G6");            
			
			с.Вставить("A24_3","R024G3");
			с.Вставить("A241_3","R0241G3");
			с.Вставить("A242_3","R0242G3");
			с.Вставить("A243_3","R0243G3");
			с.Вставить("A244_3","R0244G3");
			
			с.Вставить("A25_3","R025G3");
			с.Вставить("A25_5","R025G5");
			с.Вставить("A25_6","R025G6");            
			
			с.Вставить("A26_3","R026G3");
			с.Вставить("A261_3","R0261G3");
			с.Вставить("A262_3","R0262G3");
			с.Вставить("A263_3","R0263G3");
			с.Вставить("A264_3","R0264G3");
			
			с.Вставить("A27_3","R027G3");
			с.Вставить("A27_5","R027G5");
			с.Вставить("A27_6","R027G6");            
			
			с.Вставить("A28_3","R028G3");
			с.Вставить("A281_3","R0281G3");
			с.Вставить("A282_3","R0282G3");
			с.Вставить("A283_3","R0283G3");
			с.Вставить("A284_3","R0284G3");
			с.Вставить("A285_3","R0285G3");
			с.Вставить("A286_3","R0286G3");
			с.Вставить("A287_3","R0287G3");
			с.Вставить("A288_3","R0288G3");
			с.Вставить("A289_3","R0289G3");
			
			с.Вставить("A29_3","R029G3");
			с.Вставить("A29_5","R029G5");
			с.Вставить("A29_6","R029G6");           
			
			с.Вставить("A30_3","R030G3");
			с.Вставить("A30_5","R030G5");
			с.Вставить("A30_6","R030G6");            
			
			с.Вставить("A31_3","R031G3");
			с.Вставить("A31_5","R031G5");
			с.Вставить("A31_6","R031G6");            
			
			с.Вставить("A32_3","R032G3");
			с.Вставить("A32_5","R032G5");
			с.Вставить("A32_6","R032G6");            
			
			с.Вставить("A33_3","R033G3");
			с.Вставить("A33_5","R033G5");
			с.Вставить("A33_6","R033G6");            
			
			с.Вставить("A34_3","R034G3");
			с.Вставить("A34_5","R034G5");
			с.Вставить("A34_6","R034G6");            
			
			с.Вставить("A35_3","R035G3");
			с.Вставить("A35_5","R035G5");
			с.Вставить("A35_6","R035G6");            
			
			с.Вставить("A36_3","R036G3");
			с.Вставить("A36_5","R036G5");
			с.Вставить("A36_6","R036G6");            
			
			с.Вставить("A37_3","R037G3");
			с.Вставить("A37_5","R037G5");
			с.Вставить("A37_6","R037G6");            
			
			с.Вставить("A38_3","R038G3");
			с.Вставить("A38_5","R038G5");
			с.Вставить("A38_6","R038G6");            
			
			с.Вставить("A39_3","R039G3");
			с.Вставить("A39_6","R039G6");            
			
			с.Вставить("A40_3","R040G3");            
			с.Вставить("A41_3","R041G3");            
			с.Вставить("A42_3","R042G3");            
			с.Вставить("A43_3","R043G3");            
			с.Вставить("A44_6","R044G6");            
			
			ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
			
			Doc.EnableScripts();
			Doc.Save(1); 
			Doc.Close();
			
            ДочерниеДокументы.Добавить(НовыйИд);	
                        
            НомерДод = НомерДод +1;
       // КонецЦикла;
	КонецЕсли;
	
	Возврат ДочерниеДокументы;

КонецФункции

&НаКлиенте
Функция Формирование_Декларация_Прибыль_ОВ(Doc, БланкОВ, Документ, App, PDate, ИД, ИДПарент, ДочерниеДокументы)

	//Если БланкКЦП="J0114719" Тогда
	Если БланкОВ="J0115925" Тогда	
		
        //Док = Документ.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов;
        //Док = ПолучитьДанныеМногостраничныхРазделовРегОтчета(Документ);
		
		Попытка
			Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложениеОВ");
		Исключение
			Сообщить(НСтр("ru = 'Приложения ОВ отсутствует в данной конфигурации'; uk = 'Додаток ОВ відсутній в цій конфигурації'"));
			ВызватьИсключение;
		КонецПопытки;	
		
		
		rsMain = Doc.DataSets();
		с = Новый Структура;
		НачалоОтчета(rsMain);
		
		
		с.Вставить("REP_NYEAR", "HZY");
		с.Вставить("FIRM_EDRPOU", "HTIN");
		
		с.Вставить("RUK", "HBOS");
		с.Вставить("BUH", "HBUH");
		
        НомерДод = 1;
		НовыйИд = ИД;
		
		//Для Каждого Поле Из Док.ПриложениеОВ Цикл	
			
		НовыйИд = ИД + НомерДод;
			//Doc  = App.OpenOrCreateByExDocID(БланкОВ, ОпределитьКодПериода(Документ.Дата,"ДекларацияПрибыль"), PDate, , НовыйИд, 0);
			//Doc.IDParent = ИДПарент;
			//rsMain = Doc.DataSets();
			//rsMain.Edit();       
			//rsMain.Append();
			//rsMain.Post();
            
           //rsMain.Fields.Item("RUK").Value = Поле.Данные.HBOS;
           // rsMain.Fields.Item("BUH").Value = Поле.Данные.HBUH;
		   
		Если Док.HZ <> "" Тогда
			rsMain.Fields.Item("HZ").Value = true;
		КонецЕсли;
		Если Док.HZN <> "" Тогда
			rsMain.Fields.Item("HZN").Value = true;
		КонецЕсли;
		Если Док.HZU <> "" Тогда
			rsMain.Fields.Item("HZU").Value = true;
		КонецЕсли;
		Если Док.H1KV <> "" Тогда
			rsMain.Fields.Item("H1KV").Value = true;
		КонецЕсли;
		Если Док.HHY <> "" Тогда
			rsMain.Fields.Item("HHY").Value = true;
		КонецЕсли;
		Если Док.HY <> "" Тогда
			rsMain.Fields.Item("HY").Value = true;
		КонецЕсли;
		Если Док.H3KV <> "" Тогда
			rsMain.Fields.Item("H3KV").Value = true;
		КонецЕсли;
		
				   
			//Если ЗначениеЗаполнено(Поле.Данные.HZ) Тогда
			//    rsMain.Fields.Item("HZ").Value = true;
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(Поле.Данные.HZN) Тогда
			//    rsMain.Fields.Item("HZN").Value = true;
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(Поле.Данные.HZU) Тогда
			//    rsMain.Fields.Item("HZU").Value = true;
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(Поле.Данные.H1KV) Тогда
			//    rsMain.Fields.Item("H1KV").Value = true;
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(Поле.Данные.HHY) Тогда
			//    rsMain.Fields.Item("HHY").Value = true;
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(Поле.Данные.H3KV) Тогда
			//    rsMain.Fields.Item("H3KV").Value = true;
			//КонецЕсли;
			//
			//Если ЗначениеЗаполнено(Поле.Данные.HY) Тогда
			//    rsMain.Fields.Item("HY").Value = true;
			//КонецЕсли;
            
			//rsMain.Fields.Item("REP_NYEAR" ).Value = Поле.Данные.HZY;
			//rsMain.Fields.Item("FIRM_EDRPOU" ).Value = Поле.Данные.HTIN;
			
		с.Вставить("A16", "R016G3");
		с.Вставить("A161", "R0161G3");
		с.Вставить("A162", "R0162G3");
		с.Вставить("A163", "R0163G3");
		с.Вставить("A164", "R0164G3");
		с.Вставить("A1641", "R01641G3");
		с.Вставить("A165", "R0165G3");
		
		с.Вставить("A11_3", "R0010G3");
		с.Вставить("A11_4", "R0010G4");
		с.Вставить("A12_3", "R0011G3");
		с.Вставить("A12_4", "R0011G4");
		
		с.Вставить("A21_3", "R0020G3");
		с.Вставить("A21_4", "R0020G4");
		с.Вставить("A22_3", "R0021G3");
		с.Вставить("A22_4", "R0021G4");
		
		с.Вставить("A31_3", "R0030G3");
		с.Вставить("A31_4", "R0030G4");
		с.Вставить("A32_3", "R0031G3");
		с.Вставить("A32_4", "R0031G4");
		
		с.Вставить("A41_3", "R0040G3");
		с.Вставить("A41_4", "R0040G4");
		с.Вставить("A42_3", "R0041G3");
		с.Вставить("A42_4", "R0041G4"); 
		
		с.Вставить("A51_3", "R0050G3");
		с.Вставить("A51_4", "R0050G4");
		с.Вставить("A52_3", "R0051G3");
		с.Вставить("A52_4", "R0051G4");
		
		с.Вставить("A61_3", "R0060G3");
		с.Вставить("A61_4", "R0060G4");
		с.Вставить("A62_3", "R0061G3");
		с.Вставить("A62_4", "R0061G4");
		
		с.Вставить("A71_3", "R0070G3");
		с.Вставить("A71_4", "R0070G4");
		с.Вставить("A72_3", "R0071G3");
		с.Вставить("A72_4", "R0071G4");
		
		с.Вставить("A81_3", "R0080G3");
		с.Вставить("A81_4", "R0080G4");
		с.Вставить("A82_3", "R0081G3");
		с.Вставить("A82_4", "R0081G4");
		
		с.Вставить("A91_3", "R0090G3");
		с.Вставить("A91_4", "R0090G4");
		с.Вставить("A92_3", "R0091G3");
		с.Вставить("A92_4", "R0091G4");
		
		с.Вставить("A101_3", "R0100G3");
		с.Вставить("A101_4", "R0100G4");
		с.Вставить("A102_3", "R0101G3");
		с.Вставить("A102_4", "R0101G4");
		
		с.Вставить("A111_3", "R0110G3");
		с.Вставить("A111_4", "R0110G4");
		с.Вставить("A112_3", "R0111G3");
		с.Вставить("A112_4", "R0111G4");
		
		с.Вставить("A121_3", "R0120G3");
		с.Вставить("A121_4", "R0120G4");
		с.Вставить("A122_3", "R0121G3");
		с.Вставить("A122_4", "R0121G4");
		
		с.Вставить("A26_4", "R026G4");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);

		КонецОтчета(Doc);
        ДочерниеДокументы.Добавить(НовыйИд);	
                       
        НомерДод = НомерДод +1;
       // КонецЦикла;
	КонецЕсли;
	
	Возврат ДочерниеДокументы;

КонецФункции


#КонецОбласти 
#КонецОбласти 

&НаКлиенте
Процедура Формирование_БалансМПДСС(App,  Документ,  БланкДСС,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкДСС, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаОтчетМП");
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);      
	
	Попытка
		rsMain.Fields.Item("FIRM_NAME").Value = Док.ОргНазв;
		rsMain.Fields.Item("FIRM_TERR").Value = Док.ОргТерритория;
		rsMain.Fields.Item("FIRM_OPFNM").Value = Док.ОргОПФГ;
		rsMain.Fields.Item("FIRM_KVEDNM").Value = Док.ОргВЭД;
		rsMain.Fields.Item("S_CH").Value = Док.СреднеспКво;
		rsMain.Fields.Item("FIRM_ADR").Value = Док.ОргПочтАдрес;
		//rsMain.Fields.Item("FIRM_TELORG").Value = Док.;
		
		rsMain.Fields.Item("N13").Value = Док.ДатаКонцаПериодаОтчетаГод;
		rsMain.Fields.Item("N14").Value = Док.ДатаКонцаПериодаОтчетаМесяц;
		//rsMain.Fields.Item("LAS").Value = Док.ДатаКонцаПериодаОтчетаЧисло;
		
		rsMain.Fields.Item("FIRM_EDRPOU").Value = Док.ОргКодЕДРПОУ;
		//rsMain.Fields.Item("FIRM_SPATO").Value = Док.ОргКодКОАТУУ;
		
		// 29.07.2022 + DOCKING 393
		Попытка rsMain.Fields.Item("KATOTTG").Value=Док.ОргКодКОАТУУ; Исключение КонецПопытки;
		// 29.07.2022 - DOCKING 393
		
		rsMain.Fields.Item("FIRM_OPFCD").Value = Док.ОргКодОПФГ;
		rsMain.Fields.Item("FIRM_KVED").Value = Док.ОргКодКВЕД;
		
		//rsMain.Fields.Item("MY_DATE").Value = Док.ДатаБаланса;
		
		rsMain.Fields.Item("rep_pernm").Value = Док.ПериодОтчета;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если БланкДСС = "S0110014" Тогда
		сДел1000.Вставить("A1000_3", "П10003");
		сДел1000.Вставить("A1000_4", "П10004");
		сДел1000.Вставить("A1001_3", "П10013");
		сДел1000.Вставить("A1001_4", "П10014");
		сДел1000.Вставить("A1002_3", "_П10023");
		сДел1000.Вставить("A1002_4", "_П10024");
		сДел1000.Вставить("A1005_3", "П10053");
		сДел1000.Вставить("A1005_4", "П10054");
		сДел1000.Вставить("A1010_3", "П10103");
		сДел1000.Вставить("A1010_4", "П10104");
		сДел1000.Вставить("A1011_3", "П10113");
		сДел1000.Вставить("A1011_4", "П10114");
		сДел1000.Вставить("A1012_3", "_П10123");
		сДел1000.Вставить("A1012_4", "_П10124");
		сДел1000.Вставить("A1020_3", "П10203");
		сДел1000.Вставить("A1020_4", "П10204");
		сДел1000.Вставить("A1030_3", "П10303");
		сДел1000.Вставить("A1030_4", "П10304");
		сДел1000.Вставить("A1090_3", "П10903");
		сДел1000.Вставить("A1090_4", "П10904");
		сДел1000.Вставить("A1095_3", "П10953");
		сДел1000.Вставить("A1095_4", "П10954");
		сДел1000.Вставить("A1100_3", "П11003");
		сДел1000.Вставить("A1100_4", "П11004");
		сДел1000.Вставить("A1103_3", "П11033");
		сДел1000.Вставить("A1103_4", "П11034");
		сДел1000.Вставить("A1110_3", "П11103");
		сДел1000.Вставить("A1110_4", "П11104");
		сДел1000.Вставить("A1125_3", "П11253");
		сДел1000.Вставить("A1125_4", "П11254");
		сДел1000.Вставить("A1135_3", "П11353");
		сДел1000.Вставить("A1135_4", "П11354");
		сДел1000.Вставить("A1136_3", "П11363");
		сДел1000.Вставить("A1136_4", "П11364");
		сДел1000.Вставить("A1155_3", "П11553");
		сДел1000.Вставить("A1155_4", "П11554");
		сДел1000.Вставить("A1160_3", "П11603");
		сДел1000.Вставить("A1160_4", "П11604");
		сДел1000.Вставить("A1165_3", "П11653");
		сДел1000.Вставить("A1165_4", "П11654");
		сДел1000.Вставить("A1170_3", "П11703");
		сДел1000.Вставить("A1170_4", "П11704");
		сДел1000.Вставить("A1190_3", "П11903");
		сДел1000.Вставить("A1190_4", "П11904");
		сДел1000.Вставить("A1195_3", "П11953");
		сДел1000.Вставить("A1195_4", "П11954");
		сДел1000.Вставить("A1200_3", "П12003");
		сДел1000.Вставить("A1200_4", "П12004");
		сДел1000.Вставить("A1300_3", "П13003");
		сДел1000.Вставить("A1300_4", "П13004");
		сДел1000.Вставить("A1400_3", "П14003");
		сДел1000.Вставить("A1400_4", "П14004");
		сДел1000.Вставить("A1410_3", "П14103");
		сДел1000.Вставить("A1410_4", "П14104");
		сДел1000.Вставить("A1415_3", "П14153");
		сДел1000.Вставить("A1415_4", "П14154");
		сДел1000.Вставить("A1420_3", "П14203");
		сДел1000.Вставить("A1420_4", "П14204");
		сДел1000.Вставить("A1425_3", "_П14253");
		сДел1000.Вставить("A1425_4", "_П14254");
		сДел1000.Вставить("A1495_3", "П14953");
		сДел1000.Вставить("A1495_4", "П14954");
		сДел1000.Вставить("A1595_3", "П15953");
		сДел1000.Вставить("A1595_4", "П15954");
		сДел1000.Вставить("A1600_3", "П16003");
		сДел1000.Вставить("A1600_4", "П16004");
		сДел1000.Вставить("A1610_3", "П16103");
		сДел1000.Вставить("A1610_4", "П16104");
		сДел1000.Вставить("A1615_3", "П16153");
		сДел1000.Вставить("A1615_4", "П16154");
		сДел1000.Вставить("A1620_3", "П16203");
		сДел1000.Вставить("A1620_4", "П16204");
		сДел1000.Вставить("A1621_3", "П16213");
		сДел1000.Вставить("A1621_4", "П16214");
		сДел1000.Вставить("A1625_3", "П16253");
		сДел1000.Вставить("A1625_4", "П16254");
		сДел1000.Вставить("A1630_3", "П16303");
		сДел1000.Вставить("A1630_4", "П16304");
		сДел1000.Вставить("A1665_3", "П16653");
		сДел1000.Вставить("A1665_4", "П16654");
		сДел1000.Вставить("A1690_3", "П16903");
		сДел1000.Вставить("A1690_4", "П16904");
		сДел1000.Вставить("A1695_3", "П16953");
		сДел1000.Вставить("A1695_4", "П16954");
		сДел1000.Вставить("A1700_3", "П17003");
		сДел1000.Вставить("A1700_4", "П17004");
		сДел1000.Вставить("A1900_3", "П19003");
		сДел1000.Вставить("A1900_4", "П19004");
		сДел1000.Вставить("B2000_3", "ПП20003");
		сДел1000.Вставить("B2000_4", "ПП20004");
		сДел1000.Вставить("B2120_3", "ПП21203");
		сДел1000.Вставить("B2120_4", "ПП21204");
		сДел1000.Вставить("B2240_3", "ПП22403");
		сДел1000.Вставить("B2240_4", "ПП22404");
		сДел1000.Вставить("B2280_3", "ПП22803");
		сДел1000.Вставить("B2280_4", "ПП22804");
		сДел1000.Вставить("B2050_3", "_ПП20503");
		сДел1000.Вставить("B2050_4", "_ПП20504");
		сДел1000.Вставить("B2180_3", "_ПП21803");
		сДел1000.Вставить("B2180_4", "_ПП21804");
		сДел1000.Вставить("B2270_3", "_ПП22703");
		сДел1000.Вставить("B2270_4", "_ПП22704");
		сДел1000.Вставить("B2285_3", "_ПП22853");
		сДел1000.Вставить("B2285_4", "_ПП22854");
		сДел1000.Вставить("B2290_3", "ПП22903");
		сДел1000.Вставить("B2290_4", "ПП22904");
		сДел1000.Вставить("B2300_3", "_ПП23003");
		сДел1000.Вставить("B2300_4", "_ПП23004");
		сДел1000.Вставить("B2350_3", "ПП23503");
		сДел1000.Вставить("B2350_4", "ПП23504");
		с.Вставить("FIRM_RUK", "ОргДиректор");
		с.Вставить("FIRM_BUH", "ОргБухгалтер");  		
	КонецЕсли;      	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_БалансМПС(App,  Документ,  БланкДСС,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкДСС, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаОтчетМП");
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);      
	
	Попытка
		rsMain.Fields.Item("FIRM_NAME").Value = Док.ОргНазв;
		rsMain.Fields.Item("FIRM_TERR").Value = Док.ОргТерритория;
		rsMain.Fields.Item("FIRM_OPFNM").Value = Док.ОргОПФГ;
		rsMain.Fields.Item("FIRM_KVEDNM").Value = Док.ОргВЭД;
		rsMain.Fields.Item("S_CH").Value = Док.СреднеспКво;
		rsMain.Fields.Item("FIRM_ADR").Value = Док.ОргПочтАдрес;
		//rsMain.Fields.Item("FIRM_TELORG").Value = Док.;
		
		rsMain.Fields.Item("N13").Value = Док.ДатаКонцаПериодаОтчетаГод;
		rsMain.Fields.Item("N14").Value = Док.ДатаКонцаПериодаОтчетаМесяц;
		//rsMain.Fields.Item("LAS").Value = Док.ДатаКонцаПериодаОтчетаЧисло;
		
		rsMain.Fields.Item("FIRM_EDRPOU").Value = Док.ОргКодЕДРПОУ;
	//	rsMain.Fields.Item("FIRM_SPATO").Value = Док.ОргКодКОАТУУ;
	
		// 29.07.2022 + DOCKING 393
		Попытка rsMain.Fields.Item("KATOTTG").Value=Док.ОргКодКОАТУУ; Исключение КонецПопытки;
		// 29.07.2022 - DOCKING 393	
	
		rsMain.Fields.Item("FIRM_OPFCD").Value = Док.ОргКодОПФГ;
		rsMain.Fields.Item("FIRM_KVED").Value = Док.ОргКодКВЕД;
		
		//rsMain.Fields.Item("MY_DATE").Value = Док.ДатаБаланса;
		
		rsMain.Fields.Item("rep_pernm").Value = Док.ПериодОтчета;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если БланкДСС = "S0111007" Тогда	
		сДел1000.Вставить("A1010_3", "П10103");
		сДел1000.Вставить("A1010_4", "П10104");
		сДел1000.Вставить("A1011_3", "П10113");
		сДел1000.Вставить("A1011_4", "П10114");
		сДел1000.Вставить("A1012_3", "_П10123");
		сДел1000.Вставить("A1012_4", "_П10124");
		сДел1000.Вставить("A1090_3", "П10903");
		сДел1000.Вставить("A1090_4", "П10904");
		сДел1000.Вставить("A1095_3", "П10953");
		сДел1000.Вставить("A1095_4", "П10954");
		сДел1000.Вставить("A1100_3", "П11003");
		сДел1000.Вставить("A1100_4", "П11004");
		сДел1000.Вставить("A1155_3", "П11553");
		сДел1000.Вставить("A1155_4", "П11554");
		сДел1000.Вставить("A1165_3", "П11653");
		сДел1000.Вставить("A1165_4", "П11654");
		сДел1000.Вставить("A1190_3", "П11903");
		сДел1000.Вставить("A1190_4", "П11904");
		сДел1000.Вставить("A1195_3", "П11953");
		сДел1000.Вставить("A1195_4", "П11954");
		сДел1000.Вставить("A1300_3", "П13003");
		сДел1000.Вставить("A1300_4", "П13004");
		сДел1000.Вставить("A1400_3", "П14003");
		сДел1000.Вставить("A1400_4", "П14004");
		сДел1000.Вставить("A1420_3", "П14203");
		сДел1000.Вставить("A1420_4", "П14204");
		сДел1000.Вставить("A1495_3", "П14953");
		сДел1000.Вставить("A1495_4", "П14954");
		сДел1000.Вставить("A1595_3", "П15953");
		сДел1000.Вставить("A1595_4", "П15954");
		сДел1000.Вставить("A1600_3", "П16003");
		сДел1000.Вставить("A1600_4", "П16004");
		сДел1000.Вставить("A1615_3", "П16153");
		сДел1000.Вставить("A1615_4", "П16154");
		сДел1000.Вставить("A1620_3", "П16203");
		сДел1000.Вставить("A1620_4", "П16204");
		сДел1000.Вставить("A1625_3", "П16253");
		сДел1000.Вставить("A1625_4", "П16254");
		сДел1000.Вставить("A1630_3", "П16303");
		сДел1000.Вставить("A1630_4", "П16304");
		сДел1000.Вставить("A1690_3", "П16903");
		сДел1000.Вставить("A1690_4", "П16904");
		сДел1000.Вставить("A1695_3", "П16953");
		сДел1000.Вставить("A1695_4", "П16954");
		сДел1000.Вставить("A1900_3", "П19003");
		сДел1000.Вставить("A1900_4", "П19004");
		сДел1000.Вставить("B2000_3", "ПП20003");
		сДел1000.Вставить("B2000_4", "ПП20004");
		сДел1000.Вставить("B2160_3", "ПП21603");
		сДел1000.Вставить("B2160_4", "ПП21604");
		сДел1000.Вставить("B2280_3", "ПП22803");
		сДел1000.Вставить("B2280_4", "ПП22804");
		сДел1000.Вставить("B2050_3", "_ПП20503");
		сДел1000.Вставить("B2050_4", "_ПП20504");
		сДел1000.Вставить("B2165_3", "_ПП21653");
		сДел1000.Вставить("B2165_4", "_ПП21654");
		сДел1000.Вставить("B2285_3", "_ПП22853");
		сДел1000.Вставить("B2285_4", "_ПП22854");
		сДел1000.Вставить("B2290_3", "ПП22903");
		сДел1000.Вставить("B2290_4", "ПП22904");
		сДел1000.Вставить("B2300_3", "_ПП23003");
		сДел1000.Вставить("B2300_4", "_ПП23004");
		сДел1000.Вставить("B2310_3", "_ПП23103");
		сДел1000.Вставить("B2310_4", "_ПП23104");
		сДел1000.Вставить("B2350_3", "ПП23503");
		сДел1000.Вставить("B2350_4", "ПП23504");
		с.Вставить("FIRM_RUK", "ОргДиректор");
		с.Вставить("FIRM_BUH", "ОргБухгалтер");    		
	КонецЕсли;      	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ДекларацияЕН_ЮР(App,  Документ,  Бланк,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДекларацияЕН");
	ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	
	НачалоОтчета(rsMain);      
	
	Если Бланк = "J0103508" Тогда
		
		Попытка
			rsMain.Fields.Item("H1KV").Value=?(ЗначениеЗаполнено(Док["H1KV"]),1,0);
			rsMain.Fields.Item("HHY").Value=?(ЗначениеЗаполнено(Док["HHY"]),1,0);
			rsMain.Fields.Item("H3KV").Value=?(ЗначениеЗаполнено(Док["H3KV"]),1,0);
			rsMain.Fields.Item("HY").Value=?(ЗначениеЗаполнено(Док["HY"]),1,0);
			rsMain.Fields.Item("HD").Value=?(ЗначениеЗаполнено(Док["HD"]),1,0);
			rsMain.Fields.Item("HMONTH").Value=?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
		Исключение
		      
		КонецПопытки;
		с.Вставить("NYEAR", "HZY");
		с.Вставить("PNUM", "HNY");
		с.Вставить("ARC", "HJAR");
		с.Вставить("A1_3", "R001G3");
		с.Вставить("A2_3", "R002G3");
		с.Вставить("A3_3", "R003G3");
		с.Вставить("A4_3", "R004G3");
		с.Вставить("A5_3", "R005G3");
		с.Вставить("A6_3", "R006G3");
		с.Вставить("A7_3", "R007G3");
		с.Вставить("A8_3", "R008G3");
		с.Вставить("A9_3", "R009G3");
		с.Вставить("A10_3", "R010G3");
		с.Вставить("A1_4", "R001G4");
		с.Вставить("A2_4", "R002G4");
		с.Вставить("A3_4", "R003G4");
		с.Вставить("A4_4", "R004G4");
		с.Вставить("A5_4", "R005G4");
		с.Вставить("A6_4", "R006G4");
		с.Вставить("A7_4", "R007G4");
		с.Вставить("A8_4", "R008G4");
		с.Вставить("A9_4", "R009G4");
		с.Вставить("A10_4", "R010G4");
		// DOCKING 671 + 09.01.2024
		//с.Вставить("A11", "R011G3");
		с.Вставить("A11_3", "R011G3");
		с.Вставить("A11_4", "R011G4");
		с.Вставить("A12_3", "R012G3");
		с.Вставить("A12_4", "R012G4");
		//с.Вставить("A12", "R012G3");
		// DOCKING 671 - 09.01.2024
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		
		// DOCKING 671 + 09.01.2024
		//с.Вставить("A181", "HJAR");
		с.Вставить("A18", "R018G3");
		с.Вставить("A19", "R019G3");
		
		Попытка
			rsMain.Fields.Item("HD1").Value=?(ЗначениеЗаполнено(Док["N1"]),1,0);
		Исключение
		КонецПопытки;

		Попытка
			//rsMain.Fields.Item("HJAR").Value=?(ЗначениеЗаполнено(Док["HJAR"]),1,0);
		Исключение
		КонецПопытки;
		// DOCKING 671 - 09.01.2024
		
		//TAB1///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		rsTab = Doc.DataSets("TAB1");
		rsTab.Clear();
		rsTab.Edit();
		Для Каждого Поле Из ТЧ Цикл   
			Если Поле.Ключ = "T1R" Тогда
				Для каждого Стр Из Поле.Значение Цикл
					
					rsTab.Fields.Item("TAB1_A2").Value = Стр.T1RXXXXG2S;
					
					rsTab.Post();
					rsTab.Append();
				КонецЦикла;
	
				
			КонецЕсли;
		КонецЦикла;
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
	КонецЕсли;
	
	КонецОтчета(Doc);  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ДекларацияЕН_ФОП(App,  Документ,  Бланк,  PDate,  ИД, ИДпакеты)
	
	Если Месяц(Документ.ДатаНачала)  =  Месяц(Документ.ДатаОкончания) Тогда
	    Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0);
	Иначе
		Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	КонецЕсли; 
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДекларацияЕН;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДекларацияЕН");
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	
	НачалоОтчета(rsMain);      
	
	Если Бланк = "F0103308" Тогда
		
		Попытка
			rsMain.Fields.Item("H1KV").Value=?(ЗначениеЗаполнено(Док["H1KV"]),1,0);
			rsMain.Fields.Item("HHY").Value=?(ЗначениеЗаполнено(Док["HHY"]),1,0);
			rsMain.Fields.Item("H3KV").Value=?(ЗначениеЗаполнено(Док["H3KV"]),1,0);
			rsMain.Fields.Item("HY").Value=?(ЗначениеЗаполнено(Док["HY"]),1,0);
			rsMain.Fields.Item("HD").Value=?(ЗначениеЗаполнено(Док["HD"]),1,0);
			// DOCKING 521 + 26.06.2023
			//rsMain.Fields.Item("HMONTH").Value=?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
			rsMain.Fields.Item("HZM").Value=?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
			// DOCKING 521 - 26.06.2023
		Исключение
			
		КонецПопытки;
		с.Вставить("REP_NYEAR", "HZY"); 
		
		Попытка
			Если Док["HD1"] = "Х" Тогда
			  rsMain.Fields.Item("N5").Value	= 1;
		  	КонецЕсли;
	    Исключение КонецПопытки;
		// DOCKING 521 + 16.05.2023
		Попытка
			Если Док["HD2"] = "Х" Тогда
			  rsMain.Fields.Item("N6").Value	= 1;
		    КонецЕсли; 
		Исключение КонецПопытки; 
	  	// DOCKING 521 - 16.05.2023

		
		с.Вставить("N1", "HNACTL");
		
		с.Вставить("A1_2", "R02G1");
		с.Вставить("A1_3", "R02G2");
		с.Вставить("A1_4", "R02G3");
		с.Вставить("A1_5", "R02G4");
		с.Вставить("A01", "R001G3");
		с.Вставить("A02", "R002G3");
		с.Вставить("A2_2", "R03G1");
		с.Вставить("A2_3", "R03G2");
		с.Вставить("A2_4", "R03G3");
		с.Вставить("A2_5", "R03G4");
		с.Вставить("A03", "R003G3");
		с.Вставить("A04", "R004G3");
		с.Вставить("A05", "R005G3");
		с.Вставить("A06", "R006G3");
		с.Вставить("A07", "R007G3");
		с.Вставить("A08", "R008G3");
		с.Вставить("A09", "R009G3");
		с.Вставить("A10", "R010G3");
		с.Вставить("A11", "R011G3");
		с.Вставить("A12", "R012G3");
		с.Вставить("A13", "R013G3");
		с.Вставить("A14", "R014G3");
		// DOCKING 521 + 16.05.2023
		с.Вставить("A141", "R0141G3");
		с.Вставить("A142", "R0142G3");
		// DOCKING 521 - 16.05.2023
		с.Вставить("A15", "R015G3");
		с.Вставить("A16", "R016G3");
		с.Вставить("A17", "R017G3");
		с.Вставить("A18", "R018G3");
		с.Вставить("N2", "R019G1");
		с.Вставить("A19", "R019G3");
		с.Вставить("A20", "R020G3");
		с.Вставить("A21", "R021G3");
		с.Вставить("A22", "HJAR");
		
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
	КонецОтчета(Doc);  
	
	Попытка
		Если Док["HD1"] = "Х" Тогда
			Бланк =  "F0133108";
			Формирование_ДекларацияЕН_ФОП_Додаток1(App,  Документ, Бланк,  PDate,  ИД, Doc.CardCode, ИДпакеты);
		КонецЕсли;
	Исключение КонецПопытки;
    // DOCKING 521 + 16.06.2023
	Попытка
		Если Док["HD2"] = "Х" Тогда
			Бланк =  "F0133208";
			Формирование_ДекларацияЕН_ФОП_Додаток2(App,  Документ, Бланк,  PDate,  ИД, Doc.CardCode, ИДпакеты);
		КонецЕсли; 
	Исключение КонецПопытки;	
    // DOCKING 521 - 16.06.2023
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ДекларацияЕН_ФОП_Додаток1(App,  Документ,  Бланк,  PDate,  ИД, ИДПарент, ИДпакеты)
	
	Если Месяц(Документ.ДатаНачала)  =  Месяц(Документ.ДатаОкончания) Тогда
	    Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД+"D1", 0);
	Иначе
		Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"D1", 0);
	КонецЕсли; 
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДекларацияЕН;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение");
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	
	НачалоОтчета(rsMain);      
	
	Если Бланк = "F0133108" Тогда
		
		ИДпакеты.Добавить(ИД+"D1");	
		Попытка
			rsMain.Fields.Item("H1KV").Value = ?(ЗначениеЗаполнено(Док["H1KV"]),1,0);
			rsMain.Fields.Item("HHY").Value = ?(ЗначениеЗаполнено(Док["HHY"]),1,0);
			rsMain.Fields.Item("H3KV").Value = ?(ЗначениеЗаполнено(Док["H3KV"]),1,0);
			rsMain.Fields.Item("HY").Value = ?(ЗначениеЗаполнено(Док["HY"]),1,0);
			rsMain.Fields.Item("HD").Value = ?(ЗначениеЗаполнено(Док["HD"]),1,0);
			// DOCKING 521 + 26.06.2023
			//rsMain.Fields.Item("HMONTH").Value = ?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
			rsMain.Fields.Item("HZM").Value = ?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
			// DOCKING 521 - 26.06.2023
		Исключение
		      
		КонецПопытки;
		с.Вставить("REP_NYEAR", "HZY");
	
		с.Вставить("A91_2", "R091G2");
		с.Вставить("A91_3", "R091G3");
		с.Вставить("A91_4", "R091G4");
		с.Вставить("A92_2", "R092G2");
		с.Вставить("A92_3", "R092G3");
		с.Вставить("A92_4", "R092G4");
		с.Вставить("A93_2", "R093G2");
		с.Вставить("A93_3", "R093G3");
		с.Вставить("A93_4", "R093G4");
		с.Вставить("A94_2", "R094G2");
		с.Вставить("A94_3", "R094G3");
		с.Вставить("A94_4", "R094G4");
		с.Вставить("A95_2", "R095G2");
		с.Вставить("A95_3", "R095G3");
		с.Вставить("A95_4", "R095G4");
		с.Вставить("A96_2", "R096G2");
		с.Вставить("A96_3", "R096G3");
		с.Вставить("A96_4", "R096G4");
		с.Вставить("A97_2", "R097G2");
		с.Вставить("A97_3", "R097G3");
		с.Вставить("A97_4", "R097G4");
		с.Вставить("A98_2", "R098G2");
		с.Вставить("A98_3", "R098G3");
		с.Вставить("A98_4", "R098G4");
		с.Вставить("A99_2", "R099G2");
		с.Вставить("A99_3", "R099G3");
		с.Вставить("A99_4", "R099G4");
		с.Вставить("A910_2", "R0910G2");
		с.Вставить("A910_3", "R0910G3");
		с.Вставить("A910_4", "R0910G4");
		с.Вставить("A911_2", "R0911G2");
		с.Вставить("A911_3", "R0911G3");
		с.Вставить("A911_4", "R0911G4");
		с.Вставить("A912_2", "R0912G2");
		с.Вставить("A912_3", "R0912G3");
		с.Вставить("A912_4", "R0912G4");
		с.Вставить("A9_2", "R09G2");
		//с.Вставить("A9_3", "R09G3");
		с.Вставить("A9_4", "R09G4");
		с.Вставить("A101", "R0101G3");
		с.Вставить("A102", "R0102G3");
		с.Вставить("A103", "R0103G3");
		с.Вставить("A104", "R0104G3");
		с.Вставить("A105", "R0105G3");
		
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	
	КонецОтчета(Doc);  
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ДекларацияЕН_ФОП_Додаток2(App,  Документ,  Бланк,  PDate,  ИД, ИДПарент, ИДпакеты)
	
	Если Месяц(Документ.ДатаНачала)  =  Месяц(Документ.ДатаОкончания) Тогда
	    Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД+"D2", 0);
	Иначе
		Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД+"D2", 0);
	КонецЕсли; 
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДекларацияЕН;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПриложение2");
	
	ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	
	НачалоОтчета(rsMain);      
	
	Если Бланк = "F0133208" Тогда
		ИДпакеты.Добавить(ИД+"D2");
		//Попытка
		//	rsMain.Fields.Item("H1KV").Value = ?(ЗначениеЗаполнено(Док["H1KV"]),1,0);
		//	rsMain.Fields.Item("HHY").Value = ?(ЗначениеЗаполнено(Док["HHY"]),1,0);
		//	rsMain.Fields.Item("H3KV").Value = ?(ЗначениеЗаполнено(Док["H3KV"]),1,0);
		//	rsMain.Fields.Item("HY").Value = ?(ЗначениеЗаполнено(Док["HY"]),1,0);
		//	rsMain.Fields.Item("HD").Value = ?(ЗначениеЗаполнено(Док["HD"]),1,0);
		//	rsMain.Fields.Item("HMONTH").Value = ?(ЗначениеЗаполнено(Док["HMONTH"]),1,0);
		//Исключение
		//      
		//КонецПопытки;
		
		
		Попытка rsMain.Fields.Item("А21").Value = Док.R021G3; Исключение КонецПопытки;
		Попытка rsMain.Fields.Item("А021").Value = Док.R021G3; Исключение КонецПопытки;
		
		с.Вставить("NYEAR", "HZY");
		
		
		с.Вставить("A1_3", "R002G3");
		с.Вставить("A1_4", "R002G4");
		с.Вставить("A1_7", "R002G7");
		с.Вставить("A1_9", "R002G9");
		с.Вставить("A1_10", "R002G10");
		с.Вставить("A1_11", "R002G11");
		с.Вставить("A1_12", "R002G12");
		с.Вставить("A01", "R01G3");
		с.Вставить("A02", "R02G3");
		с.Вставить("A021", "R021G3");
		с.Вставить("A022", "R022G3");
		с.Вставить("A023", "R023G3");
		с.Вставить("A024", "R024G3");
		с.Вставить("A025", "R025G3");
		с.Вставить("A026", "R026G3");
		с.Вставить("A027", "R027G3");
		с.Вставить("A028", "R028G3");
		с.Вставить("A0210", "R0210G3");
		с.Вставить("A03", "R03G3");
		с.Вставить("A04", "R04G3");
		
		
		rsMain.Fields.Item("RUK").Value = Док.HBOS;
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);	 
		
		/////////////////////////////////////////////////////////////
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		Для Каждого Поле Из ТЧ Цикл   
			Если Поле.Ключ = "D1T1R" Тогда
				Для каждого Стр Из Поле.Значение Цикл
					
					rsMain.Fields.Item("TAB1_A2").Value = Стр.D1T1RXXXXG2S;
					rsMain.Fields.Item("TAB1_A3").Value = Стр.D1T1RXXXXG3;
					rsMain.Fields.Item("TAB1_A4").Value = Стр.D1T1RXXXXG4;
					rsMain.Fields.Item("TAB1_A5").Value = Стр.D1T1RXXXXG5;
					rsMain.Fields.Item("TAB1_A6").Value = Стр.D1T1RXXXXG6;
					rsMain.Fields.Item("TAB1_A7").Value = Стр.D1T1RXXXXG7;
					rsMain.Fields.Item("TAB1_A8").Value = Стр.D1T1RXXXXG8;
					rsMain.Fields.Item("TAB1_A9").Value = Стр.D1T1RXXXXG9;
					rsMain.Fields.Item("TAB1_A10").Value = Стр.D1T1RXXXXG10;
					rsMain.Fields.Item("TAB1_A12").Value = Стр.D1T1RXXXXG12;
					
					rsMain.Post();
					rsMain.Append();
				КонецЦикла;
	
				
			КонецЕсли;
		КонецЦикла;
						
	КонецЕсли;	
			
	
	КонецОтчета(Doc); 
	
КонецПроцедуры


&НаКлиенте
Процедура Формирование_Капитал(App,  Документ,  Бланк,  PDate,  ИД)
	Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаОтчетОСобственномКапитале;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаОтчетОСобственномКапитале");
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	сДел1000 = Новый Структура;
	с = Новый Структура;
	НачалоОтчета(rsMain);
		
	Если Бланк = "S0104010" Тогда
		
		с.Вставить("N1","ДатаКонцаПериодаОтчетаГод");
		с.Вставить("N2","ДатаКонцаПериодаОтчетаМесяц");
		с.Вставить("LASTDAY","ДатаКонцаПериодаОтчетаЧисло");
		
		сДел1000.Вставить("A4000_3", "П40003");
		сДел1000.Вставить("A4000_4", "П40004");
		сДел1000.Вставить("A4000_5", "П40005");
		сДел1000.Вставить("A4000_6", "П40006");
		сДел1000.Вставить("A4000_7", "П40007");
		сДел1000.Вставить("A4000_8", "П40008");
		сДел1000.Вставить("A4000_9", "П40009");
		сДел1000.Вставить("A4000_10", "П400010");
		сДел1000.Вставить("A4005_3", "П40053");
		сДел1000.Вставить("A4005_4", "П40054");
		сДел1000.Вставить("A4005_5", "П40055");
		сДел1000.Вставить("A4005_6", "П40056");
		сДел1000.Вставить("A4005_7", "П40057");
		сДел1000.Вставить("A4005_8", "П40058");
		сДел1000.Вставить("A4005_9", "П40059");
		сДел1000.Вставить("A4005_10", "П400510");
		сДел1000.Вставить("A4010_3", "П40103");
		сДел1000.Вставить("A4010_4", "П40104");
		сДел1000.Вставить("A4010_5", "П40105");
		сДел1000.Вставить("A4010_6", "П40106");
		сДел1000.Вставить("A4010_7", "П40107");
		сДел1000.Вставить("A4010_8", "П40108");
		сДел1000.Вставить("A4010_9", "П40109");
		сДел1000.Вставить("A4010_10", "П401010");
		сДел1000.Вставить("A4090_3", "П40903");
		сДел1000.Вставить("A4090_4", "П40904");
		сДел1000.Вставить("A4090_5", "П40905");
		сДел1000.Вставить("A4090_6", "П40906");
		сДел1000.Вставить("A4090_7", "П40907");
		сДел1000.Вставить("A4090_8", "П40908");
		сДел1000.Вставить("A4090_9", "П40909");
		сДел1000.Вставить("A4090_10", "П409010");
		сДел1000.Вставить("A4095_3", "П40953");
		сДел1000.Вставить("A4095_4", "П40954");
		сДел1000.Вставить("A4095_5", "П40955");
		сДел1000.Вставить("A4095_6", "П40956");
		сДел1000.Вставить("A4095_7", "П40957");
		сДел1000.Вставить("A4095_8", "П40958");
		сДел1000.Вставить("A4095_9", "П40959");
		сДел1000.Вставить("A4095_10", "П409510");
		сДел1000.Вставить("A4100_3", "П41003");
		сДел1000.Вставить("A4100_4", "П41004");
		сДел1000.Вставить("A4100_5", "П41005");
		сДел1000.Вставить("A4100_6", "П41006");
		сДел1000.Вставить("A4100_7", "П41007");
		сДел1000.Вставить("A4100_8", "П41008");
		сДел1000.Вставить("A4100_9", "П41009");
		сДел1000.Вставить("A4100_10", "П410010");
		сДел1000.Вставить("A4110_3", "П41103");
		сДел1000.Вставить("A4110_4", "П41104");
		сДел1000.Вставить("A4110_5", "П41105");
		сДел1000.Вставить("A4110_6", "П41106");
		сДел1000.Вставить("A4110_7", "П41107");
		сДел1000.Вставить("A4110_8", "П41108");
		сДел1000.Вставить("A4110_9", "П41109");
		сДел1000.Вставить("A4110_10", "П411010");
		сДел1000.Вставить("A4111_3", "П41113");
		сДел1000.Вставить("A4111_4", "П41114");
		сДел1000.Вставить("A4111_5", "П41115");
		сДел1000.Вставить("A4111_6", "П41116");
		сДел1000.Вставить("A4111_7", "П41117");
		сДел1000.Вставить("A4111_8", "П41118");
		сДел1000.Вставить("A4111_9", "П41119");
		сДел1000.Вставить("A4111_10", "П411110");
		сДел1000.Вставить("A4112_3", "П41123");
		сДел1000.Вставить("A4112_4", "П41124");
		сДел1000.Вставить("A4112_5", "П41125");
		сДел1000.Вставить("A4112_6", "П41126");
		сДел1000.Вставить("A4112_7", "П41127");
		сДел1000.Вставить("A4112_8", "П41128");
		сДел1000.Вставить("A4112_9", "П41129");
		сДел1000.Вставить("A4112_10", "П411210");
		сДел1000.Вставить("A4113_3", "П41133");
		сДел1000.Вставить("A4113_4", "П41134");
		сДел1000.Вставить("A4113_5", "П41135");
		сДел1000.Вставить("A4113_6", "П41136");
		сДел1000.Вставить("A4113_7", "П41137");
		сДел1000.Вставить("A4113_8", "П41138");
		сДел1000.Вставить("A4113_9", "П41139");
		сДел1000.Вставить("A4113_10", "П411310");
		сДел1000.Вставить("A4114_3", "П41143");
		сДел1000.Вставить("A4114_4", "П41144");
		сДел1000.Вставить("A4114_5", "П41145");
		сДел1000.Вставить("A4114_6", "П41146");
		сДел1000.Вставить("A4114_7", "П41147");
		сДел1000.Вставить("A4114_8", "П41148");
		сДел1000.Вставить("A4114_9", "П41149");
		сДел1000.Вставить("A4114_10", "П411410");
		сДел1000.Вставить("A4116_3", "П41163");
		сДел1000.Вставить("A4116_4", "П41164");
		сДел1000.Вставить("A4116_5", "П41165");
		сДел1000.Вставить("A4116_6", "П41166");
		сДел1000.Вставить("A4116_7", "П41167");
		сДел1000.Вставить("A4116_8", "П41168");
		сДел1000.Вставить("A4116_9", "П41169");
		сДел1000.Вставить("A4116_10", "П411610");
		сДел1000.Вставить("A4200_3", "П42003");
		сДел1000.Вставить("A4200_4", "П42004");
		сДел1000.Вставить("A4200_5", "П42005");
		сДел1000.Вставить("A4200_6", "П42006");
		сДел1000.Вставить("A4200_7", "П42007");
		сДел1000.Вставить("A4200_8", "П42008");
		сДел1000.Вставить("A4200_9", "П42009");
		сДел1000.Вставить("A4200_10", "П420010");
		сДел1000.Вставить("A4205_3", "П42053");
		сДел1000.Вставить("A4205_4", "П42054");
		сДел1000.Вставить("A4205_5", "П42055");
		сДел1000.Вставить("A4205_6", "П42056");
		сДел1000.Вставить("A4205_7", "П42057");
		сДел1000.Вставить("A4205_8", "П42058");
		сДел1000.Вставить("A4205_9", "П42059");
		сДел1000.Вставить("A4205_10", "П420510");
		сДел1000.Вставить("A4210_3", "П42103");
		сДел1000.Вставить("A4210_4", "П42104");
		сДел1000.Вставить("A4210_5", "П42105");
		сДел1000.Вставить("A4210_6", "П42106");
		сДел1000.Вставить("A4210_7", "П42107");
		сДел1000.Вставить("A4210_8", "П42108");
		сДел1000.Вставить("A4210_9", "П42109");
		сДел1000.Вставить("A4210_10", "П421010");
		сДел1000.Вставить("A4215_3", "П42153");
		сДел1000.Вставить("A4215_4", "П42154");
		сДел1000.Вставить("A4215_5", "П42155");
		сДел1000.Вставить("A4215_6", "П42156");
		сДел1000.Вставить("A4215_7", "П42157");
		сДел1000.Вставить("A4215_8", "П42158");
		сДел1000.Вставить("A4215_9", "П42159");
		сДел1000.Вставить("A4215_10", "П421510");
		сДел1000.Вставить("A4220_3", "П42203");
		сДел1000.Вставить("A4220_4", "П42204");
		сДел1000.Вставить("A4220_5", "П42205");
		сДел1000.Вставить("A4220_6", "П42206");
		сДел1000.Вставить("A4220_7", "П42207");
		сДел1000.Вставить("A4220_8", "П42208");
		сДел1000.Вставить("A4220_9", "П42209");
		сДел1000.Вставить("A4220_10", "П422010");
		сДел1000.Вставить("A4225_3", "П42253");
		сДел1000.Вставить("A4225_4", "П42254");
		сДел1000.Вставить("A4225_5", "П42255");
		сДел1000.Вставить("A4225_6", "П42256");
		сДел1000.Вставить("A4225_7", "П42257");
		сДел1000.Вставить("A4225_8", "П42258");
		сДел1000.Вставить("A4225_9", "П42259");
		сДел1000.Вставить("A4225_10", "П422510");
		сДел1000.Вставить("A4240_3", "П42403");
		сДел1000.Вставить("A4240_4", "П42404");
		сДел1000.Вставить("A4240_5", "П42405");
		сДел1000.Вставить("A4240_6", "П42406");
		сДел1000.Вставить("A4240_7", "П42407");
		сДел1000.Вставить("A4240_8", "П42408");
		сДел1000.Вставить("A4240_9", "П42409");
		сДел1000.Вставить("A4240_10", "П424010");
		сДел1000.Вставить("A4245_3", "П42453");
		сДел1000.Вставить("A4245_4", "П42454");
		сДел1000.Вставить("A4245_5", "П42455");
		сДел1000.Вставить("A4245_6", "П42456");
		сДел1000.Вставить("A4245_7", "П42457");
		сДел1000.Вставить("A4245_8", "П42458");
		сДел1000.Вставить("A4245_9", "П42459");
		сДел1000.Вставить("A4245_10", "П424510");
		сДел1000.Вставить("A4260_3", "П42603");
		сДел1000.Вставить("A4260_4", "П42604");
		сДел1000.Вставить("A4260_5", "П42605");
		сДел1000.Вставить("A4260_6", "П42606");
		сДел1000.Вставить("A4260_7", "П42607");
		сДел1000.Вставить("A4260_8", "П42608");
		сДел1000.Вставить("A4260_9", "П42609");
		сДел1000.Вставить("A4260_10", "П426010");
		сДел1000.Вставить("A4265_3", "П42653");
		сДел1000.Вставить("A4265_4", "П42654");
		сДел1000.Вставить("A4265_5", "П42655");
		сДел1000.Вставить("A4265_6", "П42656");
		сДел1000.Вставить("A4265_7", "П42657");
		сДел1000.Вставить("A4265_8", "П42658");
		сДел1000.Вставить("A4265_9", "П42659");
		сДел1000.Вставить("A4265_10", "П426510");
		сДел1000.Вставить("A4270_3", "П42703");
		сДел1000.Вставить("A4270_4", "П42704");
		сДел1000.Вставить("A4270_5", "П42705");
		сДел1000.Вставить("A4270_6", "П42706");
		сДел1000.Вставить("A4270_7", "П42707");
		сДел1000.Вставить("A4270_8", "П42708");
		сДел1000.Вставить("A4270_9", "П42709");
		сДел1000.Вставить("A4270_10", "П427010");
		сДел1000.Вставить("A4275_3", "П42753");
		сДел1000.Вставить("A4275_4", "П42754");
		сДел1000.Вставить("A4275_5", "П42755");
		сДел1000.Вставить("A4275_6", "П42756");
		сДел1000.Вставить("A4275_7", "П42757");
		сДел1000.Вставить("A4275_8", "П42758");
		сДел1000.Вставить("A4275_9", "П42759");
		сДел1000.Вставить("A4275_10", "П427510");
		сДел1000.Вставить("A4280_3", "П42803");
		сДел1000.Вставить("A4280_4", "П42804");
		сДел1000.Вставить("A4280_5", "П42805");
		сДел1000.Вставить("A4280_6", "П42806");
		сДел1000.Вставить("A4280_7", "П42807");
		сДел1000.Вставить("A4280_8", "П42808");
		сДел1000.Вставить("A4280_9", "П42809");
		сДел1000.Вставить("A4280_10", "П428010");
		сДел1000.Вставить("A4290_3", "П42903");
		сДел1000.Вставить("A4290_4", "П42904");
		сДел1000.Вставить("A4290_5", "П42905");
		сДел1000.Вставить("A4290_6", "П42906");
		сДел1000.Вставить("A4290_7", "П42907");
		сДел1000.Вставить("A4290_8", "П42908");
		сДел1000.Вставить("A4290_9", "П42909");
		сДел1000.Вставить("A4290_10", "П429010");
		сДел1000.Вставить("A4291_3", "П42913");
		сДел1000.Вставить("A4291_4", "П42914");
		сДел1000.Вставить("A4291_5", "П42915");
		сДел1000.Вставить("A4291_6", "П42916");
		сДел1000.Вставить("A4291_7", "П42917");
		сДел1000.Вставить("A4291_8", "П42918");
		сДел1000.Вставить("A4291_9", "П42919");
		сДел1000.Вставить("A4291_10", "П429110");
		сДел1000.Вставить("A4295_3", "П42953");
		сДел1000.Вставить("A4295_4", "П42954");
		сДел1000.Вставить("A4295_5", "П42955");
		сДел1000.Вставить("A4295_6", "П42956");
		сДел1000.Вставить("A4295_7", "П42957");
		сДел1000.Вставить("A4295_8", "П42958");
		сДел1000.Вставить("A4295_9", "П42959");
		сДел1000.Вставить("A4295_10", "П429510");
		сДел1000.Вставить("A4300_3", "П43003");
		сДел1000.Вставить("A4300_4", "П43004");
		сДел1000.Вставить("A4300_5", "П43005");
		сДел1000.Вставить("A4300_6", "П43006");
		сДел1000.Вставить("A4300_7", "П43007");
		сДел1000.Вставить("A4300_8", "П43008");
		сДел1000.Вставить("A4300_9", "П43009");
		сДел1000.Вставить("A4300_10", "П430010");		

	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
КонецПроцедуры

&НаКлиенте
Процедура Формирование_Форма5(App,  Документ,  Бланк,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	
	НачалоОтчета(rsMain);    
	
	Если Бланк = "S0105009" Тогда
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделI");
		
		// 29.07.2022 + DOCKING 393
		Попытка rsMain.Fields.Item("KATOTTG").Value=Док.ОргКодКОАТУУ; Исключение КонецПопытки;
		// 29.07.2022 - DOCKING 393	
		
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A01", "П010_3");
 		сДел1000.Вставить("B01", "П010_4");
 		сДел1000.Вставить("C01", "П010_5");
 		сДел1000.Вставить("D01", "П010_6");
 		сДел1000.Вставить("E01", "П010_7");
 		сДел1000.Вставить("F01", "П010_8");
 		сДел1000.Вставить("G01", "П010_9");
 		сДел1000.Вставить("H01", "П010_10");
 		сДел1000.Вставить("I01", "П010_11");
 		сДел1000.Вставить("J01", "П010_12");
 		сДел1000.Вставить("K01", "П010_13");
 		сДел1000.Вставить("L01", "П010_14");
 		сДел1000.Вставить("M01", "П010_15");
 		сДел1000.Вставить("A02", "П020_3");
 		сДел1000.Вставить("B02", "П020_4");
 		сДел1000.Вставить("C02", "П020_5");
 		сДел1000.Вставить("D02", "П020_6");
 		сДел1000.Вставить("E02", "П020_7");
 		сДел1000.Вставить("F02", "П020_8");
 		сДел1000.Вставить("G02", "П020_9");
 		сДел1000.Вставить("H02", "П020_10");
 		сДел1000.Вставить("I02", "П020_11");
 		сДел1000.Вставить("J02", "П020_12");
 		сДел1000.Вставить("K02", "П020_13");
 		сДел1000.Вставить("L02", "П020_14");
 		сДел1000.Вставить("M02", "П020_15");
 		сДел1000.Вставить("A03", "П030_3");
 		сДел1000.Вставить("B03", "П030_4");
 		сДел1000.Вставить("C03", "П030_5");
 		сДел1000.Вставить("D03", "П030_6");
 		сДел1000.Вставить("E03", "П030_7");
 		сДел1000.Вставить("F03", "П030_8");
 		сДел1000.Вставить("G03", "П030_9");
 		сДел1000.Вставить("H03", "П030_10");
 		сДел1000.Вставить("I03", "П030_11");
 		сДел1000.Вставить("J03", "П030_12");
 		сДел1000.Вставить("K03", "П030_13");
 		сДел1000.Вставить("L03", "П030_14");
 		сДел1000.Вставить("M03", "П030_15");
 		сДел1000.Вставить("A04", "П040_3");
 		сДел1000.Вставить("B04", "П040_4");
 		сДел1000.Вставить("C04", "П040_5");
 		сДел1000.Вставить("D04", "П040_6");
 		сДел1000.Вставить("E04", "П040_7");
 		сДел1000.Вставить("F04", "П040_8");
 		сДел1000.Вставить("G04", "П040_9");
 		сДел1000.Вставить("H04", "П040_10");
 		сДел1000.Вставить("I04", "П040_11");
 		сДел1000.Вставить("J04", "П040_12");
 		сДел1000.Вставить("K04", "П040_13");
 		сДел1000.Вставить("L04", "П040_14");
 		сДел1000.Вставить("M04", "П040_15");
 		сДел1000.Вставить("A05", "П050_3");
 		сДел1000.Вставить("B05", "П050_4");
 		сДел1000.Вставить("C05", "П050_5");
 		сДел1000.Вставить("D05", "П050_6");
 		сДел1000.Вставить("E05", "П050_7");
 		сДел1000.Вставить("F05", "П050_8");
 		сДел1000.Вставить("G05", "П050_9");
 		сДел1000.Вставить("H05", "П050_10");
 		сДел1000.Вставить("I05", "П050_11");
 		сДел1000.Вставить("J05", "П050_12");
 		сДел1000.Вставить("K05", "П050_13");
 		сДел1000.Вставить("L05", "П050_14");
 		сДел1000.Вставить("M05", "П050_15");
 		сДел1000.Вставить("A6", "Стр060");
 		сДел1000.Вставить("A06", "П060_3");
 		сДел1000.Вставить("B06", "П060_4");
 		сДел1000.Вставить("C06", "П060_5");
 		сДел1000.Вставить("D06", "П060_6");
 		сДел1000.Вставить("E06", "П060_7");
 		сДел1000.Вставить("F06", "П060_8");
 		сДел1000.Вставить("G06", "П060_9");
 		сДел1000.Вставить("H06", "П060_10");
 		сДел1000.Вставить("I06", "П060_11");
 		сДел1000.Вставить("J06", "П060_12");
 		сДел1000.Вставить("K06", "П060_13");
 		сДел1000.Вставить("L06", "П060_14");
 		сДел1000.Вставить("M06", "П060_15");
 		сДел1000.Вставить("A07", "П070_3");
 		сДел1000.Вставить("B07", "П070_4");
 		сДел1000.Вставить("C07", "П070_5");
 		сДел1000.Вставить("D07", "П070_6");
 		сДел1000.Вставить("E07", "П070_7");
 		сДел1000.Вставить("F07", "П070_8");
 		сДел1000.Вставить("G07", "П070_9");
 		сДел1000.Вставить("H07", "П070_10");
 		сДел1000.Вставить("I07", "П070_11");
 		сДел1000.Вставить("J07", "П070_12");
 		сДел1000.Вставить("K07", "П070_13");
 		сДел1000.Вставить("L07", "П070_14");
 		сДел1000.Вставить("M07", "П070_15");
 		сДел1000.Вставить("A08", "П080_3");
 		сДел1000.Вставить("B08", "П080_4");
 		сДел1000.Вставить("C08", "П080_5");
 		сДел1000.Вставить("D08", "П080_6");
 		сДел1000.Вставить("E08", "П080_7");
 		сДел1000.Вставить("F08", "П080_8");
 		сДел1000.Вставить("G08", "П080_9");
 		сДел1000.Вставить("H08", "П080_10");
 		сДел1000.Вставить("I08", "П080_11");
 		сДел1000.Вставить("J08", "П080_12");
 		сДел1000.Вставить("K08", "П080_13");
 		сДел1000.Вставить("L08", "П080_14");
 		сДел1000.Вставить("M08", "П080_15");
 		сДел1000.Вставить("A09", "П090_3");
 		сДел1000.Вставить("B09", "П090_4");
 		сДел1000.Вставить("C09", "П090_5");
 		сДел1000.Вставить("D09", "П090_6");
 		сДел1000.Вставить("E09", "П090_7");
 		сДел1000.Вставить("F09", "П090_8");
 		сДел1000.Вставить("G09", "П090_9");
 		сДел1000.Вставить("H09", "П090_10");
 		сДел1000.Вставить("I09", "П090_11");
 		сДел1000.Вставить("J09", "П090_12");
 		сДел1000.Вставить("K09", "П090_13");
 		сДел1000.Вставить("L09", "П090_14");
 		сДел1000.Вставить("M09", "П090_15");		
 		сДел1000.Вставить("N2", "П081");
 		сДел1000.Вставить("N3", "П082");
 		сДел1000.Вставить("N4", "П083");
 		сДел1000.Вставить("N5", "П084");
 		сДел1000.Вставить("N5_1", "П085");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделII;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделII");
		
		сДел1000 = Новый Структура;		
		
 		сДел1000.Вставить("A10", "П100_3");
 		сДел1000.Вставить("B10", "П100_4");
 		сДел1000.Вставить("C10", "П100_5");
 		сДел1000.Вставить("D10", "П100_6");
 		сДел1000.Вставить("E10", "П100_7");
 		сДел1000.Вставить("F10", "П100_8");
 		сДел1000.Вставить("G10", "П100_9");
 		сДел1000.Вставить("H10", "П100_10");
 		сДел1000.Вставить("I10", "П100_11");
 		сДел1000.Вставить("J10", "П100_12");
 		сДел1000.Вставить("K10", "П100_13");
 		сДел1000.Вставить("L10", "П100_14");
 		сДел1000.Вставить("M10", "П100_15");
 		сДел1000.Вставить("N10", "П100_16");
 		сДел1000.Вставить("O10", "П100_17");
 		сДел1000.Вставить("P10", "П100_18");
 		сДел1000.Вставить("Q10", "П100_19");
 		сДел1000.Вставить("A105", "П105_3");
 		сДел1000.Вставить("B105", "П105_4");
 		сДел1000.Вставить("C105", "П105_5");
 		сДел1000.Вставить("D105", "П105_6");
 		сДел1000.Вставить("E105", "П105_7");
 		сДел1000.Вставить("F105", "П105_8");
 		сДел1000.Вставить("G105", "П105_9");
 		сДел1000.Вставить("H105", "П105_10");
 		сДел1000.Вставить("I105", "П105_11");
 		сДел1000.Вставить("J105", "П105_12");
 		сДел1000.Вставить("K105", "П105_13");
 		сДел1000.Вставить("L105", "П105_14");
 		сДел1000.Вставить("M105", "П105_15");
 		сДел1000.Вставить("N105", "П105_16");
 		сДел1000.Вставить("O105", "П105_17");
 		сДел1000.Вставить("P105", "П105_18");
 		сДел1000.Вставить("Q105", "П105_19");
 		сДел1000.Вставить("A11", "П110_3");
 		сДел1000.Вставить("B11", "П110_4");
 		сДел1000.Вставить("C11", "П110_5");
 		сДел1000.Вставить("D11", "П110_6");
 		сДел1000.Вставить("E11", "П110_7");
 		сДел1000.Вставить("F11", "П110_8");
 		сДел1000.Вставить("G11", "П110_9");
 		сДел1000.Вставить("H11", "П110_10");
 		сДел1000.Вставить("I11", "П110_11");
 		сДел1000.Вставить("J11", "П110_12");
 		сДел1000.Вставить("K11", "П110_13");
 		сДел1000.Вставить("L11", "П110_14");
 		сДел1000.Вставить("M11", "П110_15");
 		сДел1000.Вставить("N11", "П110_16");
 		сДел1000.Вставить("O11", "П110_17");
 		сДел1000.Вставить("P11", "П110_18");
 		сДел1000.Вставить("Q11", "П110_19");
 		сДел1000.Вставить("A12", "П120_3");
 		сДел1000.Вставить("B12", "П120_4");
 		сДел1000.Вставить("C12", "П120_5");
 		сДел1000.Вставить("D12", "П120_6");
 		сДел1000.Вставить("E12", "П120_7");
 		сДел1000.Вставить("F12", "П120_8");
 		сДел1000.Вставить("G12", "П120_9");
 		сДел1000.Вставить("H12", "П120_10");
 		сДел1000.Вставить("I12", "П120_11");
 		сДел1000.Вставить("J12", "П120_12");
 		сДел1000.Вставить("K12", "П120_13");
 		сДел1000.Вставить("L12", "П120_14");
 		сДел1000.Вставить("M12", "П120_15");
 		сДел1000.Вставить("N12", "П120_16");
 		сДел1000.Вставить("O12", "П120_17");
 		сДел1000.Вставить("P12", "П120_18");
 		сДел1000.Вставить("Q12", "П120_19");
 		сДел1000.Вставить("A13", "П130_3");
 		сДел1000.Вставить("B13", "П130_4");
 		сДел1000.Вставить("C13", "П130_5");
 		сДел1000.Вставить("D13", "П130_6");
 		сДел1000.Вставить("E13", "П130_7");
 		сДел1000.Вставить("F13", "П130_8");
 		сДел1000.Вставить("G13", "П130_9");
 		сДел1000.Вставить("H13", "П130_10");
 		сДел1000.Вставить("I13", "П130_11");
 		сДел1000.Вставить("J13", "П130_12");
 		сДел1000.Вставить("K13", "П130_13");
 		сДел1000.Вставить("L13", "П130_14");
 		сДел1000.Вставить("M13", "П130_15");
 		сДел1000.Вставить("N13", "П130_16");
 		сДел1000.Вставить("O13", "П130_17");
 		сДел1000.Вставить("P13", "П130_18");
 		сДел1000.Вставить("Q13", "П130_19");
 		сДел1000.Вставить("A14", "П140_3");
 		сДел1000.Вставить("B14", "П140_4");
 		сДел1000.Вставить("C14", "П140_5");
 		сДел1000.Вставить("D14", "П140_6");
 		сДел1000.Вставить("E14", "П140_7");
 		сДел1000.Вставить("F14", "П140_8");
 		сДел1000.Вставить("G14", "П140_9");
 		сДел1000.Вставить("H14", "П140_10");
 		сДел1000.Вставить("I14", "П140_11");
 		сДел1000.Вставить("J14", "П140_12");
 		сДел1000.Вставить("K14", "П140_13");
 		сДел1000.Вставить("L14", "П140_14");
 		сДел1000.Вставить("M14", "П140_15");
 		сДел1000.Вставить("N14", "П140_16");
 		сДел1000.Вставить("O14", "П140_17");
 		сДел1000.Вставить("P14", "П140_18");
 		сДел1000.Вставить("Q14", "П140_19");
 		сДел1000.Вставить("A15", "П150_3");
 		сДел1000.Вставить("B15", "П150_4");
 		сДел1000.Вставить("C15", "П150_5");
 		сДел1000.Вставить("D15", "П150_6");
 		сДел1000.Вставить("E15", "П150_7");
 		сДел1000.Вставить("F15", "П150_8");
 		сДел1000.Вставить("G15", "П150_9");
 		сДел1000.Вставить("H15", "П150_10");
 		сДел1000.Вставить("I15", "П150_11");
 		сДел1000.Вставить("J15", "П150_12");
 		сДел1000.Вставить("K15", "П150_13");
 		сДел1000.Вставить("L15", "П150_14");
 		сДел1000.Вставить("M15", "П150_15");
 		сДел1000.Вставить("N15", "П150_16");
 		сДел1000.Вставить("O15", "П150_17");
 		сДел1000.Вставить("P15", "П150_18");
 		сДел1000.Вставить("Q15", "П150_19");
 		сДел1000.Вставить("A16", "П160_3");
 		сДел1000.Вставить("B16", "П160_4");
 		сДел1000.Вставить("C16", "П160_5");
 		сДел1000.Вставить("D16", "П160_6");
 		сДел1000.Вставить("E16", "П160_7");
 		сДел1000.Вставить("F16", "П160_8");
 		сДел1000.Вставить("G16", "П160_9");
 		сДел1000.Вставить("H16", "П160_10");
 		сДел1000.Вставить("I16", "П160_11");
 		сДел1000.Вставить("J16", "П160_12");
 		сДел1000.Вставить("K16", "П160_13");
 		сДел1000.Вставить("L16", "П160_14");
 		сДел1000.Вставить("M16", "П160_15");
 		сДел1000.Вставить("N16", "П160_16");
 		сДел1000.Вставить("O16", "П160_17");
 		сДел1000.Вставить("P16", "П160_18");
 		сДел1000.Вставить("Q16", "П160_19");
 		сДел1000.Вставить("A17", "П170_3");
 		сДел1000.Вставить("B17", "П170_4");
 		сДел1000.Вставить("C17", "П170_5");
 		сДел1000.Вставить("D17", "П170_6");
 		сДел1000.Вставить("E17", "П170_7");
 		сДел1000.Вставить("F17", "П170_8");
 		сДел1000.Вставить("G17", "П170_9");
 		сДел1000.Вставить("H17", "П170_10");
 		сДел1000.Вставить("I17", "П170_11");
 		сДел1000.Вставить("J17", "П170_12");
 		сДел1000.Вставить("K17", "П170_13");
 		сДел1000.Вставить("L17", "П170_14");
 		сДел1000.Вставить("M17", "П170_15");
 		сДел1000.Вставить("N17", "П170_16");
 		сДел1000.Вставить("O17", "П170_17");
 		сДел1000.Вставить("P17", "П170_18");
 		сДел1000.Вставить("Q17", "П170_19");
 		сДел1000.Вставить("A18", "П180_3");
 		сДел1000.Вставить("B18", "П180_4");
 		сДел1000.Вставить("C18", "П180_5");
 		сДел1000.Вставить("D18", "П180_6");
 		сДел1000.Вставить("E18", "П180_7");
 		сДел1000.Вставить("F18", "П180_8");
 		сДел1000.Вставить("G18", "П180_9");
 		сДел1000.Вставить("H18", "П180_10");
 		сДел1000.Вставить("I18", "П180_11");
 		сДел1000.Вставить("J18", "П180_12");
 		сДел1000.Вставить("K18", "П180_13");
 		сДел1000.Вставить("L18", "П180_14");
 		сДел1000.Вставить("M18", "П180_15");
 		сДел1000.Вставить("N18", "П180_16");
 		сДел1000.Вставить("O18", "П180_17");
 		сДел1000.Вставить("P18", "П180_18");
 		сДел1000.Вставить("Q18", "П180_19");
 		сДел1000.Вставить("A19", "П190_3");
 		сДел1000.Вставить("B19", "П190_4");
 		сДел1000.Вставить("C19", "П190_5");
 		сДел1000.Вставить("D19", "П190_6");
 		сДел1000.Вставить("E19", "П190_7");
 		сДел1000.Вставить("F19", "П190_8");
 		сДел1000.Вставить("G19", "П190_9");
 		сДел1000.Вставить("H19", "П190_10");
 		сДел1000.Вставить("I19", "П190_11");
 		сДел1000.Вставить("J19", "П190_12");
 		сДел1000.Вставить("K19", "П190_13");
 		сДел1000.Вставить("L19", "П190_14");
 		сДел1000.Вставить("M19", "П190_15");
 		сДел1000.Вставить("N19", "П190_16");
 		сДел1000.Вставить("O19", "П190_17");
 		сДел1000.Вставить("P19", "П190_18");
 		сДел1000.Вставить("Q19", "П190_19");
 		сДел1000.Вставить("A20", "П200_3");
 		сДел1000.Вставить("B20", "П200_4");
 		сДел1000.Вставить("C20", "П200_5");
 		сДел1000.Вставить("D20", "П200_6");
 		сДел1000.Вставить("E20", "П200_7");
 		сДел1000.Вставить("F20", "П200_8");
 		сДел1000.Вставить("G20", "П200_9");
 		сДел1000.Вставить("H20", "П200_10");
 		сДел1000.Вставить("I20", "П200_11");
 		сДел1000.Вставить("J20", "П200_12");
 		сДел1000.Вставить("K20", "П200_13");
 		сДел1000.Вставить("L20", "П200_14");
 		сДел1000.Вставить("M20", "П200_15");
 		сДел1000.Вставить("N20", "П200_16");
 		сДел1000.Вставить("O20", "П200_17");
 		сДел1000.Вставить("P20", "П200_18");
 		сДел1000.Вставить("Q20", "П200_19");
 		сДел1000.Вставить("A21", "П210_3");
 		сДел1000.Вставить("B21", "П210_4");
 		сДел1000.Вставить("C21", "П210_5");
 		сДел1000.Вставить("D21", "П210_6");
 		сДел1000.Вставить("E21", "П210_7");
 		сДел1000.Вставить("F21", "П210_8");
 		сДел1000.Вставить("G21", "П210_9");
 		сДел1000.Вставить("H21", "П210_10");
 		сДел1000.Вставить("I21", "П210_11");
 		сДел1000.Вставить("J21", "П210_12");
 		сДел1000.Вставить("K21", "П210_13");
 		сДел1000.Вставить("L21", "П210_14");
 		сДел1000.Вставить("M21", "П210_15");
 		сДел1000.Вставить("N21", "П210_16");
 		сДел1000.Вставить("O21", "П210_17");
 		сДел1000.Вставить("P21", "П210_18");
 		сДел1000.Вставить("Q21", "П210_19");
 		сДел1000.Вставить("A22", "П220_3");
 		сДел1000.Вставить("B22", "П220_4");
 		сДел1000.Вставить("C22", "П220_5");
 		сДел1000.Вставить("D22", "П220_6");
 		сДел1000.Вставить("E22", "П220_7");
 		сДел1000.Вставить("F22", "П220_8");
 		сДел1000.Вставить("G22", "П220_9");
 		сДел1000.Вставить("H22", "П220_10");
 		сДел1000.Вставить("I22", "П220_11");
 		сДел1000.Вставить("J22", "П220_12");
 		сДел1000.Вставить("K22", "П220_13");
 		сДел1000.Вставить("L22", "П220_14");
 		сДел1000.Вставить("M22", "П220_15");
 		сДел1000.Вставить("N22", "П220_16");
 		сДел1000.Вставить("O22", "П220_17");
 		сДел1000.Вставить("P22", "П220_18");
 		сДел1000.Вставить("Q22", "П220_19");
 		сДел1000.Вставить("A23", "П230_3");
 		сДел1000.Вставить("B23", "П230_4");
 		сДел1000.Вставить("C23", "П230_5");
 		сДел1000.Вставить("D23", "П230_6");
 		сДел1000.Вставить("E23", "П230_7");
 		сДел1000.Вставить("F23", "П230_8");
 		сДел1000.Вставить("G23", "П230_9");
 		сДел1000.Вставить("H23", "П230_10");
 		сДел1000.Вставить("I23", "П230_11");
 		сДел1000.Вставить("J23", "П230_12");
 		сДел1000.Вставить("K23", "П230_13");
 		сДел1000.Вставить("L23", "П230_14");
 		сДел1000.Вставить("M23", "П230_15");
 		сДел1000.Вставить("N23", "П230_16");
 		сДел1000.Вставить("O23", "П230_17");
 		сДел1000.Вставить("P23", "П230_18");
 		сДел1000.Вставить("Q23", "П230_19");
 		сДел1000.Вставить("A24", "П240_3");
 		сДел1000.Вставить("B24", "П240_4");
 		сДел1000.Вставить("C24", "П240_5");
 		сДел1000.Вставить("D24", "П240_6");
 		сДел1000.Вставить("E24", "П240_7");
 		сДел1000.Вставить("F24", "П240_8");
 		сДел1000.Вставить("G24", "П240_9");
 		сДел1000.Вставить("H24", "П240_10");
 		сДел1000.Вставить("I24", "П240_11");
 		сДел1000.Вставить("J24", "П240_12");
 		сДел1000.Вставить("K24", "П240_13");
 		сДел1000.Вставить("L24", "П240_14");
 		сДел1000.Вставить("M24", "П240_15");
 		сДел1000.Вставить("N24", "П240_16");
 		сДел1000.Вставить("O24", "П240_17");
 		сДел1000.Вставить("P24", "П240_18");
 		сДел1000.Вставить("Q24", "П240_19");
 		сДел1000.Вставить("A25", "П250_3");
 		сДел1000.Вставить("B25", "П250_4");
 		сДел1000.Вставить("C25", "П250_5");
 		сДел1000.Вставить("D25", "П250_6");
 		сДел1000.Вставить("E25", "П250_7");
 		сДел1000.Вставить("F25", "П250_8");
 		сДел1000.Вставить("G25", "П250_9");
 		сДел1000.Вставить("H25", "П250_10");
 		сДел1000.Вставить("I25", "П250_11");
 		сДел1000.Вставить("J25", "П250_12");
 		сДел1000.Вставить("K25", "П250_13");
 		сДел1000.Вставить("L25", "П250_14");
 		сДел1000.Вставить("M25", "П250_15");
 		сДел1000.Вставить("N25", "П250_16");
 		сДел1000.Вставить("O25", "П250_17");
 		сДел1000.Вставить("P25", "П250_18");
 		сДел1000.Вставить("Q25", "П250_19");
 		сДел1000.Вставить("A26", "П260_3");
 		сДел1000.Вставить("B26", "П260_4");
 		сДел1000.Вставить("C26", "П260_5");
 		сДел1000.Вставить("D26", "П260_6");
 		сДел1000.Вставить("E26", "П260_7");
 		сДел1000.Вставить("F26", "П260_8");
 		сДел1000.Вставить("G26", "П260_9");
 		сДел1000.Вставить("H26", "П260_10");
 		сДел1000.Вставить("I26", "П260_11");
 		сДел1000.Вставить("J26", "П260_12");
 		сДел1000.Вставить("K26", "П260_13");
 		сДел1000.Вставить("L26", "П260_14");
 		сДел1000.Вставить("M26", "П260_15");
 		сДел1000.Вставить("N26", "П260_16");
 		сДел1000.Вставить("O26", "П260_17");
 		сДел1000.Вставить("P26", "П260_18");
 		сДел1000.Вставить("Q26", "П260_19");
 		сДел1000.Вставить("N6", "П261");
 		сДел1000.Вставить("N7", "П262");
 		сДел1000.Вставить("N8", "П263");
 		сДел1000.Вставить("N9", "П264");
 		сДел1000.Вставить("N123", "П2641");
 		сДел1000.Вставить("N101", "П265");
 		сДел1000.Вставить("N124", "П2651");
 		сДел1000.Вставить("N111", "П266");
 		сДел1000.Вставить("N121", "П267");
 		сДел1000.Вставить("N122", "П268");
 		сДел1000.Вставить("N125", "П269");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделIII_IV;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделIII_IV");
		
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A28", "П280_3");
 		сДел1000.Вставить("A29", "П290_3");
 		сДел1000.Вставить("A30", "П300_3");
 		сДел1000.Вставить("A31", "П310_3");
 		сДел1000.Вставить("A32", "П320_3");
 		сДел1000.Вставить("A33", "П330_3");
 		сДел1000.Вставить("A34", "П340_3");
 		сДел1000.Вставить("B28", "П280_4");
 		сДел1000.Вставить("B29", "П290_4");
 		сДел1000.Вставить("B30", "П300_4");
 		сДел1000.Вставить("B31", "П310_4");
 		сДел1000.Вставить("B32", "П320_4");
 		сДел1000.Вставить("B33", "П330_4");
 		сДел1000.Вставить("B34", "П340_4");
 		сДел1000.Вставить("N341", "П341");
 		сДел1000.Вставить("N342", "П342");
 		сДел1000.Вставить("A35", "П350_3");
 		сДел1000.Вставить("A36", "П360_3");
 		сДел1000.Вставить("A37", "П370_3");
 		сДел1000.Вставить("A38", "П380_3");
 		сДел1000.Вставить("A39", "П390_3");
 		сДел1000.Вставить("A40", "П400_3");
 		сДел1000.Вставить("A41", "П410_3");
 		сДел1000.Вставить("A42", "П420_3");
 		сДел1000.Вставить("B35", "П350_4");
 		сДел1000.Вставить("B36", "П360_4");
 		сДел1000.Вставить("B37", "П370_4");
 		сДел1000.Вставить("B38", "П380_4");
 		сДел1000.Вставить("B39", "П390_4");
 		сДел1000.Вставить("B40", "П400_4");
 		сДел1000.Вставить("B41", "П410_4");
 		сДел1000.Вставить("B42", "П420_4");
 		сДел1000.Вставить("C35", "П350_5");
 		сДел1000.Вставить("C36", "П360_5");
 		сДел1000.Вставить("C37", "П370_5");
 		сДел1000.Вставить("C38", "П380_5");
 		сДел1000.Вставить("C39", "П390_5");
 		сДел1000.Вставить("C40", "П400_5");
 		сДел1000.Вставить("C41", "П410_5");
 		сДел1000.Вставить("C42", "П420_5");
 		сДел1000.Вставить("N131", "П421");
 		сДел1000.Вставить("N141", "П422");
 		сДел1000.Вставить("N151", "П423");
 		сДел1000.Вставить("N161", "П424");
 		сДел1000.Вставить("N171", "П425");
 		сДел1000.Вставить("N181", "П426");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделV_VI;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделV_VI");
		
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A44", "П440_3");
 		сДел1000.Вставить("A45", "П450_3");
 		сДел1000.Вставить("A46", "П460_3");
 		сДел1000.Вставить("A47", "П470_3");
 		сДел1000.Вставить("A48", "П480_3");
 		сДел1000.Вставить("A49", "П490_3");
 		сДел1000.Вставить("A50", "П500_3");
 		сДел1000.Вставить("A51", "П510_3");
 		сДел1000.Вставить("A52", "П520_3");
 		сДел1000.Вставить("A53", "П530_3");
 		сДел1000.Вставить("A55", "П550_3");
 		сДел1000.Вставить("A56", "П560_3");
 		сДел1000.Вставить("A57", "П570_3");
 		сДел1000.Вставить("A58", "П580_3");
 		сДел1000.Вставить("A59", "П590_3");
 		сДел1000.Вставить("A60", "П600_3");
 		сДел1000.Вставить("A61", "П610_3");
 		сДел1000.Вставить("A63", "П630_3");
 		сДел1000.Вставить("B44", "П440_4");
 		сДел1000.Вставить("B45", "П450_4");
 		сДел1000.Вставить("B46", "П460_4");
 		сДел1000.Вставить("B47", "П470_4");
 		сДел1000.Вставить("B48", "П480_4");
 		сДел1000.Вставить("B49", "П490_4");
 		сДел1000.Вставить("B491", "П491_4");
 		сДел1000.Вставить("B492", "П492_4");
 		сДел1000.Вставить("B50", "П500_4");
 		сДел1000.Вставить("B51", "П510_4");
 		сДел1000.Вставить("B52", "П520_4");
 		сДел1000.Вставить("B54", "П540_4");
 		сДел1000.Вставить("B55", "П550_4");
 		сДел1000.Вставить("B56", "П560_4");
 		сДел1000.Вставить("B57", "П570_4");
 		сДел1000.Вставить("B58", "П580_4");
 		сДел1000.Вставить("B59", "П590_4");
 		сДел1000.Вставить("B60", "П600_4");
 		сДел1000.Вставить("B62", "П620_4");
 		сДел1000.Вставить("B63", "П630_4");
 		сДел1000.Вставить("N191", "П631");
 		сДел1000.Вставить("N201", "П632");
 		сДел1000.Вставить("N633", "П633");
 		сДел1000.Вставить("A64", "П640_3");
 		сДел1000.Вставить("A65", "П650_3");
 		сДел1000.Вставить("A66", "П660_3");
 		сДел1000.Вставить("A67", "П670_3");
 		сДел1000.Вставить("A68", "П680_3");
 		сДел1000.Вставить("A69", "П690_3");
 		сДел1000.Вставить("N211", "П691");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделVII_VIII;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделVII_VIII");
		
		сДел1000 = Новый Структура;	
		
 		сДел1000.Вставить("A71", "П710_3");
 		сДел1000.Вставить("B71", "П710_4");
 		сДел1000.Вставить("C71", "П710_5");
 		сДел1000.Вставить("D71", "П710_6");
 		сДел1000.Вставить("E71", "П710_7");
 		сДел1000.Вставить("F71", "П710_8");
 		сДел1000.Вставить("G71", "П710_9");
 		сДел1000.Вставить("A72", "П720_3");
 		сДел1000.Вставить("B72", "П720_4");
 		сДел1000.Вставить("C72", "П720_5");
 		сДел1000.Вставить("D72", "П720_6");
 		сДел1000.Вставить("E72", "П720_7");
 		сДел1000.Вставить("F72", "П720_8");
 		сДел1000.Вставить("G72", "П720_9");
 		сДел1000.Вставить("A73", "П730_3");
 		сДел1000.Вставить("B73", "П730_4");
 		сДел1000.Вставить("C73", "П730_5");
 		сДел1000.Вставить("D73", "П730_6");
 		сДел1000.Вставить("E73", "П730_7");
 		сДел1000.Вставить("F73", "П730_8");
 		сДел1000.Вставить("G73", "П730_9");
 		сДел1000.Вставить("A74", "П740_3");
 		сДел1000.Вставить("B74", "П740_4");
 		сДел1000.Вставить("C74", "П740_5");
 		сДел1000.Вставить("D74", "П740_6");
 		сДел1000.Вставить("E74", "П740_7");
 		сДел1000.Вставить("F74", "П740_8");
 		сДел1000.Вставить("G74", "П740_9");
 		сДел1000.Вставить("A75", "П750_3");
 		сДел1000.Вставить("B75", "П750_4");
 		сДел1000.Вставить("C75", "П750_5");
 		сДел1000.Вставить("D75", "П750_6");
 		сДел1000.Вставить("E75", "П750_7");
 		сДел1000.Вставить("F75", "П750_8");
 		сДел1000.Вставить("G75", "П750_9");
 		сДел1000.Вставить("ST_1", "Стр760");
 		сДел1000.Вставить("A76", "П760_3");
 		сДел1000.Вставить("B76", "П760_4");
 		сДел1000.Вставить("C76", "П760_5");
 		сДел1000.Вставить("D76", "П760_6");
 		сДел1000.Вставить("E76", "П760_7");
 		сДел1000.Вставить("F76", "П760_8");
 		сДел1000.Вставить("G76", "П760_9");
 		сДел1000.Вставить("ST_2", "Стр770");
 		сДел1000.Вставить("A77", "П770_3");
 		сДел1000.Вставить("B77", "П770_4");
 		сДел1000.Вставить("C77", "П770_5");
 		сДел1000.Вставить("D77", "П770_6");
 		сДел1000.Вставить("E77", "П770_7");
 		сДел1000.Вставить("F77", "П770_8");
 		сДел1000.Вставить("G77", "П770_9");
 		сДел1000.Вставить("A775", "П775_3");
 		сДел1000.Вставить("B775", "П775_4");
 		сДел1000.Вставить("C775", "П775_5");
 		сДел1000.Вставить("D775", "П775_6");
 		сДел1000.Вставить("E775", "П775_7");
 		сДел1000.Вставить("F775", "П775_8");
 		сДел1000.Вставить("G775", "П775_9");
 		сДел1000.Вставить("A78", "П780_3");
 		сДел1000.Вставить("B78", "П780_4");
 		сДел1000.Вставить("C78", "П780_5");
 		сДел1000.Вставить("D78", "П780_6");
 		сДел1000.Вставить("E78", "П780_7");
 		сДел1000.Вставить("F78", "П780_8");
 		сДел1000.Вставить("G78", "П780_9");
 		сДел1000.Вставить("A80", "П800_3");
 		сДел1000.Вставить("A81", "П810_3");
 		сДел1000.Вставить("A82", "П820_3");
 		сДел1000.Вставить("A83", "П830_3");
 		сДел1000.Вставить("A84", "П840_3");
 		сДел1000.Вставить("A85", "П850_3");
 		сДел1000.Вставить("A86", "П860_3");
 		сДел1000.Вставить("A87", "П870_3");
 		сДел1000.Вставить("A88", "П880_3");
 		сДел1000.Вставить("A89", "П890_3");
 		сДел1000.Вставить("A90", "П900_3");
 		сДел1000.Вставить("A91", "П910_3");
 		сДел1000.Вставить("A92", "П920_3");
 		сДел1000.Вставить("B80", "П800_4");
 		сДел1000.Вставить("B81", "П810_4");
 		сДел1000.Вставить("B82", "П820_4");
 		сДел1000.Вставить("B83", "П830_4");
 		сДел1000.Вставить("B84", "П840_4");
 		сДел1000.Вставить("B85", "П850_4");
 		сДел1000.Вставить("B86", "П860_4");
 		сДел1000.Вставить("B87", "П870_4");
 		сДел1000.Вставить("B88", "П880_4");
 		сДел1000.Вставить("B89", "П890_4");
 		сДел1000.Вставить("B90", "П900_4");
 		сДел1000.Вставить("B91", "П910_4");
 		сДел1000.Вставить("B92", "П920_4");
 		сДел1000.Вставить("C80", "П800_5");
 		сДел1000.Вставить("C81", "П810_5");
 		сДел1000.Вставить("C82", "П820_5");
 		сДел1000.Вставить("C83", "П830_5");
 		сДел1000.Вставить("C84", "П840_5");
 		сДел1000.Вставить("C85", "П850_5");
 		сДел1000.Вставить("C86", "П860_5");
 		сДел1000.Вставить("C87", "П870_5");
 		сДел1000.Вставить("C88", "П880_5");
 		сДел1000.Вставить("C89", "П890_5");
 		сДел1000.Вставить("C90", "П900_5");
 		сДел1000.Вставить("C91", "П910_5");
 		сДел1000.Вставить("C92", "П920_5");
 		сДел1000.Вставить("N221", "П921");
 		сДел1000.Вставить("N231", "П922");
 		сДел1000.Вставить("N241", "П923");
 		сДел1000.Вставить("N251", "П924");
 		сДел1000.Вставить("N261", "П925");
 		сДел1000.Вставить("N926", "П926");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделIX_XII;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделIX_XII");
		
		сДел1000 = Новый Структура;		
		
 		сДел1000.Вставить("A94", "П940_3");
 		сДел1000.Вставить("A95", "П950_3");
 		сДел1000.Вставить("B94", "П940_4");
 		сДел1000.Вставить("B95", "П950_4");
 		сДел1000.Вставить("C94", "П940_5");
 		сДел1000.Вставить("C95", "П950_5");
 		сДел1000.Вставить("D94", "П940_6");
 		сДел1000.Вставить("D95", "П950_6");
 		сДел1000.Вставить("N27", "П951");
 		сДел1000.Вставить("N952", "П952");
 		сДел1000.Вставить("A96", "П960_3");
 		сДел1000.Вставить("A97", "П970_3");
 		сДел1000.Вставить("A98", "П980_3");
 		сДел1000.Вставить("A111", "П1110_3");
 		сДел1000.Вставить("A112", "П1120_3");
 		сДел1000.Вставить("A113", "П1130_3");
 		сДел1000.Вставить("A114", "П1140_3");
 		сДел1000.Вставить("A115", "П1150_3");
 		сДел1000.Вставить("A116", "П1160_3");
 		сДел1000.Вставить("A1210", "П1210_3");
 		сДел1000.Вставить("A1220", "П1220_3");
 		сДел1000.Вставить("A1225", "П1225_3");
 		сДел1000.Вставить("A1230", "П1230_3");
 		сДел1000.Вставить("A1235", "П1235_3");
 		сДел1000.Вставить("A1240", "П1240_3");
 		сДел1000.Вставить("A1241", "П1241_3");
 		сДел1000.Вставить("A1242", "П1242_3");
 		сДел1000.Вставить("A1243", "П1243_3");
 		сДел1000.Вставить("A1250", "П1250_3");
 		сДел1000.Вставить("A1251", "П1251_3");
 		сДел1000.Вставить("A1252", "П1252_3");
 		сДел1000.Вставить("A1253", "П1253_3");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделXIII;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделXIII");
		
		сДел1000 = Новый Структура;
		
 		сДел1000.Вставить("A1300", "П1300_3");
 		сДел1000.Вставить("A1310", "П1310_3");
 		сДел1000.Вставить("A1311", "П1311_3");
 		сДел1000.Вставить("A1312", "П1312_3");
 		сДел1000.Вставить("A1313", "П1313_3");
 		сДел1000.Вставить("A1314", "П1314_3");
 		сДел1000.Вставить("A1315", "П1315_3");
 		сДел1000.Вставить("A1316", "П1316_3");
 		сДел1000.Вставить("A1317", "П1317_3");
 		сДел1000.Вставить("A1316_1", "Стр1316");
 		сДел1000.Вставить("A1317_1", "Стр1317");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделXIV;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделXIV");
		
		сДел1000 = Новый Структура;	
		
 		сДел1000.Вставить("A1410_3", "П1410_3");
 		сДел1000.Вставить("A1410_4", "П1410_4");
 		сДел1000.Вставить("A1410_5", "П1410_5");
 		сДел1000.Вставить("A1410_6", "П1410_6");
 		сДел1000.Вставить("A1410_7", "П1410_7");
 		сДел1000.Вставить("A1410_8", "П1410_8");
 		сДел1000.Вставить("A1410_9", "П1410_9");
 		сДел1000.Вставить("A1410_10", "П1410_10");
 		сДел1000.Вставить("A1410_11", "П1410_11");
 		сДел1000.Вставить("A1410_12", "П1410_12");
 		сДел1000.Вставить("A1410_13", "П1410_13");
 		сДел1000.Вставить("A1410_14", "П1410_14");
 		сДел1000.Вставить("A1410_15", "П1410_15");
 		сДел1000.Вставить("A1410_16", "П1410_16");
 		сДел1000.Вставить("A1410_17", "П1410_17");
 		сДел1000.Вставить("A1411_3", "П1411_3");
 		сДел1000.Вставить("A1411_4", "П1411_4");
 		сДел1000.Вставить("A1411_5", "П1411_5");
 		сДел1000.Вставить("A1411_6", "П1411_6");
 		сДел1000.Вставить("A1411_7", "П1411_7");
 		сДел1000.Вставить("A1411_8", "П1411_8");
 		сДел1000.Вставить("A1411_9", "П1411_9");
 		сДел1000.Вставить("A1411_10", "П1411_10");
 		сДел1000.Вставить("A1411_11", "П1411_11");
 		сДел1000.Вставить("A1411_12", "П1411_12");
 		сДел1000.Вставить("A1411_13", "П1411_13");
 		сДел1000.Вставить("A1411_14", "П1411_14");
 		сДел1000.Вставить("A1411_15", "П1411_15");
 		сДел1000.Вставить("A1411_16", "П1411_16");
 		сДел1000.Вставить("A1411_17", "П1411_17");
 		сДел1000.Вставить("A1412_3", "П1412_3");
 		сДел1000.Вставить("A1412_4", "П1412_4");
 		сДел1000.Вставить("A1412_5", "П1412_5");
 		сДел1000.Вставить("A1412_6", "П1412_6");
 		сДел1000.Вставить("A1412_7", "П1412_7");
 		сДел1000.Вставить("A1412_8", "П1412_8");
 		сДел1000.Вставить("A1412_9", "П1412_9");
 		сДел1000.Вставить("A1412_10", "П1412_10");
 		сДел1000.Вставить("A1412_11", "П1412_11");
 		сДел1000.Вставить("A1412_12", "П1412_12");
 		сДел1000.Вставить("A1412_13", "П1412_13");
 		сДел1000.Вставить("A1412_14", "П1412_14");
 		сДел1000.Вставить("A1412_15", "П1412_15");
 		сДел1000.Вставить("A1412_16", "П1412_16");
 		сДел1000.Вставить("A1412_17", "П1412_17");
 		сДел1000.Вставить("A1413_3", "П1413_3");
 		сДел1000.Вставить("A1413_4", "П1413_4");
 		сДел1000.Вставить("A1413_5", "П1413_5");
 		сДел1000.Вставить("A1413_6", "П1413_6");
 		сДел1000.Вставить("A1413_7", "П1413_7");
 		сДел1000.Вставить("A1413_8", "П1413_8");
 		сДел1000.Вставить("A1413_9", "П1413_9");
 		сДел1000.Вставить("A1413_10", "П1413_10");
 		сДел1000.Вставить("A1413_11", "П1413_11");
 		сДел1000.Вставить("A1413_12", "П1413_12");
 		сДел1000.Вставить("A1413_13", "П1413_13");
 		сДел1000.Вставить("A1413_14", "П1413_14");
 		сДел1000.Вставить("A1413_15", "П1413_15");
 		сДел1000.Вставить("A1413_16", "П1413_16");
 		сДел1000.Вставить("A1413_17", "П1413_17");
 		сДел1000.Вставить("A1414_1", "Стр1414");
 		сДел1000.Вставить("A1414_3", "П1414_3");
 		сДел1000.Вставить("A1414_4", "П1414_4");
 		сДел1000.Вставить("A1414_5", "П1414_5");
 		сДел1000.Вставить("A1414_6", "П1414_6");
 		сДел1000.Вставить("A1414_7", "П1414_7");
 		сДел1000.Вставить("A1414_8", "П1414_8");
 		сДел1000.Вставить("A1414_9", "П1414_9");
 		сДел1000.Вставить("A1414_10", "П1414_10");
 		сДел1000.Вставить("A1414_11", "П1414_11");
 		сДел1000.Вставить("A1414_12", "П1414_12");
 		сДел1000.Вставить("A1414_13", "П1414_13");
 		сДел1000.Вставить("A1414_14", "П1414_14");
 		сДел1000.Вставить("A1414_15", "П1414_15");
 		сДел1000.Вставить("A1414_16", "П1414_16");
 		сДел1000.Вставить("A1414_17", "П1414_17");
 		сДел1000.Вставить("A1415_3", "П1415_3");
 		сДел1000.Вставить("A1415_4", "П1415_4");
 		сДел1000.Вставить("A1415_5", "П1415_5");
 		сДел1000.Вставить("A1415_6", "П1415_6");
 		сДел1000.Вставить("A1415_7", "П1415_7");
 		сДел1000.Вставить("A1415_8", "П1415_8");
 		сДел1000.Вставить("A1415_9", "П1415_9");
 		сДел1000.Вставить("A1415_10", "П1415_10");
 		сДел1000.Вставить("A1415_11", "П1415_11");
 		сДел1000.Вставить("A1415_12", "П1415_12");
 		сДел1000.Вставить("A1415_13", "П1415_13");
 		сДел1000.Вставить("A1415_14", "П1415_14");
 		сДел1000.Вставить("A1415_15", "П1415_15");
 		сДел1000.Вставить("A1415_16", "П1415_16");
 		сДел1000.Вставить("A1415_17", "П1415_17");
 		сДел1000.Вставить("A1420_3", "П1420_3");
 		сДел1000.Вставить("A1420_5", "П1420_5");
 		сДел1000.Вставить("A1420_6", "П1420_6");
 		сДел1000.Вставить("A1420_9", "П1420_9");
 		сДел1000.Вставить("A1420_10", "П1420_10");
 		сДел1000.Вставить("A1420_11", "П1420_11");
 		сДел1000.Вставить("A1420_13", "П1420_13");
 		сДел1000.Вставить("A1420_14", "П1420_14");
 		сДел1000.Вставить("A1420_15", "П1420_15");
 		сДел1000.Вставить("A1420_16", "П1420_16");
 		сДел1000.Вставить("A1420_17", "П1420_17");
 		сДел1000.Вставить("A1421_3", "П1421_3");
 		сДел1000.Вставить("A1421_5", "П1421_5");
 		сДел1000.Вставить("A1421_6", "П1421_6");
 		сДел1000.Вставить("A1421_9", "П1421_9");
 		сДел1000.Вставить("A1421_10", "П1421_10");
 		сДел1000.Вставить("A1421_11", "П1421_11");
 		сДел1000.Вставить("A1421_13", "П1421_13");
 		сДел1000.Вставить("A1421_14", "П1421_14");
 		сДел1000.Вставить("A1421_15", "П1421_15");
 		сДел1000.Вставить("A1421_16", "П1421_16");
 		сДел1000.Вставить("A1421_17", "П1421_17");
 		сДел1000.Вставить("A1422_3", "П1422_3");
 		сДел1000.Вставить("A1422_5", "П1422_5");
 		сДел1000.Вставить("A1422_6", "П1422_6");
 		сДел1000.Вставить("A1422_9", "П1422_9");
 		сДел1000.Вставить("A1422_10", "П1422_10");
 		сДел1000.Вставить("A1422_11", "П1422_11");
 		сДел1000.Вставить("A1422_13", "П1422_13");
 		сДел1000.Вставить("A1422_14", "П1422_14");
 		сДел1000.Вставить("A1422_15", "П1422_15");
 		сДел1000.Вставить("A1422_16", "П1422_16");
 		сДел1000.Вставить("A1422_17", "П1422_17");
 		сДел1000.Вставить("A1423_1", "Стр1423");
 		сДел1000.Вставить("A1423_3", "П1423_3");
 		сДел1000.Вставить("A1423_5", "П1423_5");
 		сДел1000.Вставить("A1423_6", "П1423_6");
 		сДел1000.Вставить("A1423_9", "П1423_9");
 		сДел1000.Вставить("A1423_10", "П1423_10");
 		сДел1000.Вставить("A1423_11", "П1423_11");
 		сДел1000.Вставить("A1423_13", "П1423_13");
 		сДел1000.Вставить("A1423_14", "П1423_14");
 		сДел1000.Вставить("A1423_15", "П1423_15");
 		сДел1000.Вставить("A1423_16", "П1423_16");
 		сДел1000.Вставить("A1423_17", "П1423_17");
 		сДел1000.Вставить("A1424_3", "П1424_3");
 		сДел1000.Вставить("A1424_5", "П1424_5");
 		сДел1000.Вставить("A1424_6", "П1424_6");
 		сДел1000.Вставить("A1424_9", "П1424_9");
 		сДел1000.Вставить("A1424_10", "П1424_10");
 		сДел1000.Вставить("A1424_11", "П1424_11");
 		сДел1000.Вставить("A1424_13", "П1424_13");
 		сДел1000.Вставить("A1424_14", "П1424_14");
 		сДел1000.Вставить("A1424_15", "П1424_15");
 		сДел1000.Вставить("A1424_16", "П1424_16");
 		сДел1000.Вставить("A1424_17", "П1424_17");
 		сДел1000.Вставить("A1430_3", "П1430_3");
 		сДел1000.Вставить("A1430_4", "П1430_4");
 		сДел1000.Вставить("A1430_5", "П1430_5");
 		сДел1000.Вставить("A1430_6", "П1430_6");
 		сДел1000.Вставить("A1430_7", "П1430_7");
 		сДел1000.Вставить("A1430_8", "П1430_8");
 		сДел1000.Вставить("A1430_9", "П1430_9");
 		сДел1000.Вставить("A1430_10", "П1430_10");
 		сДел1000.Вставить("A1430_11", "П1430_11");
 		сДел1000.Вставить("A1430_12", "П1430_12");
 		сДел1000.Вставить("A1430_13", "П1430_13");
 		сДел1000.Вставить("A1430_14", "П1430_14");
 		сДел1000.Вставить("A1430_15", "П1430_15");
 		сДел1000.Вставить("A1430_16", "П1430_16");
 		сДел1000.Вставить("A1430_17", "П1430_17");
 		сДел1000.Вставить("N1431", "П1431");
 		сДел1000.Вставить("N1432", "П1432");
 		сДел1000.Вставить("N1433", "П1433");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
		
		//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаРазделXV;
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаРазделXV");
		
		сДел1000 = Новый Структура;		
		
 		сДел1000.Вставить("A1500_3", "П1500_3");
 		сДел1000.Вставить("A1500_4", "П1500_4");
 		сДел1000.Вставить("A1500_5", "П1500_5");
 		сДел1000.Вставить("A1500_6", "П1500_6");
 		сДел1000.Вставить("A1500_7", "П1500_7");
 		сДел1000.Вставить("A1500_8", "П1500_8");
 		сДел1000.Вставить("A1500_9", "П1500_9");
 		сДел1000.Вставить("A1500_10", "П1500_10");
 		сДел1000.Вставить("A1500_11", "П1500_11");
 		сДел1000.Вставить("A1510_3", "П1510_3");
 		сДел1000.Вставить("A1510_4", "П1510_4");
 		сДел1000.Вставить("A1510_5", "П1510_5");
 		сДел1000.Вставить("A1510_6", "П1510_6");
 		сДел1000.Вставить("A1510_7", "П1510_7");
 		сДел1000.Вставить("A1510_8", "П1510_8");
 		сДел1000.Вставить("A1510_9", "П1510_9");
 		сДел1000.Вставить("A1510_10", "П1510_10");
 		сДел1000.Вставить("A1510_11", "П1510_11");
 		сДел1000.Вставить("A1511_3", "П1511_3");
 		сДел1000.Вставить("A1511_4", "П1511_4");
 		сДел1000.Вставить("A1511_5", "П1511_5");
 		сДел1000.Вставить("A1511_6", "П1511_6");
 		сДел1000.Вставить("A1511_7", "П1511_7");
 		сДел1000.Вставить("A1511_8", "П1511_8");
 		сДел1000.Вставить("A1511_9", "П1511_9");
 		сДел1000.Вставить("A1511_10", "П1511_10");
 		сДел1000.Вставить("A1511_11", "П1511_11");
 		сДел1000.Вставить("A1512_3", "П1512_3");
 		сДел1000.Вставить("A1512_4", "П1512_4");
 		сДел1000.Вставить("A1512_5", "П1512_5");
 		сДел1000.Вставить("A1512_6", "П1512_6");
 		сДел1000.Вставить("A1512_7", "П1512_7");
 		сДел1000.Вставить("A1512_8", "П1512_8");
 		сДел1000.Вставить("A1512_9", "П1512_9");
 		сДел1000.Вставить("A1512_10", "П1512_10");
 		сДел1000.Вставить("A1512_11", "П1512_11");
 		сДел1000.Вставить("A1513_3", "П1513_3");
 		сДел1000.Вставить("A1513_4", "П1513_4");
 		сДел1000.Вставить("A1513_5", "П1513_5");
 		сДел1000.Вставить("A1513_6", "П1513_6");
 		сДел1000.Вставить("A1513_7", "П1513_7");
 		сДел1000.Вставить("A1513_8", "П1513_8");
 		сДел1000.Вставить("A1513_9", "П1513_9");
 		сДел1000.Вставить("A1513_10", "П1513_10");
 		сДел1000.Вставить("A1513_11", "П1513_11");
 		сДел1000.Вставить("A1514_3", "П1514_3");
 		сДел1000.Вставить("A1514_4", "П1514_4");
 		сДел1000.Вставить("A1514_5", "П1514_5");
 		сДел1000.Вставить("A1514_6", "П1514_6");
 		сДел1000.Вставить("A1514_7", "П1514_7");
 		сДел1000.Вставить("A1514_8", "П1514_8");
 		сДел1000.Вставить("A1514_9", "П1514_9");
 		сДел1000.Вставить("A1514_10", "П1514_10");
 		сДел1000.Вставить("A1514_11", "П1514_11");
 		сДел1000.Вставить("A1515_3", "П1515_3");
 		сДел1000.Вставить("A1515_4", "П1515_4");
 		сДел1000.Вставить("A1515_5", "П1515_5");
 		сДел1000.Вставить("A1515_6", "П1515_6");
 		сДел1000.Вставить("A1515_7", "П1515_7");
 		сДел1000.Вставить("A1515_8", "П1515_8");
 		сДел1000.Вставить("A1515_9", "П1515_9");
 		сДел1000.Вставить("A1515_10", "П1515_10");
 		сДел1000.Вставить("A1515_11", "П1515_11");
 		сДел1000.Вставить("A1516_3", "П1516_3");
 		сДел1000.Вставить("A1516_4", "П1516_4");
 		сДел1000.Вставить("A1516_5", "П1516_5");
 		сДел1000.Вставить("A1516_6", "П1516_6");
 		сДел1000.Вставить("A1516_7", "П1516_7");
 		сДел1000.Вставить("A1516_8", "П1516_8");
 		сДел1000.Вставить("A1516_9", "П1516_9");
 		сДел1000.Вставить("A1516_10", "П1516_10");
 		сДел1000.Вставить("A1516_11", "П1516_11");
 		сДел1000.Вставить("A1517_3", "П1517_3");
 		сДел1000.Вставить("A1517_4", "П1517_4");
 		сДел1000.Вставить("A1517_5", "П1517_5");
 		сДел1000.Вставить("A1517_6", "П1517_6");
 		сДел1000.Вставить("A1517_7", "П1517_7");
 		сДел1000.Вставить("A1517_8", "П1517_8");
 		сДел1000.Вставить("A1517_9", "П1517_9");
 		сДел1000.Вставить("A1517_10", "П1517_10");
 		сДел1000.Вставить("A1517_11", "П1517_11");
 		сДел1000.Вставить("A1518_3", "П1518_3");
 		сДел1000.Вставить("A1518_4", "П1518_4");
 		сДел1000.Вставить("A1518_5", "П1518_5");
 		сДел1000.Вставить("A1518_6", "П1518_6");
 		сДел1000.Вставить("A1518_7", "П1518_7");
 		сДел1000.Вставить("A1518_8", "П1518_8");
 		сДел1000.Вставить("A1518_9", "П1518_9");
 		сДел1000.Вставить("A1518_10", "П1518_10");
 		сДел1000.Вставить("A1518_11", "П1518_11");
 		сДел1000.Вставить("A1519_3", "П1519_3");
 		сДел1000.Вставить("A1519_4", "П1519_4");
 		сДел1000.Вставить("A1519_5", "П1519_5");
 		сДел1000.Вставить("A1519_6", "П1519_6");
 		сДел1000.Вставить("A1519_7", "П1519_7");
 		сДел1000.Вставить("A1519_8", "П1519_8");
 		сДел1000.Вставить("A1519_9", "П1519_9");
 		сДел1000.Вставить("A1519_10", "П1519_10");
 		сДел1000.Вставить("A1519_11", "П1519_11");
 		сДел1000.Вставить("A1520_3", "П1520_3");
 		сДел1000.Вставить("A1520_4", "П1520_4");
 		сДел1000.Вставить("A1520_5", "П1520_5");
 		сДел1000.Вставить("A1520_6", "П1520_6");
 		сДел1000.Вставить("A1520_7", "П1520_7");
 		сДел1000.Вставить("A1520_8", "П1520_8");
 		сДел1000.Вставить("A1520_9", "П1520_9");
 		сДел1000.Вставить("A1520_10", "П1520_10");
 		сДел1000.Вставить("A1520_11", "П1520_11");
 		сДел1000.Вставить("A1530_3", "П1530_3");
 		сДел1000.Вставить("A1530_4", "П1530_4");
 		сДел1000.Вставить("A1530_5", "П1530_5");
 		сДел1000.Вставить("A1530_6", "П1530_6");
 		сДел1000.Вставить("A1530_7", "П1530_7");
 		сДел1000.Вставить("A1530_8", "П1530_8");
 		сДел1000.Вставить("A1530_9", "П1530_9");
 		сДел1000.Вставить("A1530_10", "П1530_10");
 		сДел1000.Вставить("A1530_11", "П1530_11");
 		сДел1000.Вставить("A1531_3", "П1531_3");
 		сДел1000.Вставить("A1531_4", "П1531_4");
 		сДел1000.Вставить("A1531_5", "П1531_5");
 		сДел1000.Вставить("A1531_6", "П1531_6");
 		сДел1000.Вставить("A1531_7", "П1531_7");
 		сДел1000.Вставить("A1531_8", "П1531_8");
 		сДел1000.Вставить("A1531_9", "П1531_9");
 		сДел1000.Вставить("A1531_10", "П1531_10");
 		сДел1000.Вставить("A1531_11", "П1531_11");
 		сДел1000.Вставить("A1532_3", "П1532_3");
 		сДел1000.Вставить("A1532_4", "П1532_4");
 		сДел1000.Вставить("A1532_5", "П1532_5");
 		сДел1000.Вставить("A1532_6", "П1532_6");
 		сДел1000.Вставить("A1532_7", "П1532_7");
 		сДел1000.Вставить("A1532_8", "П1532_8");
 		сДел1000.Вставить("A1532_9", "П1532_9");
 		сДел1000.Вставить("A1532_10", "П1532_10");
 		сДел1000.Вставить("A1532_11", "П1532_11");
 		сДел1000.Вставить("A1533_3", "П1533_3");
 		сДел1000.Вставить("A1533_4", "П1533_4");
 		сДел1000.Вставить("A1533_5", "П1533_5");
 		сДел1000.Вставить("A1533_6", "П1533_6");
 		сДел1000.Вставить("A1533_7", "П1533_7");
 		сДел1000.Вставить("A1533_8", "П1533_8");
 		сДел1000.Вставить("A1533_9", "П1533_9");
 		сДел1000.Вставить("A1533_10", "П1533_10");
 		сДел1000.Вставить("A1533_11", "П1533_11");
 		сДел1000.Вставить("A1534_3", "П1534_3");
 		сДел1000.Вставить("A1534_4", "П1534_4");
 		сДел1000.Вставить("A1534_5", "П1534_5");
 		сДел1000.Вставить("A1534_6", "П1534_6");
 		сДел1000.Вставить("A1534_7", "П1534_7");
 		сДел1000.Вставить("A1534_8", "П1534_8");
 		сДел1000.Вставить("A1534_9", "П1534_9");
 		сДел1000.Вставить("A1534_10", "П1534_10");
 		сДел1000.Вставить("A1534_11", "П1534_11");
 		сДел1000.Вставить("A1535_3", "П1535_3");
 		сДел1000.Вставить("A1535_4", "П1535_4");
 		сДел1000.Вставить("A1535_5", "П1535_5");
 		сДел1000.Вставить("A1535_6", "П1535_6");
 		сДел1000.Вставить("A1535_7", "П1535_7");
 		сДел1000.Вставить("A1535_8", "П1535_8");
 		сДел1000.Вставить("A1535_9", "П1535_9");
 		сДел1000.Вставить("A1535_10", "П1535_10");
 		сДел1000.Вставить("A1535_11", "П1535_11");
 		сДел1000.Вставить("A1536_3", "П1536_3");
 		сДел1000.Вставить("A1536_4", "П1536_4");
 		сДел1000.Вставить("A1536_5", "П1536_5");
 		сДел1000.Вставить("A1536_6", "П1536_6");
 		сДел1000.Вставить("A1536_7", "П1536_7");
 		сДел1000.Вставить("A1536_8", "П1536_8");
 		сДел1000.Вставить("A1536_9", "П1536_9");
 		сДел1000.Вставить("A1536_10", "П1536_10");
 		сДел1000.Вставить("A1536_11", "П1536_11");
 		сДел1000.Вставить("A1537_3", "П1537_3");
 		сДел1000.Вставить("A1537_4", "П1537_4");
 		сДел1000.Вставить("A1537_5", "П1537_5");
 		сДел1000.Вставить("A1537_6", "П1537_6");
 		сДел1000.Вставить("A1537_7", "П1537_7");
 		сДел1000.Вставить("A1537_8", "П1537_8");
 		сДел1000.Вставить("A1537_9", "П1537_9");
 		сДел1000.Вставить("A1537_10", "П1537_10");
 		сДел1000.Вставить("A1537_11", "П1537_11");
 		сДел1000.Вставить("A1538_3", "П1538_3");
 		сДел1000.Вставить("A1538_4", "П1538_4");
 		сДел1000.Вставить("A1538_5", "П1538_5");
 		сДел1000.Вставить("A1538_6", "П1538_6");
 		сДел1000.Вставить("A1538_7", "П1538_7");
 		сДел1000.Вставить("A1538_8", "П1538_8");
 		сДел1000.Вставить("A1538_9", "П1538_9");
 		сДел1000.Вставить("A1538_10", "П1538_10");
 		сДел1000.Вставить("A1538_11", "П1538_11");
 		сДел1000.Вставить("A1539_3", "П1539_3");
 		сДел1000.Вставить("A1539_4", "П1539_4");
 		сДел1000.Вставить("A1539_5", "П1539_5");
 		сДел1000.Вставить("A1539_6", "П1539_6");
 		сДел1000.Вставить("A1539_7", "П1539_7");
 		сДел1000.Вставить("A1539_8", "П1539_8");
 		сДел1000.Вставить("A1539_9", "П1539_9");
 		сДел1000.Вставить("A1539_10", "П1539_10");
 		сДел1000.Вставить("A1539_11", "П1539_11");
 		сДел1000.Вставить("A1540_3", "П1540_3");
 		сДел1000.Вставить("A1540_4", "П1540_4");
 		сДел1000.Вставить("A1540_5", "П1540_5");
 		сДел1000.Вставить("A1540_6", "П1540_6");
 		сДел1000.Вставить("A1540_7", "П1540_7");
 		сДел1000.Вставить("A1540_8", "П1540_8");
 		сДел1000.Вставить("A1540_9", "П1540_9");
 		сДел1000.Вставить("A1540_10", "П1540_10");
 		сДел1000.Вставить("A1540_11", "П1540_11");
		
		ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецЕсли;

	КонецОтчета(Doc);
КонецПроцедуры

&НаКлиенте
Процедура Формирование_НеПрямойМетод(App,  Документ,  Бланк,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДДС;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДДС");
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets(); 
	сДел1000 = Новый Структура;
	с = Новый Структура;
	НачалоОтчета(rsMain);
		
	Если Бланк = "S0103355" Тогда
		
		с.Вставить("N1","ДатаКонцаПериодаОтчетаГод");
		с.Вставить("N2","ДатаКонцаПериодаОтчетаМесяц");
		с.Вставить("LASTDAY","ДатаКонцаПериодаОтчетаЧисло");
		
		сДел1000.Вставить("A3195_3", "П31953");
		сДел1000.Вставить("A3195_4", "П31954");
		сДел1000.Вставить("A3195_5", "П31955");
		сДел1000.Вставить("A3195_6", "П31956");
		сДел1000.Вставить("A3200_3", "П32003");
		сДел1000.Вставить("A3200_5", "П32004");
		сДел1000.Вставить("A3205_3", "П32053");
		сДел1000.Вставить("A3205_5", "П32054");
		сДел1000.Вставить("A3215_3", "П32153");
		сДел1000.Вставить("A3215_5", "П32154");
		сДел1000.Вставить("A3220_3", "П32203");
		сДел1000.Вставить("A3220_5", "П32204");
		сДел1000.Вставить("A3225_3", "П32253");
		сДел1000.Вставить("A3225_5", "П32254");
		сДел1000.Вставить("A3230_3", "П32303");
		сДел1000.Вставить("A3230_5", "П32304");
		сДел1000.Вставить("A3235_3", "П32353");
		сДел1000.Вставить("A3235_5", "П32354");
		сДел1000.Вставить("A3250_3", "П32503");
		сДел1000.Вставить("A3250_5", "П32504");
		сДел1000.Вставить("A3255_4", "П32553");
		сДел1000.Вставить("A3255_6", "П32554");
		сДел1000.Вставить("A3260_4", "П32603");
		сДел1000.Вставить("A3260_6", "П32604");
		сДел1000.Вставить("A3270_4", "П32703");
		сДел1000.Вставить("A3270_6", "П32704");
		сДел1000.Вставить("A3275_4", "П32753");
		сДел1000.Вставить("A3275_6", "П32754");
		сДел1000.Вставить("A3280_4", "П32803");
		сДел1000.Вставить("A3280_6", "П32804");
		сДел1000.Вставить("A3290_4", "П32903");
		сДел1000.Вставить("A3290_6", "П32904");
		сДел1000.Вставить("A3295_3", "П32953");
		сДел1000.Вставить("A3295_4", "П32954");
		сДел1000.Вставить("A3295_5", "П32955");
		сДел1000.Вставить("A3295_6", "П32956");
		сДел1000.Вставить("A3300_3", "П33003");
		сДел1000.Вставить("A3300_5", "П33004");
		сДел1000.Вставить("A3305_3", "П33053");
		сДел1000.Вставить("A3305_5", "П33054");
		сДел1000.Вставить("A3310_3", "П33103");
		сДел1000.Вставить("A3310_5", "П33104");
		сДел1000.Вставить("A3340_3", "П33403");
		сДел1000.Вставить("A3340_5", "П33404");
		сДел1000.Вставить("A3345_4", "П33453");
		сДел1000.Вставить("A3345_6", "П33454");
		сДел1000.Вставить("A3350_4", "П33503");
		сДел1000.Вставить("A3350_6", "П33504");
		сДел1000.Вставить("A3355_4", "П33553");
		сДел1000.Вставить("A3355_6", "П33554");
		сДел1000.Вставить("A3360_4", "П33603");
		сДел1000.Вставить("A3360_6", "П33604");
		сДел1000.Вставить("A3365_4", "П33653");
		сДел1000.Вставить("A3365_6", "П33654");
		сДел1000.Вставить("A3370_4", "П33703");
		сДел1000.Вставить("A3370_6", "П33704");
		сДел1000.Вставить("A3375_4", "П33753");
		сДел1000.Вставить("A3375_6", "П33754");
		сДел1000.Вставить("A3390_4", "П33903");
		сДел1000.Вставить("A3390_6", "П33904");
		сДел1000.Вставить("A3395_3", "П33953");
		сДел1000.Вставить("A3395_4", "П33954");
		сДел1000.Вставить("A3395_5", "П33955");
		сДел1000.Вставить("A3395_6", "П33956");
		сДел1000.Вставить("A3400_3", "П34003");
		сДел1000.Вставить("A3400_4", "П34004");
		сДел1000.Вставить("A3400_5", "П34005");
		сДел1000.Вставить("A3400_6", "П34006");
		сДел1000.Вставить("A3405_3", "П34053");
		сДел1000.Вставить("A3405_5", "П34054");
		сДел1000.Вставить("A3410_3", "П34103");
		сДел1000.Вставить("A3410_4", "П34104");
		сДел1000.Вставить("A3410_5", "П34105");
		сДел1000.Вставить("A3410_6", "П34106");
		сДел1000.Вставить("A3415_3", "П34153");
		сДел1000.Вставить("A3415_5", "П34155");
		сДел1000.Вставить("A3500_3", "П35003");
		сДел1000.Вставить("A3500_4", "П35004");
		сДел1000.Вставить("A3500_5", "П35005");
		сДел1000.Вставить("A3500_6", "П35006");
		сДел1000.Вставить("A3505_3", "П35053");
		сДел1000.Вставить("A3505_5", "П35055");
		сДел1000.Вставить("A3510_3", "П35103");
		сДел1000.Вставить("A3510_4", "П35104");
		сДел1000.Вставить("A3510_5", "П35105");
		сДел1000.Вставить("A3510_6", "П35106");
		сДел1000.Вставить("A3515_3", "П35153");
		сДел1000.Вставить("A3515_4", "П35154");
		сДел1000.Вставить("A3515_5", "П35155");
		сДел1000.Вставить("A3515_6", "П35156");
		сДел1000.Вставить("A3520_3", "П35203");
		сДел1000.Вставить("A3520_4", "П35204");
		сДел1000.Вставить("A3520_5", "П35205");
		сДел1000.Вставить("A3520_6", "П35206");
		сДел1000.Вставить("A3521_3", "П35213");
		сДел1000.Вставить("A3521_4", "П35214");
		сДел1000.Вставить("A3521_5", "П35215");
		сДел1000.Вставить("A3521_6", "П35216");
		сДел1000.Вставить("A3522_3", "П35223");
		сДел1000.Вставить("A3522_4", "П35224");
		сДел1000.Вставить("A3522_5", "П35225");
		сДел1000.Вставить("A3522_6", "П35226");
		сДел1000.Вставить("A3523_3", "П35233");
		сДел1000.Вставить("A3523_4", "П35234");
		сДел1000.Вставить("A3523_5", "П35235");
		сДел1000.Вставить("A3523_6", "П35236");
		сДел1000.Вставить("A3524_3", "П35243");
		сДел1000.Вставить("A3524_4", "П35244");
		сДел1000.Вставить("A3524_5", "П35245");
		сДел1000.Вставить("A3524_6", "П35246");
		сДел1000.Вставить("A3526_3", "П35263");
		сДел1000.Вставить("A3526_4", "П35264");
		сДел1000.Вставить("A3526_5", "П35265");
		сДел1000.Вставить("A3526_6", "П35266");
		сДел1000.Вставить("A3540_4", "П35404");
		сДел1000.Вставить("A3540_6", "П35406");
		сДел1000.Вставить("A3550_3", "П35503");
		сДел1000.Вставить("A3550_4", "П35504");
		сДел1000.Вставить("A3550_5", "П35505");
		сДел1000.Вставить("A3550_6", "П35506");
		сДел1000.Вставить("A3551_3", "П35513");
		сДел1000.Вставить("A3551_4", "П35514");
		сДел1000.Вставить("A3551_5", "П35515");
		сДел1000.Вставить("A3551_6", "П35516");
		сДел1000.Вставить("A3552_3", "П35523");
		сДел1000.Вставить("A3552_4", "П35524");
		сДел1000.Вставить("A3552_5", "П35525");
		сДел1000.Вставить("A3552_6", "П35526");
		сДел1000.Вставить("A3553_3", "П35533");
		сДел1000.Вставить("A3553_4", "П35534");
		сДел1000.Вставить("A3553_5", "П35535");
		сДел1000.Вставить("A3553_6", "П35536");
		сДел1000.Вставить("A3554_3", "П35543");
		сДел1000.Вставить("A3554_4", "П35544");
		сДел1000.Вставить("A3554_5", "П35545");
		сДел1000.Вставить("A3554_6", "П35546");
		сДел1000.Вставить("A3556_3", "П35563");
		сДел1000.Вставить("A3556_4", "П35564");
		сДел1000.Вставить("A3556_5", "П35565");
		сДел1000.Вставить("A3556_6", "П35566");
		сДел1000.Вставить("A3557_3", "П35573");
		сДел1000.Вставить("A3557_4", "П35574");
		сДел1000.Вставить("A3557_5", "П35575");
		сДел1000.Вставить("A3557_6", "П35576");
		сДел1000.Вставить("A3560_3", "П35603");
		сДел1000.Вставить("A3560_4", "П35604");
		сДел1000.Вставить("A3560_5", "П35605");
		сДел1000.Вставить("A3560_6", "П35606");
		сДел1000.Вставить("A3561_3", "П35613");
		сДел1000.Вставить("A3561_4", "П35614");
		сДел1000.Вставить("A3561_5", "П35615");
		сДел1000.Вставить("A3561_6", "П35616");
		сДел1000.Вставить("A3562_3", "П35623");
		сДел1000.Вставить("A3562_4", "П35624");
		сДел1000.Вставить("A3562_5", "П35625");
		сДел1000.Вставить("A3562_6", "П35626");
		сДел1000.Вставить("A3563_3", "П35633");
		сДел1000.Вставить("A3563_4", "П35634");
		сДел1000.Вставить("A3563_5", "П35635");
		сДел1000.Вставить("A3563_6", "П35636");
		сДел1000.Вставить("A3564_3", "П35643");
		сДел1000.Вставить("A3564_4", "П35644");
		сДел1000.Вставить("A3564_5", "П35645");
		сДел1000.Вставить("A3564_6", "П35646");
		сДел1000.Вставить("A3566_3", "П35663");
		сДел1000.Вставить("A3566_4", "П35664");
		сДел1000.Вставить("A3566_5", "П35665");
		сДел1000.Вставить("A3566_6", "П35666");
		сДел1000.Вставить("A3567_3", "П35673");
		сДел1000.Вставить("A3567_4", "П35674");
		сДел1000.Вставить("A3567_5", "П35675");
		сДел1000.Вставить("A3567_6", "П35676");
		сДел1000.Вставить("A3570_3", "П35703");
		сДел1000.Вставить("A3570_4", "П35704");
		сДел1000.Вставить("A3570_5", "П35705");
		сДел1000.Вставить("A3570_6", "П35706");
		сДел1000.Вставить("A3580_4", "П35804");
		сДел1000.Вставить("A3580_6", "П35806");
		сДел1000.Вставить("A3585_4", "П35854");
		сДел1000.Вставить("A3585_6", "П35856");			
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ПрямойМетод(App,  Документ,  Бланк,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(Бланк, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаДДС;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДДС");
	
	Doc.DisableScripts(); 	
	rsMain = Doc.DataSets();
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);
		
	Если Бланк = "S0100311" Тогда
 
		с.Вставить("N1","ДатаКонцаПериодаОтчетаГод");
		с.Вставить("N2","ДатаКонцаПериодаОтчетаМесяц");
		с.Вставить("LASTDAY","ДатаКонцаПериодаОтчетаЧисло");
		сДел1000.Вставить("A3000_3", "П30003");	
		сДел1000.Вставить("A3000_4", "П30004");	
		сДел1000.Вставить("A3005_3", "П30053");	
		сДел1000.Вставить("A3005_4", "П30054");	
		сДел1000.Вставить("A3006_3", "П30063");	
		сДел1000.Вставить("A3006_4", "П30064");	
		сДел1000.Вставить("A3010_3", "П30103");	
		сДел1000.Вставить("A3010_4", "П30104");	
		сДел1000.Вставить("A3011_3", "П30113");	
		сДел1000.Вставить("A3011_4", "П30114");	
		сДел1000.Вставить("A3015_3", "П30153");	
		сДел1000.Вставить("A3015_4", "П30154");	
		сДел1000.Вставить("A3020_3", "П30203");	
		сДел1000.Вставить("A3020_4", "П30204");	
		сДел1000.Вставить("A3025_3", "П30253");	
		сДел1000.Вставить("A3025_4", "П30254");	
		сДел1000.Вставить("A3035_3", "П30353");	
		сДел1000.Вставить("A3035_4", "П30354");	
		сДел1000.Вставить("A3040_3", "П30403");	
		сДел1000.Вставить("A3040_4", "П30404");	
		сДел1000.Вставить("A3045_3", "П30453");	
		сДел1000.Вставить("A3045_4", "П30454");	
		сДел1000.Вставить("A3050_3", "П30503");	
		сДел1000.Вставить("A3050_4", "П30504");	
		сДел1000.Вставить("A3055_3", "П30553");	
		сДел1000.Вставить("A3055_4", "П30554");	
		сДел1000.Вставить("A3095_3", "П30953");	
		сДел1000.Вставить("A3095_4", "П30954");	
		сДел1000.Вставить("A3100_3", "_П31003");
		сДел1000.Вставить("A3100_4", "_П31004");
		сДел1000.Вставить("A3105_3", "_П31053");
		сДел1000.Вставить("A3105_4", "_П31054");
		сДел1000.Вставить("A3110_3", "_П31103");
		сДел1000.Вставить("A3110_4", "_П31104");
		сДел1000.Вставить("A3115_3", "_П31153");
		сДел1000.Вставить("A3115_4", "_П31154");
		сДел1000.Вставить("A3116_3", "_П31163");
		сДел1000.Вставить("A3116_4", "_П31164");
		сДел1000.Вставить("A3117_3", "_П31173");
		сДел1000.Вставить("A3117_4", "_П31174");
		сДел1000.Вставить("A3118_3", "_П31183");
		сДел1000.Вставить("A3118_4", "_П31184");
		сДел1000.Вставить("A3135_3", "_П31353");
		сДел1000.Вставить("A3135_4", "_П31354");
		сДел1000.Вставить("A3140_3", "_П31403");
		сДел1000.Вставить("A3140_4", "_П31404");
		сДел1000.Вставить("A3145_3", "_П31453");
		сДел1000.Вставить("A3145_4", "_П31454");
		сДел1000.Вставить("A3150_3", "_П31503");
		сДел1000.Вставить("A3150_4", "_П31504");
		сДел1000.Вставить("A3155_3", "_П31553");
		сДел1000.Вставить("A3155_4", "_П31554");
		сДел1000.Вставить("A3190_3", "_П31903");
		сДел1000.Вставить("A3190_4", "_П31904");
		сДел1000.Вставить("A3195_3", "П31953");	
		сДел1000.Вставить("A3195_4", "П31954");	
		сДел1000.Вставить("A3200_3", "П32003");	
		сДел1000.Вставить("A3200_4", "П32004");	
		сДел1000.Вставить("A3205_3", "П32053");	
		сДел1000.Вставить("A3205_4", "П32054");	
		сДел1000.Вставить("A3215_3", "П32153");	
		сДел1000.Вставить("A3215_4", "П32154");	
		сДел1000.Вставить("A3220_3", "П32203");	
		сДел1000.Вставить("A3220_4", "П32204");	
		сДел1000.Вставить("A3225_3", "П32253");	
		сДел1000.Вставить("A3225_4", "П32254");	
		сДел1000.Вставить("A3230_3", "П32303");	
		сДел1000.Вставить("A3230_4", "П32304");	
		сДел1000.Вставить("A3235_3", "П32353");	
		сДел1000.Вставить("A3235_4", "П32354");	
		сДел1000.Вставить("A3250_3", "П32503");	
		сДел1000.Вставить("A3250_4", "П32504");	
		сДел1000.Вставить("A3255_3", "_П32553");
		сДел1000.Вставить("A3255_4", "_П32554");
		сДел1000.Вставить("A3260_3", "_П32603");
		сДел1000.Вставить("A3260_4", "_П32604");
		сДел1000.Вставить("A3270_3", "_П32703");
		сДел1000.Вставить("A3270_4", "_П32704");
		сДел1000.Вставить("A3275_3", "_П32753");
		сДел1000.Вставить("A3275_4", "_П32754");
		сДел1000.Вставить("A3280_3", "_П32803");
		сДел1000.Вставить("A3280_4", "_П32804");
		сДел1000.Вставить("A3290_3", "_П32903");
		сДел1000.Вставить("A3290_4", "_П32904");
		сДел1000.Вставить("A3295_3", "П32953");	
		сДел1000.Вставить("A3295_4", "П32954");	
		сДел1000.Вставить("A3300_3", "П33003");	
		сДел1000.Вставить("A3300_4", "П33004");	
		сДел1000.Вставить("A3305_3", "П33053");	
		сДел1000.Вставить("A3305_4", "П33054");	
		сДел1000.Вставить("A3310_3", "П33103");	
		сДел1000.Вставить("A3310_4", "П33104");	
		сДел1000.Вставить("A3340_3", "П33403");	
		сДел1000.Вставить("A3340_4", "П33404");	
		сДел1000.Вставить("A3345_3", "_П33453");
		сДел1000.Вставить("A3345_4", "_П33454");
		сДел1000.Вставить("A3350_3", "_П33503");
		сДел1000.Вставить("A3350_4", "_П33504");
		сДел1000.Вставить("A3355_3", "_П33553");
		сДел1000.Вставить("A3355_4", "_П33554");
		сДел1000.Вставить("A3360_3", "_П33603");
		сДел1000.Вставить("A3360_4", "_П33604");
		сДел1000.Вставить("A3365_3", "_П33653");
		сДел1000.Вставить("A3365_4", "_П33654");
		сДел1000.Вставить("A3370_3", "_П33703");
		сДел1000.Вставить("A3370_4", "_П33704");
		сДел1000.Вставить("A3375_3", "_П33753");
		сДел1000.Вставить("A3375_4", "_П33754");
		сДел1000.Вставить("A3390_3", "_П33903");
		сДел1000.Вставить("A3390_4", "_П33904");
		сДел1000.Вставить("A3395_3", "П33953");	
		сДел1000.Вставить("A3395_4", "П33954");	
		сДел1000.Вставить("A3400_3", "П34003");	
		сДел1000.Вставить("A3400_4", "П34004");	
		сДел1000.Вставить("A3405_3", "П34053");	
		сДел1000.Вставить("A3405_4", "П34054");	
		сДел1000.Вставить("A3410_3", "П34103");	
		сДел1000.Вставить("A3410_4", "П34104");	
		сДел1000.Вставить("A3415_3", "П34153");	
		сДел1000.Вставить("A3415_4", "П34154");			
	КонецЕсли;      	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
КонецПроцедуры

&НаКлиенте
Процедура Формирование_БалансЕО(App,  Документ,  БланкЕО,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкЕО, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаБаланс");
	
	Doc.DisableScripts();  	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура; 
	
	НачалоОтчета(rsMain);
	
	rsMain.Fields.Item("N3").Value = ?(Док["ССЧ"], Док["ССЧ"], "");
	// 29.07.2022 + DOCKING 393
	Попытка rsMain.Fields.Item("KATOTTG").Value=Док.ОргКодКОАТУУ; Исключение КонецПопытки;
	// 29.07.2022 - DOCKING 393	
	
	Если БланкЕО = "S0100115" Тогда
		//rsMain.Fields.Item("N4").value = ?(Док["ЗаполненоПоПСБУ"] = "v", "1", "");
		//rsMain.Fields.Item("N5").value = ?(Док["ЗаполненоПоМСФО"] = "v", "1", "");
		
		rsMain.Fields.Item("N4").value = ?( ( Док["ЗаполненоПоПСБУ"] = "v" ИЛИ Док["ЗаполненоПоПСБУ"] = "V") , "1", "");
		rsMain.Fields.Item("N5").value = ?( ( Док["ЗаполненоПоМСФО"] = "v" ИЛИ Док["ЗаполненоПоМСФО"] = "V") , "1", "");
		
		сДел1000.Вставить("A1000", "П10003");
		сДел1000.Вставить("B1000", "П10004");
		сДел1000.Вставить("A1001", "П10013");
		сДел1000.Вставить("B1001", "П10014");
		сДел1000.Вставить("A1002", "_П10023");
		сДел1000.Вставить("B1002", "_П10024");
		сДел1000.Вставить("A1005", "П10053");
		сДел1000.Вставить("B1005", "П10054");
		сДел1000.Вставить("A1010", "П10103");
		сДел1000.Вставить("B1010", "П10104");
		сДел1000.Вставить("A1011", "П10113");
		сДел1000.Вставить("B1011", "П10114");
		сДел1000.Вставить("A1012", "_П10123");
		сДел1000.Вставить("B1012", "_П10124");
		сДел1000.Вставить("A1015", "П10153");
		сДел1000.Вставить("B1015", "П10154");
		сДел1000.Вставить("A1016", "П10163");
		сДел1000.Вставить("B1016", "П10164");
		сДел1000.Вставить("A1017", "_П10173");
		сДел1000.Вставить("B1017", "_П10174");
		сДел1000.Вставить("A1020", "П10203");
		сДел1000.Вставить("B1020", "П10204");
		сДел1000.Вставить("A1021", "П10213");
		сДел1000.Вставить("B1021", "П10214");
		сДел1000.Вставить("A1022", "_П10223");
		сДел1000.Вставить("B1022", "_П10224");
		сДел1000.Вставить("A1030", "П10303");
		сДел1000.Вставить("B1030", "П10304");
		сДел1000.Вставить("A1035", "П10353");
		сДел1000.Вставить("B1035", "П10354");
		сДел1000.Вставить("A1040", "П10403");
		сДел1000.Вставить("B1040", "П10404");
		сДел1000.Вставить("A1045", "П10453");
		сДел1000.Вставить("B1045", "П10454");
		сДел1000.Вставить("A1050", "П10503");
		сДел1000.Вставить("B1050", "П10504");
		сДел1000.Вставить("A1060", "П10603");
		сДел1000.Вставить("B1060", "П10604");
		сДел1000.Вставить("A1065", "П10653");
		сДел1000.Вставить("B1065", "П10654");
		сДел1000.Вставить("A1090", "П10903");
		сДел1000.Вставить("B1090", "П10904");
		сДел1000.Вставить("A1095", "П10953");
		сДел1000.Вставить("B1095", "П10954");
		сДел1000.Вставить("A1100", "П11003");
		сДел1000.Вставить("B1100", "П11004");
		сДел1000.Вставить("A1101", "П11013");
		сДел1000.Вставить("B1101", "П11014");
		сДел1000.Вставить("A1102", "П11023");
		сДел1000.Вставить("B1102", "П11024");
		сДел1000.Вставить("A1103", "П11033");
		сДел1000.Вставить("B1103", "П11034");
		сДел1000.Вставить("A1104", "П11043");
		сДел1000.Вставить("B1104", "П11044");
		сДел1000.Вставить("A1110", "П11103");
		сДел1000.Вставить("B1110", "П11104");
		сДел1000.Вставить("A1115", "П11153");
		сДел1000.Вставить("B1115", "П11154");
		сДел1000.Вставить("A1120", "П11203");
		сДел1000.Вставить("B1120", "П11204");
		сДел1000.Вставить("A1125", "П11253");
		сДел1000.Вставить("B1125", "П11254");
		сДел1000.Вставить("A1130", "П11303");
		сДел1000.Вставить("B1130", "П11304");
		сДел1000.Вставить("A1135", "П11353");
		сДел1000.Вставить("B1135", "П11354");
		сДел1000.Вставить("A1136", "П11363");
		сДел1000.Вставить("B1136", "П11364");
		сДел1000.Вставить("A1140", "П11403");
		сДел1000.Вставить("B1140", "П11404");
		сДел1000.Вставить("A1145", "П11453");
		сДел1000.Вставить("B1145", "П11454");
		сДел1000.Вставить("A1155", "П11553");
		сДел1000.Вставить("B1155", "П11554");
		сДел1000.Вставить("A1160", "П11603");
		сДел1000.Вставить("B1160", "П11604");
		сДел1000.Вставить("A1165", "П11653");
		сДел1000.Вставить("B1165", "П11654");
		сДел1000.Вставить("A1166", "П11663");
		сДел1000.Вставить("B1166", "П11664");
		сДел1000.Вставить("A1167", "П11673");
		сДел1000.Вставить("B1167", "П11674");
		сДел1000.Вставить("A1170", "П11703");
		сДел1000.Вставить("B1170", "П11704");
		сДел1000.Вставить("A1180", "П11803");
		сДел1000.Вставить("B1180", "П11804");
		сДел1000.Вставить("A1181", "П11813");
		сДел1000.Вставить("B1181", "П11814");
		сДел1000.Вставить("A1182", "П11823");
		сДел1000.Вставить("B1182", "П11824");
		сДел1000.Вставить("A1183", "П11833");
		сДел1000.Вставить("B1183", "П11834");
		сДел1000.Вставить("A1184", "П11843");
		сДел1000.Вставить("B1184", "П11844");
		сДел1000.Вставить("A1190", "П11903");
		сДел1000.Вставить("B1190", "П11904");
		сДел1000.Вставить("A1195", "П11953");
		сДел1000.Вставить("B1195", "П11954");
		сДел1000.Вставить("A1200", "П12003");
		сДел1000.Вставить("B1200", "П12004");
		сДел1000.Вставить("A1300", "П13003");
		сДел1000.Вставить("B1300", "П13004");
		сДел1000.Вставить("A1400", "П14003");
		сДел1000.Вставить("B1400", "П14004");
		сДел1000.Вставить("A1401", "П14013");
		сДел1000.Вставить("B1401", "П14014");
		сДел1000.Вставить("A1405", "П14053");
		сДел1000.Вставить("B1405", "П14054");
		сДел1000.Вставить("A1410", "П14103");
		сДел1000.Вставить("B1410", "П14104");
		сДел1000.Вставить("A1411", "П14113");
		сДел1000.Вставить("B1411", "П14114");
		сДел1000.Вставить("A1412", "П14123");
		сДел1000.Вставить("B1412", "П14124");
		сДел1000.Вставить("A1415", "П14153");
		сДел1000.Вставить("B1415", "П14154");
		сДел1000.Вставить("A1420", "П14203");
		сДел1000.Вставить("B1420", "П14204");
		сДел1000.Вставить("A1425", "_П14253");
		сДел1000.Вставить("B1425", "_П14254");
		сДел1000.Вставить("A1430", "_П14303");
		сДел1000.Вставить("B1430", "_П14304");
		сДел1000.Вставить("A1435", "П14353");
		сДел1000.Вставить("B1435", "П14354");
		сДел1000.Вставить("A1495", "П14953");
		сДел1000.Вставить("B1495", "П14954");
		сДел1000.Вставить("A1500", "П15003");
		сДел1000.Вставить("B1500", "П15004");
		сДел1000.Вставить("A1505", "П15053");
		сДел1000.Вставить("B1505", "П15054");
		сДел1000.Вставить("A1510", "П15103");
		сДел1000.Вставить("B1510", "П15104");
		сДел1000.Вставить("A1515", "П15153");
		сДел1000.Вставить("B1515", "П15154");
		сДел1000.Вставить("A1520", "П15203");
		сДел1000.Вставить("B1520", "П15204");
		сДел1000.Вставить("A1521", "П15213");
		сДел1000.Вставить("B1521", "П15214");
		сДел1000.Вставить("A1525", "П15253");
		сДел1000.Вставить("B1525", "П15254");
		сДел1000.Вставить("A1526", "П15263");
		сДел1000.Вставить("B1526", "П15264");
		сДел1000.Вставить("A1530", "П15303");
		сДел1000.Вставить("B1530", "П15304");
		сДел1000.Вставить("A1531", "П15313");
		сДел1000.Вставить("B1531", "П15314");
		сДел1000.Вставить("A1532", "П15323");
		сДел1000.Вставить("B1532", "П15324");
		сДел1000.Вставить("A1533", "П15333");
		сДел1000.Вставить("B1533", "П15334");
		сДел1000.Вставить("A1534", "П15343");
		сДел1000.Вставить("B1534", "П15344");
		сДел1000.Вставить("A1535", "П15353");
		сДел1000.Вставить("B1535", "П15354");
		сДел1000.Вставить("A1540", "П15403");
		сДел1000.Вставить("B1540", "П15404");
		сДел1000.Вставить("A1545", "П15453");
		сДел1000.Вставить("B1545", "П15454");
		сДел1000.Вставить("A1595", "П15953");
		сДел1000.Вставить("B1595", "П15954");
		сДел1000.Вставить("A1600", "П16003");
		сДел1000.Вставить("B1600", "П16004");
		сДел1000.Вставить("A1605", "П16053");
		сДел1000.Вставить("B1605", "П16054");
		сДел1000.Вставить("A1610", "П16103");
		сДел1000.Вставить("B1610", "П16104");
		сДел1000.Вставить("A1615", "П16153");
		сДел1000.Вставить("B1615", "П16154");
		сДел1000.Вставить("A1620", "П16203");
		сДел1000.Вставить("B1620", "П16204");
		сДел1000.Вставить("A1621", "П16213");
		сДел1000.Вставить("B1621", "П16214");
		сДел1000.Вставить("A1625", "П16253");
		сДел1000.Вставить("B1625", "П16254");
		сДел1000.Вставить("A1630", "П16303");
		сДел1000.Вставить("B1630", "П16304");
		сДел1000.Вставить("A1635", "П16353");
		сДел1000.Вставить("B1635", "П16354");
		сДел1000.Вставить("A1640", "П16403");
		сДел1000.Вставить("B1640", "П16404");
		сДел1000.Вставить("A1645", "П16453");
		сДел1000.Вставить("B1645", "П16454");
		сДел1000.Вставить("A1650", "П16503");
		сДел1000.Вставить("B1650", "П16504");
		сДел1000.Вставить("A1660", "П16603");
		сДел1000.Вставить("B1660", "П16604");
		сДел1000.Вставить("A1665", "П16653");
		сДел1000.Вставить("B1665", "П16654");
		сДел1000.Вставить("A1670", "П16703");
		сДел1000.Вставить("B1670", "П16704");
		сДел1000.Вставить("A1690", "П16903");
		сДел1000.Вставить("B1690", "П16904");
		сДел1000.Вставить("A1695", "П16953");
		сДел1000.Вставить("B1695", "П16954");
		сДел1000.Вставить("A1700", "П17003");
		сДел1000.Вставить("B1700", "П17004");
		сДел1000.Вставить("A1800", "П18003");
		сДел1000.Вставить("B1800", "П18004");
		сДел1000.Вставить("A1900", "П19003");
		сДел1000.Вставить("B1900", "П19004");
		
		с.Вставить("FIRM_RUK", "ОргДиректор"); 
		с.Вставить("FIRM_BUH", "ОргБухгалтер");     	
	КонецЕсли;	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);

	КонецОтчета(Doc);
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_1ДФ(App, Документ, Бланк1ДФ, PDate, ИД)
	
	Doc  = App.OpenOrCreateByExDocID(Бланк1ДФ, 10, PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФорма1ДФ;	
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаФорма1ДФ");
	
	Если Бланк1ДФ = "J0500105" ИЛИ Бланк1ДФ = "F0500105" Тогда
		
		rsMain = Doc.DataSets("TAB1");
		rsMain.Clear();
		ДобавитьНовуюСтроку = Истина;
		НомерСтроки = 1;
		
		Пока ДобавитьНовуюСтроку Цикл
			
			СуществуетСтрока = Ложь;
			
			rsMain.Edit();
			Для Каждого Поле Из Док Цикл
				
				Если Поле.Ключ = "T1RXXXXG02_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A2").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXGFIO_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A21").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG03A_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A31").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG03_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A3").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG04A_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A41").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG04_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A4").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG05_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A5").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG06D_"+НомерСтроки Тогда
					
					Если Поле.Значение <> Дата(1,1,1) Тогда
						СуществуетСтрока = Истина;
						rsMain.Fields.Item("TAB1_A6").Value = Поле.Значение;
					КонецЕсли;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG07D_"+НомерСтроки Тогда
					
					Если Поле.Значение <> Дата(1,1,1) Тогда
						СуществуетСтрока = Истина;
						rsMain.Fields.Item("TAB1_A7").Value = Поле.Значение;
					КонецЕсли;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG08_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_A8").Value = ?(Поле.Значение <> "",Число(Поле.Значение),0);
					rsMain.Fields.Item("TAB1_A81").Value = Поле.Значение;
					
					//ИначеЕсли Поле.Ключ = "T1RXXXXG08_"+НомерСтроки Тогда
					//	 СуществуетСтрока = Истина;
					//	 rsMain.Fields.Item("TAB1_A81").Value = Поле.Значение;
					
				ИначеЕсли Поле.Ключ = "T1RXXXXG09_"+НомерСтроки Тогда
					СуществуетСтрока = Истина;
					rsMain.Fields.Item("TAB1_OZNAKA").Value = Поле.Значение;
				КонецЕсли;
				
			КонецЦикла;
			rsMain.Post();
			
			Если СуществуетСтрока = Истина тогда	
				rsMain.Append();
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДобавитьНовуюСтроку = Ложь;
				rsMain.Delete();
			КонецЕсли;
			
		КонецЦикла;
		
		rsMain = Doc.DataSets(); 	
		с = Новый Структура;  
		НачалоОтчета(rsMain);
		
		с.Вставить("PSH", "R00G01I");
		с.Вставить("PS", "R00G02I");
		с.Вставить("PN", "R00G03I");
		с.Вставить("TA31", "R01G03A");
		с.Вставить("TA3", "R01G03");
		с.Вставить("TA41", "R01G04A");
		с.Вставить("TA4", "R01G04");
		
		с.Вставить("TA31_1", "R0201G03A");
		с.Вставить("TA41_1", "R0201G04A");
		с.Вставить("TA4_1", "R0201G04");
		
		с.Вставить("TA31_2", "R0202G03A");
		с.Вставить("TA41_2", "R0202G04A");
		с.Вставить("TA4_2", "R0202G04");
		
		с.Вставить("TA31_5", "R0203G03A");
		с.Вставить("TA3_5", "R0203G03");
		с.Вставить("TA41_5", "R0203G04A");
		с.Вставить("TA4_5", "R0203G04");
		
		с.Вставить("TA31_6", "R0204G03A");
		с.Вставить("TA3_6", "R0204G03");
		с.Вставить("TA41_6", "R0204G04A");
		с.Вставить("TA4_6", "R0204G04");
		
		с.Вставить("TA31_3", "R0205G03A");
		с.Вставить("TA3_3", "R0205G03");
		с.Вставить("TA41_3", "R0205G04A");
		с.Вставить("TA4_3", "R0205G04");
		
		с.Вставить("TA31_4", "R0206G03A");
		с.Вставить("TA3_4", "R0206G03");
		с.Вставить("TA41_4", "R0206G04A");
		с.Вставить("TA4_4", "R0206G04");
		
		с.Вставить("KK", "R02G01I");
		с.Вставить("KF", "R02G02I");
		с.Вставить("KA", "R02G03I");
		
		с.Вставить("RUKINN", "HKBOS");
		с.Вставить("RUK", "HBOS");
		с.Вставить("RUKTELS", "HTELBOS");
		с.Вставить("BUHINN", "HKBUH");
		с.Вставить("BUH", "HBUH");
		с.Вставить("BUHTELS", "HTELBUH");
		
		с.Вставить("FIZINN", "HKFO");
		с.Вставить("FIZ_OS", "HFO");
		с.Вставить("PHON", "HTELFO");
		
		с.Вставить("N5", "HZ");
		с.Вставить("N4", "HZN");
		с.Вставить("N3", "HZU");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		
		КонецОтчета(Doc);	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_1ПВКв(App, Документ, БланкДСС, PDate, ИД)
	
	Doc  = App.OpenOrCreateByExDocID(БланкДСС, 10, PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ТабличныйДокументОтчетПоТруду;	
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ТабличныйДокументОтчетПоТруду");
	
	rsMain = Doc.DataSets(); 	
	с = Новый Структура;  
	сДел1000 = Новый Структура; 
	НачалоОтчета(rsMain);	
	
	Если БланкДСС="S0301120" Тогда
		Попытка
			rsMain.Fields.Item("NOMER").Value=Число(Док["КодПодразделения1"] + Док["КодПодразделения2"] + Док["КодПодразделения3"] + Док["КодПодразделения4"]);
		Исключение
			rsMain.Fields.Item("NOMER").Value ="1"; 
		КонецПопытки;
		
		//
		с.Вставить("REP_PERNM", "ПериодОтчета"); 	
		с.Вставить("FIRM_NAME", "ОргНазв");    
		
		с.Вставить("FIRM_ADR_FIZ", "ОргАдрес"); 
		с.Вставить("FIRM_ADR", "ОргЮрАдрес");         
		
		
		//с.Вставить("N_2", "ОргВЭД");             	
		//с.Вставить("N_3", "АдресПодразделение");  
		
		// DOCKING 413 + 29.06.2022
		
		//rsMain.Fields.Item("N9").Value = СокрЛП(Док["ПолеДляОчистки5"]);  	
		//с.Вставить("N1", "KVED");  
		//rsMain.Fields.Item("N11").Value = СокрЛП(Док["ПолеДляОчистки7"]);   
		
		//rsMain.Fields.Item("KATOTTG").Value=Док.КАТОТТГ;
		
		// DOCKING 556 + 26.10.2023
		//rsMain.Fields.Item("KATOTTG_FACT").Value=Док.КАТОТТГ;
		Если Лев(Док.КАТОТТГ, 2) = "UA" Тогда
			КАТОТ = Сред(Док.КАТОТТГ, 3);
			rsMain.Fields.Item("KATOTTG_FACT").Value=КАТОТ;
		Иначе
			rsMain.Fields.Item("KATOTTG_FACT").Value=Док.КАТОТТГ;
		КонецЕсли;	
		// DOCKING 556 - 26.10.2023
		
		rsMain.Fields.Item("TER_GROM1").Value=Док.ОргЮрГромада;
		rsMain.Fields.Item("TER_GROM2").Value=Док.ОргГромада;
		
		rsMain.Fields.Item("N9").Value=Док.НаименованиеПодразделения;
		
		//с.Вставить("N_1", "ПолеДляОчистки5");  
		с.Вставить("N1", "ОргВЭД");   
		//с.Вставить("N_3", "АдресПодразделение");
		
        rsMain.Fields.Item("RUK").Value=Док.ОргДиректор;
		
		Если Док.Телефон <> 0 Тогда
			rsMain.Fields.Item("VIK_TEL").Value=Док.Телефон;
		КонецЕсли;
		Если Док.EMAIL <> "" Тогда
			rsMain.Fields.Item("VIK_EMAIL").Value=Док.EMAIL;
		КонецЕсли;
		
		// DOCKING 413 - 29.06.2022

		
		
		с.Вставить("A3020_1", "П3020_1");
		с.Вставить("A3020_2", "П3020_2");
		с.Вставить("A3040_1", "П3040_1");
		с.Вставить("A3040_2", "П3040_2");
		с.Вставить("A3050_1", "П3050_1");
		с.Вставить("A3050_2", "П3050_2");
		с.Вставить("A3060_1", "П3060_1");
		с.Вставить("A3060_2", "П3060_2");
		с.Вставить("A3070_1", "П3070_1");
		с.Вставить("A3070_2", "П3070_2");
	
		с.Вставить("A3080_1", "П3080_1");
		с.Вставить("A3080_2", "П3080_2");
		с.Вставить("A3090_2", "П3090_2");
		с.Вставить("A3100_1", "П3100_1");
		с.Вставить("A3100_2", "П3100_2");
	
		с.Вставить("A4080", "П4080_1");
		с.Вставить("A4090", "П4090_1");
		с.Вставить("A4100", "П4100_1");
		с.Вставить("B4080", "П4080_2");
		с.Вставить("B4090", "П4090_2");
		с.Вставить("B4100", "П4100_2");
	
		сДел1000.Вставить("A5010", "П5010_1");
		сДел1000.Вставить("A5020", "П5020_1");
		сДел1000.Вставить("A5030", "П5030_1");
		сДел1000.Вставить("A5040", "П5040_1");
		сДел1000.Вставить("A5050", "П5050_1");
		сДел1000.Вставить("A5051", "П5051_1");
		сДел1000.Вставить("A5052", "П5052_1");
		сДел1000.Вставить("A5060", "П5060_1");
		сДел1000.Вставить("A5070", "П5070_1");
		сДел1000.Вставить("A5080", "П5080_1");
		сДел1000.Вставить("A5090", "П5090_1");
	
		с.Вставить("A7010", "П7010_1");
		с.Вставить("C7010", "П7010_3");
		с.Вставить("A7030", "П7030_1"); 
		с.Вставить("A7040", "П7040_1"); 
		сДел1000.Вставить("B7030", "П7030_2"); 
		сДел1000.Вставить("B7010", "П7010_2");
		сДел1000.Вставить("B7040", "П7040_2"); 
		
		с.Вставить("A8010", "П8010_1"); 
		с.Вставить("A8020", "П8020_1"); 
		с.Вставить("A8030", "П8030_1"); 
		с.Вставить("A8040", "П8040_1"); 
		
		//сДел1000.Вставить("A9010", "П9010_1"); 
		//сДел1000.Вставить("A9020", "П9020_1"); 
		//сДел1000.Вставить("A9030", "П8030_1"); 
		//сДел1000.Вставить("A9040", "П8040_1"); 
		//сДел1000.Вставить("A9050", "П9050_1"); 
		//сДел1000.Вставить("A9060", "П9060_1"); 
		//с.Вставить("A9070", "П9070_1"); 
		
		//с.Вставить("VIK_RUK", "ОргДиректор");
		//с.Вставить("VIK_TEL", "Телефон"); 
		//с.Вставить("VIK_EMAIL", "ЕлПочта"); 
		//с.Вставить("VIK", "ИСПОЛНИТЕЛЬ");
		//с.Вставить("FIRM_FAXORG", "Факс"); 
		
	КонецЕсли;
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
	
	КонецОтчета(Doc);
	
КонецПроцедуры

#Область ЕСВ

&НаКлиенте
Процедура Формирование_ЕСВ(App, Документ, Бланк, PDate, ИД, Приложения)
	
	ИДПарент = 0;	
	//создаем перечень	
	
	Попытка
		Doc = App.OpenOrCreateByExDocID(Бланк, 10, PDate, , ИД, 0);
		ИДПарент = Формирование_ЕСВ_ТАБПеречень(Doc, Бланк, Документ);
	Исключение
		Сообщить("Ошибка: ЕСВ, Перечень таблиц не передался. Передача остановлена");
		Doc = App.MoveToTrash(ИД);
	КонецПопытки;
	
	ЧаркодТаб1 = "";
	ЧаркодТаб4 = "";
	ЧаркодТаб5 = "";
	ЧаркодТаб6 = "";
	
	Если Бланк = "J0500109" Тогда
		 ЧаркодТаб1 = "J0510109";
		 ЧаркодТаб4 = "J0510409";
		 ЧаркодТаб5 = "J0510509";
		 ЧаркодТаб6 = "J0510609";
	ИначеЕсли Бланк = "F0500109" Тогда
		 ЧаркодТаб1 = "F0510109";
		 ЧаркодТаб4 = "F0510409";
		 ЧаркодТаб5 = "F0510509";
		 ЧаркодТаб6 = "F0510609";
	 КонецЕсли;
	 
	 Если ИДПарент <> 0 Тогда
		 // - DOCKING-321 18.08.2021
		 Doc  = App.OpenOrCreateByExDocID(Бланк, 10, PDate, ,ИД , 0);
		 // Doc.IDParent = ИДПарент; // на ЕСВ_ТАБ_Объедененная не передаем
		 Попытка
			 Формирование_ЕСВ_ТАБ_Объедененная(Doc, Бланк, Документ);
		 Исключение
			 Сообщить("Ошибка: ЕСВ, Таблица объедененная не создана");
			 Doc  = App.MoveToTrash(ИД);
		 КонецПопытки;
		 // + DOCKING-321 18.08.2021
		 
		 
		Для Каждого ЭлементМассива Из Приложения Цикл				
			Если ЭлементМассива = "Таб1" Тогда	
				//создаем таб_1.1
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб1, 10, PDate, , ИД+"P1", 0);
				Doc.IDParent = ИДПарент;	
				Попытка
					Формирование_ЕСВ_ТАБ1_1(Doc, Бланк, Документ);
				Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 1.1 не создана");
					Doc  = App.MoveToTrash(ИД+"P1");
				КонецПопытки;
				//создаем таб_1.2
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб1, 10, PDate, , ИД+"P2", 0);
				Doc.IDParent = ИДПарент;	
				Попытка
					Формирование_ЕСВ_ТАБ1_2(Doc, Бланк, Документ);
				Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 1.2 не создана");
					Doc  = App.MoveToTrash(ИД+"P2");
				КонецПопытки;
				//создаем таб_1.3
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб1, 10, PDate, , ИД+"P3", 0);
				Doc.IDParent = ИДПарент;	
				Попытка
					Формирование_ЕСВ_ТАБ1_3(Doc, Бланк, Документ);
				Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 1.3 не создана");
					Doc  = App.MoveToTrash(ИД+"P3");
				КонецПопытки;
			КонецЕсли;
			
			Если ЭлементМассива = "Таб4" Тогда
				//создаем таб_4.1
				   Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб4, 10, PDate, , ИД+"41", 0);
				   Doc.IDParent = ИДПарент;
				   Попытка
					   Формирование_ЕСВ_ТАБ4_1(Doc, Бланк, Документ);
				   Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 4.1 не создана");
					Doc  = App.MoveToTrash(ИД+"41");
				   КонецПопытки;
				//создаем таб_4.2
				   Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб4, 10, PDate, , ИД+"42", 0);
				   Doc.IDParent = ИДПарент;
				   Попытка
					   Формирование_ЕСВ_ТАБ4_2(Doc, Бланк, Документ);
				   Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 4.2 не создана");
					Doc  = App.MoveToTrash(ИД+"42");
				   КонецПопытки;
				//создаем таб_4.3
				   Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб4, 10, PDate, , ИД+"43", 0);
				   Doc.IDParent = ИДПарент;
				   Попытка
					   Формирование_ЕСВ_ТАБ4_3(Doc, Бланк, Документ);
				   Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 4.3 не создана");
					Doc  = App.MoveToTrash(ИД+"43");
				    КонецПопытки;

			КонецЕсли;
			
			Если ЭлементМассива = "Таб5" Тогда
				//создаем таб5	
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб5, 10, PDate, , ИД+"51", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_ЕСВ_ТАБ5(Doc, Бланк, Документ);
				Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 5 не создана");
					Doc  = App.MoveToTrash(ИД+"51");
				КонецПопытки;

			КонецЕсли;	
			
			Если ЭлементМассива = "Таб6" Тогда
				//создаем таб_6.1	
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб6, 10, PDate, , ИД+"61", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_ЕСВ_ТАБ6_1(Doc, Бланк, Документ);
				Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 6.1 не создана");
					Doc  = App.MoveToTrash(ИД+"61");
				КонецПопытки;
				//создаем таб_6.2	
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб6, 10, PDate, , ИД+"62", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_ЕСВ_ТАБ6_2(Doc, Бланк, Документ);
				Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 6.2 не создана");
					Doc  = App.MoveToTrash(ИД+"62");
				КонецПопытки;
				//создаем таб_6.3	
				Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб6, 10, PDate, , ИД+"63", 0);
				Doc.IDParent = ИДПарент;
				Попытка
					Формирование_ЕСВ_ТАБ6_3(Doc, Бланк, Документ);
				Исключение
					Сообщить("Ошибка: ЕСВ, Таблица 6.3 не создана");
					Doc  = App.MoveToTrash(ИД+"63");
				КонецПопытки;
		
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция Формирование_ЕСВ_ТАБПеречень(Doc, Бланк, Документ)
	ИДПарент = 0;
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		КонецОтчета(Doc);
		ИДПарент = Doc.CardCode;
		
	КонецЕсли;
	
	Возврат ИДПарент;
КонецФункции

// - DOCKING-321 18.08.2021
&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ_Объедененная(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда

		
		// 02.08.2022 + DOCKING 382
		//Doc.DisableScripts();  	
		// 02.08.2022 - DOCKING 382
		rsMain = Doc.DataSets();
		с = Новый Структура;     	
		НачалоОтчета(rsMain);
		
		// 02.08.2022 + DOCKING 382
		
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
			rsMain.Fields.Item("HZN").value = false;
			rsMain.Fields.Item("HZU").value = false;
			rsMain.Fields.Item("HZD").value = false;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			//rsMain.Fields.Item("HZN").value = Истина;
			rsMain.Fields.Item("HZ").value = false;
			rsMain.Fields.Item("HZN").value = true;
			rsMain.Fields.Item("HZU").value = false;
			rsMain.Fields.Item("HZD").value = false;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			//rsMain.Fields.Item("HZU").value = true;
			rsMain.Fields.Item("HZ").value = false;
			rsMain.Fields.Item("HZN").value = false;
			rsMain.Fields.Item("HZU").value = true;
			rsMain.Fields.Item("HZD").value = false;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			//rsMain.Fields.Item("HZD").value = true;
			rsMain.Fields.Item("HZ").value = false;
			rsMain.Fields.Item("HZN").value = false;
			rsMain.Fields.Item("HZU").value = false;
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
		Doc.DisableScripts();  	
		// 02.08.2022 - DOCKING 382
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаДекларация");
		ТЧ = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		// DOCKING 583 + 25.09.2023
		с.Вставить("A061_3", "R061G3");
		с.Вставить("A061_4", "R061G4");
		с.Вставить("A062_3", "R062G3");
		с.Вставить("A062_4", "R062G4");
		с.Вставить("A063_3", "R063G3");
		с.Вставить("A063_4", "R063G4");
		с.Вставить("A064_3", "R064G3");
		с.Вставить("A064_4", "R064G4");
		с.Вставить("A065_3", "R065G3");
		с.Вставить("A065_4", "R065G4");
		с.Вставить("A066_3", "R066G3");
		с.Вставить("A066_4", "R066G4");
		с.Вставить("A08_3", "R08G3");
		с.Вставить("A091_3", "R091G3");
		с.Вставить("A092_3", "R092G3");
		с.Вставить("A093_3", "R093G3");
		с.Вставить("A094_3", "R094G3");
		с.Вставить("A095_3", "R095G3");
		
		// DOCKING 583 - 25.09.2023
		
	//	с.Вставить("PNUM", "HNUM");
		с.Вставить("A101_3", "R101G3");
		с.Вставить("A101_4", "R101G4");
		с.Вставить("A101_5", "R101G5");
		// DOCKING 387 + 29.06.2022
		с.Вставить("A102_3", "R102G3");
		с.Вставить("A102_4", "R102G4");
		с.Вставить("A102_5", "R102G5");
		с.Вставить("A103_3", "R103G3");
		с.Вставить("A103_4", "R103G4");
		с.Вставить("A103_5", "R103G5");
		
		с.Вставить("A104_3", "R104G3");
		с.Вставить("A104_4", "R104G4");
		с.Вставить("A104_5", "R104G5");
		с.Вставить("A105_3", "R105G3");
		с.Вставить("A105_4", "R105G4");
		с.Вставить("A105_5", "R105G5");
		
		с.Вставить("A106_3", "R106G3");
		с.Вставить("A106_4", "R106G4");
		с.Вставить("A106_5", "R106G5");
		
		с.Вставить("A108_3", "R108G3");
		с.Вставить("A108_4", "R108G4");
		с.Вставить("A108_5", "R108G5");
		с.Вставить("A109_3", "R109G3");
		с.Вставить("A109_4", "R109G4");
		с.Вставить("A109_5", "R109G5");
		с.Вставить("A110_3", "R110G3");
		с.Вставить("A110_4", "R110G4");
		с.Вставить("A110_5", "R110G5");
		// DOCKING 387 - 29.06.2022
		// DOCKING 464 + 21.12.2022
		//------------------------------------
		с.Вставить("A0101_3", "R0101G3");
		с.Вставить("A0101_4", "R0101G4");
		с.Вставить("A0101_5", "R0101G5");
		
		с.Вставить("A01011_3", "R01011G3");
		с.Вставить("A01011_4", "R01011G4");
		с.Вставить("A01011_5", "R01011G5");
		//------------------------------------
		
		
		
		// DOCKING 464 - 21.12.2022		
		
		с.Вставить("A01012_3", "R01012G3");
		с.Вставить("A01012_4", "R01012G4");
		с.Вставить("A01012_5", "R01012G5");
		с.Вставить("A01013_3", "R01013G3");
		с.Вставить("A01013_4", "R01013G4");
		с.Вставить("A01013_5", "R01013G5");
		с.Вставить("A01014_3", "R01014G3");
		с.Вставить("A01014_4", "R01014G4");
		с.Вставить("A01014_5", "R01014G5");
		с.Вставить("A01015_3", "R01015G3");
		с.Вставить("A01015_4", "R01015G4");
		с.Вставить("A01015_5", "R01015G5");
		
		// DOCKING 464 + 21.12.2022
		//------------------------------------
		с.Вставить("A01016_3", "R01016G3");
		с.Вставить("A01016_4", "R01016G4");
		с.Вставить("A01016_5", "R01016G5");
		с.Вставить("A010161_3", "R010161G3");
		с.Вставить("A010161_4", "R010161G4");
		с.Вставить("A010161_5", "R010161G5");
		с.Вставить("A010162_3", "R010162G3");
		с.Вставить("A010162_4", "R010162G4");
		с.Вставить("A010162_5", "R010162G5");
		с.Вставить("A010163_3", "R010163G3");
		с.Вставить("A010163_4", "R010163G4");
		с.Вставить("A010163_5", "R010163G5");
		//------------------------------------
		с.Вставить("A0102_3", "R0102G3");
		с.Вставить("A0102_4", "R0102G4");
		с.Вставить("A0102_5", "R0102G5");
		с.Вставить("A01021_3", "R01021G3");
		с.Вставить("A01021_4", "R01021G4");
		с.Вставить("A01021_5", "R01021G5");
		с.Вставить("A01022_3", "R01022G3");
		с.Вставить("A01022_4", "R01022G4");
		с.Вставить("A01022_5", "R01022G5");
		// DOCKING 464 - 21.12.2022		
		
		с.Вставить("A01023_3", "R01023G3");
		с.Вставить("A01023_4", "R01023G4");
		с.Вставить("A01023_5", "R01023G5");
		с.Вставить("A01024_3", "R01024G3");
		с.Вставить("A01024_4", "R01024G4");
		с.Вставить("A01024_5", "R01024G5");
		с.Вставить("A01025_3", "R01025G3");
		с.Вставить("A01025_4", "R01025G4");
		с.Вставить("A01025_5", "R01025G5");
		
		// DOCKING 464 + 21.12.2022
		//------------------------------------
		с.Вставить("A01026_3", "R01026G3");
		с.Вставить("A01026_4", "R01026G4");
		с.Вставить("A01026_5", "R01026G5");
		с.Вставить("A010261_3", "R010261G3");
		с.Вставить("A010261_4", "R010261G4");
		с.Вставить("A010261_5", "R010261G5");
		с.Вставить("A010262_3", "R010262G3");
		с.Вставить("A010262_4", "R010262G4");
		с.Вставить("A010262_5", "R010262G5");
		с.Вставить("A010263_3", "R010263G3");
		с.Вставить("A010263_4", "R010263G4");
		с.Вставить("A010263_5", "R010263G5");
		//------------------------------------
		с.Вставить("A0103_3", "R0103G3");
		с.Вставить("A0103_4", "R0103G4");
		с.Вставить("A0103_5", "R0103G5");
		с.Вставить("A01031_3", "R01031G3");
		с.Вставить("A01031_4", "R01031G4");
		с.Вставить("A01031_5", "R01031G5");
		с.Вставить("A01032_3", "R01032G3");
		с.Вставить("A01032_4", "R01032G4");
		с.Вставить("A01032_5", "R01032G5");
		с.Вставить("A010321_3", "R010321G3");
		с.Вставить("A010321_4", "R010321G4");
		с.Вставить("A010321_5", "R010321G5");
		// DOCKING 464 - 21.12.2022		
		
		с.Вставить("A01033_3", "R01033G3");
		с.Вставить("A01033_4", "R01033G4");
		с.Вставить("A01033_5", "R01033G5");
		с.Вставить("A010331_3", "R010331G3");
		с.Вставить("A010331_4", "R010331G4");
		с.Вставить("A010331_5", "R010331G5");
		с.Вставить("A01034_3", "R01034G3");
		с.Вставить("A01034_4", "R01034G4");
		с.Вставить("A01034_5", "R01034G5");
		с.Вставить("A010341_3", "R010341G3");
		с.Вставить("A010341_4", "R010341G4");
		с.Вставить("A010341_5", "R010341G5");
		с.Вставить("A01035_3", "R01035G3");
		с.Вставить("A01035_4", "R01035G4");
		с.Вставить("A01035_5", "R01035G5");
		//Если НЕ Объект.Конфигурация = "ERP" Тогда 
			с.Вставить("A01036_3", "R01036G3");
			с.Вставить("A01036_4", "R01036G4");
			с.Вставить("A01036_5", "R01036G5");
		//КонецЕсли;
		
		// DOCKING 464 + 21.12.2022
		//------------------------------------
		с.Вставить("A01037_3", "R01037G3");
		с.Вставить("A01037_4", "R01037G4");
		с.Вставить("A01037_5", "R01037G5");
		с.Вставить("A010371_3", "R010371G3");
		с.Вставить("A010371_4", "R010371G4");
		с.Вставить("A010371_5", "R010371G5");
		с.Вставить("A010372_3", "R010372G3");
		с.Вставить("A010372_4", "R010372G4");
		с.Вставить("A010372_5", "R010372G5");
		с.Вставить("A010373_3", "R010373G3");
		с.Вставить("A010373_4", "R010373G4");
		с.Вставить("A010373_5", "R010373G5");
		//------------------------------------
		с.Вставить("A0104_3", "R0104G3");
		с.Вставить("A0104_4", "R0104G4");
		с.Вставить("A0104_5", "R0104G5");
		// DOCKING 464 - 21.12.2022	
	
		с.Вставить("A01041_3", "R01041G3");
		с.Вставить("A01041_4", "R01041G4");
		с.Вставить("A01041_5", "R01041G5");
		с.Вставить("A010411_3", "R010411G3");
		с.Вставить("A010411_4", "R010411G4");
		с.Вставить("A010411_5", "R010411G5");
		с.Вставить("A010412_3", "R010412G3");
		с.Вставить("A010412_4", "R010412G4");
		с.Вставить("A010412_5", "R010412G5");
		с.Вставить("A010413_3", "R010413G3");
		с.Вставить("A010413_4", "R010413G4");
		с.Вставить("A010413_5", "R010413G5");
		с.Вставить("A01042_3", "R01042G3");
		с.Вставить("A01042_4", "R01042G4");
		с.Вставить("A01042_5", "R01042G5");
		с.Вставить("A01043_3", "R01043G3");
		с.Вставить("A01043_4", "R01043G4");
		с.Вставить("A01043_5", "R01043G5");
		
		// DOCKING 464 + 21.12.2022
		//------------------------------------
		с.Вставить("A01044_3", "R01044G3");
		с.Вставить("A01044_4", "R01044G4");
		с.Вставить("A01044_5", "R01044G5");
		с.Вставить("A010441_3", "R010441G3");
		с.Вставить("A010441_4", "R010441G4");
		с.Вставить("A010441_5", "R010441G5");
		с.Вставить("A010442_3", "R010442G3");
		с.Вставить("A010442_4", "R010442G4");
		с.Вставить("A010442_5", "R010442G5");
		с.Вставить("A010443_3", "R010443G3");
		с.Вставить("A010443_4", "R010443G4");
		с.Вставить("A010443_5", "R010443G5");
		//------------------------------------
		с.Вставить("A0105_3", "R0105G3");
		с.Вставить("A01051_3", "R01051G3");
		с.Вставить("A01051_4", "R01051G4");
		с.Вставить("A01051_5", "R01051G5");
		//------------------------------------
		
		с.Вставить("A0106_3", "R0106G3");
		с.Вставить("A0106_4", "R0106G4");
		с.Вставить("A0106_5", "R0106G5");
		
		с.Вставить("A01061_3", "R01061G3");
		с.Вставить("A01061_4", "R01061G4");
		с.Вставить("A01061_5", "R01061G5");
		с.Вставить("A010611_3", "R010611G3");
		с.Вставить("A010611_4", "R010611G4");
		с.Вставить("A010611_5", "R010611G5");
		с.Вставить("A010612_3", "R010612G3");
		с.Вставить("A010612_4", "R010612G4");
		с.Вставить("A010612_5", "R010612G5");
		с.Вставить("A010613_3", "R010613G3");
		с.Вставить("A010613_4", "R010613G4");
		с.Вставить("A010613_5", "R010613G5");
		с.Вставить("A01062_3", "R01062G3");
		с.Вставить("A01062_4", "R01062G4");
		с.Вставить("A01062_5", "R01062G5");
		с.Вставить("A01063_3", "R01063G3");
		с.Вставить("A01063_4", "R01063G4");
		с.Вставить("A01063_5", "R01063G5");
		//------------------------------------
		с.Вставить("A01064_3", "R01064G3");
		с.Вставить("A01064_4", "R01064G4");
		с.Вставить("A01064_5", "R01064G5");
		с.Вставить("A010641_3", "R010641G3");
		с.Вставить("A010641_4", "R010641G4");
		с.Вставить("A010641_5", "R010641G5");
		с.Вставить("A010642_3", "R010642G3");
		с.Вставить("A010642_4", "R010642G4");
		с.Вставить("A010642_5", "R010642G5");
		с.Вставить("A010643_3", "R010643G3");
		с.Вставить("A010643_4", "R010643G4");
		с.Вставить("A010643_5", "R010643G5");
		//------------------------------------
		с.Вставить("A0107_3", "R0107G3");
		с.Вставить("A0107_4", "R0107G4");
		с.Вставить("A0107_5", "R0107G5");
		
		с.Вставить("A0108_3", "R0108G3");
		// DOCKING 464 - 21.12.2022
		//------------2 Раздел---------------------
        с.Вставить("A0201_3", "R0201G3");
		с.Вставить("A0201_4", "R0201G4");
		с.Вставить("A0201_5", "R0201G5");
		с.Вставить("A0202_3", "R0202G3");
		с.Вставить("A0202_4", "R0202G4");
		с.Вставить("A0202_5", "R0202G5");
		с.Вставить("A02021_3", "R02021G3");
		с.Вставить("A02021_4", "R02021G4");
		с.Вставить("A02021_5", "R02021G5");
		с.Вставить("A02022_3", "R02022G3");
		с.Вставить("A02022_4", "R02022G4");
		с.Вставить("A02022_5", "R02022G5");
		
		с.Вставить("A0203_3", "R0203G3");
		с.Вставить("A0203_4", "R0203G4");
		с.Вставить("A0203_5", "R0203G5");
		с.Вставить("A0204_3", "R0204G3");
		с.Вставить("A0204_4", "R0204G4");
		с.Вставить("A0204_5", "R0204G5");
		с.Вставить("A02041_3", "R02041G3");
		с.Вставить("A02041_4", "R02041G4");
		с.Вставить("A02041_5", "R02041G5");
		с.Вставить("A02042_3", "R02042G3");
		с.Вставить("A02042_4", "R02042G4");
		с.Вставить("A02042_5", "R02042G5");
		
		с.Вставить("A0205_3", "R0205G3");
		с.Вставить("A0205_4", "R0205G4");
		с.Вставить("A0205_5", "R0205G5");
		с.Вставить("A02051_3", "R02051G3");
		с.Вставить("A02051_4", "R02051G4");
		с.Вставить("A02051_5", "R02051G5");
		с.Вставить("A02052_3", "R02052G3");
		с.Вставить("A02052_4", "R02052G4");
		с.Вставить("A02052_5", "R02052G5");
		
		с.Вставить("A0206_3", "R0206G3");
		с.Вставить("A0206_4", "R0206G4");
		с.Вставить("A0206_5", "R0206G5");
		с.Вставить("A02061_3", "R02061G3");
		с.Вставить("A02061_4", "R02061G4");
		с.Вставить("A02061_5", "R02061G5");
		с.Вставить("A02062_3", "R02062G3");
		с.Вставить("A02062_4", "R02062G4");
		с.Вставить("A02062_5", "R02062G5");
		
		с.Вставить("A0207_3", "R0207G3");
		с.Вставить("A02071_3", "R02071G3");
		с.Вставить("A02071_5", "R02071G4");
		с.Вставить("A02071_5", "R02071G5");
		
		с.Вставить("A0208_3", "R0208G3");
		с.Вставить("A0208_4", "R0208G4");
		с.Вставить("A0208_5", "R0208G5");
		с.Вставить("A02081_3", "R02081G3");
		с.Вставить("A02081_4", "R02081G4");
		с.Вставить("A02081_5", "R02081G5");
		с.Вставить("A02082_3", "R02082G3");
		с.Вставить("A02082_4", "R02082G4");
		с.Вставить("A02082_5", "R02082G5");
		
		с.Вставить("A0209_3", "R0209G3");
		с.Вставить("A0209_4", "R0209G4");
		с.Вставить("A0209_5", "R0209G5");
		с.Вставить("A02091_3", "R02091G3");
		с.Вставить("A02091_4", "R02091G4");
		с.Вставить("A02091_5", "R02091G5");
		с.Вставить("A02092_3", "R02092G3");
		с.Вставить("A02092_4", "R02092G4");
		с.Вставить("A02092_5", "R02092G5");
		
		с.Вставить("A02010_3", "R02010G3");
		с.Вставить("A02010_4", "R02010G4");
		с.Вставить("A02010_5", "R02010G5");
		с.Вставить("A020101_3", "R020101G3");
		с.Вставить("A020101_4", "R020101G4");
		с.Вставить("A020101_5", "R020101G5");
		с.Вставить("A020102_3", "R020102G3");
		с.Вставить("A020102_4", "R020102G4");
		с.Вставить("A020102_5", "R020102G5");
		
		с.Вставить("A02011_3", "R02011G3");
		
		с.Вставить("A020111_3", "R020111G3");
		с.Вставить("A020111_4", "R020111G4");
		с.Вставить("A020111_5", "R020111G5");
				
		с.Вставить("A02012_3", "R02012G3");
		с.Вставить("A02012_4", "R02012G4");
		с.Вставить("A02012_5", "R02012G5");
		с.Вставить("A020121_3", "R020121G3");
		с.Вставить("A020121_4", "R020121G4");
		с.Вставить("A020121_5", "R020121G5");
		с.Вставить("A020122_3", "R020122G3");
		с.Вставить("A020122_4", "R020122G4");
		с.Вставить("A020122_5", "R020122G5");
		
		
		
		с.Вставить("A02013_3", "R02013G3");
		с.Вставить("A02013_4", "R02013G4");
		с.Вставить("A02013_5", "R02013G5");
		
		с.Вставить("A02014_3", "R02014G3");
		
		с.Вставить("A02015_3", "R02015G3");
		с.Вставить("A02015_4", "R02015G4");
		с.Вставить("A02015_5", "R02015G5");
		
		с.Вставить("A02016_3", "R02016G3");
		
		
		//------------3 Раздел---------------------
		
        с.Вставить("A0301_3", "R0301G3");
		с.Вставить("A0301_4", "R0301G4");
		с.Вставить("A0301_5", "R0301G5");
		с.Вставить("A0302_3", "R0302G3");
		с.Вставить("A0302_4", "R0302G4");
		с.Вставить("A0302_5", "R0302G5");
		с.Вставить("A0303_3", "R0303G3");
		с.Вставить("A0303_4", "R0303G4");
		с.Вставить("A0303_5", "R0303G5");
		с.Вставить("A0304_3", "R0304G3");
		с.Вставить("A0304_4", "R0304G4");
		с.Вставить("A0304_5", "R0304G5");
		
		с.Вставить("A0305_3", "R0305G3");
		с.Вставить("A03051_3", "R03051G3");
		с.Вставить("A03051_4", "R03051G4");
		с.Вставить("A03051_5", "R03051G5");
		с.Вставить("A0306_3", "R0306G3");
		с.Вставить("A0306_4", "R0306G4");
		с.Вставить("A0306_5", "R0306G5");
		
		с.Вставить("A0307_3", "R0307G3");
		
		//-----------------------------------------
		
		//с.Вставить("N1", "HJAR");
		//
		//rsTab = Doc.DataSets("TAB1");
		//rsTab.Clear();
		//rsTab.Edit();
		//Для Каждого Поле Из ТЧ Цикл   
		//	Если Поле.Ключ = "T1R" Тогда
		//		Для каждого Стр Из Поле.Значение Цикл
		//			
		//			rsTab.Fields.Item("TAB1_A2").Value = Стр.T1RXXXXG2S;
		//			
		//			rsTab.Post();
		//			rsTab.Append();
		//		КонецЦикла;
		//		
		//	КонецЕсли;
		//КонецЦикла;
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);	
		
	КонецЕсли;

КонецПроцедуры
// + DOCKING-321 18.08.2021

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ1_1(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 1;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "П1T1R" Тогда
			Если Поле.Значение.Количество() > 0 И Док.П1T1R[0].П1T1RXXXXG7S <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
					rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.П1T1RXXXXG5;		
					rsTab.Fields.Item("ST").Value = ?(СтрМассива.П1T1RXXXXG6 = "Ч",1,0);
					rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.П1T1RXXXXG7S;	
					rsTab.Fields.Item("LN").Value = СтрМассива.П1T1RXXXXG111S;	
					rsTab.Fields.Item("NM").Value = СтрМассива.П1T1RXXXXG112S;	
					rsTab.Fields.Item("FTN").Value = СтрМассива.П1T1RXXXXG113S;
					Если СтрМассива.П1T1RXXXXG8 <> 0 Тогда 
						rsTab.Fields.Item("ZO").Value = СтрМассива.П1T1RXXXXG8;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG9 <> 0 Тогда 
						rsTab.Fields.Item("PAY_TP").Value = СтрМассива.П1T1RXXXXG9;
					КонецЕсли;
				    Если СтрМассива.П1T1RXXXXG101 <> 0 Тогда 
						rsTab.Fields.Item("PAY_MNTH").Value = СтрМассива.П1T1RXXXXG101;
					КонецЕсли;
				    Если СтрМассива.П1T1RXXXXG12 <> 0 Тогда
						rsTab.Fields.Item("KD_NP").Value = СтрМассива.П1T1RXXXXG12;	
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG13 <> 0 Тогда
						rsTab.Fields.Item("KD_NZP").Value = СтрМассива.П1T1RXXXXG13;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG14 <> 0 Тогда	
						rsTab.Fields.Item("KD_PTV").Value = СтрМассива.П1T1RXXXXG14;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG15 <> 0 Тогда	
						rsTab.Fields.Item("KD_VP").Value = СтрМассива.П1T1RXXXXG15;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG16 <> 0 Тогда	
						rsTab.Fields.Item("SUM_TOTAL").Value = СтрМассива.П1T1RXXXXG16;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG17 <> 0 Тогда
						rsTab.Fields.Item("SUM_MAX").Value = СтрМассива.П1T1RXXXXG17;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG18 <> 0 Тогда
						rsTab.Fields.Item("SUM_DIFF").Value = СтрМассива.П1T1RXXXXG18;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG19 <> 0 Тогда
						rsTab.Fields.Item("SUM_INS").Value = СтрМассива.П1T1RXXXXG19;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG20 <> 0 Тогда
						rsTab.Fields.Item("SUM_NARAH").Value = СтрМассива.П1T1RXXXXG20;
					КонецЕсли;	
					rsTab.Fields.Item("OTK").Value = СтрМассива.П1T1RXXXXG21;	
					rsTab.Fields.Item("EXP").Value = СтрМассива.П1T1RXXXXG22;	
					rsTab.Fields.Item("NRC").Value = СтрМассива.П1T1RXXXXG23;	
					rsTab.Fields.Item("NRM").Value = СтрМассива.П1T1RXXXXG24;
					Если СтрМассива.П1T1RXXXXG102 <> 0 Тогда
						rsTab.Fields.Item("PAY_YEAR").Value = СтрМассива.П1T1RXXXXG102;
					КонецЕсли;
					Если СтрМассива.П1T1RXXXXG25 <> 0 Тогда
						rsTab.Fields.Item("OZN").Value = СтрМассива.П1T1RXXXXG25;
					КонецЕсли;
		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ1_2(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 2;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "П2T1R" Тогда
			Если Поле.Значение.Количество() > 0 И Док.П2T1R[0].П2T1RXXXXG7S <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
					rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.П2T1RXXXXG5;		
					rsTab.Fields.Item("ST").Value = ?(СтрМассива.П2T1RXXXXG6 = "Ч",1,0);
					rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.П2T1RXXXXG7S;	
					rsTab.Fields.Item("LN").Value = СтрМассива.П2T1RXXXXG111S;	
					rsTab.Fields.Item("NM").Value = СтрМассива.П2T1RXXXXG112S;	
					rsTab.Fields.Item("FTN").Value = СтрМассива.П2T1RXXXXG113S;
					Если СтрМассива.П2T1RXXXXG8 <> 0 Тогда 
						rsTab.Fields.Item("ZO").Value = СтрМассива.П2T1RXXXXG8;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG9 <> 0 Тогда 
						rsTab.Fields.Item("PAY_TP").Value = СтрМассива.П2T1RXXXXG9;
					КонецЕсли;
				    Если СтрМассива.П2T1RXXXXG101 <> 0 Тогда 
						rsTab.Fields.Item("PAY_MNTH").Value = СтрМассива.П2T1RXXXXG101;
					КонецЕсли;
				    Если СтрМассива.П2T1RXXXXG12 <> 0 Тогда
						rsTab.Fields.Item("KD_NP").Value = СтрМассива.П2T1RXXXXG12;	
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG13 <> 0 Тогда
						rsTab.Fields.Item("KD_NZP").Value = СтрМассива.П2T1RXXXXG13;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG14 <> 0 Тогда	
						rsTab.Fields.Item("KD_PTV").Value = СтрМассива.П2T1RXXXXG14;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG15 <> 0 Тогда	
						rsTab.Fields.Item("KD_VP").Value = СтрМассива.П2T1RXXXXG15;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG16 <> 0 Тогда	
						rsTab.Fields.Item("SUM_TOTAL").Value = СтрМассива.П2T1RXXXXG16;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG17 <> 0 Тогда
						rsTab.Fields.Item("SUM_MAX").Value = СтрМассива.П2T1RXXXXG17;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG18 <> 0 Тогда
						rsTab.Fields.Item("SUM_DIFF").Value = СтрМассива.П2T1RXXXXG18;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG19 <> 0 Тогда
						rsTab.Fields.Item("SUM_INS").Value = СтрМассива.П2T1RXXXXG19;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG20 <> 0 Тогда
						rsTab.Fields.Item("SUM_NARAH").Value = СтрМассива.П2T1RXXXXG20;
					КонецЕсли;	
					rsTab.Fields.Item("OTK").Value = СтрМассива.П2T1RXXXXG21;	
					rsTab.Fields.Item("EXP").Value = СтрМассива.П2T1RXXXXG22;	
					rsTab.Fields.Item("NRC").Value = СтрМассива.П2T1RXXXXG23;	
					rsTab.Fields.Item("NRM").Value = СтрМассива.П2T1RXXXXG24;
					Если СтрМассива.П2T1RXXXXG102 <> 0 Тогда
						rsTab.Fields.Item("PAY_YEAR").Value = СтрМассива.П2T1RXXXXG102;
					КонецЕсли;
					Если СтрМассива.П2T1RXXXXG25 <> 0 Тогда
						rsTab.Fields.Item("OZN").Value = СтрМассива.П2T1RXXXXG25;
					КонецЕсли;
		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
	
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ1_3(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 3;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "П3T1R" Тогда
			Если Поле.Значение.Количество() > 0 И Док.П3T1R[0].П3T1RXXXXG7S <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
					
					rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.П3T1RXXXXG5;
					rsTab.Fields.Item("ST").Value = ?(СтрМассива.П3T1RXXXXG6 = "Ч",1,0);					
					rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.П3T1RXXXXG7S;	
					rsTab.Fields.Item("LN").Value = СтрМассива.П3T1RXXXXG111S;	
					rsTab.Fields.Item("NM").Value = СтрМассива.П3T1RXXXXG112S;	
					rsTab.Fields.Item("FTN").Value = СтрМассива.П3T1RXXXXG113S;
					Если СтрМассива.П3T1RXXXXG8 <> 0 Тогда 
						rsTab.Fields.Item("ZO").Value = СтрМассива.П3T1RXXXXG8;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG9 <> 0 Тогда 
						rsTab.Fields.Item("PAY_TP").Value = СтрМассива.П3T1RXXXXG9;
					КонецЕсли;
				    Если СтрМассива.П3T1RXXXXG101 <> 0 Тогда 
						rsTab.Fields.Item("PAY_MNTH").Value = СтрМассива.П3T1RXXXXG101;
					КонецЕсли;
				    Если СтрМассива.П3T1RXXXXG12 <> 0 Тогда
						rsTab.Fields.Item("KD_NP").Value = СтрМассива.П3T1RXXXXG12;	
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG13 <> 0 Тогда
						rsTab.Fields.Item("KD_NZP").Value = СтрМассива.П3T1RXXXXG13;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG14 <> 0 Тогда	
						rsTab.Fields.Item("KD_PTV").Value = СтрМассива.П3T1RXXXXG14;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG15 <> 0 Тогда	
						rsTab.Fields.Item("KD_VP").Value = СтрМассива.П3T1RXXXXG15;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG16 <> 0 Тогда	
						rsTab.Fields.Item("SUM_TOTAL").Value = СтрМассива.П3T1RXXXXG16;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG17 <> 0 Тогда
						rsTab.Fields.Item("SUM_MAX").Value = СтрМассива.П3T1RXXXXG17;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG18 <> 0 Тогда
						rsTab.Fields.Item("SUM_DIFF").Value = СтрМассива.П3T1RXXXXG18;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG19 <> 0 Тогда
						rsTab.Fields.Item("SUM_INS").Value = СтрМассива.П3T1RXXXXG19;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG20 <> 0 Тогда
						rsTab.Fields.Item("SUM_NARAH").Value = СтрМассива.П3T1RXXXXG20;
					КонецЕсли;	
					rsTab.Fields.Item("OTK").Value = СтрМассива.П3T1RXXXXG21;	
					rsTab.Fields.Item("EXP").Value = СтрМассива.П3T1RXXXXG22;	
					rsTab.Fields.Item("NRC").Value = СтрМассива.П3T1RXXXXG23;	
					rsTab.Fields.Item("NRM").Value = СтрМассива.П3T1RXXXXG24;
					Если СтрМассива.П3T1RXXXXG102 <> 0 Тогда
						rsTab.Fields.Item("PAY_YEAR").Value = СтрМассива.П3T1RXXXXG102;
					КонецЕсли;
					Если СтрМассива.П3T1RXXXXG25 <> 0 Тогда
						rsTab.Fields.Item("OZN").Value = СтрМассива.П3T1RXXXXG25;
					КонецЕсли;
		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ4_1(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда

		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 1;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
		//	rsMain.Fields.Item("HZD").value = true;
		//	Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		// DOCKING 387 + 30.06.2022
		ДокC = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаТаблица41");
		rsMain.Fields.Item("PSH").value = ДокC.R00G01I;
		// DOCKING 387 - 30.06.2022
		// DOCKING 583 + 25.09.2023
		rsMain.Fields.Item("PS").value = ДокC.R00G02I;
		// DOCKING 583 - 25.09.2023
		
		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "T41T1R" Тогда
			Если Поле.Значение.Количество() > 0 И Док.T41T1R[0].T41T1RXXXXG02 <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
					rsTab.Fields.Item("TAB1_A2").Value = СтрМассива.T41T1RXXXXG02;	
					Если СтрМассива.T41T1RXXXXG03A <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A31").Value = СтрМассива.T41T1RXXXXG03A;
					КонецЕсли;
					Если СтрМассива.T41T1RXXXXG03 <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A3").Value = СтрМассива.T41T1RXXXXG03;
					КонецЕсли;
					Если СтрМассива.T41T1RXXXXG04 <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A4").Value = СтрМассива.T41T1RXXXXG04;
					КонецЕсли;
					Если СтрМассива.T41T1RXXXXG04A <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A41").Value = СтрМассива.T41T1RXXXXG04A;
					КонецЕсли;	
					rsTab.Fields.Item("TAB1_A5").Value = СтрМассива.T41T1RXXXXG05;	
					Если СтрМассива.T41T1RXXXXG06D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB1_A6").Value = СтрМассива.T41T1RXXXXG06D;	
					КонецЕсли; 
					Если СтрМассива.T41T1RXXXXG07D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB1_A7").Value = СтрМассива.T41T1RXXXXG07D;	
					КонецЕсли; 
					rsTab.Fields.Item("TAB1_A8").Value = СтрМассива.T41T1RXXXXG08;	
					rsTab.Fields.Item("TAB1_OZNAKA").Value = СтрМассива.T41T1RXXXXG09;	
					rsTab.Fields.Item("TAB1_A21").Value = СтрМассива.T41T1RXXXXGFIO;
					Если СтрМассива.T41T1RXXXXG5 <> 0 Тогда
						rsTab.Fields.Item("TAB1_A05").Value = СтрМассива.T41T1RXXXXG5;
					КонецЕсли;
					Если СтрМассива.T41T1RXXXXG5A <> 0 Тогда	
						rsTab.Fields.Item("TAB1_A051").Value = СтрМассива.T41T1RXXXXG5A ;
					КонецЕсли;
		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ4_2(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда

		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 2;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
		//	rsMain.Fields.Item("HZD").value = true;
		//	Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
		// DOCKING 387 + 30.06.2022
		ДокC = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаТаблица42");
		rsMain.Fields.Item("PSH").value = ДокC.R00G01I;
		// DOCKING 387 - 30.06.2022
		// DOCKING 583 + 25.09.2023
		rsMain.Fields.Item("PS").value = ДокC.R00G02I;
		// DOCKING 583 - 25.09.2023
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);
		
		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "T42T1R" Тогда
			Если Поле.Значение.Количество() > 0 И Док.T42T1R[0].T42T1RXXXXG02 <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
					rsTab.Fields.Item("TAB1_A2").Value = СтрМассива.T42T1RXXXXG02;	
					Если СтрМассива.T42T1RXXXXG03A <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A31").Value = СтрМассива.T42T1RXXXXG03A;
					КонецЕсли;
					Если СтрМассива.T42T1RXXXXG03 <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A3").Value = СтрМассива.T42T1RXXXXG03;
					КонецЕсли;
					Если СтрМассива.T42T1RXXXXG04 <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A4").Value = СтрМассива.T42T1RXXXXG04;
					КонецЕсли;
					Если СтрМассива.T42T1RXXXXG04A <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A41").Value = СтрМассива.T42T1RXXXXG04A;
					КонецЕсли;	
					rsTab.Fields.Item("TAB1_A5").Value = СтрМассива.T42T1RXXXXG05;	
					Если СтрМассива.T42T1RXXXXG06D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB1_A6").Value = СтрМассива.T42T1RXXXXG06D;	
					КонецЕсли; 
					Если СтрМассива.T42T1RXXXXG07D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB1_A7").Value = СтрМассива.T42T1RXXXXG07D;	
					КонецЕсли; 
					rsTab.Fields.Item("TAB1_A8").Value = СтрМассива.T42T1RXXXXG08;	
					rsTab.Fields.Item("TAB1_OZNAKA").Value = СтрМассива.T42T1RXXXXG09;	
					rsTab.Fields.Item("TAB1_A21").Value = СтрМассива.T42T1RXXXXGFIO;
					Если СтрМассива.T42T1RXXXXG5 <> 0 Тогда
						rsTab.Fields.Item("TAB1_A05").Value = СтрМассива.T42T1RXXXXG5;
					КонецЕсли;
					Если СтрМассива.T42T1RXXXXG5A <> 0 Тогда	
						rsTab.Fields.Item("TAB1_A051").Value = СтрМассива.T42T1RXXXXG5A ;
					КонецЕсли;
		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ4_3(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда

		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 3;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
		//	rsMain.Fields.Item("HZD").value = true;
		//	Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
		// DOCKING 387 + 30.06.2022
		ДокC = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаТаблица43");
		rsMain.Fields.Item("PSH").value = ДокC.R00G01I;
		// DOCKING 387 - 30.06.2022
		// DOCKING 583 + 25.09.2023
		rsMain.Fields.Item("PS").value = ДокC.R00G02I;
		// DOCKING 583 - 25.09.2023
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "T43T1R" Тогда
			Если Поле.Значение.Количество() > 0  И Док.T43T1R[0].T43T1RXXXXG02 <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
					rsTab.Fields.Item("TAB1_A2").Value = СтрМассива.T43T1RXXXXG02;	
					Если СтрМассива.T43T1RXXXXG03A <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A31").Value = СтрМассива.T43T1RXXXXG03A;
					КонецЕсли;
					Если СтрМассива.T43T1RXXXXG03 <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A3").Value = СтрМассива.T43T1RXXXXG03;
					КонецЕсли;
					Если СтрМассива.T43T1RXXXXG04 <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A4").Value = СтрМассива.T43T1RXXXXG04;
					КонецЕсли;
					Если СтрМассива.T43T1RXXXXG04A <> 0 Тогда 
						rsTab.Fields.Item("TAB1_A41").Value = СтрМассива.T43T1RXXXXG04A;
					КонецЕсли;	
					rsTab.Fields.Item("TAB1_A5").Value = СтрМассива.T43T1RXXXXG05;	
					Если СтрМассива.T43T1RXXXXG06D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB1_A6").Value = СтрМассива.T43T1RXXXXG06D;	
					КонецЕсли; 
					Если СтрМассива.T43T1RXXXXG07D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("TAB1_A7").Value = СтрМассива.T43T1RXXXXG07D;	
					КонецЕсли; 
					rsTab.Fields.Item("TAB1_A8").Value = СтрМассива.T43T1RXXXXG08;	
					rsTab.Fields.Item("TAB1_OZNAKA").Value = СтрМассива.T43T1RXXXXG09;	
					rsTab.Fields.Item("TAB1_A21").Value = СтрМассива.T43T1RXXXXGFIO;
					Если СтрМассива.T43T1RXXXXG5 <> 0 Тогда
						rsTab.Fields.Item("TAB1_A05").Value = СтрМассива.T43T1RXXXXG5;
					КонецЕсли;
					Если СтрМассива.T43T1RXXXXG5A <> 0 Тогда	
						rsTab.Fields.Item("TAB1_A051").Value = СтрМассива.T43T1RXXXXG5A;
					КонецЕсли;
		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ5(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		// 02.08.2022 + DOCKING 382	
		rsMain = Doc.DataSets();
		
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
		Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "T5T1R" Тогда
			Если Поле.Значение.Количество() > 0  И Док.T5T1R[0].T5T1RXXXXG8S <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
					rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.T5T1RXXXXG5;
					Если СтрМассива.T5T1RXXXXG7 <> 0 Тогда 
						rsTab.Fields.Item("ZO").Value = СтрМассива.T5T1RXXXXG7;
					КонецЕсли;
					rsTab.Fields.Item("DOG_CPH").Value = СтрМассива.T5T1RXXXXG6;
					rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.T5T1RXXXXG8S;
					rsTab.Fields.Item("LN").Value = СтрМассива.T5T1RXXXXG91S;
					rsTab.Fields.Item("NM").Value = СтрМассива.T5T1RXXXXG92S;
					rsTab.Fields.Item("FTN").Value = СтрМассива.T5T1RXXXXG93S;
					Если СтрМассива.T5T1RXXXXG101D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("START_DT").Value = СтрМассива.T5T1RXXXXG101D;
					КонецЕсли;
					Если СтрМассива.T5T1RXXXXG102D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("END_DT").Value = СтрМассива.T5T1RXXXXG102D;
					КонецЕсли;
					Если СтрМассива.T5T1RXXXXG11 <> 0 Тогда 
						rsTab.Fields.Item("VS").Value = СтрМассива.T5T1RXXXXG11;
					КонецЕсли;	
					Если СтрМассива.T5T1RXXXXG12 <> 0 Тогда 
						rsTab.Fields.Item("PIR").Value = СтрМассива.T5T1RXXXXG12;
					КонецЕсли;
					rsTab.Fields.Item("PNR").Value = СтрМассива.T5T1RXXXXG13S;
					rsTab.Fields.Item("POS").Value = СтрМассива.T5T1RXXXXG15S;
					rsTab.Fields.Item("PROF").Value = СтрМассива.T5T1RXXXXG14S;
					rsTab.Fields.Item("PID").Value = СтрМассива.T5T1RXXXXG16S;
					rsTab.Fields.Item("PID_ZV").Value = СтрМассива.T5T1RXXXXG17S;
					Если СтрМассива.T5T1RXXXXG18D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("NRM_DT").Value = СтрМассива.T5T1RXXXXG18D;
					КонецЕсли;
					rsTab.Fields.Item("VZV").Value = СтрМассива.T5T1RXXXXG19S;
					Если СтрМассива.T5T1RXXXXG20 <> 0 Тогда 
						rsTab.Fields.Item("OZN").Value = СтрМассива.T5T1RXXXXG20;
					КонецЕсли;
		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ6_1(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		rsMain = Doc.DataSets();
	                                           
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
		rsMain.Fields.Item("NMONTHKV").value = 1;
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "T61T1R" Тогда
			Если Поле.Значение.Количество() > 0  И Док.T61T1R[0].T61T1RXXXXG6S <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
				
					rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.T61T1RXXXXG5;
					rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.T61T1RXXXXG6S;
					rsTab.Fields.Item("C_PID").Value = СтрМассива.T61T1RXXXXG7S;
					rsTab.Fields.Item("LN").Value = СтрМассива.T61T1RXXXXG81S;
					rsTab.Fields.Item("NM").Value = СтрМассива.T61T1RXXXXG82S;
					rsTab.Fields.Item("FTN").Value = СтрМассива.T61T1RXXXXG83S;
					Если СтрМассива.T61T1RXXXXG9 <> 0 Тогда
						rsTab.Fields.Item("START_DT").Value = СтрМассива.T61T1RXXXXG9;
					КонецЕсли;	
					Если СтрМассива.T61T1RXXXXG10 <> 0 Тогда	
						rsTab.Fields.Item("STOP_DT").Value = СтрМассива.T61T1RXXXXG10;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG11 <> 0 Тогда
						rsTab.Fields.Item("DAYS").Value = СтрМассива.T61T1RXXXXG11;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG121 <> 0 Тогда
						rsTab.Fields.Item("HH").Value = СтрМассива.T61T1RXXXXG121;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG122 <> 0 Тогда
						rsTab.Fields.Item("MM").Value = СтрМассива.T61T1RXXXXG122;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG131 <> 0 Тогда
						rsTab.Fields.Item("NORMA_1").Value = СтрМассива.T61T1RXXXXG131;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG132 <> 0 Тогда
						rsTab.Fields.Item("NORMA_2").Value = СтрМассива.T61T1RXXXXG132;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG133 <> 0 Тогда
						rsTab.Fields.Item("NORMA_3").Value = СтрМассива.T61T1RXXXXG133;
					КонецЕсли;
					rsTab.Fields.Item("NUM_NAK").Value = СтрМассива.T61T1RXXXXG14S;
					Если СтрМассива.T61T1RXXXXG15D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("DT_NAK").Value = СтрМассива.T61T1RXXXXG15D;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG16 <> 0 Тогда
						rsTab.Fields.Item("SEAZON").Value = СтрМассива.T61T1RXXXXG16;
					КонецЕсли;
					Если СтрМассива.T61T1RXXXXG17 <> 0 Тогда
						rsTab.Fields.Item("OZN").Value = СтрМассива.T61T1RXXXXG17;
					КонецЕсли;

		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ6_2(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 2;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
		Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "T62T1R" Тогда
			Если Поле.Значение.Количество() > 0  И Док.T62T1R[0].T62T1RXXXXG6S <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
				
					rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.T62T1RXXXXG5;
					rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.T62T1RXXXXG6S;
					rsTab.Fields.Item("C_PID").Value = СтрМассива.T62T1RXXXXG7S;
					rsTab.Fields.Item("LN").Value = СтрМассива.T62T1RXXXXG81S;
					rsTab.Fields.Item("NM").Value = СтрМассива.T62T1RXXXXG82S;
					rsTab.Fields.Item("FTN").Value = СтрМассива.T62T1RXXXXG83S;
					Если СтрМассива.T62T1RXXXXG9 <> 0 Тогда
						rsTab.Fields.Item("START_DT").Value = СтрМассива.T62T1RXXXXG9;
					КонецЕсли;	
					Если СтрМассива.T62T1RXXXXG10 <> 0 Тогда	
						rsTab.Fields.Item("STOP_DT").Value = СтрМассива.T62T1RXXXXG10;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG11 <> 0 Тогда
						rsTab.Fields.Item("DAYS").Value = СтрМассива.T62T1RXXXXG11;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG121 <> 0 Тогда
						rsTab.Fields.Item("HH").Value = СтрМассива.T62T1RXXXXG121;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG122 <> 0 Тогда
						rsTab.Fields.Item("MM").Value = СтрМассива.T62T1RXXXXG122;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG131 <> 0 Тогда
						rsTab.Fields.Item("NORMA_1").Value = СтрМассива.T62T1RXXXXG131;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG132 <> 0 Тогда
						rsTab.Fields.Item("NORMA_2").Value = СтрМассива.T62T1RXXXXG132;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG133 <> 0 Тогда
						rsTab.Fields.Item("NORMA_3").Value = СтрМассива.T62T1RXXXXG133;
					КонецЕсли;
					rsTab.Fields.Item("NUM_NAK").Value = СтрМассива.T62T1RXXXXG14S;
					Если СтрМассива.T62T1RXXXXG15D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("DT_NAK").Value = СтрМассива.T62T1RXXXXG15D;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG16 <> 0 Тогда
						rsTab.Fields.Item("SEAZON").Value = СтрМассива.T62T1RXXXXG16;
					КонецЕсли;
					Если СтрМассива.T62T1RXXXXG17 <> 0 Тогда
						rsTab.Fields.Item("OZN").Value = СтрМассива.T62T1RXXXXG17;
					КонецЕсли;

		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_ТАБ6_3(Doc, Бланк, Документ)
	
	Если Бланк = "J0500109" ИЛИ Бланк = "F0500109" Тогда
		
		rsMain = Doc.DataSets();
	
		rsMain.Fields.Item("NMONTHKV").value = 3;
		
		// 02.08.2022 + DOCKING 382	
		Если ТипРасчета = "Отчетный" Тогда
			rsMain.Fields.Item("HZ").value = true;
		КонецЕсли;
		Если ТипРасчета = "ОтчетныйНовый" Тогда
			rsMain.Fields.Item("HZN").value = true;
		КонецЕсли;
		Если ТипРасчета = "Уточняющий" Тогда
			rsMain.Fields.Item("HZU").value = true;
		КонецЕсли;
		Если ТипРасчета = "Справочный" Тогда
			rsMain.Fields.Item("HZD").value = true;
			Doc.Specif = 3;
		КонецЕсли;
		// 02.08.2022 - DOCKING 382
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
		Если Поле.Ключ =  "T63T1R" Тогда
			Если Поле.Значение.Количество() > 0  И Док.T63T1R[0].T63T1RXXXXG6S <> "" Тогда
				rsTab = Doc.DataSets("TAB1");
				rsTab.Clear();
				rsTab.Edit();
				Для Каждого СтрМассива Из Поле.Значение Цикл
				
					rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.T63T1RXXXXG5;
					rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.T63T1RXXXXG6S;
					rsTab.Fields.Item("C_PID").Value = СтрМассива.T63T1RXXXXG7S;
					rsTab.Fields.Item("LN").Value = СтрМассива.T63T1RXXXXG81S;
					rsTab.Fields.Item("NM").Value = СтрМассива.T63T1RXXXXG82S;
					rsTab.Fields.Item("FTN").Value = СтрМассива.T63T1RXXXXG83S;
					Если СтрМассива.T63T1RXXXXG9 <> 0 Тогда
						rsTab.Fields.Item("START_DT").Value = СтрМассива.T63T1RXXXXG9;
					КонецЕсли;	
					Если СтрМассива.T63T1RXXXXG10 <> 0 Тогда	
						rsTab.Fields.Item("STOP_DT").Value = СтрМассива.T63T1RXXXXG10;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG11 <> 0 Тогда
						rsTab.Fields.Item("DAYS").Value = СтрМассива.T63T1RXXXXG11;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG121 <> 0 Тогда
						rsTab.Fields.Item("HH").Value = СтрМассива.T63T1RXXXXG121;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG122 <> 0 Тогда
						rsTab.Fields.Item("MM").Value = СтрМассива.T63T1RXXXXG122;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG131 <> 0 Тогда
						rsTab.Fields.Item("NORMA_1").Value = СтрМассива.T63T1RXXXXG131;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG132 <> 0 Тогда
						rsTab.Fields.Item("NORMA_2").Value = СтрМассива.T63T1RXXXXG132;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG133 <> 0 Тогда
						rsTab.Fields.Item("NORMA_3").Value = СтрМассива.T63T1RXXXXG133;
					КонецЕсли;
					rsTab.Fields.Item("NUM_NAK").Value = СтрМассива.T63T1RXXXXG14S;
					Если СтрМассива.T63T1RXXXXG15D <> Дата(1,1,1) Тогда
						rsTab.Fields.Item("DT_NAK").Value = СтрМассива.T63T1RXXXXG15D;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG16 <> 0 Тогда
						rsTab.Fields.Item("SEAZON").Value = СтрМассива.T63T1RXXXXG16;
					КонецЕсли;
					Если СтрМассива.T63T1RXXXXG17 <> 0 Тогда
						rsTab.Fields.Item("OZN").Value = СтрМассива.T63T1RXXXXG17;
					КонецЕсли;

		    		rsTab.Post();
					rsTab.Append()	
				КонецЦикла;		
				   rsTab.Delete();

			КонецЕсли;		
				КонецЕсли;	
			КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 


#Область ЕСВ_старый

&НаКлиенте
Процедура Формирование_ЕСВ_стар(App, Документ, Бланк, PDate, ИД, Приложения)
	
	ИДПарент = 0;	
	//создаем перечень	
	
	Попытка
		Doc = App.OpenOrCreateByExDocID(Бланк, 0, PDate, , ИД, 0);
		ИДПарент = Формирование_ЕСВ_стар_ТАБПеречень(Doc, Бланк, Документ);
	Исключение
		Сообщить("Ошибка: ЕСВ, Перечень таблиц не передался. Передача остановлена");
		Doc = App.MoveToTrash(ИД);
	КонецПопытки;
	
	ЧаркодТаб1 = "";
	ЧаркодТаб5 = "";
	ЧаркодТаб6 = "";
	ЧаркодТаб7 = "";
	
	Если Бланк = "J3000413" Тогда
		 ЧаркодТаб1 = "J3040113";
		 ЧаркодТаб5 = "J3040513";
		 ЧаркодТаб6 = "J3040613";
		 ЧаркодТаб7 = "J3040713";
	ИначеЕсли Бланк = "F3000413" Тогда
		 ЧаркодТаб1 = "F3040113";
		 ЧаркодТаб5 = "F3040513";
		 ЧаркодТаб6 = "F3040613";
		 ЧаркодТаб7 = "F3040713";
	 КонецЕсли;
	 
	 Если ИДПарент <> 0 Тогда
		 
		 Doc  = App.OpenOrCreateByExDocID(Бланк, 0, PDate, ,ИД , 0);
		 Попытка
		     Формирование_ЕСВ_стар_ТАБ_Объедененная(Doc, Бланк, Документ);
		 Исключение
		     Сообщить("Ошибка: ЕСВ, Таблица объедененная не создана");
		     Doc  = App.MoveToTrash(ИД);
		 КонецПопытки;
		 
		 Для Каждого ЭлементМассива Из Приложения Цикл				
			 
			 Если ЭлементМассива = "Таб1" Тогда	
				 //создаем таб_1
				 Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб1, 0, PDate, , ИД+"P1", 0);
				 Doc.IDParent = ИДПарент;	
				 Попытка
					 Формирование_ЕСВ_стар_ТАБ1(Doc, ЧаркодТаб1, Документ);
				 Исключение
					 Сообщить("Ошибка: ЕСВ, Таблица 1 не создана");
					 Doc  = App.MoveToTrash(ИД+"P1");
				 КонецПопытки;
			 КонецЕсли;
			 
			 Если ЭлементМассива = "Таб5" Тогда
				 //создаем таб_5
				 Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб5, 10, PDate, , ИД+"P5", 0);
				 Doc.IDParent = ИДПарент;
				 Попытка
					 Формирование_ЕСВ_стар_ТАБ5(Doc, ЧаркодТаб5, Документ);
				 Исключение
					 Сообщить("Ошибка: ЕСВ, Таблица 5 не создана");
					 Doc  = App.MoveToTrash(ИД+"P5");
				 КонецПопытки;
			 КонецЕсли;
			 
			 Если ЭлементМассива = "Таб6" Тогда
				 //создаем таб_6	
				 Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб6, 10, PDate, , ИД+"P6", 0);
				 Doc.IDParent = ИДПарент;
				 Попытка
					 Формирование_ЕСВ_стар_ТАБ6(Doc, ЧаркодТаб6, Документ);
				 Исключение
					 Сообщить("Ошибка: ЕСВ, Таблица 6 не создана");
					 Doc  = App.MoveToTrash(ИД+"P6");
				 КонецПопытки;
			 КонецЕсли;	
			 
			 Если ЭлементМассива = "Таб7" Тогда
				 //создаем таб_7	
				 Doc  = App.OpenOrCreateByExDocID(ЧаркодТаб7, 10, PDate, , ИД+"P7", 0);
				 Doc.IDParent = ИДПарент;
				 Попытка
					 Формирование_ЕСВ_стар_ТАБ7(Doc, ЧаркодТаб7, Документ);
				 Исключение
					 Сообщить("Ошибка: ЕСВ, Таблица 7 не создана");
					 Doc  = App.MoveToTrash(ИД+"P7");
				 КонецПопытки;
			 КонецЕсли;
			 
		 КонецЦикла;

	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция Формирование_ЕСВ_стар_ТАБПеречень(Doc, Бланк, Документ)
	ИДПарент = 0;
	
	Если Бланк = "J3000413" ИЛИ Бланк = "F3000413" Тогда
		
		КонецОтчета(Doc);
		ИДПарент = Doc.CardCode;
		
	КонецЕсли;
	
	Возврат ИДПарент;
КонецФункции

&НаКлиенте
Процедура Формирование_ЕСВ_стар_ТАБ_Объедененная(Doc, Бланк, Документ)
	
	Если Бланк = "J3000413" ИЛИ Бланк = "F3000413" Тогда
		
		Doc.DisableScripts();  	
		rsMain = Doc.DataSets(); 
		rsMain.Fields.Item("FIRM_EDRPOU").value = КодПоЕДРПОУ;

		с = Новый Структура;     	
		НачалоОтчета(rsMain);
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаПереченьТаблиц");
		
		Если Таб41 Тогда
			//с.Вставить("N1_3", 1);  // "R001G3" 
			rsMain.Fields.Item("N1_3").value = 1;
		КонецЕсли;

		Если Таб45 Тогда
			//с.Вставить("N5_3", 1);
			rsMain.Fields.Item("N5_3").value = 1;
		КонецЕсли;
		
		Если Таб46 Тогда
			//с.Вставить("N6_3", 1); 
			rsMain.Fields.Item("N6_3").value = 1;
		КонецЕсли;
		
		Если Таб47 Тогда
			//с.Вставить("N7_3", 1); 
			rsMain.Fields.Item("N7_3").value = 1;
		КонецЕсли;
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_стар_ТАБ1(Doc, Бланк, Документ)
	
	Если Бланк = "J3040113" ИЛИ Бланк = "F3040113" Тогда
		
		Doc.DisableScripts();  	
		rsMain = Doc.DataSets(); 
		rsMain.Fields.Item("FIRM_EDRPOU").value = КодПоЕДРПОУ;
		
		с = Новый Структура;     	
		НачалоОтчета(rsMain);
		
		Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаТаблица1");
		
		
		с.Вставить("ID_1128", "H014G1");
		с.Вставить("ID_1012", "HNACTL");
		с.Вставить("ID_1121", "HNACTL1");
		с.Вставить("ID_1129", "HNACTL2");
		с.Вставить("ID_1130", "HNACTL3");
		с.Вставить("ID_1013", "HNACTL4");
		с.Вставить("ID_1014", "HNACTL5");
		с.Вставить("ID_1015", "HNACTL6");
		с.Вставить("ID_1016", "HNACTL7");
		с.Вставить("ID_1017", "HNACTL8");
		с.Вставить("ID_1000", "R01G3");
		с.Вставить("ID_1100", "R011G3");
		с.Вставить("ID_1200", "R012G3");
		с.Вставить("ID_1300", "R013G3");
		с.Вставить("ID_1400", "R014G3");
		с.Вставить("ID_1500", "R015G3");
		с.Вставить("ID_2000", "R02G3");
		с.Вставить("ID_2100", "R021G3");
		с.Вставить("ID_2200", "R022G3");
		с.Вставить("ID_2300", "R023G3");
		с.Вставить("ID_2400", "R024G3");
		с.Вставить("ID_2500", "R025G3");
		с.Вставить("ID_3000", "R03G3");
		с.Вставить("ID_3100", "R031G3");
		с.Вставить("ID_3200", "R032G3");
		с.Вставить("ID_3210", "R0321G3");
		с.Вставить("ID_3300", "R033G3");
		с.Вставить("ID_3310", "R0331G3");
		с.Вставить("ID_3400", "R034G3");
		с.Вставить("ID_3410", "R0341G3");
		с.Вставить("ID_3500", "R035G3");
		с.Вставить("ID_3600", "R036G3");
		с.Вставить("ID_4000", "R04G3");
		с.Вставить("ID_4100", "R041G3");
		с.Вставить("ID_4110", "R04101G3");
		с.Вставить("ID_4120", "R04102G3");
		с.Вставить("ID_4130", "R04103G3");
		с.Вставить("ID_4140", "R04104G3");
		с.Вставить("ID_4150", "R04105G3");
		с.Вставить("ID_4160", "R04106G3");
		с.Вставить("ID_4170", "R04107G3");
		с.Вставить("ID_4180", "R04108G3");
		с.Вставить("ID_4190", "R04109G3");
		с.Вставить("ID_41100", "R04110G3");
		с.Вставить("ID_41110", "R04111G3");
		с.Вставить("ID_41120", "R04112G3");
		с.Вставить("ID_41130", "R04113G3");
		с.Вставить("ID_4200", "R042G3");
		с.Вставить("ID_4300", "R043G3");
		с.Вставить("ID_4310", "R04301G3");
		с.Вставить("ID_4320", "R04302G3");
		с.Вставить("ID_4330", "R04303G3");
		с.Вставить("ID_4340", "R04304G3");
		с.Вставить("ID_4350", "R04305G3");
		с.Вставить("ID_4400", "R044G3");
		с.Вставить("ID_5000", "R05G3");
		с.Вставить("ID_5100", "R051G3");
		с.Вставить("ID_5110", "R05101G3");
		с.Вставить("ID_5120", "R05102G3");
		с.Вставить("ID_5130", "R05103G3");
		с.Вставить("ID_5140", "R05104G3");
		с.Вставить("ID_5150", "R05105G3");
		с.Вставить("ID_5160", "R05106G3");
		с.Вставить("ID_5170", "R05107G3");
		с.Вставить("ID_5180", "R05108G3");
		с.Вставить("ID_5190", "R05109G3");
		с.Вставить("ID_51100", "R05110G3");
		с.Вставить("ID_51110", "R05111G3");
		с.Вставить("ID_51120", "R05112G3");
		с.Вставить("ID_51130", "R05113G3");
		с.Вставить("ID_5200", "R052G3");
		с.Вставить("ID_5300", "R053G3");
		с.Вставить("ID_5310", "R05301G3");
		с.Вставить("ID_5320", "R05302G3");
		с.Вставить("ID_5330", "R05303G3");
		с.Вставить("ID_5340", "R05304G3");
		с.Вставить("ID_5350", "R05305G3");
		с.Вставить("ID_5400", "R054G3");
		с.Вставить("ID_6000", "R06G3");
		с.Вставить("ID_6100", "R0601G3");
		с.Вставить("ID_6200", "R0602G3");
		с.Вставить("ID_6300", "R0603G3");
		с.Вставить("ID_6400", "R0604G3");
		с.Вставить("ID_6500", "R0605G3");
		с.Вставить("ID_6600", "R0606G3");
		с.Вставить("ID_6700", "R0607G3");
		с.Вставить("ID_6800", "R0608G3");
		с.Вставить("ID_6900", "R0609G3");
		с.Вставить("ID_61000", "R0610G3");
		с.Вставить("ID_61100", "R0611G3");
		с.Вставить("ID_61200", "R0612G3");
		с.Вставить("ID_61300", "R0613G3");
		с.Вставить("ID_61400", "R0614G3");
		
		ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
		КонецОтчета(Doc);	   
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_стар_ТАБ5(Doc, Бланк, Документ)
	
	Если Бланк = "J3040513" ИЛИ Бланк = "F3040513" Тогда

		rsMain = Doc.DataSets();
	
		//rsMain.Fields.Item("NMONTHKV").value = 1;
	
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
			Если Поле.Ключ =  "T5T1R" Тогда
				Если Поле.Значение.Количество() > 0 И Док.T5T1R[0].T5T1RXXXXG101S <> "" Тогда  
					rsTab = Doc.DataSets("TAB1");
					rsTab.Clear();
					rsTab.Edit();
					Для Каждого СтрМассива Из Поле.Значение Цикл
						
						rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.T5T1RXXXXG9S;	 	
						rsTab.Fields.Item("LN").Value = СтрМассива.T5T1RXXXXG101S;	        	
						rsTab.Fields.Item("NM").Value = СтрМассива.T5T1RXXXXG102S;	        	
						rsTab.Fields.Item("FTN").Value = СтрМассива.T5T1RXXXXG103S;	    	
						rsTab.Fields.Item("PNR").Value = СтрМассива.T5T1RXXXXG14S;    
						rsTab.Fields.Item("PROF").Value = СтрМассива.T5T1RXXXXG16S;	 	       	
						rsTab.Fields.Item("POS").Value = СтрМассива.T5T1RXXXXG15S;	    		
						rsTab.Fields.Item("PID").Value = СтрМассива.T5T1RXXXXG17S;         	
						rsTab.Fields.Item("PID_ZV").Value = СтрМассива.T5T1RXXXXG18S;	    		
						rsTab.Fields.Item("VZV").Value = СтрМассива.T5T1RXXXXG20S;         		
						
						Если СтрМассива.T5T1RXXXXG6 <> 0 Тогда 
							rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.T5T1RXXXXG6;    	
						КонецЕсли;
						Если СтрМассива.T5T1RXXXXG7 <> 0 Тогда 
							rsTab.Fields.Item("DOG_CPH").Value = СтрМассива.T5T1RXXXXG7;        	
						КонецЕсли;
						Если СтрМассива.T5T1RXXXXG8 <> 0 Тогда 
							rsTab.Fields.Item("ZO").Value = СтрМассива.T5T1RXXXXG8;              	
						КонецЕсли;
						Если СтрМассива.T5T1RXXXXG111 <> 0 Тогда 
							rsTab.Fields.Item("START_DT").Value = СтрМассива.T5T1RXXXXG111;    	
						КонецЕсли;	
						Если СтрМассива.T5T1RXXXXG112 <> 0 Тогда
							rsTab.Fields.Item("END_DT").Value = СтрМассива.T5T1RXXXXG112;          	
						КонецЕсли;
						Если СтрМассива.T5T1RXXXXG12 <> 0 Тогда	
							rsTab.Fields.Item("VS").Value = СтрМассива.T5T1RXXXXG12 ;           	
						КонецЕсли;
						Если СтрМассива.T5T1RXXXXG13 <> 0 Тогда	                                   	
							rsTab.Fields.Item("PIR").Value = СтрМассива.T5T1RXXXXG13 ;           	
						КонецЕсли;
						
						Если СтрМассива.T5T1RXXXXG19D <> Дата(1,1,1) Тогда
							rsTab.Fields.Item("NRM_DT").Value = СтрМассива.T5T1RXXXXG19D;	        	
						КонецЕсли; 
						
						rsTab.Post();
						rsTab.Append()	
					КонецЦикла;		
					rsTab.Delete();
					
				КонецЕсли;		
			КонецЕсли;	
		КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_стар_ТАБ6(Doc, Бланк, Документ)
	
	Если Бланк = "J3040613" ИЛИ Бланк = "F3040613" Тогда
		
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
			Если Поле.Ключ =  "T6T1R" Тогда
				Если Поле.Значение.Количество() > 0 И Док.T6T1R[0].T6T1RXXXXG121S <> "" Тогда  
					rsTab = Doc.DataSets("TAB1");
					rsTab.Clear();
					rsTab.Edit();
					Для Каждого СтрМассива Из Поле.Значение Цикл
						
						rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.T6T1RXXXXG6;			
						rsTab.Fields.Item("ST").Value = СтрМассива.T6T1RXXXXG7;	        		
						rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.T6T1RXXXXG8S;		        	
						rsTab.Fields.Item("LN").Value = СтрМассива.T6T1RXXXXG121S;	    		
						rsTab.Fields.Item("NM").Value = СтрМассива.T6T1RXXXXG122S;    
						rsTab.Fields.Item("FTN").Value = СтрМассива.T6T1RXXXXG123S;	 	    	
						
						Если СтрМассива.T6T1RXXXXG9 <> 0 Тогда 
							rsTab.Fields.Item("ZO").Value = СтрМассива.T6T1RXXXXG9;    	    
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG10 <> 0 Тогда 
							rsTab.Fields.Item("PAY_TP").Value = СтрМассива.T6T1RXXXXG10;    	    	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG111 <> 0 Тогда 
							rsTab.Fields.Item("PAY_MNTH").Value = СтрМассива.T6T1RXXXXG111;              	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG112 <> 0 Тогда 
							rsTab.Fields.Item("PAY_YEAR").Value = СтрМассива.T6T1RXXXXG112;    	
						КонецЕсли;	
						Если СтрМассива.T6T1RXXXXG13 <> 0 Тогда
							rsTab.Fields.Item("KD_NP").Value = СтрМассива.T6T1RXXXXG13;          	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG14 <> 0 Тогда	
							rsTab.Fields.Item("KD_NZP").Value = СтрМассива.T6T1RXXXXG14 ;     	      	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG15 <> 0 Тогда	                                   	
							rsTab.Fields.Item("KD_PTV").Value = СтрМассива.T6T1RXXXXG15 ;         	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG16 <> 0 Тогда
							rsTab.Fields.Item("KD_VP").Value = СтрМассива.T6T1RXXXXG16;      	   	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG17 <> 0 Тогда	
							rsTab.Fields.Item("SUM_TOTAL").Value = СтрМассива.T6T1RXXXXG17 ;    	       	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG18 <> 0 Тогда	                                   	
							rsTab.Fields.Item("SUM_MAX").Value = СтрМассива.T6T1RXXXXG18 ;     	      	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG19 <> 0 Тогда	
							rsTab.Fields.Item("SUM_DIFF").Value = СтрМассива.T6T1RXXXXG19 ;    	      	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG20 <> 0 Тогда	                                   	
							rsTab.Fields.Item("SUM_INS").Value = СтрМассива.T6T1RXXXXG20 ;          	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG21 <> 0 Тогда
							rsTab.Fields.Item("SUM_NARAH").Value = СтрМассива.T6T1RXXXXG21;     	     	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG22 <> 0 Тогда	
							rsTab.Fields.Item("OTK").Value = СтрМассива.T6T1RXXXXG22 ;         	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG23 <> 0 Тогда	                                   	
							rsTab.Fields.Item("EXP").Value = СтрМассива.T6T1RXXXXG23 ;          	 	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG24 <> 0 Тогда	
							rsTab.Fields.Item("NRC").Value = СтрМассива.T6T1RXXXXG24 ;        	
						КонецЕсли;
						Если СтрМассива.T6T1RXXXXG25 <> 0 Тогда	                                   	
							rsTab.Fields.Item("NRM").Value = СтрМассива.T6T1RXXXXG25 ;          	
						КонецЕсли;
						
							
						rsTab.Post();
						rsTab.Append()	
					КонецЦикла;		
					rsTab.Delete();
					
				КонецЕсли;		
			КонецЕсли;	
		КонецЦикла;
		
		КонецОтчета(Doc);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ЕСВ_стар_ТАБ7(Doc, Бланк, Документ)
	
	Если Бланк = "J3040713" ИЛИ Бланк = "F3040713" Тогда
		
		rsMain = Doc.DataSets();
	                                           
	    Док = ПолучитьДанныеМногострочныхРазделовРегОтчета(Документ);

		Для Каждого Поле Из Док Цикл	
			Если Поле.Ключ =  "T7T1R" Тогда
				Если Поле.Значение.Количество() > 0 И Док.T7T1R[0].T7T1RXXXXG91S <> "" Тогда     
					rsTab = Doc.DataSets("TAB1");
					rsTab.Clear();
					rsTab.Edit();
					Для Каждого СтрМассива Из Поле.Значение Цикл
						
						rsTab.Fields.Item("NUMIDENT").Value = СтрМассива.T7T1RXXXXG7S;			
						rsTab.Fields.Item("C_PID").Value = СтрМассива.T7T1RXXXXG8S;	       		
						rsTab.Fields.Item("LN").Value = СтрМассива.T7T1RXXXXG91S;			        	
						rsTab.Fields.Item("NM").Value = СтрМассива.T7T1RXXXXG92S;	    			
						rsTab.Fields.Item("FTN").Value = СтрМассива.T7T1RXXXXG93S;     	
						rsTab.Fields.Item("NUM_NAK").Value = СтрМассива.T7T1RXXXXG15S;			    	
						
						Если СтрМассива.T7T1RXXXXG6 <> 0 Тогда 
							rsTab.Fields.Item("UKR_GROMAD").Value = СтрМассива.T7T1RXXXXG6;   	    
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG10 <> 0 Тогда 
							rsTab.Fields.Item("START_DT").Value = СтрМассива.T7T1RXXXXG10;   		    	
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG11 <> 0 Тогда 
							rsTab.Fields.Item("STOP_DT").Value = СтрМассива.T7T1RXXXXG11;   	           	
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG12 <> 0 Тогда 
							rsTab.Fields.Item("DAYS").Value = СтрМассива.T7T1RXXXXG12;    	
						КонецЕсли;	
						Если СтрМассива.T7T1RXXXXG131 <> 0 Тогда
							rsTab.Fields.Item("HH").Value = СтрМассива.T7T1RXXXXG131;          	
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG132 <> 0 Тогда	
							rsTab.Fields.Item("MM").Value = СтрМассива.T7T1RXXXXG132 ;    		      	
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG141 <> 0 Тогда	                                   	
							rsTab.Fields.Item("NORMA_1").Value = СтрМассива.T7T1RXXXXG141 ;       	
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG142 <> 0 Тогда
							rsTab.Fields.Item("NORMA_2").Value = СтрМассива.T7T1RXXXXG142;  	   	   	
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG143 <> 0 Тогда	
							rsTab.Fields.Item("NORMA_3").Value = СтрМассива.T7T1RXXXXG143 ;  	       	
						КонецЕсли;
						Если СтрМассива.T7T1RXXXXG17 <> 0 Тогда	                                   	
							rsTab.Fields.Item("SEAZON").Value = СтрМассива.T7T1RXXXXG17 ;        	
						КонецЕсли;
						
						Если СтрМассива.T7T1RXXXXG16D <> Дата(1,1,1) Тогда
							rsTab.Fields.Item("DT_NAK").Value = СтрМассива.T7T1RXXXXG16D;		       	
						КонецЕсли; 
						
						rsTab.Post();
						rsTab.Append()	
					КонецЦикла;		
					rsTab.Delete();
					
				КонецЕсли;		
			КонецЕсли;	
		КонецЦикла;
		
		КонецОтчета(Doc);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 


&НаКлиенте
Процедура Формирование_Ф4ФСС(App, Документ, БланкФСС, PDate, ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкФСС, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаУведомление;	
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаУведомление");
	
	Doc.DisableScripts();  	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;     	
	НачалоОтчета(rsMain);
	
	с.Вставить("FIRM_SS", "CSTRAX"); 
	с.Вставить("FIRM_EDRPOU", "OKPO");
	с.Вставить("N1", "DERZHREESTR");  
	с.Вставить("FIRM_CBANK", "МФО"); 
	с.Вставить("FIRM_RS", "РС"); 
	с.Вставить("FIRM_NMBANK", "Банк"); 
	с.Вставить("FIRM_ADR", "Адрес"); 
	с.Вставить("FIRM_PHON", "Телефон"); 
	
	с.Вставить("A1_1", "S101"); 
	с.Вставить("A1_12", "S112");
	с.Вставить("A1_2", "S102");
	с.Вставить("A1_13", "S113");
	с.Вставить("A1_3", "S103");
	с.Вставить("A1_14", "S114");
	с.Вставить("A1_4", "S104");
	с.Вставить("A1_15", "S115");
	с.Вставить("A1_5", "S105");
	с.Вставить("A1_16", "S116");
	с.Вставить("A1_6", "S106");
	с.Вставить("A1_17", "S117");
	с.Вставить("A1_7", "S107");
	с.Вставить("A1_18", "S118");
	с.Вставить("A1_8", "S108");
	с.Вставить("A1_19", "S119");
	с.Вставить("A1_9", "S109");
	с.Вставить("A1_20", "S120");
	с.Вставить("A1_10", "S110");
	с.Вставить("A1_21", "S121");
	с.Вставить("A1_11", "S111");
	с.Вставить("A1_22", "S122");
	с.Вставить("A1_23", "S123");
	с.Вставить("A1_24", "S124");
	
	с.Вставить("B4_01", "S213");
	с.Вставить("C4_01", "S214");
	с.Вставить("D4_01", "S215");
	с.Вставить("E4_01", "S216");
	с.Вставить("K4_01", "S217");
	
	с.Вставить("B4_02", "S223");
	с.Вставить("C4_02", "S224");
	с.Вставить("D4_02", "S225");
	с.Вставить("E4_02", "S226");
	с.Вставить("K4_02", "S227");
	
	с.Вставить("B4_03", "S233");
	с.Вставить("C4_03", "S234");
	с.Вставить("D4_03", "S235");
	с.Вставить("E4_03", "S236");
	с.Вставить("K4_03", "S237");
	
	с.Вставить("B4_06", "S243");
	с.Вставить("C4_06", "S244");
	с.Вставить("C4_07", "S254");
	с.Вставить("E4_07", "S256");
	с.Вставить("K4_07", "S257");
	
	с.Вставить("C4_08", "S263");
	с.Вставить("B4_08", "S264");
	с.Вставить("C4_09", "S274");
	с.Вставить("C4_10", "S284");  	     	
	
	с.Вставить("FIRM_RUK", "ОргДиректор"); 
	с.Вставить("FIRM_BUH", "ОргБухгалтер");     	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	КонецОтчета(Doc);
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_1ПВМес(App, Документ, БланкДСС, PDate, ИД)

	Doc  = App.OpenOrCreateByExDocID(БланкДСС, 0, PDate, , ИД, 0);

	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ТабличныйДокументОтчетПоТрудуМес;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ТабличныйДокументОтчетПоТрудуМес");
	
	rsMain = Doc.DataSets(); 	
	с = Новый Структура;
	сДел1000 = Новый Структура;
	НачалоОтчета(rsMain);
	
	Если БланкДСС="S0301015" Тогда   
		
		с.Вставить("REP_PERNM", "ПериодОтчета"); 	
		с.Вставить("FIRM_NAME", "ОргНазв");    
		
		с.Вставить("FIRM_ADR_FIZ", "ОргАдрес"); 
		с.Вставить("FIRM_ADR", "ОргЮрАдрес");         
		
		// DOCKING 413 + 29.06.2022
		
		//rsMain.Fields.Item("KATOTTG").Value=Док.КАТОТТГ;
		
		// DOCKING 556 + 26.10.2023
		//rsMain.Fields.Item("KATOTTG_FACT").Value=Док.КАТОТТГ;
		Если Лев(Док.КАТОТТГ, 2) = "UA" Тогда
			КАТОТ = Сред(Док.КАТОТТГ, 3);
			rsMain.Fields.Item("KATOTTG_FACT").Value=КАТОТ;
		Иначе
			rsMain.Fields.Item("KATOTTG_FACT").Value=Док.КАТОТТГ;
		КонецЕсли;	
		// DOCKING 556 - 26.10.2023
		
		rsMain.Fields.Item("TER_GROM1").Value=Док.ОргЮрГромада;
		rsMain.Fields.Item("TER_GROM2").Value=Док.ОргГромада;
		
		rsMain.Fields.Item("N_1").Value=Док.НаименованиеПодразделения;
		
		//с.Вставить("N_1", "ПолеДляОчистки5");  
		с.Вставить("N_2", "ОргВЭД");   
		//с.Вставить("N_3", "АдресПодразделение");
		
        rsMain.Fields.Item("RUK").Value=Док.ОргДиректор;
		
		Если Док.Телефон <> 0 Тогда
			rsMain.Fields.Item("VIK_TEL").Value=Док.Телефон;
		КонецЕсли;
		Если Док.EMAIL <> "" Тогда
			rsMain.Fields.Item("VIK_EMAIL").Value=Док.EMAIL;
		КонецЕсли;
		
		// DOCKING 413 - 29.06.2022
		
		
		Попытка
			rsMain.Fields.Item("NOMER").Value=Число(Док["КодПодразделения1"] + Док["КодПодразделения2"] + Док["КодПодразделения3"]);   		
		Исключение
			rsMain.Fields.Item("NOMER").Value="1";
		КонецПопытки;
		
		
		//DOCKING 556 + 26.10.2023
		//сДел1000.Вставить("A1020", "П1020_1");
		//сДел1000.Вставить("A1030", "П1030_1");
		//с.Вставить("A1040", "П1040_1");
		//с.Вставить("A1060", "П1060_1");
		//сДел1000.Вставить("A1070", "П1070_1");	
		
		сДел1000.Вставить("A1020", "П1020_1");
		сДел1000.Вставить("A1030", "П1030_1");
		с.Вставить("A1040", "П1040_1");
		с.Вставить("A1060", "П1060_1");
		сДел1000.Вставить("A1070", "П1070_1");	
		
		//DOCKING 556 - 26.10.2023

		с.Вставить("N1", "ССЧВСравнении"); 
		с.Вставить("N2", "СредняяЗПВСравнении");          	
		
		//с.Вставить("VIK_RUK", "ОргДиректор");
		//Если Док.Телефон <> 0 Тогда
		//	с.Вставить("VIK_TEL", "Телефон"); 
		//КонецЕсли;
		//с.Вставить("VIK_EMAIL", "ЕлПочта"); 
		
	КонецЕсли;	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
	КонецОтчета(Doc);
	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ФинрезДСС(App,  Документ,  БланкДСС,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкДСС, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаФинРез");
	
	Doc.DisableScripts();  	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура; 
	НачалоОтчета(rsMain);
	
	Если БланкДСС="S0100215" Тогда
		
		сДел1000.Вставить("A2000", "П20003");
		сДел1000.Вставить("B2000", "П20004");
		сДел1000.Вставить("A2010", "П20103");
		сДел1000.Вставить("B2010", "П20104");
		сДел1000.Вставить("A2011", "П20113");
		сДел1000.Вставить("B2011", "П20114");
		сДел1000.Вставить("A2012", "_П20123");
		сДел1000.Вставить("B2012", "_П20124");
		сДел1000.Вставить("A2013", "П20133");
		сДел1000.Вставить("B2013", "П20134");
		сДел1000.Вставить("A2014", "П20143");
		сДел1000.Вставить("B2014", "П20144");
		сДел1000.Вставить("A2050", "_П20503");
		сДел1000.Вставить("B2050", "_П20504");
		сДел1000.Вставить("A2070", "_П20703");
		сДел1000.Вставить("B2070", "_П20704");
		сДел1000.Вставить("A2090", "П20903");
		сДел1000.Вставить("B2090", "П20904");
		сДел1000.Вставить("A2095", "_П20953");
		сДел1000.Вставить("B2095", "_П20954");
		сДел1000.Вставить("A2105", "П21053");
		сДел1000.Вставить("B2105", "П21054");
		сДел1000.Вставить("A2110", "П21103");
		сДел1000.Вставить("B2110", "П21104");
		сДел1000.Вставить("A2111", "П21113");
		сДел1000.Вставить("B2111", "П21114");
		сДел1000.Вставить("A2112", "П21123");
		сДел1000.Вставить("B2112", "П21124");
		сДел1000.Вставить("A2120", "П21203");
		сДел1000.Вставить("B2120", "П21204");
		сДел1000.Вставить("A2121", "П21213");
		сДел1000.Вставить("B2121", "П21214");
		сДел1000.Вставить("A2122", "П21223");
		сДел1000.Вставить("B2122", "П21224");
		сДел1000.Вставить("A2123", "П21233");
		сДел1000.Вставить("B2123", "П21234");
		сДел1000.Вставить("A2130", "_П21303");
		сДел1000.Вставить("B2130", "_П21304");
		сДел1000.Вставить("A2150", "_П21503");
		сДел1000.Вставить("B2150", "_П21504");
		сДел1000.Вставить("A2180", "_П21803");
		сДел1000.Вставить("B2180", "_П21804");
		сДел1000.Вставить("A2181", "_П21813");
		сДел1000.Вставить("B2181", "_П21814");
		сДел1000.Вставить("A2182", "_П21823");
		сДел1000.Вставить("B2182", "_П21824");
		сДел1000.Вставить("A2190", "П21903");
		сДел1000.Вставить("B2190", "П21904");
		сДел1000.Вставить("A2195", "_П21953");
		сДел1000.Вставить("B2195", "_П21954");
		сДел1000.Вставить("A2200", "П22003");
		сДел1000.Вставить("B2200", "П22004");
		сДел1000.Вставить("A2220", "П22203");
		сДел1000.Вставить("B2220", "П22204");
		сДел1000.Вставить("A2240", "П22403");
		сДел1000.Вставить("B2240", "П22404");
		сДел1000.Вставить("A2241", "П22413");
		сДел1000.Вставить("B2241", "П22414");
		сДел1000.Вставить("A2250", "_П22503");
		сДел1000.Вставить("B2250", "_П22504");
		сДел1000.Вставить("A2255", "_П22553");
		сДел1000.Вставить("B2255", "_П22554");
		сДел1000.Вставить("A2270", "_П22703");
		сДел1000.Вставить("B2270", "_П22704");
		сДел1000.Вставить("A2275", "П22753");
		сДел1000.Вставить("B2275", "П22754");
		сДел1000.Вставить("A2290", "П22903");
		сДел1000.Вставить("B2290", "П22904");
		сДел1000.Вставить("A2295", "_П22953");
		сДел1000.Вставить("B2295", "_П22954");
		сДел1000.Вставить("A2300", "_П23003");
		сДел1000.Вставить("B2300", "_П23004");
		сДел1000.Вставить("A2305", "П23053");
		сДел1000.Вставить("B2305", "П23054");
		сДел1000.Вставить("A2350", "П23503");
		сДел1000.Вставить("B2350", "П23504");
		сДел1000.Вставить("A2355", "_П23553");
		сДел1000.Вставить("B2355", "_П23554");
		сДел1000.Вставить("A2400", "П24003");
		сДел1000.Вставить("B2400", "П24004");
		сДел1000.Вставить("A2405", "П24053");
		сДел1000.Вставить("B2405", "П24054");
		сДел1000.Вставить("A2410", "П24103");
		сДел1000.Вставить("B2410", "П24104");
		сДел1000.Вставить("A2415", "П24153");
		сДел1000.Вставить("B2415", "П24154");
		сДел1000.Вставить("A2445", "П24453");
		сДел1000.Вставить("B2445", "П24454");
		сДел1000.Вставить("A2450", "П24503");
		сДел1000.Вставить("B2450", "П24504");
		сДел1000.Вставить("A2455", "_П24553");
		сДел1000.Вставить("B2455", "_П24554");
		сДел1000.Вставить("A2460", "П24603");
		сДел1000.Вставить("B2460", "П24604");
		сДел1000.Вставить("A2465", "П24653");
		сДел1000.Вставить("B2465", "П24654");
		сДел1000.Вставить("A2500", "П25003");
		сДел1000.Вставить("B2500", "П25004");
		сДел1000.Вставить("A2505", "П25053");
		сДел1000.Вставить("B2505", "П25054");
		сДел1000.Вставить("A2510", "П25103");
		сДел1000.Вставить("B2510", "П25104");
		сДел1000.Вставить("A2515", "П25153");
		сДел1000.Вставить("B2515", "П25154");
		сДел1000.Вставить("A2520", "П25203");
		сДел1000.Вставить("B2520", "П25204");
		сДел1000.Вставить("A2550", "П25503");
		сДел1000.Вставить("B2550", "П25504");
		с.Вставить("A2600", "П26003");
		с.Вставить("B2600", "П26004");
		с.Вставить("A2605", "П26053");
		с.Вставить("B2605", "П26054");
		с.Вставить("A2610", "П26103");
		с.Вставить("B2610", "П26104");
		с.Вставить("A2615", "П26153");
		с.Вставить("B2615", "П26154");
		с.Вставить("A2650", "П26503");
		с.Вставить("B2650", "П26504");
		
		с.Вставить("FIRM_RUK", "ОргДиректор");
		с.Вставить("FIRM_BUH", "ОргБухгалтер");
	КонецЕсли;	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
	КонецОтчета(Doc); 	
КонецПроцедуры

&НаКлиенте
Процедура Формирование_ФинрезМДЗ(App,  Документ,  БланкМДЗ,  PDate,  ИД)
	
	Doc = App.OpenOrCreateByExDocID(БланкМДЗ, ОпределитьКодПериода(Документ.Дата), PDate, , ИД, 0);
	
	//Док = Документ.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаФинРез;
	Док = ПолучитьСтруктуруРегОтчета(Документ,"ПолеТабличногоДокументаФинРез");
	
	Doc.DisableScripts();  	
	rsMain = Doc.DataSets(); 
	с = Новый Структура;
	сДел1000 = Новый Структура;
	сДесЗн = Новый Структура;
	НачалоОтчета(rsMain);
	
	Если БланкМДЗ="J0900207" Тогда
		
		сДел1000.Вставить("A2000", "П20003");
		сДел1000.Вставить("B2000", "П20004");
		сДел1000.Вставить("A2010", "П20103");
		сДел1000.Вставить("B2010", "П20104");
		сДел1000.Вставить("A2011", "П20113");
		сДел1000.Вставить("B2011", "П20114");
		сДел1000.Вставить("A2012", "_П20123");
		сДел1000.Вставить("B2012", "_П20124");
		сДел1000.Вставить("A2013", "П20133");
		сДел1000.Вставить("B2013", "П20134");
		сДел1000.Вставить("A2014", "П20143");
		сДел1000.Вставить("B2014", "П20144");
		сДел1000.Вставить("A2050", "_П20503");
		сДел1000.Вставить("B2050", "_П20504");
		сДел1000.Вставить("A2070", "_П20703");
		сДел1000.Вставить("B2070", "_П20704");
		сДел1000.Вставить("A2090", "П20903");
		сДел1000.Вставить("B2090", "П20904");
		сДел1000.Вставить("A2095", "_П20953");
		сДел1000.Вставить("B2095", "_П20954");
		сДел1000.Вставить("A2105", "П21053");
		сДел1000.Вставить("B2105", "П21054");
		сДел1000.Вставить("A2110", "П21103");
		сДел1000.Вставить("B2110", "П21104");
		сДел1000.Вставить("A2111", "П21113");
		сДел1000.Вставить("B2111", "П21114");
		сДел1000.Вставить("A2112", "П21123");
		сДел1000.Вставить("B2112", "П21124");
		сДел1000.Вставить("A2120", "П21203");
		сДел1000.Вставить("B2120", "П21204");
		сДел1000.Вставить("A2121", "П21213");
		сДел1000.Вставить("B2121", "П21214");
		сДел1000.Вставить("A2122", "П21223");
		сДел1000.Вставить("B2122", "П21224");
		сДел1000.Вставить("A2130", "_П21303");
		сДел1000.Вставить("B2130", "_П21304");
		сДел1000.Вставить("A2150", "_П21503");
		сДел1000.Вставить("B2150", "_П21504");
		сДел1000.Вставить("A2180", "_П21803");
		сДел1000.Вставить("B2180", "_П21804");
		сДел1000.Вставить("A2181", "_П21813");
		сДел1000.Вставить("B2181", "_П21814");
		сДел1000.Вставить("A2182", "_П21823");
		сДел1000.Вставить("B2182", "_П21824");
		сДел1000.Вставить("A2190", "П21903");
		сДел1000.Вставить("B2190", "П21904");
		сДел1000.Вставить("A2195", "_П21953");
		сДел1000.Вставить("B2195", "_П21954");
		сДел1000.Вставить("A2200", "П22003");
		сДел1000.Вставить("B2200", "П22004");
		сДел1000.Вставить("A2220", "П22203");
		сДел1000.Вставить("B2220", "П22204");
		сДел1000.Вставить("A2240", "П22403");
		сДел1000.Вставить("B2240", "П22404");
		сДел1000.Вставить("A2241", "П22413");
		сДел1000.Вставить("B2241", "П22414");
		сДел1000.Вставить("A2250", "_П22503");
		сДел1000.Вставить("B2250", "_П22504");
		сДел1000.Вставить("A2255", "_П22553");
		сДел1000.Вставить("B2255", "_П22554");
		сДел1000.Вставить("A2270", "_П22703");
		сДел1000.Вставить("B2270", "_П22704");
		сДел1000.Вставить("A2275", "П22753");
		сДел1000.Вставить("B2275", "П22754");
		сДел1000.Вставить("A2290", "П22903");
		сДел1000.Вставить("B2290", "П22904");
		сДел1000.Вставить("A2295", "_П22953");
		сДел1000.Вставить("B2295", "_П22954");
		сДел1000.Вставить("A2300", "_П23003");
		сДел1000.Вставить("B2300", "_П23004");
		сДел1000.Вставить("A2305", "П23053");
		сДел1000.Вставить("B2305", "П23054");
		сДел1000.Вставить("A2350", "П23503");
		сДел1000.Вставить("B2350", "П23504");
		сДел1000.Вставить("A2355", "_П23553");
		сДел1000.Вставить("B2355", "_П23554");
		сДел1000.Вставить("A2400", "П24003");
		сДел1000.Вставить("B2400", "П24004");
		сДел1000.Вставить("A2405", "П24053");
		сДел1000.Вставить("B2405", "П24054");
		сДел1000.Вставить("A2410", "П24103");
		сДел1000.Вставить("B2410", "П24104");
		сДел1000.Вставить("A2415", "П24153");
		сДел1000.Вставить("B2415", "П24154");
		сДел1000.Вставить("A2445", "П24453");
		сДел1000.Вставить("B2445", "П24454");
		сДел1000.Вставить("A2450", "П24503");
		сДел1000.Вставить("B2450", "П24504");
		сДел1000.Вставить("A2455", "_П24553");
		сДел1000.Вставить("B2455", "_П24554");
		сДел1000.Вставить("A2460", "П24603");
		сДел1000.Вставить("B2460", "П24604");
		сДел1000.Вставить("A2465", "П24653");
		сДел1000.Вставить("B2465", "П24654");
		сДел1000.Вставить("A2500", "П25003");
		сДел1000.Вставить("B2500", "П25004");
		сДел1000.Вставить("A2505", "П25053");
		сДел1000.Вставить("B2505", "П25054");
		сДел1000.Вставить("A2510", "П25103");
		сДел1000.Вставить("B2510", "П25104");
		сДел1000.Вставить("A2515", "П25153");
		сДел1000.Вставить("B2515", "П25154");
		сДел1000.Вставить("A2520", "П25203");
		сДел1000.Вставить("B2520", "П25204");
		сДел1000.Вставить("A2550", "П25503");
		сДел1000.Вставить("B2550", "П25504");
		сДел1000.Вставить("A2600", "П26003");
		сДел1000.Вставить("B2600", "П26004");
		сДел1000.Вставить("A2605", "П26053");
		сДел1000.Вставить("B2605", "П26054");
		с.Вставить("A2610", "П26103");
		с.Вставить("B2610", "П26104");
		с.Вставить("A2615", "П26153");
		с.Вставить("B2615", "П26154");
		с.Вставить("A2650", "П26503");
		с.Вставить("B2650", "П26504");	
		с.Вставить("FIRM_RUK", "ОргДиректор");
		с.Вставить("FIRM_BUH", "ОргБухгалтер");  	
	КонецЕсли;	
	
	ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain);
	ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain);
	КонецОтчета(Doc);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложенияЕСВ(App, ИД)
	
	Если App.GetSendSTTByExDocID(ИД+"P1") <> -1 и App.GetInTrashStatus(ИД+"P1") = Ложь  Тогда
		App.MoveToTrash(ИД+"P1");
	КонецЕсли;
	
	Если App.GetSendSTTByExDocID(ИД+"P2") <> -1 и App.GetInTrashStatus(ИД+"P2") = Ложь  Тогда
		App.MoveToTrash(ИД+"P2");
	КонецЕсли;
	Если App.GetSendSTTByExDocID(ИД+"P3") <> -1 и App.GetInTrashStatus(ИД+"P3") = Ложь  Тогда
		App.MoveToTrash(ИД+"P3");
	КонецЕсли;
	
	
	Если App.GetSendSTTByExDocID(ИД+"41") <> -1 и App.GetInTrashStatus(ИД+"41") = Ложь  Тогда
		App.MoveToTrash(ИД+"41");
	КонецЕсли;
	Если App.GetSendSTTByExDocID(ИД+"42") <> -1 и App.GetInTrashStatus(ИД+"42") = Ложь  Тогда
		App.MoveToTrash(ИД+"42");
	КонецЕсли;
	
	
	Если App.GetSendSTTByExDocID(ИД+"43") <> -1 и App.GetInTrashStatus(ИД+"43") = Ложь  Тогда
		App.MoveToTrash(ИД+"43");
	КонецЕсли;
	
	Если App.GetSendSTTByExDocID(ИД+"51") <> -1 и App.GetInTrashStatus(ИД+"51") = Ложь  Тогда
		App.MoveToTrash(ИД+"51");
	КонецЕсли;
	
	Если App.GetSendSTTByExDocID(ИД+"61") <> -1 и App.GetInTrashStatus(ИД+"61") = Ложь  Тогда
		App.MoveToTrash(ИД+"61");
	КонецЕсли;
	Если App.GetSendSTTByExDocID(ИД+"62") <> -1 и App.GetInTrashStatus(ИД+"62") = Ложь  Тогда
		App.MoveToTrash(ИД+"62");
	КонецЕсли;
	Если App.GetSendSTTByExDocID(ИД+"63") <> -1 и App.GetInTrashStatus(ИД+"63") = Ложь  Тогда
		App.MoveToTrash(ИД+"63");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложенияЕСВ_стар(App, ИД)
	
	Если App.GetSendSTTByExDocID(ИД+"P1") <> -1 и App.GetInTrashStatus(ИД+"P1") = Ложь  Тогда
		App.MoveToTrash(ИД+"P1");
	КонецЕсли;
	
	Если App.GetSendSTTByExDocID(ИД+"P5") <> -1 и App.GetInTrashStatus(ИД+"P5") = Ложь  Тогда
		App.MoveToTrash(ИД+"P5");
	КонецЕсли;
	Если App.GetSendSTTByExDocID(ИД+"P6") <> -1 и App.GetInTrashStatus(ИД+"P6") = Ложь  Тогда
		App.MoveToTrash(ИД+"P6");
	КонецЕсли;
	
	Если App.GetSendSTTByExDocID(ИД+"P7") <> -1 и App.GetInTrashStatus(ИД+"P7") = Ложь  Тогда
		App.MoveToTrash(ИД+"P7");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложенияДекларацияОПрибыли_НДС(App, ИД)
	
	Для Элемент = 1 По 9 Цикл
		Попытка
			Если App.GetSendSTTByExDocID(ИД+"-"+Элемент) <> -1 и App.GetInTrashStatus(ИД+"-"+Элемент) = Ложь  Тогда
				App.MoveToTrash(ИД+"-"+Элемент);
			КонецЕсли;
		Исключение
		//
		КонецПопытки;
	КонецЦикла;
	
	СуществуетДодаток = Истина;
	Элемент = 1;
	
	Пока СуществуетДодаток Цикл
		
		Если App.GetSendSTTByExDocID(ИД+Элемент) <> -1 и App.GetInTrashStatus(ИД+Элемент) = Ложь  Тогда
			App.MoveToTrash(ИД+Элемент);
			Элемент = Элемент + 1;
		Иначе
			СуществуетДодаток = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложенияДекларацияОПрибыли(App, ИД)
	
	Для Элемент = 1 По 14 Цикл
		Попытка
			Если App.GetSendSTTByExDocID(ИД+"-"+Элемент) <> -1 и App.GetInTrashStatus(ИД+"-"+Элемент) = Ложь  Тогда
				App.MoveToTrash(ИД+"-"+Элемент);
			КонецЕсли;
		Исключение
		//
		КонецПопытки;
	КонецЦикла;
	
	СуществуетДодаток = Истина;
	Элемент = 1;
	
	Пока СуществуетДодаток Цикл
		
		Если App.GetSendSTTByExDocID(ИД+Элемент) <> -1 и App.GetInTrashStatus(ИД+Элемент) = Ложь  Тогда
			App.MoveToTrash(ИД+Элемент);
			Элемент = Элемент + 1;
		Иначе
			СуществуетДодаток = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ОпределитьКодПериода(Дата,ВидДокумента = Неопределено) 
	
	Перем КодПериода;
	попытка
		ПериодПодачи = Элементы.ТаблицаОтчетов.ТекущиеДанные.Периодичность;
	исключение конецпопытки;

	Если ВидДокумента = "ДекларацияНДС" или  ВидДокумента = "УточняющийРасчетДекларацияНДС" Тогда
		Если Строка(ПериодПодачи) = "Месяц" или Строка(ПериодПодачи) = "Місяць" Тогда
			КодПериода = 0
		Иначе
			КодПериода = 10
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ДекларацияПрибыль" Тогда 
		
		Если Месяц(Дата) = 3 Тогда
			КодПериода = 10
		ИначеЕсли Месяц(Дата) = 9 Тогда
			КодПериода = 25
		ИначеЕсли Месяц(Дата)= 12 Тогда 
			КодПериода = 30
		КонецЕсли;
		
	Иначе
		
		Если Месяц(Дата) = 3 Тогда
			КодПериода = 10
		ИначеЕсли Месяц(Дата) = 6 Тогда
			КодПериода = 20
		ИначеЕсли Месяц(Дата) = 9 Тогда
			КодПериода = 25
		ИначеЕсли Месяц(Дата)= 12 Тогда 
			КодПериода = 30
		Иначе
			КодПериода = 0
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат КодПериода;
	
КонецФункции

&НаСервере
Функция ОпределитьКодПериодаСервер(Дата,ВидДокумента = Неопределено) 
	
	Перем КодПериода;
	попытка
		ПериодПодачи = Элементы.ТаблицаОтчетов.ТекущиеДанные.Периодичность;
	исключение конецпопытки;

	Если ВидДокумента = "ДекларацияНДС" или  ВидДокумента = "УточняющийРасчетДекларацияНДС" Тогда
		Если Строка(ПериодПодачи) = "Месяц" или Строка(ПериодПодачи) = "Місяць" Тогда
			КодПериода = 0
		Иначе
			КодПериода = 10
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ДекларацияПрибыль" Тогда 
		
		Если Месяц(Дата) = 3 Тогда
			КодПериода = 10
		ИначеЕсли Месяц(Дата) = 9 Тогда
			КодПериода = 25
		ИначеЕсли Месяц(Дата)= 12 Тогда 
			КодПериода = 30
		КонецЕсли;
		
	Иначе
		
		Если Месяц(Дата) = 3 Тогда
			КодПериода = 10
		ИначеЕсли Месяц(Дата) = 6 Тогда
			КодПериода = 20
		ИначеЕсли Месяц(Дата) = 9 Тогда
			КодПериода = 25
		ИначеЕсли Месяц(Дата)= 12 Тогда 
			КодПериода = 30
		Иначе
			КодПериода = 0
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат КодПериода;
	
КонецФункции

&НаКлиенте
Процедура НачалоОтчета(rsMain)
	
	rsMain.Edit();       
	rsMain.Append();
	rsMain.Post();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеребратьПоляОтчетаКакЕсть(Док, с, rsMain)
	
	Для Каждого Элемент из с Цикл 
		Если Не Лев(Элемент.Значение,1) = "_" Тогда
			Попытка
				rsMain.Fields.Item(Элемент.Ключ).Value = Док[Элемент.Значение];
			Исключение
				// DOCKING 527 + 30.08.2023
				//Сообщить("Невозможно передать: """ + Элемент.Ключ + """ в """ + Элемент.Значение + """");
				// DOCKING 527 - 30.08.2023
			КонецПопытки;
		Иначе 
			Попытка
				ЗначениеПоля=(УбратьСкобкиТире(Док[Элемент.Значение]));
				rsMain.Fields.Item(Элемент.Ключ).Value=?(ЗначениеЗаполнено(ЗначениеПоля), Число(ЗначениеПоля) * 1000, "");
			Исключение
				// DOCKING 527 + 30.08.2023
				//Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				// DOCKING 527 - 30.08.2023
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеребратьПоляОтчетаУмн1000(Док, сУмн1000, rsMain)
	
	Для Каждого Элемент из сУмн1000 Цикл 
		
		Попытка
			rsMain.Fields.Item(Элемент.Ключ).Value=Док[Элемент.Значение] * 1000;
		Исключение
			Сообщить("Невозможно передать: """ + Элемент.Ключ + """ в """ + Элемент.Значение + """");
		КонецПопытки;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеребратьПоляОтчетаДел1000(Док, сДел1000, rsMain)
	
	Для Каждого Элемент из сДел1000 Цикл 		
		Если Не Лев(Элемент.Значение,1)="_" Тогда
			Попытка
				ЗначениеПоля= Док[Элемент.Значение];
				rsMain.Fields.Item(Элемент.Ключ).Value=Окр(Число(ЗначениеПоля), -2, 1) /1000;
			Исключение
				rsMain.Fields.Item(Элемент.Ключ).Value=Док[Элемент.Значение];
			КонецПопытки;
		Иначе 
			Попытка
				ЗначениеПоля=(УбратьСкобкиТире(Док[Элемент.Значение]));
				rsMain.Fields.Item(Элемент.Ключ).Value=?(ЗначениеЗаполнено(ЗначениеПоля), Число(ЗначениеПоля), "");
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонецОтчета(Doc)
	
	Doc.EnableScripts();
	Doc.Save(1);
	Doc.Close(); 	
	
КонецПроцедуры

&НаКлиенте
Функция УбратьСкобкиТире(Поле)
	
	Перем ПолеКЗамене;
	
	ПолеКЗамене = СтрЗаменить(Поле, "(", "");
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, ")", ""); 
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, "-", "");
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, ".", "");
	ПолеКЗамене = СтрЗаменить(ПолеКЗамене, " ", "");
	
	Возврат СокрЛП(ПолеКЗамене);
	
КонецФункции
				
&НаСервере
Функция ЗапросПоискаРегОтчета(НачПериодаОтч,КонПериодаОтч,ОрганизацияОтчета,ТипДокОтчета)
	
	Запрос = Новый Запрос(); 		
	Текст = 
	"ВЫБРАТЬ
	| *
	|ИЗ
	|	Документ.РегламентированныйОтчет как РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Дата МЕЖДУ &НачПериодаОтч И &КонПериодаОтч
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета	
	|	И РегламентированныйОтчет.Организация = &ОрганизацияОтчета	
	|УПОРЯДОЧИТЬ ПО
	|  РегламентированныйОтчет.ДатаПодписи УБЫВ";
	
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("НачПериодаОтч",  НачалоДня(НачПериодаОтч));
	Запрос.УстановитьПараметр("КонПериодаОтч",  КонецДня(КонПериодаОтч));
	Запрос.УстановитьПараметр("ОрганизацияОтчета",  ОрганизацияОтчета);
	Запрос.УстановитьПараметр("ИсточникОтчета", ТипДокОтчета);
			
	Результат  =  Запрос.Выполнить().Выгрузить();	
	
	кол =  Результат.Количество();
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции
	
&НаКлиенте
Функция СоздатьОтчет(кодОтчета, типПериода, датаПериода, едрпоуОрганизации, кодРодителя, Форма)
	
	мед = Новый COMОбъект("MEDOC.ZApplication");
	док = мед.CreateDocumentByParam(кодОтчета, типПериода, датаПериода, 0);
	док.ClearDoc();
	Если кодРодителя > 0 Тогда
		док.IDParent = кодРодителя;
	КонецЕсли;
		
	отчетЗвит1С	= док.Zvit1CReport;
	фе = отчетЗвит1С.FIRM_EDRPOU;
	 //Форма.глКомпонентаЗвит1С= отчетЗвит1С.ZvitInterop;
	 	 
	данные = Новый Структура;
	данные.Вставить("ОтчетЗвит1С", отчетЗвит1С);
	данные.Вставить("ОткрыватьОтчет", Ложь);
	Если кодОтчета = "J0500105" или кодОтчета = "F0500105" Тогда
		Форма.ФлагОтладкиПакетноеТестирование = Истина;
	КонецЕсли;
	//Если кодОтчета = "S0110011" Тогда
	//	Форма.АдресВременногоХранилищаРасшифровкиЗвит1С = Неопределено;
	//КонецЕсли;	
	Форма.ОбработкаВнешнегоСобытияЗвит1С(, "REPORT", данные);	
	док.Save();
	Возврат док.CardCode;
КонецФункции

&НаКлиенте
Процедура СоздатьПакетОтчетов(кодГлавногоОтчета, списокКодовДочерних, типПериода, датаПериода, едрпоуОрганизации)
	
	мед = Новый COMОбъект("MEDOC.ZApplication");
	Если едрпоуОрганизации <> мед.GetCurrEdrpou() Тогда
		Сообщить("Текущая организация M.E.Doc отличается от организации в отчете.");
		Возврат;
	КонецЕсли;
	Форма = ПолучитьФорму("Отчет.РегламентированныйОтчетМенеджерЗвит1С.Форма.Форма");
	//Форма.Открыть();
	Если НЕ кодГлавногоОтчета = "S0110014" Тогда
		Форма.ОбработкаВнешнегоСобытияЗвит1С(, "BEGINREPGROUP", );
	КонецЕсли;	
	//РаботаСМенеджером("СОЗДАТЬ");
	Форма.Инициализация(Ложь);
	МенеджерЗвит1С = Новый Структура;
	МенеджерЗвит1С.Вставить("ФлагОтладки", Ложь);
	//глМенеджерЗвит1С.Вставить("ФлагОтладкиПакетноеТестирование", Истина);
	//РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Ложь);
	//ОбработкаВнешнегоСобытияЗвит1С(, "BEGINREPGROUP", );
	Попытка
		главный = СоздатьОтчет(кодГлавногоОтчета, типПериода, датаПериода, едрпоуОрганизации, 0, Форма);
		Если главный > 0 Тогда
			Для Каждого дочКод Из списокКодовДочерних Цикл
				СоздатьОтчет(Строка(дочКод), типПериода, датаПериода, едрпоуОрганизации, главный, Форма);
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Форма.ОбработкаВнешнегоСобытияЗвит1С(, "ENDREPGROUP", );
	мед.RefreshRstDoc();
	//глМенеджерЗвит1С = Неопределено;
КонецПроцедуры	

&НаКлиенте
Функция ДатьСписокПериодов()
	сп = Новый СписокЗначений;
	
	сп.Добавить(НСтр("ru = 'Январь'; uk = 'Січень'"));
	сп.Добавить(НСтр("ru = 'Февраль'; uk = 'Лютий'"));
	сп.Добавить(НСтр("ru = 'Март'; uk = 'Березень'"));
	сп.Добавить(НСтр("ru = 'I Квартал'; uk = 'I Квартал'"));
	сп.Добавить(НСтр("ru = 'Апрель'; uk = 'Квітень'"));
	сп.Добавить(НСтр("ru = 'Май'; uk = 'Травень'"));
	сп.Добавить(НСтр("ru = 'Июнь'; uk = 'Червень'"));
	сп.Добавить(НСтр("ru = 'II Квартал'; uk = 'II Квартал'"));
//	сп.Добавить(НСтр("ru = 'I Полугодие'; uk = 'I Півріччя'"));
	сп.Добавить(НСтр("ru = 'Июль'; uk = 'Липень'"));
	сп.Добавить(НСтр("ru = 'Август'; uk = 'Серпень'"));
	сп.Добавить(НСтр("ru = 'Сентябрь'; uk = 'Вересень'"));
	сп.Добавить(НСтр("ru = 'III Квартал'; uk = 'III Квартал'"));
//	сп.Добавить(НСтр("ru = '9 месяцев'; uk = '9 місяців'"));
	сп.Добавить(НСтр("ru = 'Октябрь'; uk = 'Жовтень'"));
	сп.Добавить(НСтр("ru = 'Ноябрь'; uk = 'Листопад'"));
	сп.Добавить(НСтр("ru = 'Декабрь'; uk = 'Грудень'"));
	сп.Добавить(НСтр("ru = 'IV Квартал'; uk = 'IV Квартал'"));
//	сп.Добавить(НСтр("ru = 'II Полугодие'; uk = 'II Півріччя'"));
//	сп.Добавить(НСтр("ru = 'Год'; uk = 'Рік'"));
	
	Возврат сп;
КонецФункции

&НаКлиенте
Процедура ВидимостРегОтчетСпискаЮр()
	Элементы.РегламентированныеОтчетыФиз.Видимость = Ложь;
	Элементы.РегламентированныеОтчеты.Видимость = Истина;
	Таб4ф = Ложь;
	Таб7ф = Ложь;
	Таб4ф = Ложь;
	Таб6 = Ложь;
	ДФФ = Ложь;
	ФЗФ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостРегОтчетСпискаФиз()
	Элементы.РегламентированныеОтчеты.Видимость = Ложь;	
	Элементы.РегламентированныеОтчетыФиз.Видимость = Истина;
	Таб4 = Ложь;
	Таб7 = Ложь;
	ДФЮ = Ложь;
	ФЗЮ = Ложь;
КонецПроцедуры

&НаСервере
Функция КодЕДРПОУ(организация) Экспорт
	Возврат СокрЛП(Организация.КодПоЕДРПОУ);
КонецФункции

&НаКлиенте
Функция ДатьОргМЕДок()
	Попытка
		мед = Новый COMОбъект("MEDOC.ZApplication");
		Возврат мед.GetCurrEdrpou();
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция ДатьСписокПериодовФиз()
	 сппф = Новый СписокЗначений;
	 сппф = ДатьСписокПериодов();
	 сппф.Добавить(НСтр("ru = 'Год'; uk = 'Рік'"));
	 
	 Возврат сппф;
КонецФункции

&НаКлиенте
Процедура Период1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Период = ЭтаФорма.ВыбратьИзСписка(ДатьСписокПериодовФиз());
	Если Период = "Год" или Период = "Рік" Тогда
		Элементы.Таб5.Доступность = Истина;
		Элементы.Таб6.Доступность = Истина;
		Элементы.ФЗФ.Доступность = Истина;
		Таб4ф = Ложь;
		Таб7ф = Ложь;
		ДФФ = Ложь;
		Элементы.ДФФ.Доступность = Ложь;
		Элементы.Таб4ф.Доступность = Ложь;
		Элементы.Таб7ф.Доступность = Ложь;
		Таб4ФизПриИзменении(Элемент);
		Таб7фПриИзменении(Элемент);
		
	ИначеЕсли Период = "I Квартал" Или Период = "IV Квартал" Или Период = "II Квартал" Или Период = "III Квартал" тогда
		Элементы.Таб5.Доступность = Ложь;
		Элементы.Таб6.Доступность = Ложь;
		Элементы.Таб4ф.Доступность = Ложь;
		Элементы.Таб7ф.Доступность = Ложь;
		Элементы.ДФФ.Доступность = Истина;
		Элементы.ФЗФ.Доступность = Истина;
		Таб5 = Ложь;
		Таб6 = Ложь;
		Таб4ф = Ложь;
		Таб7ф = Ложь;
		Таб5ПриИзменении(Элемент);
		Таб6ПриИзменении(Элемент);
		Таб4ФизПриИзменении(Элемент);
		Таб7фПриИзменении(Элемент);	

	Иначе 
		Элементы.Таб5.Доступность = Ложь;
		Элементы.Таб6.Доступность = Ложь;
		Элементы.ДФФ.Доступность = Ложь;
		Элементы.ФЗФ.Доступность = Ложь;
		Таб5 = Ложь;
		Таб6 = Ложь;
		ДФФ = Ложь;
		ФЗФ = Ложь;
		Элементы.Таб4ф.Доступность = Истина;
		Элементы.Таб7ф.Доступность = Истина;
		Таб5ПриИзменении(Элемент);
		Таб6ПриИзменении(Элемент);
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;
// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрированныеПоДанным1СПланПриИзменении(Элемент)
	Элементы.ДаП.Доступность = ЗарегистрированныеПоДанным1СПлан;
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрированныеПоДанным1СПриИзменении(Элемент)
	Элементы.ДаФ.Доступность = ЗарегистрированныеПоДанным1С;
КонецПроцедуры

// СОФТКОМ Петренко 18.12.17
Функция СформироватьРТУ(ВыборСкидки,Документ,Схлопнуть=0)
		
	Запрос  =  Новый Запрос;
	//11.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ЦенаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РеализацияТоваровУслугТовары.Количество, 
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
		//|	РеализацияТоваровУслугТовары.Упаковка КАК Единица,
		|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка,
		|	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения КАК Единица,
	// 27.06.2022 + DOCKING 403
	    |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	// 27.06.2022 - DOCKING 403
		|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ";
	
	ИначеЕсли  Объект.Конфигурация = "SB" Тогда
	
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.Номенклатура.Код КАК КодНоменклатуры,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК Наименование, 
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РасходнаяНакладнаяЗапасы.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасходнаяНакладнаяЗапасы.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РасходнаяНакладнаяЗапасы.Цена / 1.2
		|					ТОГДА РасходнаяНакладнаяЗапасы.Цена 
		|				ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РасходнаяНакладнаяЗапасы.Количество, 
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма, 
		//|	РасходнаяНакладнаяЗапасы.Упаковка КАК Единица,
		//|	РасходнаяНакладнаяЗапасы.Упаковка КАК Упаковка,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения КАК Единица,
	// 27.06.2022 + DOCKING 403
	    |	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
	// 27.06.2022 - DOCKING 403
		|	РасходнаяНакладнаяЗапасы."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка  =  &Документ";
		
	Иначе
	//11.01.2022 - DOCKING 368	
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РеализацияТоваровУслугТовары.Количество, 
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Единица,
	// 27.06.2022 + DOCKING 403
	    |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	// 27.06.2022 - DOCKING 403	
		|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК КодНоменклатуры,
		|	РеализацияТоваровУслугУслуги.Содержание, 
		|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугУслуги.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	РеализацияТоваровУслугУслуги.Количество, 
		|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		|	""шт"" ,
	// 27.06.2022 + DOCKING 403
	    |	РеализацияТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
	// 27.06.2022 - DOCKING 403
		|	РеализацияТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ";
		
			
	КонецЕсли;
	Если Объект.Конфигурация = "SB" Тогда
		Запрос.УстановитьПараметр("Ставка20",  Справочники.СтавкиНДС.НайтиПоНаименованию("20%"));		
	Иначе
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ",  Документ);		
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	// DOCKING 608 + 30.11.2023
	Если Схлопнуть = 1 Тогда
		Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			Результат.Свернуть("Наименование, Номенклатура, Артикул, КодНоменклатуры, ЦенаБезНДС, СтавкаНДС, Упаковка, Единица","Количество,Скидка,СуммаНДС,Сумма");
		Иначе
			Результат.Свернуть("Наименование, Номенклатура, Артикул, КодНоменклатуры, ЦенаБезНДС, СтавкаНДС, Единица","Количество,Скидка,СуммаНДС,Сумма");
		КонецЕсли;	
	КонецЕсли;
	// DOCKING 608 - 30.11.2023	
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);
	
	Возврат РезультатМассив;

КонецФункции
//  ---------- Для проверки шаблонов Epiroc-------------
Функция СформироватьРТУ_Товары(ВыборСкидки,Документ)
		
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодНоменклатуры,
	|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
	|			ТОГДА РеализацияТоваровУслугТовары.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
	|					ТОГДА РеализацияТоваровУслугТовары.Цена 
	|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаБезНДС, 
	|	РеализацияТоваровУслугТовары.Количество, 
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Единица,
	|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);		
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;

КонецФункции

Функция СформироватьРТУ_Услуги(ВыборСкидки,Документ)
		
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК КодНоменклатуры,
	|	РеализацияТоваровУслугУслуги.Содержание, 
	|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
	|			ТОГДА РеализацияТоваровУслугУслуги.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
	|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
	|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	РеализацияТоваровУслугУслуги.Количество, 
	|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
	|	""шт"" ,
	|	РеализацияТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);		
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;

КонецФункции
// END ---------- Для проверки шаблонов Epiroc-------------

//  ---------- Для проверки шаблонов USV-------------
Функция СформироватьПТУ_Товары(ВыборСкидки,Документ)
		
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код КАК КодНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК Наименование, 
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
	|			ТОГДА ПоступлениеТоваровУслугТовары.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПоступлениеТоваровУслугТовары.СтавкаНДС  =  &Ставка20
	|					ТОГДА ПоступлениеТоваровУслугТовары.Цена 
	|				ИНАЧЕ ПоступлениеТоваровУслугТовары.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаБезНДС, 
	|	ПоступлениеТоваровУслугТовары.Количество, 
	|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма, 
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК Единица
	//|	ПоступлениеТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);		
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;

КонецФункции

Функция СформироватьПТУ_Услуги(ВыборСкидки,Документ)
		
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Код КАК КодНоменклатуры,
	|	ПоступлениеТоваровУслугУслуги.Содержание, 
	|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПоступлениеТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
	|					ТОГДА ПоступлениеТоваровУслугУслуги.Цена 
	|				ИНАЧЕ ПоступлениеТоваровУслугУслуги.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	ПоступлениеТоваровУслугУслуги.Количество, 
	|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК Единица
	//|	ПоступлениеТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка  =  &Документ";
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);		
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;

КонецФункции
// END ---------- Для проверки шаблонов USV-------------
&НаСервере
Функция ОпределитьШаблонДляАкт(Документ)
	Если  Строка(ТипЗнч(Документ)) = "Реалізація товарів і послуг" или Строка(ТипЗнч(Документ)) = "Реализация товаров и услуг" тогда
		 ТоварыИУслуги = Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС");
	ИначеЕсли Строка(ТипЗнч(Документ)) = "Видаткова накладна" или Строка(ТипЗнч(Документ)) = "Расходная накладная" тогда
		 ТоварыИУслуги = Документ.Запасы.Итог("СуммаНДС");
	ИначеЕсли (Строка(ТипЗнч(Документ)) = "Акт виконаних робіт" или Строка(ТипЗнч(Документ)) = "Акт выполненных работ") И Объект.Конфигурация = "SB" тогда 
		 ТоварыИУслуги = Документ.РаботыИУслуги.Итог("СуммаНДС");
	Иначе
		//Если "Надання виробничих послуг" то нет "Товары"
		ТоварыИУслуги = Документ.Услуги.Итог("СуммаНДС");	 
	КонецЕсли;	
	
	// - DOCKING-277 27.07.2021
	Попытка
		Если НЕ Документ.Услуги.Найти(Перечисления.СтавкиНДС.НДС0, "СтавкаНДС") = Неопределено Тогда
			
			Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если Документ.ЦенаВключаетНДС Тогда
					Возврат  "1САКТ";
				Иначе
					Возврат  "1САКТ0";
				КонецЕсли;
				
			Иначе
				Если Документ.СуммаВключаетНДС Тогда
					Возврат  "1САКТ";
				Иначе
					Возврат  "1САКТ0";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Исключение КонецПопытки;
	
	// + DOCKING-277 27.07.2021
	
	//---------------------------------------------------------   + DOCKING-459 27.11.2022
	Попытка
		Если НЕ Документ.РаботыИУслуги.Найти(Перечисления.ВидыСтавокНДС.Нулевая, "СтавкаНДС") = Неопределено Тогда
			
			Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если Документ.ЦенаВключаетНДС Тогда
					Возврат  "1САКТ";
				Иначе
					Возврат  "1САКТ0";
				КонецЕсли;
				
			Иначе
				Если Документ.СуммаВключаетНДС Тогда
					Возврат  "1САКТ";
				Иначе
					Возврат  "1САКТ0";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Исключение КонецПопытки;	
	//---------------------------------------------------------  - DOCKING-459 27.11.2022
	
	Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		Если ТоварыИУслуги = 0 Тогда
			Возврат "1С82АВРБ";
		ИначеЕсли Документ.ЦенаВключаетНДС = Ложь Тогда
			Возврат  "1С82АВР0";
		Иначе
			Возврат  "1С82АВР";
		КонецЕсли;
		
	Иначе
		Если ТоварыИУслуги = 0 Тогда
			Возврат "1С82АВРБ";
		ИначеЕсли Документ.СуммаВключаетНДС = Ложь Тогда
			Возврат  "1С82АВР0";
		Иначе
			Возврат  "1С82АВР";
		КонецЕсли;
	КонецЕсли;        	

	
КонецФункции

&НаСервере
Функция ОпределитьШаблонДляВозвратПоставщику(Документ)
	
	//13.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
		Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
			Бланк  =  "102_2";
		Иначе
			Бланк = "102";
		КонецЕсли;	
		
		Если Документ.Товары.Итог("СуммаНДС") = 0 Тогда 
			Бланк  =  "102_1"
		КонецЕсли;
		
		Если НЕ Документ.Товары.Найти(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"), "СтавкаНДС") = Неопределено Тогда
			Если (ПолучитьРеквизит(Документ, "ЦенаВключаетНДС")) = Ложь Тогда
				Бланк  =  "102_2";
			Иначе
				Бланк  =  "102";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
	//13.01.2022 - DOCKING 368	
	
		Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
			Бланк  =  "102_2";
		Иначе
			Бланк = "102";
		КонецЕсли;	
		
		Если Документ.Товары.Итог("СуммаНДС") = 0 Тогда 
			Бланк  =  "102_1"
		КонецЕсли;
		
		Если НЕ Документ.Товары.Найти(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"), "СтавкаНДС") = Неопределено Тогда
			Если (ПолучитьРеквизит(Документ, "СуммаВключаетНДС")) = Ложь Тогда
				Бланк  =  "102_2";
			Иначе
				Бланк  =  "102";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат  Бланк;
	
КонецФункции

&НаСервере
Функция ОпределитьШаблонДляСчета(Документ)
	
	//12.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
		Если Документ.СуммаВключаетНДС = Ложь Тогда
			Возврат  "1С82РАХ0";
		Иначе
			Возврат  "1С82РАХ";
		КонецЕсли;
		
	Иначе
	//12.01.2022 - DOCKING 368
		Если (Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС")) = 0 Тогда
			Возврат "1С82РАХБ";
		ИначеЕсли Документ.СуммаВключаетНДС = Ложь Тогда
			Возврат  "1С82РАХ0";
		Иначе
			Возврат  "1С82РАХ";
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции


&НаСервере
Функция ПолучитьОбъектНаСервере(Документ)
		
	ДокументОбъект = Документ.ПолучитьОбъект();
	bgs_Документ = Документ.ПолучитьОбъект();

	//1.02.2022 + DOCKING 369
	// -----------------------------------------------------------------------------------------------------------------------------
	ВызИсключение = Ложь;
	//МассивУникальныхСообщений = Новый Структура;
	//-------------------------------------------------------------------------------
	Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
		//---------------	
		Попытка
			ДокСверкаЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.СверкаВзаиморасчетов");
			ДокСверкаЕстьВсистеме = Истина;
		Исключение
			ДокСверкаЕсть = Ложь;
			ДокСверкаЕстьВсистеме = Ложь;     // сигнализирование!
			Если ТипДок <> "Акт Сверки" И ТипДок <> "Пусто" Тогда 
				ДокСверкаЕстьВсистеме = Истина;  
			КонецЕсли;
		КонецПопытки;
		//---------------
		//Если НЕ Объект.Конфигурация = "SB" Тогда
			Попытка
				ДокВозврТовОтКлиентаЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
				ДокВозврТовОтКлиентаЕстьВсистеме = Истина;
			Исключение
				ДокВозврТовОтКлиентаЕсть = Ложь;
				ДокВозврТовОтКлиентаЕстьВсистеме = Ложь;  // сигнализирование!
				Если ТипДок <> "Возврат от покупателя" И ТипДок <> "Пусто" Тогда
					ДокВозврТовОтКлиентаЕстьВсистеме = Истина;
				КонецЕсли;	
			КонецПопытки;
		//Иначе
			Попытка
				ДокВозврТовОтПокупателяЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя");
				ДокВозврТовОтПокупателяЕстьВсистеме = Истина;
			Исключение
				ДокВозврТовОтПокупателяЕсть = Ложь;
				ДокВозврТовОтПокупателяЕстьВсистеме = Ложь;  // сигнализирование!
				Если ТипДок <> "Возврат от покупателя" И ТипДок <> "Пусто" Тогда
					ДокВозврТовОтПокупателяЕстьВсистеме = Истина;
				КонецЕсли;
			КонецПопытки;
		//КонецЕсли;	
		//--------------- 
		
		// DOCKING 531 + 24.07.2023
		Если Объект.Конфигурация = "КУП" Тогда	
			Попытка
				
				ДокСчетКлиентуЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуКлиенту");
				
				ДокСчетКлиентуЕстьВсистеме = Истина;
			Исключение
				ДокСчетКлиентуЕсть = Ложь;
				ДокСчетКлиентуЕстьВсистеме = Ложь;   // сигнализирование!
				Если ТипДок <> "Счет клиенту" И ТипДок <> "Пусто" Тогда
					ДокСчетКлиентуЕстьВсистеме = Истина;
				КонецЕсли;	
			КонецПопытки;
		Иначе
			ДокСчетКлиентуЕсть = Ложь;
			ДокСчетКлиентуЕстьВсистеме = Истина;	
		КонецЕсли;	
		//---------------
		// DOCKING 531 - 24.07.2023
		
		Попытка
			ДокАктЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот");
			ДокАктЕстьВсистеме = Истина;
		Исключение
			ДокАктЕсть = Ложь;
			ДокАктЕстьВсистеме = Ложь;      // сигнализирование!
			Если ТипДок <> "Акт выполненных работ" И ТипДок <> "Пусто" Тогда
				ДокАктЕстьВсистеме = Истина;
			КонецЕсли;	
		КонецПопытки;
		//---------------
		ДокАктСверкиЕстьВсистеме = Истина;
		//ДокАктЕстьВсистеме = Истина;
		ДокВозврТовОтПокупателяЕстьВсистеме = Истина;
		
	Иначе
		//---------------	
		Попытка
			ДокАктСверкиЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов");
			ДокАктСверкиЕстьВсистеме = Истина;
		Исключение
			ДокАктСверкиЕсть = Ложь;
			ДокАктСверкиЕстьВсистеме = Ложь;  // сигнализирование!
			Если ТипДок <> "Акт Сверки" И ТипДок <> "Пусто" Тогда 
				ДокАктСверкиЕстьВсистеме = Истина;          
			КонецЕсли;
		КонецПопытки;
		//---------------
		Попытка
			ДокАктЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг");
			ДокАктЕстьВсистеме = Истина;
		Исключение
			ДокАктЕсть = Ложь;
			ДокАктЕстьВсистеме = Ложь;      // сигнализирование!
			Если ТипДок <> "Акт выполненных работ" И ТипДок <> "Пусто" Тогда
				ДокАктЕстьВсистеме = Истина;
			КонецЕсли;	
		КонецПопытки;
		//---------------
		Попытка
			ДокВозврТовОтПокупателяЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя");
			ДокВозврТовОтПокупателяЕстьВсистеме = Истина;
		Исключение
			ДокВозврТовОтПокупателяЕсть = Ложь;
			ДокВозврТовОтПокупателяЕстьВсистеме = Ложь;  // сигнализирование!
			Если ТипДок <> "Возврат от покупателя" И ТипДок <> "Пусто" Тогда
				ДокВозврТовОтПокупателяЕстьВсистеме = Истина;
			КонецЕсли;
		КонецПопытки;
		
		ДокСверкаЕстьВсистеме = Истина;
		ДокВозврТовОтКлиентаЕстьВсистеме = Истина;
		ДокСчетКлиентуЕстьВсистеме = Истина;
		
	КонецЕсли;	
	//------------------------------------------------------------------
		
	Попытка
		Если Объект.Конфигурация = "SB" Тогда
			ДокРТУЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная");
		Иначе
			ДокРТУЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
			//ДокПТУЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
		КонецЕсли;
		
		ДокРТУЕстьВсистеме = Истина;
	Исключение
		ДокРТУЕсть = Ложь;
		ДокРТУЕстьВсистеме = Ложь;  // сигнализирование!
		Если ТипДок <> "Расходная накладная" И ТипДок <> "Пусто" Тогда 
			ДокРТУЕстьВсистеме = Истина;     
		КонецЕсли;	
	КонецПопытки;
	//---------------
	Попытка
		ДокВозврТовПоставщикуЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику");
		ДокВозврТовПоставщикуЕстьВсистеме = Истина;
	Исключение
		ДокВозврТовПоставщикуЕсть = Ложь;
		ДокВозврТовПоставщикуЕстьВсистеме = Ложь; // сигнализирование!
		Если ТипДок <> "Возврат поставщику" И ТипДок <> "Пусто" Тогда
			ДокВозврТовПоставщикуЕстьВсистеме = Истина;
		КонецЕсли;	
	КонецПопытки;
	//---------------
	Если НЕ Объект.Конфигурация = "ERP" Тогда	
		Попытка
			Если Объект.Конфигурация = "SB" Тогда
				ДокСчетЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплату");
			Иначе
				ДокСчетЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
			КонецЕсли;
			ДокСчетЕстьВсистеме = Истина;
		Исключение
			ДокСчетЕсть = Ложь;
			ДокСчетЕстьВсистеме = Ложь;   // сигнализирование!
			Если ТипДок <> "Счет покупателям" И ТипДок <> "Пусто" Тогда
				ДокСчетЕстьВсистеме = Истина;
			КонецЕсли;	
		КонецПопытки;
	Иначе
		ДокСчетЕсть = Ложь;
		ДокСчетЕстьВсистеме = Истина;	
	КонецЕсли;	
	//---------------
	Попытка
		ДокННЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная");
		ДокННЕстьВсистеме = Истина;
	Исключение
		ДокННЕсть = Ложь;
		ДокННЕстьВсистеме = Ложь;        // сигнализирование!
		Если ТипДок <> "Налоговая накладная" И ТипДок <> "Пусто" Тогда
			ДокННЕстьВсистеме = Истина;
		КонецЕсли;
	КонецПопытки;
	//---------------
	Попытка
		ДокПриложение2Есть = ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной");
		ДокПриложение2ЕстьВсистеме = Истина;
	Исключение
		ДокПриложение2Есть = Ложь;
		ДокПриложение2ЕстьВсистеме = Ложь;   // сигнализирование!
		Если ТипДок <> "Приложение 2" И ТипДок <> "Пусто" Тогда
			ДокПриложение2ЕстьВсистеме = Истина;
		КонецЕсли;
	КонецПопытки;
	// -----------------------------------------------------------------------------------------------------------------------------
	//1.02.2022 - DOCKING 369
	
	ДанныеДокумента = Новый Структура();
	
	//Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") И НЕ ТипЗнч(Документ) =Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
	Если (НЕ ДокННЕсть И ДокННЕстьВсистеме) И (НЕ ДокПриложение2Есть И ДокПриложение2ЕстьВсистеме) Тогда	
		//10.01.2022 + DOCKING 368 	
		Если (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB")
			//И ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И (ДокРТУЕсть И ДокРТУЕстьВсистеме)
			
			Тогда
			ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);
			ДанныеДокумента.Вставить("Договор"        ,ДокументОбъект.Договор);
			
			Если Объект.Конфигурация = "SB" Тогда
				ДанныеДокумента.Вставить("ДоговорНомер"   ,ДокументОбъект.Договор.НомерДоговора);
				ДанныеДокумента.Вставить("ДоговорДата"    ,ДокументОбъект.Договор.ДатаДоговора);
			Иначе
				ДанныеДокумента.Вставить("ДоговорНомер"   ,ДокументОбъект.Договор.Номер);
				ДанныеДокумента.Вставить("ДоговорДата"    ,ДокументОбъект.Договор.Дата);
			КонецЕсли;
			
			//********************************************
			//21.12.2021 + DOCKING 377
			//Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.СверкаВзаиморасчетов") Тогда
			Если НЕ (ДокСверкаЕсть ИЛИ Объект.Конфигурация = "SB") Тогда
				//21.12.2021 - DOCKING 377
				ДанныеДокумента.Вставить("Склад"                 ,Документ.Склад);
			КонецЕсли;	
			
			//21.12.2021 + DOCKING 377
			//Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.СверкаВзаиморасчетов") Тогда
			Если НЕ ДокСверкаЕсть Тогда	
				//21.12.2021 - DOCKING 377
				ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			Иначе
				ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
			КонецЕсли;
			
			//********************************************
		//12.01.2022 + DOCKING 368	
		//ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
		ИначеЕсли ДокСчетЕсть И ДокСчетЕстьВсистеме Тогда		
			
			ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);
			Если Объект.Конфигурация  = "SB" Тогда
			
				ДанныеДокумента.Вставить("ДоговорКонтрагента"        ,ДокументОбъект.Договор);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,ДокументОбъект.Договор.НомерДоговора);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,ДокументОбъект.Договор.ДатаДоговора);
				
			Иначе
				ДанныеДокумента.Вставить("ДоговорКонтрагента"        ,ДокументОбъект.ДоговорКонтрагента);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,ДокументОбъект.ДоговорКонтрагента.Номер);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,ДокументОбъект.ДоговорКонтрагента.Дата);
				
			КонецЕсли;
			
			
			ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
			ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			
			//27.05.2022 + DOCKING 381
			Если ПолучитьИмяБазы() = "БУ" Тогда
				Попытка //30.09.2022 + DOCKING 453
					ДанныеДокумента.Вставить("Автомобиль"      ,Документ.Автомобиль);
				Исключение КонецПопытки;	
			КонецЕсли;	
			//27.05.2022 - DOCKING 381
			
		//24.07.2023 + DOCKING 531	
		//ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда	
		ИначеЕсли (Объект.Конфигурация  = "КУП") И ДокСчетКлиентуЕсть И ДокСчетКлиентуЕстьВсистеме Тогда		
			
			ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);

			
			ДанныеДокумента.Вставить("ДоговорКонтрагента"        ,ДокументОбъект.Договор);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,ДокументОбъект.Договор.Номер);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,ДокументОбъект.Договор.Дата);
			
			ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
			ДанныеДокумента.Вставить("ПредставительОрганизации"          ,ДокументОбъект.ПредставительОрганизации);
			ДанныеДокумента.Вставить("ПредставительОрганизацииДолжность" ,ДокументОбъект.ПредставительОрганизацииДолжность);
			
			ТЗ = ПолучитьКонтактноеЛицоКонтрагентаПоУмолчанию(ОбъектКонтрагентДокумент(Документ));
			
			Если НЕ ЗначениеЗаполнено(ТЗ) Тогда
				КонтактноеЛицо = "";
			Иначе
				ТЗ.Свойство("Лицо",КонтактноеЛицо);
			КонецЕсли;
			ДанныеДокумента.Вставить("КонтактноеЛицо"          ,КонтактноеЛицо);
			
			
			ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
			ДанныеДокумента.Вставить("Партнер"                       ,ДокументОбъект.Партнер);
			ДанныеДокумента.Вставить("Менеджер"           ,Документ.Менеджер);
			ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			
			ДанныеДокумента.Вставить("БанковскийСчетОрганизации" ,Документ.БанковскийСчет.НомерСчета);
			ДанныеДокумента.Вставить("Банк"                      ,Документ.БанковскийСчет.НаименованиеБанка);
			ДанныеДокумента.Вставить("БанкКод"                   ,Документ.БанковскийСчет.КодБанка);
			
			
		//24.07.2023 - DOCKING 531		
		
		//DOCKING 687 + 12.03.2024
			ДанныеДокумента.Вставить("ДокументОснование"    ,Документ.ДокументОснование);
			ДанныеДокумента.Вставить("ИтогНДС"              ,Документ.ДокументОснование.Товары.Итог("СуммаНДС"));
			ДанныеДокумента.Вставить("ИтогСкидка"           ,Документ.ДокументОснование.Товары.Итог("СуммаРучнойСкидки"));
		//DOCKING 687 - 12.03.2024	
			
		//ИначеЕсли Объект.Конфигурация  = "КУП" И ТипЗнч(Документ) = Тип("ДокументСсылка.СверкаВзаиморасчетов") Тогда
		ИначеЕсли (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") И ДокСверкаЕсть Тогда	
			
			Если НЕ Объект.Конфигурация = "SB" Тогда
				
				ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);
				Если ДокументОбъект.Договор <> Неопределено Тогда 
					ДанныеДокумента.Вставить("ДоговорКонтрагента"        ,ДокументОбъект.Договор);
					ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,ДокументОбъект.Договор.Номер);
					ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,ДокументОбъект.Договор.Дата);
				КонецЕсли;	
				ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
				//13.01.2022 + DOCKING 368 	
				Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
					ДанныеДокумента.Вставить("ПредставительОрганизации"  ,Документ.КонтактноеЛицо);
					ДанныеДокумента.Вставить("ПредставительОрганизацииДолжность"  ,Документ.КонтактноеЛицо.ДолжностьПоВизитке);
					ДанныеДокумента.Вставить("ДолжностьРуководителяКонтрагента"  ,Документ.ДолжностьРуководителяКонтрагента);
				Иначе
				//13.01.2022 - DOCKING 368 		
					ДанныеДокумента.Вставить("ПредставительОрганизации"  ,Документ.ПредставительОрганизации);
					ДанныеДокумента.Вставить("ПредставительОрганизацииДолжность"  ,Документ.ПредставительОрганизацииДолжность);
				КонецЕсли;
				
			Иначе // SB
				ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);
				ДанныеДокумента.Вставить("РуководительКонтрагента"  ,Документ.ПредставительКонтрагента);
				ДанныеДокумента.Вставить("ПредставительКонтрагента"  ,Документ.ПредставительКонтрагента);
				ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
				ДанныеДокумента.Вставить("ПредставительОрганизации"                       ,ДокументОбъект.ПодписьОтветственного);
			КонецЕсли;
			
			
			
		//ИначеЕсли Объект.Конфигурация  = "КУП" И ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИначеЕсли (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP") И ДокВозврТовПоставщикуЕсть И ДокВозврТовПоставщикуЕстьВсистеме Тогда	
			
			ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);
			Если ДокументОбъект.Договор <> Неопределено Тогда
				ДанныеДокумента.Вставить("ДоговорКонтрагента"        ,ДокументОбъект.Договор);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,ДокументОбъект.Договор.Номер);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,ДокументОбъект.Договор.Дата);
			КонецЕсли;	
			ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
			ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			ДанныеДокумента.Вставить("ПредставительОрганизации"  ,Документ.ПредставительОрганизации);
			ДанныеДокумента.Вставить("ПредставительОрганизацииДолжность"  ,Документ.ПредставительОрганизацииДолжность);
			ДанныеДокумента.Вставить("Склад"                 ,Документ.Склад);
			
		//ИначеЕсли Объект.Конфигурация  = "КУП" И ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ИначеЕсли (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP") И ДокВозврТовОтКлиентаЕсть И ДокВозврТовОтКлиентаЕстьВсистеме Тогда	
			
			ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);
			Если ДокументОбъект.Договор <> Неопределено Тогда
				ДанныеДокумента.Вставить("ДоговорКонтрагента"        ,ДокументОбъект.Договор);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,ДокументОбъект.Договор.Номер);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,ДокументОбъект.Договор.Дата);
			КонецЕсли;	
			ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
			ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			
			ДанныеДокумента.Вставить("Склад"                 ,Документ.Склад);	
			
		//12.01.2022 - DOCKING 368	
		//14.02.2022 + DOCKING 368
		ИначеЕсли (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") И ДокАктЕсть И ДокАктЕстьВсистеме Тогда // АКТ ВЫПОЛНЕННЫХ РАБОТ
			
			Если НЕ Объект.Конфигурация = "SB" Тогда
				Если ЗначениеЗаполнено(Документ.Сделка) Тогда
					НаименованиеДокументаРасчетов = СокрЛП(Строка(ТипЗнч(Документ.Сделка)));
					НомерДокументаРасчетов = СокрЛП(Документ.Сделка.Номер);
					ДатаДокументаРасчетов = Документ.Сделка.Дата;
				Иначе
					НаименованиеДокументаРасчетов = "";
					НомерДокументаРасчетов = "";
					ДатаДокументаРасчетов = Дата(1, 1, 1);	
				КонецЕсли;
				
			Иначе
				НаименованиеДокументаРасчетов = "";
				НомерДокументаРасчетов = "";
				ДатаДокументаРасчетов = Дата(1, 1, 1);	
			КонецЕсли;
				
			
			
			ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			
			ДанныеДокумента.Вставить("Дата"                      		 ,ДокументОбъект.Дата);
			
			Если Объект.Конфигурация = "SB" Тогда
				
				ДанныеДокумента.Вставить("Договор"        ,				ДокументОбъект.Договор);
				ДанныеДокумента.Вставить("ДоговорНомер"   ,				ДокументОбъект.Договор.НомерДоговора);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,	ДокументОбъект.Договор.НомерДоговора);
				ДанныеДокумента.Вставить("ДоговорДата"    ,				ДокументОбъект.Договор.ДатаДоговора);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,	ДокументОбъект.Договор.ДатаДоговора);
				
				ДанныеДокумента.Вставить("ИтогСкидка2"           ,Документ.РаботыИУслуги.Итог("СуммаСкидкиНаценки"));
				
				ДанныеДокумента.Вставить("НаименованиеДляПечати"     		 ,Документ.Договор);
				ДанныеДокумента.Вставить("ИтогНДС"                   		 ,Документ.РаботыИУслуги.Итог("СуммаНДС"));
				ДанныеДокумента.Вставить("ПредставительОрганизации"  		 ,Документ.ПодписьРуководителя);
				ДанныеДокумента.Вставить("Получил"                    		 ,Документ.Получил);
				ДанныеДокумента.Вставить("РуководителиКонтрагента"     		 ,Документ.КонтактноеЛицоПодписант);
				ДанныеДокумента.Вставить("МестоСоставленияДокумента" 		 ,Документ.МестоСоставленияДокумента);
				//ДанныеДокумента.Вставить("КонтрагентКодФилиала"     		 ,Документ.Контрагент.КодФилиала);
				ДанныеДокумента.Вставить("Организация"               		 ,ДокументОбъект.Организация);
				
				//ДанныеДокумента.Вставить("ДокументРасчетов"                  ,Документ.Сделка);
				ДанныеДокумента.Вставить("НаименованиеДокументаРасчетов"     ,НаименованиеДокументаРасчетов);
				ДанныеДокумента.Вставить("НомерДокументаРасчетов"            ,НомерДокументаРасчетов);
				ДанныеДокумента.Вставить("ДатаДокументаРасчетов"             ,ДатаДокументаРасчетов);
				
				ДанныеДокумента.Вставить("ДоговорНаименование"               ,Документ.Договор.Наименование);
				ДанныеДокумента.Вставить("ДоговорНаименованиеДляПечати"      ,Документ.Договор);	
				
				//НайтиНомер = Найти(СокрЛП(Документ.Сделка)," ");
				//ТекстДоНомера =  СокрЛП(Лев(СокрЛП(Документ.Сделка),?(НайтиНомер = 0,СтрДлина(НайтиНомер),НайтиНомер-1)));
				НайтиНомер = "";
				ТекстДоНомера =  "";
				
			Иначе
				
				ДанныеДокумента.Вставить("Договор"        ,ДокументОбъект.Договор);
				ДанныеДокумента.Вставить("ДоговорНомер"   ,ДокументОбъект.Договор.Номер);
				ДанныеДокумента.Вставить("ДоговорДата"    ,ДокументОбъект.Договор.Дата);
				
				// DOCKING 533 + 17.07.2023
				ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,	ДокументОбъект.Договор.Номер);
				ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"   ,	ДокументОбъект.Договор.Дата);
				// DOCKING 533 - 17.07.2023
				
				ДанныеДокумента.Вставить("НаименованиеДляПечати"     		 ,Документ.Договор.НаименованиеДляПечати);
				ДанныеДокумента.Вставить("ИтогНДС"                   		 ,Документ.Услуги.Итог("СуммаНДС"));
				ДанныеДокумента.Вставить("ПредставительОрганизации"  		 ,Документ.ПредставительОрганизации);
				ДанныеДокумента.Вставить("Получил"                    		 ,Документ.ПредставительКонтрагента);
				ДанныеДокумента.Вставить("МестоСоставленияДокумента" 		 ,Документ.МестоСоставленияДокумента);
				ДанныеДокумента.Вставить("КонтрагентКодФилиала"     		 ,Документ.Контрагент.КодФилиала);
				ДанныеДокумента.Вставить("Организация"               		 ,ДокументОбъект.Организация);
				
				ДанныеДокумента.Вставить("Банк"              		         ,Документ.БанковскийСчетОрганизации.Банк);
				ДанныеДокумента.Вставить("БанкНаименование"                  ,Документ.БанковскийСчетОрганизации.Наименование);
				ДанныеДокумента.Вставить("БанковскийСчетОрганизации"		 ,Документ.БанковскийСчетОрганизации.НаименованиеБанка);
				ДанныеДокумента.Вставить("БанкКод"							 ,Документ.БанковскийСчетОрганизации.КодБанка);
				ДанныеДокумента.Вставить("БанковскийСчетОрганизацииНомерСчета" ,Документ.БанковскийСчетОрганизации.НомерСчета);
				
				ДанныеДокумента.Вставить("ДокументРасчетов"                  ,Документ.Сделка);
				ДанныеДокумента.Вставить("НаименованиеДокументаРасчетов"     ,НаименованиеДокументаРасчетов);
				ДанныеДокумента.Вставить("НомерДокументаРасчетов"            ,НомерДокументаРасчетов);
				ДанныеДокумента.Вставить("ДатаДокументаРасчетов"             ,ДатаДокументаРасчетов);
				
				ДанныеДокумента.Вставить("ДоговорНаименование"               ,Документ.Договор.Наименование);
				ДанныеДокумента.Вставить("ДоговорНаименованиеДляПечати"      ,Документ.Договор.НаименованиеДляПечати);	
				
				ДанныеДокумента.Вставить("ИтогСкидка2"           ,Документ.Услуги.Итог("СуммаРучнойСкидки"));
				
				НайтиНомер = Найти(СокрЛП(Документ.Сделка)," ");
				ТекстДоНомера =  СокрЛП(Лев(СокрЛП(Документ.Сделка),?(НайтиНомер = 0,СтрДлина(НайтиНомер),НайтиНомер-1)));
				
			КонецЕсли;
			
			
		ИначеЕсли (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") И НЕ ДокАктЕстьВсистеме Тогда
		    Если МассивУникальныхСообщений.Свойство("Акт_выполненных_работ") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Акт выполненных работ"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Акт виконаних робіг"" в даній конфігурації відсутній або перейменований!'");
				МассивУникальныхСообщений.Вставить("Акт_выполненных_работ",ТекстЯзык);
				
			КонецЕсли;
			//Сообщить("ВНИМАНИЕ! Документ ""Акт выполненных работ"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
			ВызИсключение = Истина;
        //14.02.2022 - DOCKING 368
		
		//1.02.2022 + DOCKING 369
		//---------------------------------------------------------------------------
		ИначеЕсли НЕ ДокСверкаЕстьВсистеме И (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда
		
			Если МассивУникальныхСообщений.Свойство("Акт_сверки") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Сверка Взаиморасчетов"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Звірка Взаєморозрахунків"" в даній конфігурації відсутній або перейменований!'");	
				МассивУникальныхСообщений.Вставить("Акт_сверки",ТекстЯзык);
			КонецЕсли;	
		
			//Сообщить("ВНИМАНИЕ! Документ ""Сверка Взаиморасчетов"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
			ВызИсключение = Истина;
		//1.02.2022 - DOCKING 369
		ИначеЕсли НЕ ДокАктСверкиЕстьВсистеме И (НЕ (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB")) Тогда
			
			Если МассивУникальныхСообщений.Свойство("Акт_сверки") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Акт Сверки Взаиморасчетов"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Акт звірки взаєморозрахунків"" в даній конфігурації відсутній або перейменований!'");
				МассивУникальныхСообщений.Вставить("Акт_сверки",ТекстЯзык);
			КонецЕсли;
		
			//Сообщить("ВНИМАНИЕ! Документ ""Акт Сверки Взаиморасчетов"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);	
			ВызИсключение = Истина;
			
		ИначеЕсли НЕ ДокРТУЕстьВсистеме Тогда	
			ВызИсключение = Истина;
			
		ИначеЕсли НЕ ДокСчетЕстьВсистеме Тогда	
			ВызИсключение = Истина;	
			
		ИначеЕсли НЕ ДокСчетКлиентуЕстьВсистеме Тогда	
			ВызИсключение = Истина;		
			
		ИначеЕсли НЕ ДокВозврТовПоставщикуЕстьВсистеме Тогда	
			ВызИсключение = Истина;
			
		ИначеЕсли НЕ ДокВозврТовОтКлиентаЕстьВсистеме Тогда	
			ВызИсключение = Истина;	
			
		Иначе
		//10.01.2022 - DOCKING 368 	
			ДанныеДокумента.Вставить("Дата"                      ,ДокументОбъект.Дата);
			ДанныеДокумента.Вставить("ДоговорКонтрагента"        ,ДокументОбъект.ДоговорКонтрагента);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,ДокументОбъект.ДоговорКонтрагента.Номер);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,ДокументОбъект.ДоговорКонтрагента.Дата);
			//********************************************
			//Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			Если НЕ ДокАктЕсть И ДокАктЕстьВсистеме Тогда	
				//21.12.2021 + DOCKING 377
				//Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
				Если НЕ ДокАктСверкиЕсть И ДокАктСверкиЕстьВсистеме Тогда	
					//21.12.2021 - DOCKING 377
					ДанныеДокумента.Вставить("Склад"                 ,Документ.Склад);
				КонецЕсли;
				
			КонецЕсли;
			//21.12.2021 + DOCKING 377
			//Если НЕ ТипЗнч(Документ) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда
			Если НЕ ДокАктСверкиЕсть И ДокАктСверкиЕстьВсистеме Тогда	
				//21.12.2021 - DOCKING 377
				ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			ИначеЕсли ДокАктСверкиЕсть И ДокАктСверкиЕстьВсистеме Тогда	
			//Иначе
				ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
				
				ДанныеДокумента.Вставить("ПредставительОрганизации"  		 ,Документ.ПредставительОрганизации);
				
			//********************************************
			КонецЕсли;
		
			//Если ДокПТУЕсть Тогда
			//	
			//	ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);   
			//	
			//	Данные = Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",ДокументОбъект.Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
			//	ОтвЛицо = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Документ.Дата, Данные);
			//	
			//	ДанныеКонтр = Новый Структура("Контрагент,ОтветственноеЛицо",ДокументОбъект.Контрагент, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
			//	ОтвЛицоКонтр = РегистрыСведений.ОтветственныеЛицаКонтрагентов.СрезПоследних(Документ.Дата, ДанныеКонтр);
			//	
			//	ДанныеДокумента.Вставить("ПредставительОрганизации"  		 ,ОтвЛицо[0].ФизическоеЛицо);
			//	ДанныеДокумента.Вставить("Должность"  						 ,ОтвЛицо[0].Должность);

			//	Попытка Получил = ОтвЛицоКонтр[0].КонтактноеЛицо; Исключение Получил = ""; КонецПопытки;
			//	ДанныеДокумента.Вставить("Получил"  						 ,Получил);
			//	
			//	ДанныеДокумента.Вставить("КонтрагентКодФилиала"     		 ,Документ.Контрагент.КодФилиала);
			//	ДанныеДокумента.Вставить("ИтогНДСУслуги"              		 ,Документ.Услуги.Итог("СуммаНДС"));
			//	ДанныеДокумента.Вставить("ИтогНДСТовары"              		 ,Документ.Товары.Итог("СуммаНДС"));
			//	
			//	ДанныеДокумента.Вставить("МестоСоставленияДокумента" 		 ,"");
			//	
			//	
			//КонецЕсли;
			
			
		КонецЕсли;	
	КонецЕсли;
	
	
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
	Если ДокННЕсть И ДокННЕстьВсистеме Тогда	

		Если НЕ	Объект.Конфигурация = "SB" Тогда //DOCKING 459
			Попытка ДанныеДокумента.Вставить("ЮридическоеФизическоеЛицо" ,Документ.Контрагент.ЮридическоеФизическоеЛицо); Исключение КонецПопытки;
		КонецЕсли;	
		ДанныеДокумента.Вставить("СпецРежимНалогообложения"  ,Документ.СпецРежимНалогообложения);
		ДанныеДокумента.Вставить("ВидОперации"               ,Документ.ВидОперации);
		Если Объект.Конфигурация = "ERP" 
			// 18.01.2022 + DOKING 369
			ИЛИ Объект.Конфигурация = "КУП"
			// 18.01.2022 - DOKING 369
			Тогда
			Если Документ.Товары.Количество() > 0 Тогда
				ДанныеДокумента.Вставить("ЧСуммаНДС"                 ,Документ.Товары.Итог("СуммаНДС"));
			Иначе
				ДанныеДокумента.Вставить("ЧСуммаНДС"                 ,Документ.ТоварыПоДаннымПользователя.Итог("СуммаНДС"));
			КонецЕсли;	
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,Документ.Договор.Дата);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,Документ.Договор.Номер);
			ДанныеДокумента.Вставить("ВключенаВЕдиныйРеестрНалоговыхНакладных", Документ.СтатусРегистрацииВЕРНН);
		//DOCKING 462	+ 22.11.2022
		ИначеЕсли 	Объект.Конфигурация = "SB" Тогда
			Если Документ.Запасы.Количество() > 0 Тогда
				ДанныеДокумента.Вставить("ЧСуммаНДС"                 ,Документ.Запасы.Итог("СуммаНДС"));
			КонецЕсли;	
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,Документ.Договор.ДатаДоговора);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,Документ.Договор.НомерДоговора);
			ДанныеДокумента.Вставить("ПродажаНижеОбычнойЦены"    ,Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены);
			ДанныеДокумента.Вставить("ВключенаВЕдиныйРеестрНалоговыхНакладных", Документ.СтатусРегистрацииВЕРНН);
		//DOCKING 462	- 22.11.2022	
		Иначе
			ДанныеДокумента.Вставить("ЧСуммаНДС"                 ,Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС"));
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,Документ.ДоговорКонтрагента.Дата);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,Документ.ДоговорКонтрагента.Номер);
			ДанныеДокумента.Вставить("ПродажаНижеОбычнойЦены"    ,Документ.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены);
			ДанныеДокумента.Вставить("ВключенаВЕдиныйРеестрНалоговыхНакладных", Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных);     
		КонецЕсли;	
		ДанныеДокумента.Вставить("ВидДоговора"               ,Документ.ВидДоговора);
		ДанныеДокумента.Вставить("Сводная"                   ,Документ.Сводная);
		
	//1.02.2022 + DOCKING 369	
	ИначеЕсли НЕ ДокННЕстьВсистеме Тогда
		Если МассивУникальныхСообщений.Свойство("Налоговая_Накладная") = Ложь Тогда
			ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Налоговая накладная"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Податкова накладна"" в даній конфігурації відсутній або перейменований!'");
			МассивУникальныхСообщений.Вставить("Налоговая_Накладная",ТекстЯзык);
		КонецЕсли;
		//Сообщить("ВНИМАНИЕ! Документ ""Налоговая Накладная"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
		ВызИсключение = Истина;
	//1.02.2022 - DOCKING 369	
		
	КонецЕсли;
	
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
	Если ДокПриложение2Есть И ДокПриложение2ЕстьВсистеме Тогда	
		ДанныеДокумента.Вставить("Дата"                          ,Документ.Дата);
		ДанныеДокумента.Вставить("ТипПричиныНевыдачиПокупателю"  ,Документ.ТипПричиныНевыдачиПокупателю);
		Если Объект.Конфигурация = "ERP" 
			// 17.01.2022 + DOKING 369
			ИЛИ Объект.Конфигурация = "КУП"
			// 17.01.2022 - DOKING 369
			Тогда
			ДанныеДокумента.Вставить("КонтрагентНомерСвидетельства"  ,Документ.Контрагент.НомерСвидетельстваПлательщикаНДС);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"    ,Документ.Договор.Дата);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"   ,Документ.Договор.Номер);
			ДанныеДокумента.Вставить("ВключенаВЕдиныйРеестрНалоговыхНакладных", Документ.СтатусРегистрацииВЕРНН);     
			ДанныеДокумента.Вставить("КонтрагентЮридическоеФизическоеЛицо" ,Документ.Контрагент.ЮридическоеФизическоеЛицо);
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			ДанныеДокумента.Вставить("КонтрагентНомерСвидетельства"  ,Документ.Контрагент.НомерСвидетельства);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"        ,Документ.Договор.ДатаДоговора);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"       ,Документ.Договор.Ссылка.НомерДоговора);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"        ,Документ.Договор.Ссылка.ДатаДоговора);
			ДанныеДокумента.Вставить("ВключенаВЕдиныйРеестрНалоговыхНакладных", Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных); 	
		Иначе
			ДанныеДокумента.Вставить("КонтрагентНомерСвидетельства"  ,Документ.Контрагент.НомерСвидетельства);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"        ,Документ.ДоговорКонтрагента.Дата);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаНомер"       ,Документ.ДоговорКонтрагента.Ссылка.Номер);
			ДанныеДокумента.Вставить("ДоговорКонтрагентаДата"        ,Документ.ДоговорКонтрагента.Ссылка.Дата);
			ДанныеДокумента.Вставить("ВключенаВЕдиныйРеестрНалоговыхНакладных", Документ.ВключенаВЕдиныйРеестрНалоговыхНакладных); 
			ДанныеДокумента.Вставить("КонтрагентЮридическоеФизическоеЛицо" ,Документ.Контрагент.ЮридическоеФизическоеЛицо);
		КонецЕсли;
		ДанныеДокумента.Вставить("НалоговаяНакладнаяВидДоговора" ,Документ.НалоговаяНакладная.ВидДоговора);
		
		ДанныеДокумента.Вставить("ВидОперации"                   ,Документ.ВидОперации);
		
	//1.02.2022 + DOCKING 369	
	ИначеЕсли НЕ ДокПриложение2ЕстьВсистеме Тогда
		Если МассивУникальныхСообщений.Свойство("Приложение_2") = Ложь Тогда
			ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Приложение 2"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Додаток 2"" в даній конфігурації відсутній або перейменований!'");
			МассивУникальныхСообщений.Вставить("Приложение_2",ТекстЯзык);
		КонецЕсли;
		//Сообщить("ВНИМАНИЕ! Документ ""Приложение 2 К Налоговой Накладной"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
		ВызИсключение = Истина;
	//1.02.2022 - DOCKING 369	
		
	КонецЕсли;
	
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	Если ДокРТУЕсть И ДокРТУЕстьВсистеме Тогда	
		
		//10.01.2022 + DOCKING 368 	
		//СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Грузополучатель,  Документ.Дата, , , КодЯзыкаПечать);
		
		// DOCKING 459 + 22.11.2022
		// --------------------------------
		//Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда 
		//	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Грузополучатель,  Документ.Дата,);		
		//Иначе
		//	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Документ.Грузополучатель,  Документ.Дата, , , КодЯзыкаПечать);		
		//КонецЕсли;
		
		// --------------------------------
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");	
			СведенияОГрузополучателе  = ОбщМодуль.СведенияОЮрФизЛице(Документ.Грузополучатель,  Документ.Дата,);
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");
			СведенияОГрузополучателе  = ОбщМодуль.СведенияОЮрФизЛице(Документ.Грузополучатель,  Документ.Дата, , , КодЯзыкаПечать);	
		Иначе
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			СведенияОГрузополучателе  = ОбщМодуль.СведенияОЮрФизЛице(Документ.Грузополучатель,  Документ.Дата, , , КодЯзыкаПечать);		
		КонецЕсли;		
		
		// --------------------------------
		// DOCKING 459 - 22.11.2022
		//10.01.2022 - DOCKING 368

		Если НЕ Объект.Конфигурация = "SB" Тогда
			Если ЗначениеЗаполнено(Документ.Сделка) Тогда
				НаименованиеДокументаРасчетов = СокрЛП(Строка(ТипЗнч(Документ.Сделка)));
				НомерДокументаРасчетов = СокрЛП(Документ.Сделка.Номер);
				ДатаДокументаРасчетов = Документ.Сделка.Дата;
				
				// 26.09.2022 + DOCKING 439
					Попытка
						Автомобиль = СокрЛП(Документ.Сделка.Дополнительно);
					Исключение	
						Попытка
							Автомобиль = СокрЛП(Документ.Дополнительно);
						Исключение	
							Автомобиль = "";
						КонецПопытки;	
					КонецПопытки;	
					
					Попытка
						Рекомендации = СокрЛП(Документ.Сделка.Рекомендации);
					Исключение	
						Попытка
							Рекомендации = СокрЛП(Документ.Рекомендации);
						Исключение	
							Рекомендации = "";
						КонецПопытки;	
					КонецПопытки;	
					
					// 26.09.2022 - DOCKING 439
				
			Иначе
				НаименованиеДокументаРасчетов = "";
				НомерДокументаРасчетов = "";
				ДатаДокументаРасчетов = Дата(1, 1, 1);
				
				Автомобиль = "";
				Рекомендации = "";
			КонецЕсли;
			
		Иначе
			НаименованиеДокументаРасчетов = "";
			НомерДокументаРасчетов = "";
			ДатаДокументаРасчетов = Дата(1, 1, 1);
				
			Автомобиль = "";
			Рекомендации = "";
			
		КонецЕсли;	

		//10.01.2022 + DOCKING 368 	
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
			ДанныеДокумента.Вставить("ДоговорНаименованиеДляПечати"     ,Документ.Договор.НаименованиеДляПечати);
			ДанныеДокумента.Вставить("Получил"                   ,Документ.ПредставительКонтрагента);
			ДанныеДокумента.Вставить("ДоговорНаименование"               ,Документ.Договор.Наименование);
		    ДанныеДокумента.Вставить("ПредставительОрганизации"  ,Документ.ПредставительОрганизации);
			ДанныеДокумента.Вставить("ПредставительОрганизацииДолжность"  ,Документ.ПредставительОрганизацииДолжность);
			
		ИначеЕсли Объект.Конфигурация  = "SB" Тогда
			
			ДанныеДокумента.Вставить("ДоговорНаименованиеДляПечати"     ,Документ.Договор.НомерДоговора+" "+Документ.Договор.ДатаДоговора);
			ДанныеДокумента.Вставить("Получил"                   ,Документ.Получил);
			ДанныеДокумента.Вставить("ДоговорНаименование"               ,Документ.Договор);
		    ДанныеДокумента.Вставить("ПредставительОрганизации"  ,Документ.ПредставительОрганизации);
			ДанныеДокумента.Вставить("ПредставительОрганизацииДолжность"  ,Документ.ДолжностьПредставителяОрганизации);
			
			ДанныеДокумента.Вставить("ДоверенностьЛицо"         ,Документ.ДоверенностьЛицо);
			ДанныеДокумента.Вставить("ДоверенностьНомер"         ,Документ.ДоверенностьНомер);
			ДанныеДокумента.Вставить("ДоверенностьДата"          ,Документ.ДоверенностьДата);
			ДанныеДокумента.Вставить("ДоверенностьВыдана"          ,Документ.ДоверенностьВыдана);
			ДанныеДокумента.Вставить("МестоСоставленияДокумента" ,Документ.МестоСоставленияДокумента);
			ДанныеДокумента.Вставить("АдресДоставки"             ,Документ.АдресДоставки);
			
			ДанныеДокумента.Вставить("НаименованиеДокументаРасчетов"     ,НаименованиеДокументаРасчетов);
			ДанныеДокумента.Вставить("НомерДокументаРасчетов"            ,НомерДокументаРасчетов);
			ДанныеДокумента.Вставить("ДатаДокументаРасчетов"             ,ДатаДокументаРасчетов);
			
			ДанныеДокумента.Вставить("Автомобиль"               ,Документ.Автомобиль);
			ДанныеДокумента.Вставить("Рекомендации"               ,Рекомендации);
			
			ДанныеДокумента.Вставить("БанковскийСчетОрганизацииНомерСчета" ,Документ.БанковскийСчет.НомерСчета);
			ДанныеДокумента.Вставить("БанковскийСчетОрганизации" ,Документ.БанковскийСчет);
			ДанныеДокумента.Вставить("Банк"                      ,Документ.БанковскийСчет.Банк);
			ДанныеДокумента.Вставить("БанкКод"                   ,Документ.БанковскийСчет.Банк.Код);
			
		Иначе
		//10.01.2022 - DOCKING 368
			ДанныеДокумента.Вставить("НаименованиеДляПечати"     ,Документ.ДоговорКонтрагента.НаименованиеДляПечати);
			ДанныеДокумента.Вставить("Получил"                   ,Документ.Получил);
			
			ДанныеДокумента.Вставить("ДоговорНаименование"               ,Документ.ДоговорКонтрагента.Наименование);
			ДанныеДокумента.Вставить("ДоговорНаименованиеДляПечати"      ,Документ.ДоговорКонтрагента.НаименованиеДляПечати);
			
			ДанныеДокумента.Вставить("ПредставительОрганизации"  ,Документ.ПредставительОрганизации);
		КонецЕсли;
		
		//ДанныеДокумента.Вставить("НаименованиеДляПечати"     ,Документ.ДоговорКонтрагента.НаименованиеДляПечати);
		
		//ДанныеДокумента.Вставить("Получил"                   ,Документ.Получил);
		Если НЕ Объект.Конфигурация  = "SB" Тогда
			ДанныеДокумента.Вставить("ДоверенностьСерия"         ,Документ.ДоверенностьСерия);
			ДанныеДокумента.Вставить("ДоверенностьНомер"         ,Документ.ДоверенностьНомер);
			ДанныеДокумента.Вставить("ДоверенностьДата"          ,Документ.ДоверенностьДата);
			ДанныеДокумента.Вставить("Банк"                      ,Документ.БанковскийСчетОрганизации.Банк);
			ДанныеДокумента.Вставить("БанковскийСчетОрганизации" ,Документ.БанковскийСчетОрганизации);
			ДанныеДокумента.Вставить("БанковскийСчетОрганизацииНомерСчета" ,Документ.БанковскийСчетОрганизации.НомерСчета);
			ДанныеДокумента.Вставить("БанкКод"                   ,Документ.БанковскийСчетОрганизации.Банк.Код);
			Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
				ДанныеДокумента.Вставить("БанкКод2"                   ,Документ.БанковскийСчетОрганизации.КодБанка);
			КонецЕсли;
			ДанныеДокумента.Вставить("БанкАдрес"                  ,Документ.БанковскийСчетОрганизации.Банк.Адрес);
			ДанныеДокумента.Вставить("МестоСоставленияДокумента" ,Документ.МестоСоставленияДокумента);
			ДанныеДокумента.Вставить("АдресДоставки"             ,Документ.АдресДоставки);
					
			ДанныеДокумента.Вставить("ДокументРасчетов"                  ,Документ.Сделка);
			ДанныеДокумента.Вставить("НаименованиеДокументаРасчетов"     ,НаименованиеДокументаРасчетов);
			ДанныеДокумента.Вставить("НомерДокументаРасчетов"            ,НомерДокументаРасчетов);
			ДанныеДокумента.Вставить("ДатаДокументаРасчетов"             ,ДатаДокументаРасчетов);
			
			ДанныеДокумента.Вставить("Автомобиль"               ,Автомобиль);
			ДанныеДокумента.Вставить("Рекомендации"               ,Рекомендации);
		КонецЕсли;	
			
		Если Документ.Организация.КодПоЕДРПОУ = "34818882" Тогда
		//--
		 ДанныеДокумента.Вставить("bgs_СкалаКод"      ,bgs_Документ.bgs_СкалаКод);
		 ДанныеДокумента.Вставить("bgs_ТипСерийныйНомер"      ,bgs_Документ.bgs_ТипСерийныйНомер);
		 ДанныеДокумента.Вставить("bgs_ПричинаВызова"      ,bgs_Документ.bgs_ПричинаВызова);
		 ДанныеДокумента.Вставить("bgs_НаОсновании"      ,bgs_Документ.bgs_НаОсновании);
		 ДанныеДокумента.Вставить("bgs_ОтветственныйЗаЗаказ"      ,bgs_Документ.bgs_ОтветственныйЗаЗаказ);
		//--
	    КонецЕсли;
	
		Если Объект.Конфигурация  = "УПП"  Тогда
			ДанныеДокумента.Вставить("ИтогСкидка"            ,Документ.Товары.Итог("ЗначениеУсловияАвтоматическойСкидки") + Документ.Услуги.Итог("ЗначениеУсловияАвтоматическойСкидки"));
		Иначе
			//10.01.2022 + DOCKING 368
			//ДанныеДокумента.Вставить("ИтогСкидка2"           ,Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки"));
			Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ДанныеДокумента.Вставить("ИтогСкидка2"           ,Документ.Товары.Итог("СуммаРучнойСкидки"));
			ИначеЕсли Объект.Конфигурация  = "SB" Тогда
				ДанныеДокумента.Вставить("ИтогСкидка2"           ,Документ.Запасы.Итог("СуммаСкидкиНаценки"));
			Иначе
				ДанныеДокумента.Вставить("ИтогСкидка2"           ,Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки"));
			КонецЕсли;
			//10.01.2022 - DOCKING 368
		КонецЕсли;
		//10.01.2022 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
		//ДанныеДокумента.Вставить("ИтогНДС"                   ,Документ.Товары.Итог("СуммаНДС")+ Документ.Услуги.Итог("СуммаНДС"));
			ДанныеДокумента.Вставить("ИтогНДС"                   ,Документ.Товары.Итог("СуммаНДС"));
		ИначеЕсли Объект.Конфигурация  = "SB" Тогда
			ДанныеДокумента.Вставить("ИтогНДС"                   ,Документ.Запасы.Итог("СуммаНДС"));
		Иначе
			ДанныеДокумента.Вставить("ИтогНДС"                   ,Документ.Товары.Итог("СуммаНДС")+ Документ.Услуги.Итог("СуммаНДС"));
		КонецЕсли;
		//10.01.2022 - DOCKING 368
		
		ДанныеДокумента.Вставить("ГрузополучательЮрАдрес"            ,СведенияОГрузополучателе.ЮридическийАдрес);
		ДанныеДокумента.Вставить("ГрузополучательТелефон"            ,СведенияОГрузополучателе.Телефоны);
		ДанныеДокумента.Вставить("ГрузополучательНаименованиеПолное" ,Документ.Грузополучатель.НаименованиеПолное);		
		ДанныеДокумента.Вставить("КонтрагентНаименование"            ,Документ.Контрагент.Наименование);
		Если НЕ Объект.Конфигурация  = "SB" Тогда
			ДанныеДокумента.Вставить("ИтогКоличество"                    ,Документ.Товары.Итог("Количество"));
			ДанныеДокумента.Вставить("ОтпускРазрешил"                    ,"");
			ДанныеДокумента.Вставить("КонтрагентКодФилиала"              ,Документ.Контрагент.КодФилиала);
		Иначе
			ДанныеДокумента.Вставить("ИтогКоличество"                    ,Документ.Запасы.Итог("Количество"));
			ДанныеДокумента.Вставить("ОтпускРазрешил"                    ,Документ.ОтпускРазрешил);
		КонецЕсли;
		
		ДанныеДокумента.Вставить("Организация"                       ,ДокументОбъект.Организация);
		
	//1.02.2022 + DOCKING 369	
	ИначеЕсли НЕ ДокРТУЕстьВсистеме Тогда
		Если МассивУникальныхСообщений.Свойство("Расходная_Накладная") = Ложь Тогда
			ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Реализация товаров и услуг"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Реалізація товарів та послуг"" в даній конфігурації відсутній або перейменований!'");
			МассивУникальныхСообщений.Вставить("Расходная_Накладная",ТекстЯзык);
		КонецЕсли;
		//Сообщить("ВНИМАНИЕ! Документ ""Реализация товаров и услуг"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
		ВызИсключение = Истина;
	//1.02.2022 - DOCKING 369	
		
	КонецЕсли;
	
	//Если Объект.Конфигурация = "ERP" 
		// 17.01.2022 + DOKING 369
		//ИЛИ Объект.Конфигурация = "КУП"
		// 17.01.2022 - DOKING 369
	//	Тогда
	//	Возврат ДанныеДокумента;
	//КонецЕсли;
	
	//10.01.2022 + DOCKING 368
	Если НЕ (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB") Тогда
	//10.01.2022 - DOCKING 368	
	//Если ТипЗнч(Документ)  =  Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		Если ДокАктЕсть И ДокАктЕстьВсистеме Тогда
			Если ЗначениеЗаполнено(Документ.Сделка) Тогда
				НаименованиеДокументаРасчетов = СокрЛП(Строка(ТипЗнч(Документ.Сделка)));
				НомерДокументаРасчетов = СокрЛП(Документ.Сделка.Номер);
				ДатаДокументаРасчетов = Документ.Сделка.Дата;
				
				// 26.09.2022 + DOCKING 439
				Попытка
					Автомобиль = СокрЛП(Документ.Сделка.Дополнительно);
				Исключение	
					Попытка
						Автомобиль = СокрЛП(Документ.Дополнительно);
					Исключение	
						Автомобиль = "";
					КонецПопытки;	
				КонецПопытки;	
				
				Попытка
					Рекомендации = СокрЛП(Документ.Сделка.Рекомендации);
				Исключение	
					Попытка
						Рекомендации = СокрЛП(Документ.Рекомендации);
					Исключение	
						Рекомендации = "";
					КонецПопытки;	
				КонецПопытки;	
				
				// 26.09.2022 - DOCKING 439
			Иначе
				НаименованиеДокументаРасчетов = "";
				НомерДокументаРасчетов = "";
				ДатаДокументаРасчетов = Дата(1, 1, 1);
				Автомобиль = "";
				Рекомендации = "";
				
			КонецЕсли; 
			
			

			ДанныеДокумента.Вставить("НаименованиеДляПечати"     		 ,Документ.ДоговорКонтрагента.НаименованиеДляПечати);
			ДанныеДокумента.Вставить("ИтогНДС"                   		 ,Документ.Услуги.Итог("СуммаНДС"));
			ДанныеДокумента.Вставить("ПредставительОрганизации"  		 ,Документ.ПредставительОрганизации);
			ДанныеДокумента.Вставить("Получил"                    		 ,Документ.Получил);
			ДанныеДокумента.Вставить("МестоСоставленияДокумента" 		 ,Документ.МестоСоставленияДокумента);
			ДанныеДокумента.Вставить("КонтрагентКодФилиала"     		 ,Документ.Контрагент.КодФилиала);
			ДанныеДокумента.Вставить("Организация"               		 ,ДокументОбъект.Организация);

			ДанныеДокумента.Вставить("ДокументРасчетов"                  ,Документ.Сделка);
			ДанныеДокумента.Вставить("НаименованиеДокументаРасчетов"     ,НаименованиеДокументаРасчетов);
			ДанныеДокумента.Вставить("НомерДокументаРасчетов"            ,НомерДокументаРасчетов);
			ДанныеДокумента.Вставить("ДатаДокументаРасчетов"             ,ДатаДокументаРасчетов);
			
			ДанныеДокумента.Вставить("ДоговорНаименование"               ,Документ.ДоговорКонтрагента.Наименование);
			ДанныеДокумента.Вставить("ДоговорНаименованиеДляПечати"      ,Документ.ДоговорКонтрагента.НаименованиеДляПечати);
			
			НайтиНомер = Найти(СокрЛП(Документ.Сделка)," ");
			ТекстДоНомера =  СокрЛП(Лев(СокрЛП(Документ.Сделка),?(НайтиНомер = 0,СтрДлина(НайтиНомер),НайтиНомер-1)));
			
			ДанныеДокумента.Вставить("Автомобиль"               ,Автомобиль);
			ДанныеДокумента.Вставить("Рекомендации"               ,Рекомендации);
			
		//1.02.2022 + DOCKING 369	
		ИначеЕсли НЕ ДокАктЕстьВсистеме Тогда
		    Если МассивУникальныхСообщений.Свойство("Акт_выполненных_работ") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Акт Об Оказании Производственных Услуг"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Акт Про Надання Виробничих Послуг"" в даній конфігурації відсутній або перейменований!'");
				МассивУникальныхСообщений.Вставить("Акт_выполненных_работ",ТекстЯзык);
				
			КонецЕсли;
			//Сообщить("ВНИМАНИЕ! Документ ""Акт Об Оказании Производственных Услуг"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
			ВызИсключение = Истина;
		//1.02.2022 - DOCKING 369		
				
		КонецЕсли;
		
	КонецЕсли;
	
	//Попытка
	//	ДокСчетЕсть = ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	//	ДокСчетЕстьВсистеме = Истина;
	//Исключение
	//	ДокСчетЕстьВсистеме = Ложь;
	//КонецПопытки;
	
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда // DOCKING 369
	Если ДокСчетЕсть И ДокСчетЕстьВсистеме	Тогда	
		//12.01.2022 + DOCKING 368
		Если Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP"  Тогда
			ДанныеДокумента.Вставить("СтруктурнаяЕдиница"        ,"");
			//ДанныеДокумента.Вставить("БанкЕд"                    ,Документ.СтруктурнаяЕдиница.Банк);
			//ДанныеДокумента.Вставить("БанкКодЕд"                 ,Документ.СтруктурнаяЕдиница.Банк.Код); 
			//ДанныеДокумента.Вставить("НомерСчетаЕд"              ,Документ.СтруктурнаяЕдиница.НомерСчета);
		    //ДанныеДокумента.Вставить("БанкАдрес"                 ,Документ.СтруктурнаяЕдиница.Банк.Адрес);
			//	Если Объект.Конфигурация  =  "БУ" или Объект.Конфигурация  =  "СГ" Тогда
		//			ДанныеДокумента.Вставить("ФизЛицо"           ,Документ.Ответственный.ФизЛицо);
		//		ИначеЕсли Объект.Конфигурация  =  "ВА" Тогда
		//			ДанныеДокумента.Вставить("ФизЛицо"           ,Документ.Ответственный.ФизическоеЛицо);
		//		КонецЕсли;
		//	ДанныеДокумента.Вставить("ИтогНДС"                   ,Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС"));
			ДанныеДокумента.Вставить("ИтогНДС"                   ,0);
			ДанныеДокумента.Вставить("ФизЛицо"           ,"");
		//	ДанныеДокумента.Вставить("АдресДоставки"             ,Документ.АдресДоставки);
			ДанныеДокумента.Вставить("НаименованиеДляПечати"     ,Документ.ДоговорКонтрагента.НаименованиеДляПечати);
			
		ИначеЕсли  Объект.Конфигурация = "SB"  Тогда
			
			ДанныеДокумента.Вставить("СтруктурнаяЕдиница"        ,"");
			ДанныеДокумента.Вставить("ИтогНДС"                   ,Документ.Запасы.Итог("СуммаНДС"));
			ДанныеДокумента.Вставить("СуммаДокумента"            ,Документ.СуммаДокумента);
			ДанныеДокумента.Вставить("ФизЛицо"           ,"");
		
			ДанныеДокумента.Вставить("НаименованиеДляПечати"     ,Документ.Договор);
			
			ДанныеДокумента.Вставить("БанкЕд"                    ,Документ.БанковскийСчет.Банк);
			ДанныеДокумента.Вставить("БанкКодЕд"                 ,Документ.БанковскийСчет.Банк.Код); 
			ДанныеДокумента.Вставить("НомерСчетаЕд"              ,Документ.БанковскийСчет.НомерСчета);

			
		Иначе
			
			ДанныеДокумента.Вставить("СтруктурнаяЕдиница"        ,Документ.СтруктурнаяЕдиница);
			ДанныеДокумента.Вставить("БанкЕд"                    ,Документ.СтруктурнаяЕдиница.Банк);
			ДанныеДокумента.Вставить("БанкКодЕд"                 ,Документ.СтруктурнаяЕдиница.Банк.Код); 
			ДанныеДокумента.Вставить("НомерСчетаЕд"              ,Документ.СтруктурнаяЕдиница.НомерСчета);
		    ДанныеДокумента.Вставить("БанкАдрес"                 ,Документ.СтруктурнаяЕдиница.Банк.Адрес);
				Если Объект.Конфигурация  =  "БУ" или Объект.Конфигурация  =  "СГ" Тогда
					ДанныеДокумента.Вставить("ФизЛицо"           ,Документ.Ответственный.ФизЛицо);
				ИначеЕсли Объект.Конфигурация  =  "ВА" Тогда
					ДанныеДокумента.Вставить("ФизЛицо"           ,Документ.Ответственный.ФизическоеЛицо);
				КонецЕсли;
			ДанныеДокумента.Вставить("ИтогНДС"                   ,Документ.Товары.Итог("СуммаНДС") + Документ.Услуги.Итог("СуммаНДС"));
			ДанныеДокумента.Вставить("АдресДоставки"             ,Документ.АдресДоставки);
			ДанныеДокумента.Вставить("НаименованиеДляПечати"     ,Документ.ДоговорКонтрагента.НаименованиеДляПечати);
			
		КонецЕсли;	
		//12.01.2022 - DOCKING 368	
		Если Документ.Организация.КодПоЕДРПОУ = "34818882" Тогда
		//----
		ДанныеДокумента.Вставить("bgs_СкалаКод"     ,bgs_Документ.bgs_СкалаКод);
		ДанныеДокумента.Вставить("bgs_МестоСоставленияДокумента"     ,bgs_Документ.bgs_МестоСоставленияДокумента);
		ДанныеДокумента.Вставить("bgs_ОтветственныйЗаЗаказ"     ,bgs_Документ.bgs_ОтветственныйЗаЗаказ);
		ДанныеДокумента.Вставить("bgs_ТипСерийныйНомер"     ,bgs_Документ.bgs_ТипСерийныйНомер);
		ДанныеДокумента.Вставить("bgs_ПричинаВызова"     ,bgs_Документ.bgs_ПричинаВызова);
		ДанныеДокумента.Вставить("bgs_НаОсновании"     ,bgs_Документ.bgs_НаОсновании);
		//----
		КонецЕсли;
	
		Если Документ.Организация.КодПоЕДРПОУ = "45000828" Тогда
		//----
			ДанныеДокумента.Вставить("Техника"     ,(Документ.НарядЗаказ.vehicleMakeName+" "+Документ.НарядЗаказ.vehicleModelName));
		    ДанныеДокумента.Вставить("ГосНомер"     ,Документ.НарядЗаказ.vehicleNumber);
			ДанныеДокумента.Вставить("СерийныйНомер"     ,Документ.НарядЗаказ.vehicleVin);
				//----
		КонецЕсли;
		
		Если Объект.Конфигурация  =  "УТП" Тогда
			ДанныеДокумента.Вставить("ИтогСкидка"            ,0);
		ИначеЕсли Объект.Конфигурация = "УПП" Тогда
			ДанныеДокумента.Вставить("ИтогСкидка"            ,Документ.Товары.Итог("ЗначениеУсловияАвтоматическойСкидки") + Документ.Услуги.Итог("ЗначениеУсловияАвтоматическойСкидки"));
		ИначеЕсли Объект.Конфигурация = "УТ" Тогда
			ДанныеДокумента.Вставить("ИтогСкидка"            ,0);
		ИначеЕсли Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда //12.01.2022 + - DOCKING 368
			ДанныеДокумента.Вставить("ИтогСкидка"            ,0);	
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			ДанныеДокумента.Вставить("ИтогСкидка"            ,Документ.Запасы.Итог("СуммаСкидкиНаценки"));
		Иначе
			ДанныеДокумента.Вставить("ИтогСкидка"            ,Документ.Товары.Итог("СуммаСкидки") + Документ.Услуги.Итог("СуммаСкидки"));
		КонецЕсли;
	//1.02.2022 + DOCKING 369	
	ИначеЕсли НЕ ДокСчетЕстьВсистеме Тогда
		Если МассивУникальныхСообщений.Свойство("Счет_покупателям") = Ложь Тогда
			ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Счет На Оплату Покупателю"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Рахунок На Оплату Покупцеві"" в даній конфігурації відсутній або перейменований!'");
			МассивУникальныхСообщений.Вставить("Счет_покупателям",ТекстЯзык);
		КонецЕсли;
		//Сообщить("ВНИМАНИЕ! Документ ""Счет На Оплату Покупателю"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
		ВызИсключение = Истина; 
		
	ИначеЕсли НЕ ДокСчетКлиентуЕстьВсистеме Тогда
		Если МассивУникальныхСообщений.Свойство("Счет_Клиенту") = Ложь Тогда
			ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Счет На Оплату Клиенту"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Рахунок На Оплату Клієнту"" в даній конфігурації відсутній або перейменований!'");
			МассивУникальныхСообщений.Вставить("Счет_покупателям",ТекстЯзык);
		КонецЕсли;
		//Сообщить("ВНИМАНИЕ! Документ ""Счет На Оплату Покупателю"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
		ВызИсключение = Истина;	
	//1.02.2022 - DOCKING 369	
	КонецЕсли;

	//10.01.2022 + DOCKING 368
	//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	//	ДанныеДокумента.Вставить("ИтогСуммаНДС"            ,Документ.Товары.Итог("СуммаНДС")); 
	//	//ДанныеДокумента.Вставить("СкладОрдер"              ,Документ.СкладОрдер);	
	//	попытка  ДанныеДокумента.Вставить("Ответственный"  ,Документ.Ответственный); исключение конецпопытки;  // БВА 20052021
	//КонецЕсли;
	
	Если НЕ (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
	    
		//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Если ДокВозврТовОтПокупателяЕсть И ДокВозврТовОтПокупателяЕстьВсистеме Тогда
			ДанныеДокумента.Вставить("ИтогСуммаНДС"            ,Документ.Товары.Итог("СуммаНДС")); 
			//ДанныеДокумента.Вставить("СкладОрдер"              ,Документ.СкладОрдер);	
			попытка  ДанныеДокумента.Вставить("Ответственный"  ,Документ.Ответственный); исключение конецпопытки;  // БВА 20052021
			
		//1.02.2022 + DOCKING 369	
		ИначеЕсли НЕ ДокВозврТовОтПокупателяЕстьВсистеме Тогда
			Если МассивУникальныхСообщений.Свойство("Возврат_от_покупателя") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Возврат Товаров от покупателя"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Повернення Товарів від покупця"" в даній конфігурації відсутній або перейменований!'");
				МассивУникальныхСообщений.Вставить("Возврат_от_покупателя",ТекстЯзык);
			КонецЕсли;
			//Сообщить("ВНИМАНИЕ! Документ ""Возврат Товаров от покупателя"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
			ВызИсключение = Истина;
		//1.02.2022 - DOCKING 369	
			
		КонецЕсли;
	Иначе
		
		//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Если ДокВозврТовОтКлиентаЕсть И ДокВозврТовОтКлиентаЕстьВсистеме Тогда	
			ДанныеДокумента.Вставить("ИтогСуммаНДС"            ,Документ.Товары.Итог("СуммаНДС")); 
			//ДанныеДокумента.Вставить("СкладОрдер"              ,Документ.СкладОрдер);	
			попытка  ДанныеДокумента.Вставить("Ответственный"  ,Документ.Менеджер); исключение конецпопытки;  // БВА 20052021
			
		//1.02.2022 + DOCKING 369	
		ИначеЕсли НЕ ДокВозврТовОтКлиентаЕстьВсистеме Тогда
			Если МассивУникальныхСообщений.Свойство("Возврат_от_покупателя") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Возврат Товаров от Клиента"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Повернення Товарів від Клієнта"" в даній конфігурації відсутній або перейменований!'");
				МассивУникальныхСообщений.Вставить("Возврат_от_покупателя",ТекстЯзык);
			КонецЕсли;
			//Сообщить("ВНИМАНИЕ! Документ ""Возврат Товаров от клиента"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
			ВызИсключение = Истина;
		//1.02.2022 - DOCKING 369
			
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ (Объект.Конфигурация  = "КУП" ИЛИ Объект.Конфигурация = "ERP") Тогда
	    
		//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Если ДокВозврТовПоставщикуЕсть И ДокВозврТовПоставщикуЕстьВсистеме Тогда	
			ДанныеДокумента.Вставить("ИтогСуммаНДС"            ,Документ.Товары.Итог("СуммаНДС")); 
			ДанныеДокумента.Вставить("ИтогСумма"               ,Документ.Товары.Итог("Сумма")); 
			ДанныеДокумента.Вставить("Получил"                 ,Документ.Получил);
			ДанныеДокумента.Вставить("ДоверенностьСерия"       ,Документ.ДоверенностьСерия);
			ДанныеДокумента.Вставить("ДоверенностьНомер"       ,Документ.ДоверенностьНомер);
			ДанныеДокумента.Вставить("ДоверенностьДата"        ,Документ.ДоверенностьДата);
			ДанныеДокумента.Вставить("Ответственный"           ,Документ.Ответственный);
			
		//1.02.2022 + DOCKING 369	
		ИначеЕсли НЕ ДокВозврТовПоставщикуЕстьВсистеме Тогда
			Если МассивУникальныхСообщений.Свойство("Возврат_поставщику") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Возврат Товаров Поставщику"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Повернення Товарів Постачальнику"" в даній конфігурації відсутній або перейменований!'");
				МассивУникальныхСообщений.Вставить("Возврат_поставщику",ТекстЯзык);
			КонецЕсли;
			//Сообщить("ВНИМАНИЕ! Документ ""Возврат Товаров Поставщику"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
			ВызИсключение = Истина;
		//1.02.2022 - DOCKING 369 
			
		КонецЕсли;
		
	Иначе
		
		//Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Если ДокВозврТовПоставщикуЕсть И ДокВозврТовПоставщикуЕстьВсистеме Тогда	
			ДанныеДокумента.Вставить("ИтогСуммаНДС"            ,Документ.Товары.Итог("СуммаНДС")); 
			ДанныеДокумента.Вставить("ИтогСумма"               ,Документ.Товары.Итог("Сумма")); 
			ДанныеДокумента.Вставить("Получил"                 ,Документ.ПредставительКонтрагента);
			ДанныеДокумента.Вставить("ДоверенностьСерия"       ,Документ.ДоверенностьСерия);
			ДанныеДокумента.Вставить("ДоверенностьНомер"       ,Документ.ДоверенностьНомер);
			ДанныеДокумента.Вставить("ДоверенностьДата"        ,Документ.ДоверенностьДата);
			ДанныеДокумента.Вставить("Ответственный"           ,Документ.Менеджер);
			Попытка ДанныеДокумента.Вставить("Адрес"           		   ,Документ.Контрагент.КонтактнаяИнформация[1].Представление); Исключение КонецПопытки;
			Попытка ДанныеДокумента.Вставить("Телефон"           	   ,Документ.Контрагент.КонтактнаяИнформация[0].Представление); Исключение КонецПопытки;
			
		//1.02.2022 + DOCKING 369	
		ИначеЕсли НЕ ДокВозврТовПоставщикуЕстьВсистеме Тогда
			Если МассивУникальныхСообщений.Свойство("Возврат_поставщику") = Ложь Тогда
				ТекстЯзык = НСтр("ru = 'ВНИМАНИЕ! Документ ""Возврат Товаров Поставщику"" в данной конфигурации отстутствует или переименован!';uk = 'УВАГА! Документ ""Повернення Товарів Постачальнику"" в даній конфігурації відсутній або перейменований!'");
				МассивУникальныхСообщений.Вставить("Возврат_поставщику",ТекстЯзык);
			КонецЕсли;
			//Сообщить("ВНИМАНИЕ! Документ ""Возврат Товаров Поставщику"" в данной конфигурации отстутствует или переименован!",СтатусСообщения.Внимание);
			ВызИсключение = Истина;
		//1.02.2022 - DOCKING 369	
			
		КонецЕсли;
	КонецЕсли;	
	//10.01.2022 - DOCKING 368
	
	Если ТипДок = "Пусто" Тогда
		Если (ДокСверкаЕсть 					= Неопределено ИЛИ ДокСверкаЕсть     			= Ложь)
			И (ДокВозврТовОтКлиентаЕсть 		= Неопределено ИЛИ ДокВозврТовОтКлиентаЕсть     = Ложь)
			И (ДокАктСверкиЕсть 				= Неопределено ИЛИ ДокАктСверкиЕсть     		= Ложь)
			И (ДокАктЕсть 						= Неопределено ИЛИ ДокАктЕсть     				= Ложь)
			И (ДокВозврТовОтПокупателяЕсть 		= Неопределено ИЛИ ДокВозврТовОтПокупателяЕсть  = Ложь)
			И (ДокРТУЕсть 						= Неопределено ИЛИ ДокРТУЕсть     				= Ложь)
			И (ДокВозврТовПоставщикуЕсть 		= Неопределено ИЛИ ДокВозврТовПоставщикуЕсть    = Ложь)
			И (ДокСчетЕсть 						= Неопределено ИЛИ ДокСчетЕсть     				= Ложь)
			И (ДокСчетКлиентуЕсть 				= Неопределено ИЛИ ДокСчетКлиентуЕсть 			= Ложь)
			И (ДокННЕсть 						= Неопределено ИЛИ ДокННЕсть     				= Ложь)
			И (ДокПриложение2Есть 				= Неопределено ИЛИ ДокПриложение2Есть     		= Ложь)
			  
		Тогда       
			Попытка 
				ВызИсключение = 1/0; 
			Исключение	
				ВызватьИсключение 
			КонецПопытки;
			
		Иначе
			Возврат ДанныеДокумента;
		КонецЕсли;
			
	Иначе
		Если ВызИсключение Тогда
			Попытка 
				ВызИсключение = 1/0; 
			Исключение	
				ВызватьИсключение 
			КонецПопытки;
		Иначе
			
			Возврат ДанныеДокумента;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция СформироватьАктУслуг(ЕдиницаВПроизводстве,Документ)
	
	// 14.02.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	АктВыполненныхРаботУслуги.Номенклатура.Код как КодНоменклатуры,	
		|	АктВыполненныхРаботУслуги.Содержание как Наименование, 
		|	АктВыполненныхРаботУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботУслуги.Ссылка.ЦенаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктВыполненныхРаботУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктВыполненныхРаботУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктВыполненныхРаботУслуги.Цена  / 1.2
		|				ИНАЧЕ АктВыполненныхРаботУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктВыполненныхРаботУслуги.Цена, 
		|	АктВыполненныхРаботУслуги.Количество, 
		|	"+ЕдиницаВПроизводстве+", 
		|	АктВыполненныхРаботУслуги.Сумма,
		// 27.06.2022 + DOCKING 403
	    |	АктВыполненныхРаботУслуги.СтавкаНДС КАК СтавкаНДС,
		|	АктВыполненныхРаботУслуги.СуммаНДС КАК СуммаНДС
		// 27.06.2022 - DOCKING 403
		|ИЗ
		|	Документ.АктВыполненныхРабот.Услуги КАК АктВыполненныхРаботУслуги
		|ГДЕ
		|	АктВыполненныхРаботУслуги.Ссылка  =  &Документ";
		
	ИначеЕсли  Объект.Конфигурация = "SB" Тогда
		
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.Код как КодНоменклатуры,	
		|	АктВыполненныхРаботРаботыИУслуги.Содержание как Наименование, 
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА АктВыполненныхРаботРаботыИУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктВыполненныхРаботРаботыИУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктВыполненныхРаботРаботыИУслуги.Цена  / 1.2
		|				ИНАЧЕ АктВыполненныхРаботРаботыИУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктВыполненныхРаботРаботыИУслуги.Цена, 
		|	АктВыполненныхРаботРаботыИУслуги.Количество, 
		|	"+ЕдиницаВПроизводстве+", 
		|	АктВыполненныхРаботРаботыИУслуги.Сумма,
		// 27.06.2022 + DOCKING 403
	    |	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС КАК СтавкаНДС,
		|	АктВыполненныхРаботРаботыИУслуги.СуммаНДС КАК СуммаНДС
		// 27.06.2022 - DOCKING 403
		|ИЗ
		|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
		|ГДЕ
		|	АктВыполненныхРаботРаботыИУслуги.Ссылка  =  &Документ";

		
	Иначе
	// 14.02.2022 - DOCKING 368	
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура.Код как КодНоменклатуры,
		|	РеализацияТоваровУслугУслуги.Содержание как Наименование, 
		|	РеализацияТоваровУслугУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	РеализацияТоваровУслугУслуги.Цена, 
		|	РеализацияТоваровУслугУслуги.Количество,
		// 27.06.2022 + DOCKING 403
	    |	РеализацияТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		// 27.06.2022 - DOCKING 403
		// 07.06.2022 + DOCKING 408
		|	РеализацияТоваровУслугУслуги.СуммаСкидки,
		// 07.06.2022 - DOCKING 408
		|	РеализацияТоваровУслугУслуги.СуммаБезСкидки,
		|	""шт"" как Единица, 
		|	РеализацияТоваровУслугУслуги.Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Код как КодНоменклатуры,	
		|	АктОбОказанииПроизводственныхУслугУслуги.Содержание как Наименование, 
		|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА АктОбОказанииПроизводственныхУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС  =  &Ставка20
		|					ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена  / 1.2
		|				ИНАЧЕ АктОбОказанииПроизводственныхУслугУслуги.Цена 
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	АктОбОказанииПроизводственныхУслугУслуги.Цена, 
		|	АктОбОказанииПроизводственныхУслугУслуги.Количество,
		// 27.06.2022 + DOCKING 403
	    |	АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС КАК СуммаНДС,
		// 27.06.2022 - DOCKING 403
		// 07.06.2022 + DOCKING 408
		|	"""",
		// 07.06.2022 - DOCKING 408
		|	"""",
		|	"+ЕдиницаВПроизводстве+", 
		|	АктОбОказанииПроизводственныхУслугУслуги.Сумма
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
		|ГДЕ
		|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка  =  &Документ";
		
		
	КонецЕсли;	
	// DOCKING 459 + 28.11.2022
	//Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Если Объект.Конфигурация = "SB" Тогда
		Запрос.УстановитьПараметр("Ставка20",  Справочники.СтавкиНДС.НайтиПоНаименованию("20%"));		
	Иначе
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	КонецЕсли;
	// DOCKING 459 - 28.11.2022
	Запрос.УстановитьПараметр("Документ",  Документ);  
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции

&НаСервере
Функция СформироватьАктТоваров(ЕдиницаВПроизводстве,Документ)
	
	// 14.02.2022 + DOCKING 368
	//Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	//
	//	Запрос  =  Новый Запрос;
	//	Запрос.Текст  =  
	//	"ВЫБРАТЬ
	//	|	АктВыполненныхРаботУслуги.Номенклатура.Код как КодНоменклатуры,	
	//	|	АктВыполненныхРаботУслуги.Содержание как Наименование, 
	//	|	АктВыполненныхРаботУслуги.Номенклатура как Номенклатура,
	//	|	ВЫБОР
	//	|		КОГДА АктВыполненныхРаботУслуги.Ссылка.ЦенаВключаетНДС  =  ЛОЖЬ
	//	|			ТОГДА АктВыполненныхРаботУслуги.Цена
	//	|		ИНАЧЕ ВЫБОР
	//	|				КОГДА АктВыполненныхРаботУслуги.СтавкаНДС  =  &Ставка20
	//	|					ТОГДА АктВыполненныхРаботУслуги.Цена  / 1.2
	//	|				ИНАЧЕ АктВыполненныхРаботУслуги.Цена 
	//	|			КОНЕЦ
	//	|	КОНЕЦ КАК ЦенаБезНДС, 
	//	| 	АктВыполненныхРаботУслуги.Цена, 
	//	|	АктВыполненныхРаботУслуги.Количество, 
	//	|	"+ЕдиницаВПроизводстве+", 
	//	|	АктВыполненныхРаботУслуги.Сумма,
	//	// 27.06.2022 + DOCKING 403
	//    |	АктВыполненныхРаботУслуги.СтавкаНДС КАК СтавкаНДС,
	//	|	АктВыполненныхРаботУслуги.СуммаНДС КАК СуммаНДС
	//	// 27.06.2022 - DOCKING 403
	//	|ИЗ
	//	|	Документ.АктВыполненныхРабот.Услуги КАК АктВыполненныхРаботУслуги
	//	|ГДЕ
	//	|	АктВыполненныхРаботУслуги.Ссылка  =  &Документ";
	//	
	//Иначе
	// 14.02.2022 - DOCKING 368	
		Запрос  =  Новый Запрос;
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.Код как КодНоменклатуры,
		//|	РеализацияТоваровУслугТовары.Содержание как Наименование, 
		|	РеализацияТоваровУслугТовары.Номенклатура как Номенклатура,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		| 	РеализацияТоваровУслугТовары.Цена, 
		|	РеализацияТоваровУслугТовары.Количество,
		// 27.06.2022 + DOCKING 403
		|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		// 27.06.2022 - DOCKING 403
		// 07.06.2022 + DOCKING 408
		|	РеализацияТоваровУслугТовары.СуммаСкидки,
		// 07.06.2022 - DOCKING 408
		|	РеализацияТоваровУслугТовары.СуммаБезСкидки,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения как Единица, 
		|	РеализацияТоваровУслугТовары.Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		|
		//|ВЫБРАТЬ
		//|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Код как КодНоменклатуры,	
		//|	АктОбОказанииПроизводственныхУслугУслуги.Содержание как Наименование, 
		//|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура как Номенклатура,
		//|	ВЫБОР
		//|		КОГДА АктОбОказанииПроизводственныхУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		//|			ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена
		//|		ИНАЧЕ ВЫБОР
		//|				КОГДА АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА АктОбОказанииПроизводственныхУслугУслуги.Цена  / 1.2
		//|				ИНАЧЕ АктОбОказанииПроизводственныхУслугУслуги.Цена 
		//|			КОНЕЦ
		//|	КОНЕЦ КАК ЦенаБезНДС, 
		//| 	АктОбОказанииПроизводственныхУслугУслуги.Цена, 
		//|	АктОбОказанииПроизводственныхУслугУслуги.Количество,
		//// 27.06.2022 + DOCKING 403
		//|	АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		//|	АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС КАК СуммаНДС,
		//// 27.06.2022 - DOCKING 403
		//// 07.06.2022 + DOCKING 408
		//|	"""",
		//|	"""",
		//// 07.06.2022 - DOCKING 408
		//|	"+ЕдиницаВПроизводстве+", 
		//|	АктОбОказанииПроизводственныхУслугУслуги.Сумма
		//|ИЗ
		//|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
		//|ГДЕ
		//|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка  =  &Документ
		|";
		
		
	//КонецЕсли;	
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);  
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции

&НаСервере		
Функция СформироватьСчетПокупателя(ВыборСуммы,ВыборСкидки,Документ)
	
	Запрос  =  Новый Запрос;
	//12.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
			
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателюТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	СчетНаОплатуПокупателюТовары.Номенклатура.НаименованиеПолное КАК Наименование,
		|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюТовары.Цена
		|		ИНАЧЕ 	СчетНаОплатуПокупателюТовары.Цена
		|	КОНЕЦ КАК Цена, 
		|	СчетНаОплатуПокупателюТовары.Количество, 
		|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК Единица, 
		|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма
//		|	СчетНаОплатуПокупателюТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
//		|	СчетНаОплатуПокупателюТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуПокупателюУслуги.Номенклатура.Код КАК КодНоменклатуры,
		|	СчетНаОплатуПокупателюУслуги.Номенклатура.НаименованиеПолное КАК Наименование,
//		|	СчетНаОплатуПокупателюУслуги.Содержание, 
		|	СчетНаОплатуПокупателюУслуги.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		|		ИНАЧЕ СчетНаОплатуПокупателюУслуги.Цена
		|			
		|	КОНЕЦ КАК Цена, 
		|	СчетНаОплатуПокупателюУслуги.Количество, 
		|	""шт"", 
		|	СчетНаОплатуПокупателюУслуги.Сумма КАК Сумма
	//	|	СчетНаОплатуПокупателюУслуги."+ВыборСуммы+",
	//	|	СчетНаОплатуПокупателюУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		|ГДЕ
		|	СчетНаОплатуПокупателюУслуги.Ссылка  =  &Документ";
	
	ИначеЕсли Объект.Конфигурация = "SB" Тогда
	
	 	Запрос.Текст  =  
		"ВЫБРАТЬ
		|	СчетНаОплатуЗапасы.Номенклатура.Код КАК КодНоменклатуры,
		|	СчетНаОплатуЗапасы.Номенклатура.НаименованиеПолное КАК Наименование,
		|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуЗапасы.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуЗапасы.Цена
		|		ИНАЧЕ 	СчетНаОплатуЗапасы.Цена
		|	КОНЕЦ КАК Цена, 
		|	СчетНаОплатуЗапасы.Количество, 
		|	СчетНаОплатуЗапасы.ЕдиницаИзмерения КАК Единица, 
		|	СчетНаОплатуЗапасы.Сумма КАК Сумма
//		|	СчетНаОплатуЗапасы."+ВыборСуммы+" КАК СуммаБезСкидки,
//		|	СчетНаОплатуЗапасы."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
		|ГДЕ
		|	СчетНаОплатуЗапасы.Ссылка = &Документ";

		
	Иначе
	//12.01.2022 - DOCKING 368		
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателюТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	СчетНаОплатуПокупателюТовары.Номенклатура.НаименованиеПолное КАК Наименование,
		|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СчетНаОплатуПокупателюТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА СчетНаОплатуПокупателюТовары.Цена / 1.2
		|					ТОГДА СчетНаОплатуПокупателюТовары.Цена 
		|				ИНАЧЕ СчетНаОплатуПокупателюТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	СчетНаОплатуПокупателюТовары.Количество, 
		|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК Единица, 
		|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
		|	СчетНаОплатуПокупателюТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
		|	СчетНаОплатуПокупателюТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетНаОплатуПокупателюУслуги.Номенклатура.Код КАК КодНоменклатуры,
		|	СчетНаОплатуПокупателюУслуги.Содержание, 
		|	СчетНаОплатуПокупателюУслуги.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СчетНаОплатуПокупателюУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена / 1.2
		|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена
		|				ИНАЧЕ СчетНаОплатуПокупателюУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	СчетНаОплатуПокупателюУслуги.Количество, 
		// 13.12.2023 + DOCKING 653
		//|	""шт"", 
		|	СчетНаОплатуПокупателюУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК Единица, 
		// 13.12.2023 - DOCKING 653
		|	СчетНаОплатуПокупателюУслуги.Сумма КАК Сумма,
		|	СчетНаОплатуПокупателюУслуги."+ВыборСуммы+",
		|	СчетНаОплатуПокупателюУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
		|ГДЕ
		|	СчетНаОплатуПокупателюУслуги.Ссылка  =  &Документ";
		
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Документ",  Документ);			
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции
//  ---------- Для проверки шаблонов Epiroc-------------
&НаСервере		
Функция СформироватьСчетПокупателя_Товары(ВыборСуммы,ВыборСкидки,Документ)
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура.НаименованиеПолное КАК Наименование,
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.Артикул КАК Артикул,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.НоменклатураГТД КАК КодУКТВЭД,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
	|			ТОГДА СчетНаОплатуПокупателюТовары.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СчетНаОплатуПокупателюТовары.СтавкаНДС  =  &Ставка20
	//|					ТОГДА СчетНаОплатуПокупателюТовары.Цена / 1.2
	|					ТОГДА СчетНаОплатуПокупателюТовары.Цена 
	|				ИНАЧЕ СчетНаОплатуПокупателюТовары.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаБезНДС, 
	|	СчетНаОплатуПокупателюТовары.Количество, 
	|	СчетНаОплатуПокупателюТовары.ЕдиницаИзмерения КАК Единица, 
	|	СчетНаОплатуПокупателюТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
	|	СчетНаОплатуПокупателюТовары."+ВыборСкидки+" КАК Скидка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);			
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции

&НаСервере		
Функция СформироватьСчетПокупателя_Услуги(ВыборСуммы,ВыборСкидки,Документ)
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюУслуги.Содержание, 
	|	СчетНаОплатуПокупателюУслуги.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюУслуги.Номенклатура.НоменклатураГТД КАК КодУКТВЭД,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
	|			ТОГДА СчетНаОплатуПокупателюУслуги.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СчетНаОплатуПокупателюУслуги.СтавкаНДС  =  &Ставка20
	//|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена / 1.2
	|					ТОГДА СчетНаОплатуПокупателюУслуги.Цена
	|				ИНАЧЕ СчетНаОплатуПокупателюУслуги.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	СчетНаОплатуПокупателюУслуги.Количество,
	|	СчетНаОплатуПокупателюУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК Единица,
	//|	""шт"", 
	|	СчетНаОплатуПокупателюУслуги."+ВыборСуммы+",
	|	СчетНаОплатуПокупателюУслуги."+ВыборСкидки+" КАК Скидка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	|ГДЕ
	|	СчетНаОплатуПокупателюУслуги.Ссылка  =  &Документ";
	
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);			
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции
// END ---------- Для проверки шаблонов Epiroc-------------

&НаСервере
Функция СформироватьВозвратТоваровОтПокупателя(ВыборСуммы,ВыборСкидки,Документ)
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК Наименование, 
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС  =  &Ставка20
	//|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
	|					ТОГДА ВозвратТоваровОтПокупателяТовары.Цена 
	|				ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена, 
	|	ВозвратТоваровОтПокупателяТовары.Количество, 
	//|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК Единица, 
	|	ВозвратТоваровОтПокупателяТовары."+ВыборСуммы+" КАК СуммаБезСкидки,
	|	ВозвратТоваровОтПокупателяТовары."+ВыборСкидки+" КАК Скидка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Документ";
	
	//12.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СуммаВключаетНДС","ЦенаВключаетНДС");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЕдиницаИзмерения","Номенклатура.ЕдиницаИзмерения");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.ВозвратТоваровОтПокупателя","Документ.ВозвратТоваровОтКлиента");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СуммаБезСкидки,","СуммаБезСкидки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВозвратТоваровОтПокупателяТовары.СуммаСкидки КАК Скидка","");
		//Запрос.Текст = СтрЗаменить(Запрос.Текст,"Единица,","Единица");
	КонецЕсли;
	//12.01.2022 - DOCKING 368
	
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);			
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;
	
КонецФункции

&НаСервере
Функция СформироватьВозвратТоваровПоставщиков(Документ)
	
	Запрос  =  Новый Запрос;
	Запрос.Текст  =  

    "ВЫБРАТЬ
    |	ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование КАК Наименование, 
    |	ВЫБОР
    |		КОГДА ВозвратТоваровПоставщикуТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
    |			ТОГДА ВозвратТоваровПоставщикуТовары.Цена
    |		ИНАЧЕ ВЫБОР
    |				КОГДА ВозвратТоваровПоставщикуТовары.СтавкаНДС  =  &Ставка20
    //|					ТОГДА ВозвратТоваровПоставщику.Цена / 1.2
    |					ТОГДА ВозвратТоваровПоставщикуТовары.Цена 
    |				ИНАЧЕ ВозвратТоваровПоставщикуТовары.Цена
    |			КОНЕЦ
    |	КОНЕЦ КАК Цена, 
    |	ВозвратТоваровПоставщикуТовары.Количество, 
    |	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
    |	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК Единица, 
    |	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаБезСкидки
    //|	ВозвратТоваровПоставщикуТовары.СуммаСкидки КАК Скидка
    |ИЗ
    |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
    |ГДЕ
    |	ВозвратТоваровПоставщикуТовары.Ссылка = &Документ ";
	
	//12.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СуммаВключаетНДС","ЦенаВключаетНДС");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЕдиницаИзмерения","Упаковка");
	КонецЕсли;
	//12.01.2022 - DOCKING 368
	
	//10.03.2024 + DOCKING 678
	Если ИмяКлиентскойБазы = "КУП25" Тогда  //10.03.2024 +- DOCKING 678
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Упаковка","Номенклатура.ЕдиницаИзмерения");
	КонецЕсли;	
	//10.03.2024 - DOCKING 678
	
	Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("Документ",  Документ);			
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;

КонецФункции

&НаСервере
Функция СформироватьТТН(ВыборСкидки,Документ)
	Запрос  =  Новый Запрос;
	// DOCKING 396 + 29.04.2022
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
		
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.ЦенаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РеализацияТоваровУслугТовары.Количество, 
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
		|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка,
		|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ";

	ИначеЕсли Объект.Конфигурация = "SB" Тогда	
		
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РасходнаяНакладнаяЗапасы.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасходнаяНакладнаяЗапасы.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РасходнаяНакладнаяЗапасы.Цена / 1.2
		|					ТОГДА РасходнаяНакладнаяЗапасы.Цена 
		|				ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РасходнаяНакладнаяЗапасы.Количество, 
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма, 
		|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК Единица,
		|	РасходнаяНакладнаяЗапасы."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка  =  &Документ";
		
	Иначе
	// DOCKING 396 - 29.04.2022	
		Запрос.Текст  =  
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугТовары.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугТовары.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугТовары.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугТовары.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК ЦенаБезНДС, 
		|	РеализацияТоваровУслугТовары.Количество, 
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма, 
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Единица,
		|	РеализацияТоваровУслугТовары."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка  =  &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Содержание, 
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС  =  ЛОЖЬ
		|			ТОГДА РеализацияТоваровУслугУслуги.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС  =  &Ставка20
		//|					ТОГДА РеализацияТоваровУслугУслуги.Цена / 1.2
		|					ТОГДА РеализацияТоваровУслугУслуги.Цена 
		|				ИНАЧЕ РеализацияТоваровУслугУслуги.Цена
		|			КОНЕЦ
		|	КОНЕЦ, 
		|	РеализацияТоваровУслугУслуги.Количество, 
		|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		|	""грн."" ,
		|	РеализацияТоваровУслугУслуги."+ВыборСкидки+" КАК Скидка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка  =  &Документ";
	КонецЕсли;	
	// DOCKING 459 + 28.11.2022
	//Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	Если Объект.Конфигурация = "SB" Тогда
		Запрос.УстановитьПараметр("Ставка20",  Справочники.СтавкиНДС.НайтиПоНаименованию("20%"));		
	Иначе
		Запрос.УстановитьПараметр("Ставка20",  Перечисления.СтавкиНДС.НДС20);
	КонецЕсли;
	// DOCKING 459 - 28.11.2022
	
	Запрос.УстановитьПараметр("Документ",  Документ);		
	
	Результат  =  Запрос.Выполнить().Выгрузить();
	
	РезультатМассив = ПреобразоватьТаблицуЗначенийВМассив(Результат);	
	
	Возврат РезультатМассив;

КонецФункции

&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)

	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат Ссылка[ИмяРеквизита]
	Иначе
		Возврат Неопределено
	КонецЕсли;

КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
Функция ПроверитьРеквизитДокумента(Ссылка,ИмяРеквизита)
	
	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Данные =  Ссылка[ИмяРеквизита];
		
		Если Данные > 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьРеквизитДокументаПрефикс(Ссылка,ИмяРеквизита)
	
	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Данные =  Ссылка[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(Данные.Префикс)  Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьРеквизитДокументаПрилож2(Ссылка,ИмяРеквизита)
	
	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат  Ссылка[ИмяРеквизита];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьТабЧатьДокумента(Ссылка,ТабличнаяЧасть)
	
	Если Ссылка.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧасть) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьИтогиПоТЧ(Документ,ТЧ)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	ДанныеДокумента = Новый Структура();
	Если ТЧ = "ОС" Тогда
		ДанныеДокумента.Вставить("ИтогПоТЧ"  ,Документ.ОС.Итог("СуммаНДС"));
	ИначеЕсли ТЧ = "НМА" Тогда
		ДанныеДокумента.Вставить("ИтогПоТЧ" ,Документ.НМА.Итог("СуммаНДС"));
	КонецЕсли;
	
	Возврат ДанныеДокумента; 
	
КонецФункции

&НаСервере
Функция ПолучитьКодУКТВЭД(Наименование)
	
	КодУКТВЭД = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
//	               |	Номенклатура.НоменклатураГТД.КодУКТВЭД КАК КодУКТВЭД  //DOCKING 471 +- 03.02.2023
				   |	Номенклатура.НоменклатураГТД КАК КодУКТВЭД
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.КодУКТВЭД;
	
КонецФункции

&НаСервере
Функция ПолучитьБазЕдИзмерения(КодНоменклатуры)
	
  Код ="";	
  
  Запрос = Новый Запрос;
  Запрос.Текст ="ВЫБРАТЬ
                |	Номенклатура.БазоваяЕдиницаИзмерения.Код КАК Код
                |ИЗ
                |	Справочник.Номенклатура КАК Номенклатура
                |ГДЕ
                |	Номенклатура.Код = &КодНоменклатуры";
  
  //12.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
		Запрос.Текст  =  СтрЗаменить(Запрос.Текст,  "БазоваяЕдиницаИзмерения",   "ЕдиницаИзмерения");
	КонецЕсли;	
  //12.01.2022 - DOCKING 368
  Запрос.УстановитьПараметр("КодНоменклатуры", КодНоменклатуры);
  
	
  Результат = Запрос.Выполнить();
  Выборка = Результат.Выбрать();
  
  Выборка.Следующий();
  
  Возврат Выборка.Код;
  
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеЕдиницы(КодНоменклатуры)
	
	НаименованиеЕдиницы = "";
	
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК НаименованиеЕдиницы
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
             	   |	Номенклатура.Код = &КодНоменклатуры";
	//12.01.2022 + DOCKING 368	
	Если Объект.Конфигурация  =  "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
		Запрос.Текст  =  СтрЗаменить(Запрос.Текст,  "БазоваяЕдиницаИзмерения",   "ЕдиницаИзмерения");
	КонецЕсли;	
	//12.01.2022 - DOCKING 368
	
	Запрос.УстановитьПараметр("КодНоменклатуры", КодНоменклатуры);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.НаименованиеЕдиницы;
	
КонецФункции

&НаСервере
Функция ПолучитьДолжностьСотрудника(СотрудникДолжность)
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					    |Сотрудники.Код,
					    |Сотрудники.Наименование,
					    |ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
					    |ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность
					|ИЗ
    					|Справочник.Сотрудники КАК Сотрудники
       						 |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
       						 |ПО (ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка)
					|ГДЕ
  						 |Сотрудники.Наименование = &СотрудникДолжность";  
	Запрос.УстановитьПараметр("СотрудникДолжность", СотрудникДолжность);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ТекущаяДолжность;

	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненияПрефиксаПодразделения(Ссылка,ИмяРеквизита)
	
	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Данные =  Ссылка[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(Данные.ОбособленноеПодразделение.Префикс)  Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РегОтчетПостроитьЧекбоксы()
	
	СкрытьВсеПриложения();
	
	Если РегОтчетТипДок = "Отчет по единому социальному взносу (Приложение 4)" Тогда
		ВидимыеПриложенияЕСВ();
	ИначеЕсли РегОтчетТипДок = "ОтчетЕСВ" Тогда
		ВидимыеПриложенияЕСВ_стар();
	ИначеЕсли РегОтчетТипДок = "Декларация по налогу на прибыль предприятий" Тогда
		ВидимыеПриложенияДекларацииОПрибыли();
	ИначеЕсли РегОтчетТипДок = "Декларация по НДС" Тогда
		ВидимыеПриложенияДекларацииПоНДС();
	ИначеЕсли РегОтчетТипДок = "Уточняющий расчет Декларация по НДС" Тогда
		ВидимыеПриложенияУточняющейДекларацииПоНДС();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РегОтчетОчиститьЧекбоксы();
	
	Таб41 = Ложь;
	Таб42 = Ложь;
	Таб43 = Ложь;
	Таб44 = Ложь;
	Таб45 = Ложь;
	Таб46 = Ложь;
	Таб47 = Ложь;
	Таб48 = Ложь;
	Таб49 = Ложь;
	Таб50 = Ложь;
	Таб51 = Ложь;
	Таб52 = Ложь;
	Таб54 = Ложь;
	Таб61 = Ложь;
	Таб62 = Ложь;
	
КонецПроцедуры
	
&НаКлиенте
Процедура РегОтчетДокументСоздание(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура РегОтчетТипДокПриИзменении(Элемент)
	ТаблицаОтчетов.Очистить();
	РегОтчетОчиститьЧекбоксы();
	РегОтчетПостроитьЧекбоксы();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для каждого Стр Из ТаблицаДокументов Цикл
		Стр.Флажок = Истина;	
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для каждого Стр Из ТаблицаДокументов Цикл
		Стр.Флажок = Ложь;	
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеНД(Команда)
	
	Для каждого Стр Из ТаблицаНалоговых Цикл
		Стр.Флажок = Истина;	
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеНД(Команда)
	
	Для каждого Стр Из ТаблицаНалоговых Цикл
		Стр.Флажок = Ложь;	
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если Диалог.Редактировать() Тогда 
		НачПериода = Диалог.Период.ДатаНачала;
		КонПериода = Диалог.Период.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаРег(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода(); 
	Если Диалог.Редактировать() Тогда 
		РегОтчетНачПериода = Диалог.Период.ДатаНачала;
		РегОтчетКонПериода = Диалог.Период.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элементы.ТаблицаОтчетов.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьНаличиеОбновления(Команда)
	Результат = ПроверитьНаличиеОбновления();
	Если Результат <> Неопределено Тогда
		Если Результат.ЕстьОбновление Тогда
			Элементы.ГиперСсылкаНаОбновление.Заголовок = Результат.СсылкаНаОбновление;
			Элементы.НадписьИнфаОбОбновлении.Заголовок = НСтр("ru = 'Доступна новая версия медовой стыковки!';uk = 'Доступна нова версія медової стиковки!'");
		Иначе
			Элементы.НадписьИнфаОбОбновлении.Заголовок = НСтр("ru = 'Вы используете актуальную версию медовой стыковки!';uk = 'Ви використовуєте актуальну версію медової стиковки!'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеОбновления()
	
	Ответ = Новый Структура("ЕстьОбновление,СсылкаНаОбновление",Ложь,"");
	
	Попытка
		App = Новый COMОбъект("MEDOC.ZApplication");
		
		Инф = App.GetVerDocking();
		
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Инф,Символы.ПС);
		
		Для каждого Стр Из МассивСтрок Цикл
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,",");
			Если МассивПараметров.Найти(Объект.ТипСтыковки) <> Неопределено Тогда
				Ответ.Вставить("ЕстьОбновление", Объект.ВерсияСтыковки < МассивПараметров[1]);
				Ответ.Вставить("СсылкаНаОбновление", МассивПараметров[2]);
				Возврат Ответ;
			КонецЕсли; 
		КонецЦикла; 
	Исключение
		Возврат Ответ;
	КонецПопытки; 	
		
КонецФункции


#Область СлужебныеПроцедурыФункцииКлиент
#КонецОбласти 

#Область СлужебныеПроцедурыФункцииСервер

&НаСервереБезКонтекста
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) 
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

&НаСервере
Функция ПолучитьДанныеИзХранилища(Настройки)
	Возврат ХранилищеОбщихНастроек.Загрузить(Настройки);
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруРегОтчета(РегОтчет,ИмяДанных)
	Возврат РегОтчет.ДанныеОтчета.Получить().ПоказателиОтчета[ИмяДанных];
КонецФункции

&НаСервере
Функция ПолучитьДанныеМногострочныхРазделовРегОтчета(РегОтчет)
	
	ДанныеМногострочныхРазделов = РегОтчет.ДанныеОтчета.Получить().ДанныеМногострочныхРазделов;
	СтруктураМногострочныхРазделов = Новый Структура;
	
	//так как там ТЗ в структуре, а ТЗ не сериализуется :(
	//преобразуем каждую ТЗ в массив структур
	
	Для каждого Таблица Из ДанныеМногострочныхРазделов Цикл
		СтруктураМногострочныхРазделов.Вставить(Таблица.Ключ,ПреобразоватьТаблицуЗначенийВМассив(Таблица.Значение));	
	КонецЦикла; 
	
	Возврат СтруктураМногострочныхРазделов;
КонецФункции

&НаСервере
Функция ПолучитьДанныеМногостраничныхРазделовРегОтчета(РегОтчет)
	перем НайденоеЗначение;
	
	ДанныеМногостраничныхРазделов =   РегОтчет.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов;
	СтруктураМногостраничныхРазделов = Новый Структура;
	
	//так как ТЗ в структуре, а ТЗ не сериализуется
	//преобразуем каждую ТЗ в массив структур
	//Вложенняа таблица  Таблица.Значение[0].ДанныеДопСтрок.PNT2R

	Для каждого Таблица Из ДанныеМногостраничныхРазделов Цикл
		Если Таблица.Значение.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда

			Для каждого СтрТаб Из Таблица.Значение Цикл
				ЗначениеПоиска = неопределено;
				
				СтрТаб.ДанныеДопСтрок.Свойство("PNT2R",ЗначениеПоиска);
				Если ЗначениеПоиска <> неопределено Тогда
					сс = ПреобразоватьТаблицуЗначенийВМассив(ЗначениеПоиска);
					СтрТаб.ДанныеДопСтрок.Вставить("PNT2R", сс); 
				КонецЕсли;	
				
				ЗначениеПоиска = неопределено;
				
				СтрТаб.ДанныеДопСтрок.Свойство("KTT1R",ЗначениеПоиска);
				Если ЗначениеПоиска <> неопределено Тогда
					сс = ПреобразоватьТаблицуЗначенийВМассив(ЗначениеПоиска);
					СтрТаб.ДанныеДопСтрок.Вставить("KTT1R", сс); 
				КонецЕсли;	
				
				ЗначениеПоиска = неопределено;
				
				СтрТаб.ДанныеДопСтрок.Свойство("KTT2R",ЗначениеПоиска);
				Если ЗначениеПоиска <> неопределено Тогда
					сс = ПреобразоватьТаблицуЗначенийВМассив(ЗначениеПоиска);
					СтрТаб.ДанныеДопСтрок.Вставить("KTT2R", сс); 
				КонецЕсли;	
				
			КонецЦикла; 
			
		КонецЕсли;
	
	КонецЦикла; 		

	Для каждого Таблица Из ДанныеМногостраничныхРазделов Цикл
		СтруктураМногостраничныхРазделов.Вставить(Таблица.Ключ,ПреобразоватьТаблицуЗначенийВМассив(Таблица.Значение));	
	КонецЦикла; 

	Возврат  СтруктураМногостраничныхРазделов; 	
КонецФункции

#КонецОбласти 

#Область СлужбныеПроцедурыФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСтрокуВЧисло(Строка)
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка,Символы.НПП,"");
	Строка = СтрЗаменить(Строка,",",".");
	Возврат Число(Строка);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные) 
    
    мсДанные = Новый Массив;
        
    // Запишем в массив
    Для Каждого СтрокаТЗ Из тзДанные Цикл
        
        стСтрокаТаблицы = Новый Структура;
        Для Каждого ИмяКолонки Из тзДанные.Колонки Цикл
            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
        КонецЦикла;
        
        мсДанные.Добавить(стСтрокаТаблицы);
        
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ВерсияСтыковкиНадпись.Заголовок = НСтр("ru = 'Версия ';uk = 'Версія '") + Объект.ВерсияСтыковки;

КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНаОбновлениеНажатие(Элемент)
	ЗапуститьПриложение(Элемент.Заголовок);
КонецПроцедуры


#КонецОбласти

&НаСервере
Функция СозданиеАктаСверки(МассивПерв)
	
	// 20.01.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
	// 20.01.2022 - DOCKING 368	
		ДокТип = Документы.СверкаВзаиморасчетов.СоздатьДокумент();
	Иначе
		ДокТип = Документы.АктСверкиВзаиморасчетов.СоздатьДокумент();
	КонецЕсли;	
	СписокПерв = МассивПерв[0];
	
	// 20.01.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
	// 20.01.2022 - DOCKING 368
	    ДокТип.НачалоПериода = СписокПерв.НайтиПоЗначению("ДатаНачала").Представление;
		ДокТип.КонецПериода = СписокПерв.НайтиПоЗначению("ДатаОкончания").Представление;
		СтруктВалюта = Новый Структура;
		Для Каждого Стр Из МассивПерв[2] Цикл
			Стр.Вставить("ВалютаВзаиморасчетов",Справочники.Валюты.НайтиПоКоду("980"));	
		КонецЦикла;	
		
	Иначе
		ДокТип.ДатаНачала = СписокПерв.НайтиПоЗначению("ДатаНачала").Представление;
		ДокТип.ДатаОкончания = СписокПерв.НайтиПоЗначению("ДатаОкончания").Представление;
		
		ДокТип.ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию(СписокПерв.НайтиПоЗначению("ВалютаДокумента").Представление); 
		Если ДокТип.ВалютаДокумента = Неопределено Тогда
			ДокТип.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("980");
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаДокаВх = СписокПерв.НайтиПоЗначению("ДатаДокаВх").Представление; 
	НомерДокаВх = СписокПерв.НайтиПоЗначению("НомерДокаВх").Представление; 
	ДокТип.Дата = Дата(ТекущаяДата()); 
	// DOCKING 459 + 22.11.2022
	//ЗаполнениеДокументов.Заполнить(ДокТип, ПараметрыСеанса.ТекущийПользователь);
	Если Объект.Конфигурация <> "SB" Тогда
			
		ОбщМодуль = ПолучитьОбщийМодуль("ЗаполнениеДокументов"); 
		Если ОбщМодуль <> Ложь Тогда
			ОбщМодуль.Заполнить(ДокТип,  ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
			
	КонецЕсли;
	// DOCKING 459 - 22.11.2022
	//-----------------------------------------------------  
	
	ДокТип.Организация  =  НайтиОрганизациюПоЕДРПОУ(СписокПерв.НайтиПоЗначению("ЕДРПОУОрганизации").Представление);
	ДокТип.Контрагент  =  НайтиПокупателя(СписокПерв.НайтиПоЗначению("КонтрЕДРПОУ").Представление);
	//-----------------------------------------------------
		
	ДатаДог  = СписокПерв.НайтиПоЗначению("ДатаДоговора").Представление;
	НомерДог = СписокПерв.НайтиПоЗначению("НомерДоговора").Представление;
	
	// 20.01.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	
	    ДокТип.РасшифровкаПоЗаказам = Истина;
		Попытка
			Если ЗначениеЗаполнено(ДатаДог) и ЗначениеЗаполнено(НомерДог) Тогда
				Если НЕСоздаватьНовыйДоговор = Ложь Тогда
					ДокТип.Договор = СоздатьНовыйДоговор(ДокТип.Контрагент, ДокТип.Организация, ДатаДог, НомерДог, ПередаватьНомерДоговора); 
				КонецЕсли;
			Иначе 
				//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", КонтрИНН); 
				ДокТип.Договор = ДокТип.Контрагент.ОсновнойДоговорКонтрагента;
			КонецЕсли	
		Исключение
		КонецПопытки;

		Если Не ЗначениеЗаполнено(ДокТип.Договор) Тогда 	
			// DOCKING 459 + 22.11.2022
			// --------------------------------
			//Договор = БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			//ДокТип.Договор, ДокТип.Контрагент, ДокТип.Организация);
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			Договор = ОбщМодуль.УстановитьДоговорКонтрагента(
			ДокТип.Договор, ДокТип.Контрагент, ДокТип.Организация);
			// DOCKING 459 - 22.11.2022
		КонецЕсли;
		
	ИначеЕсли Объект.Конфигурация = "SB" Тогда // DOCKING 459 + 22.11.2022
		
		//Попытка
		//	Если ЗначениеЗаполнено(ДатаДог) и ЗначениеЗаполнено(НомерДог) Тогда
		//		Если НЕСоздаватьНовыйДоговор = Ложь Тогда
		//			ДокТип.ДоговорКонтрагента = СоздатьНовыйДоговор(ДокТип.Контрагент, ДокТип.Организация, ДатаДог, НомерДог, ПередаватьНомерДоговора); 
		//		КонецЕсли;
		//	Иначе 
		//		//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", КонтрИНН); 
		//		ДокТип.ДоговорКонтрагента = ДокТип.Контрагент.ОсновнойДоговорКонтрагента;
		//	КонецЕсли	
		//Исключение
		//КонецПопытки;

		//Если Не ЗначениеЗаполнено(ДокТип.ДоговорКонтрагента) Тогда
		//	
		//	ДоговорКонтрагента = УстановитьОсновнойДоговорКонтрагента(
		//	ДокТип.ДоговорКонтрагента, ДокТип.Контрагент, ДокТип.Организация);
		//КонецЕсли;
		
	Иначе
	// 20.01.2022 - DOCKING 368
	
		Попытка
			Если ЗначениеЗаполнено(ДатаДог) и ЗначениеЗаполнено(НомерДог) Тогда
				Если НЕСоздаватьНовыйДоговор = Ложь Тогда
					ДокТип.ДоговорКонтрагента = СоздатьНовыйДоговор(ДокТип.Контрагент, ДокТип.Организация, ДатаДог, НомерДог, ПередаватьНомерДоговора); 
				КонецЕсли;
			Иначе 
				//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", КонтрИНН); 
				ДокТип.ДоговорКонтрагента = ДокТип.Контрагент.ОсновнойДоговорКонтрагента;
			КонецЕсли	
		Исключение
		КонецПопытки;

		Если Не ЗначениеЗаполнено(ДокТип.ДоговорКонтрагента) Тогда
			// DOCKING 459 + 22.11.2022
			// --------------------------------
			//ДоговорКонтрагента = БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			//ДокТип.ДоговорКонтрагента, ДокТип.Контрагент, ДокТип.Организация);
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			ДоговорКонтрагента = ОбщМодуль.УстановитьДоговорКонтрагента(
			ДокТип.ДоговорКонтрагента, ДокТип.Контрагент, ДокТип.Организация);
		КонецЕсли;	
		
		
	КонецЕсли;
	
	//-----------------------------------------------------
 
	ДокТип.Комментарий = "**Переданий з M.E.Doc ** №" + НомерДокаВх + " від " + Формат(Дата(ДатаДокаВх), "ДФ=dd.MM.yyyy") + " **";
	//Если Объект.Конфигурация = "УТ" или Объект.Конфигурация = "УТП"  Тогда
	//	ДокТип.ОтражатьВБухгалтерскомУчете=Истина;
	//КонецЕсли;
	
	//----------------------------------------------------- 
	Ном = 1;
	//-----------------------------------------------------
	
	// 20.01.2022 + DOCKING 368
	Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
	
		ТЧДанныеКонтрагента = ДокТип.ДанныеКонтрагента;
		СписокКонтр = МассивПерв[2];
		
		Для Каждого Стр Из СписокКонтр Цикл
			СтрокаТЧ = ТЧДанныеКонтрагента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Стр);
		КонецЦикла;
		
	ИначеЕсли Объект.Конфигурация = "SB" Тогда
		
		ТЧДанныеОрганизации = ДокТип.ДанныеОрганизации;
		СписокОрг = МассивПерв[1];
		
		Для Каждого Стр Из СписокОрг Цикл
			СтрокаТЧ = ТЧДанныеОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Стр);
		КонецЦикла;
		
		ТЧДанныеКонтрагента = ДокТип.ДанныеКонтрагента;
		СписокКонтр = МассивПерв[2];
		
		Для Каждого Стр Из СписокКонтр Цикл
			СтрокаТЧ = ТЧДанныеКонтрагента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Стр);
		КонецЦикла;
		
		ТЧДоговорыКонтрагентов = ДокТип.ДоговорыКонтрагентов;
		СписокКонтр = МассивПерв[3];
		
		Для Каждого Стр Из СписокКонтр Цикл
			СтрокаТЧ = ТЧДоговорыКонтрагентов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Стр);
		КонецЦикла;

		
	Иначе
	// 20.01.2022 + DOCKING 368	
		ТЧПоДаннымОрганизации = ДокТип.ПоДаннымОрганизации;
		СписокОрг = МассивПерв[1];
		
		Для Каждого Стр Из СписокОрг Цикл
			СтрокаТЧ = ТЧПоДаннымОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Стр);
		КонецЦикла;
		
		ТЧПоДаннымКонтрагента = ДокТип.ПоДаннымКонтрагента;
		СписокКонтр = МассивПерв[2];
		
		Для Каждого Стр Из СписокКонтр Цикл
			СтрокаТЧ = ТЧПоДаннымКонтрагента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Стр);
		КонецЦикла;
		
	КонецЕсли;
	
	
	ДокТип.Записать();
	
	Возврат ДокТип.Ссылка;
КонецФункции

&НаСервере
Функция ПроверитьСуществованиеАктаСверки(Документ, Организация, Покупатель, ДатаДокаВх, НомерДокаВх)
	
	Запрос  =  Новый Запрос();  	
	Запрос.Текст  =  "ВЫБРАТЬ
	|	 "+Документ+".Ссылка
	|ИЗ
	|	Документ."+Документ+" КАК "+Документ+"
	|ГДЕ
	|	"+Документ+".Организация  =  &Организация
	|	И "+Документ+".Контрагент  =  &Контрагент
	|   И "+Документ+".Комментарий ПОДОБНО  ""%**Переданий з M.E.Doc ** №" + НомерДокаВх + " від " + Формат(ДатаДокаВх, "ДФ=dd.MM.yyyy") + " **%""";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Контрагент",  Покупатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ВЫключитьВКлючитьВсеФлажкиНаСервере(Знач ТЗ_ТаблицаОтчетов, ЗначениеФлажка)
	
	Для Каждого СтрКоллекции Из ТЗ_ТаблицаОтчетов Цикл
		СтрКоллекции.Флажок2 = ЗначениеФлажка;
	КонецЦикла;
	КопироватьДанныеФормы(ТЗ_ТаблицаОтчетов,ТаблицаОтчетов);
	
КонецПроцедуры // DOCKING 344 - 23.11.21 

&НаКлиенте 
Процедура ВключитьВсеФлажки(Команда)
	ТЗ_ТаблицаОтчетов = ТаблицаОтчетов;
	ВЫключитьВКлючитьВсеФлажкиНаСервере(ТЗ_ТаблицаОтчетов, Истина);
КонецПроцедуры // DOCKING 344 - 23.11.21 

&НаКлиенте 
Процедура ВЫключитьВсеФлажки(Команда)
	ТЗ_ТаблицаОтчетов = ТаблицаОтчетов;
	ВЫключитьВКлючитьВсеФлажкиНаСервере(ТЗ_ТаблицаОтчетов, Ложь);
КонецПроцедуры // DOCKING 344 - 23.11.21 

&НаКлиенте
Процедура ПриложенияВсеФлажки(Команда)
	
	Если Элементы.Приложения_таб1.Видимость Тогда
		Таб41 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб2.Видимость Тогда
		Таб42 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб3.Видимость Тогда
		Таб43 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб4.Видимость Тогда
		Таб44 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб5.Видимость Тогда
		Таб45 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб6.Видимость Тогда
		Таб46 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб7.Видимость Тогда
		Таб47 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб8.Видимость Тогда
		Таб48 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб9.Видимость Тогда
		Таб49 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб10.Видимость Тогда
		Таб50 = Истина;
	КонецЕсли;
	
	Если Элементы.Приложения_таб11.Видимость Тогда
		Таб51 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб12.Видимость Тогда
		Таб52 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб13.Видимость Тогда
		Таб54 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб14.Видимость Тогда
		Таб61 = Истина;
	КонецЕсли;
	Если Элементы.Приложения_таб15.Видимость Тогда
		Таб62 = Истина;
	КонецЕсли;
	
 КонецПроцедуры // DOCKING 344 - 23.11.21

 &НаКлиенте
Процедура ПриложенияБезФлажков(Команда)
	 РегОтчетОчиститьЧекбоксы();
 КонецПроцедуры  // DOCKING 344 - 23.11.21

&НаКлиенте 
 Процедура ФильтрПоДокументам(Команда) // DOCKING-256 07.12.2021 
	 
	 попытка
		 ФильтрПоДокументамСервер(текущийэлемент.ТекущиеДанные.Статус);
	 Исключение
	 конецпопытки;
	 
 КонецПроцедуры

&НаСервере
 Процедура ФильтрПоДокументамСервер(ТекСтатус) // DOCKING-256 07.12.2021 
	 
	НайденыеСтрокиТабДокументов =  ТаблицаДокументов.НайтиСтроки(Новый Структура("Статус", ТекСтатус));
	
	ТекТаблицаДокументов = Новый ТаблицаЗначений;
	Для каждого Стр Из НайденыеСтрокиТабДокументов Цикл
		 ТаблицаДокументов.Удалить(Стр);
	КонецЦикла; 
	 
 КонецПроцедуры

// 01.12.2021 + DOCKING 359
Функция ПолучитьТекущийТипДок(ТипДок, ИмяТекущейВкладки)
	
	// 03.12.2021 + DOCKING 361
	Если ИмяТекущейВкладки = "ПД" Тогда
		СП = СписокПервички;
	ИначеЕсли ИмяТекущейВкладки = "НД" Тогда
		СП = СписокНалоговых;	
	КонецЕсли;
	// 03.12.2021 - DOCKING 361
		
	Для Каждого Стр ИЗ СП Цикл
		Если Стр.Представление = ТипДок ИЛИ Стр.Значение = ТипДок Тогда
			ЗначениеДок = Стр.Значение;	
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЗначениеДок;
	
КонецФункции	// 01.12.2021 - DOCKING 359

// 03.12.2021 + DOCKING 361
&НаСервере
Функция ПолучитьИмяТекущейВкладки() // при добавлении новой вкладки на форму, нужно вписать ее в эту функцию
	
	ИмяЗакладки = ЭтаФорма.Элементы.Страницы.ТекущаяСтраница.Имя;
	
	Если Найти(ИмяЗакладки, "ПервичныеДокументы") = 1 Тогда
		Возврат "ПД";
	КонецЕсли;
	Если Найти(ИмяЗакладки, "РегламентированныеОтчеты") = 1 Тогда
		Возврат "РО";
	КонецЕсли;
	Если Найти(ИмяЗакладки, "Настройки") = 1 Тогда
		Возврат "Настр";
	КонецЕсли;
	Если Найти(ИмяЗакладки, "НалоговыеДокументы") = 1 Тогда
		Возврат "НД";
	КонецЕсли;
	
КонецФункции // 03.12.2021 - DOCKING 361

// 03.12.2021 + DOCKING 361
&НаКлиенте
Процедура КоманднаяПанельТаблицаДокументовНалогДокЗаполнить(Команда)
	
	
	Если Не ЗначениеЗаполнено(НалогДокОрганизацияПервичка)Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не указана Организация!';uk = 'Не вказана Організація!'");
		Сообщение.Поле = "Организация";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;  
	
	Если Дата(НалогДокНачПериода)>Дата(НалогДокКонПериода) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Начальная дата должна быть меньше конечной!';uk = 'Початкова дата повинна бути менше кінцевої!'");
		Сообщение.Поле = "НалогДокНачПериода";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// 10.12.2021 + DOCKING 357
	//ПроизошлоФормированиеНД = Истина;
	//ВыбратьНалоговые();
	КодПоЕДРПОУ = НалогДокОрганизацияПриИзмененииНаСервере();
	
	ТипДок = ПолучитьТекущийТипДок(ТипДокФорма1, "НД");
	
	Если ТипДок = "Пусто" ИЛИ ТипДок = Неопределено Тогда
		
		ТаблицаНалоговых.Очистить();
		ВсегоЧисло2 = "0";
		ИзНихЧисло1 = "0"; 
		БезНДСЧисло1 = "0";
		ВсегоНДСЧисло1 = "0";
		ВсегоЧисло3 = "0";
		Элементы.ФР.Видимость = Ложь;
		Этаформа.ФР = Ложь;
		Для Каждого Эл из СписокНалоговых Цикл
			Если Эл.Значение = "Пусто"	Тогда
				Продолжить;
			КонецЕсли;	
			ТипДок = Эл.Значение;
		    ВыбратьНалоговые("НН");
		КонецЦикла;
		ТаблицаДокументов.Сортировать("Тип УБЫВ, Дата УБЫВ");
		Элементы.ТаблицаДокументов1.Обновить();
		
		ТипДок = "Пусто";
	Иначе
		Элементы.ФР.Видимость = Истина;
		ВыбратьНалоговые();
	КонецЕсли;	
	// 10.12.2021 + DOCKING 357
	
	ПроверитьНаличиеНалоговых();
 КонецПроцедуры // 03.12.2021 - DOCKING 361
 
// 03.12.2021 + DOCKING 361 
&НаСервере
Процедура ВыбратьНалоговые(Знач Вкладка = 0)
	
	// 10.12.2021 + DOCKING 357
	//ТаблицаДокументов.Очистить();
	
	//ВсегоЧисло2 = "0";
	//ИзНихЧисло1 = "0"; 
	//БезНДСЧисло1 = "0";
	//ВсегоНДСЧисло1 = "0";
	//ВсегоЧисло3 = "0"; 
	
	Если Вкладка = 0 Тогда
		ТаблицаНалоговых.Очистить();
		
		ВсегоЧисло2 = "0";
		ИзНихЧисло1 = "0"; 
		БезНДСЧисло1 = "0";
		ВсегоНДСЧисло1 = "0";
		ВсегоЧисло3 = "0"; 
	КонецЕсли;
	// 10.12.2021 - DOCKING 357
	
	Элементы.БезНДСЧисло1.Видимость = Истина;
	Элементы.ВсегоНДСЧисло1.Видимость = Истина;
	Элементы.ВсегоЧисло3.Видимость = Истина;
	Элементы.ДополнительныеДанные1.Доступность = Ложь;
	//----------------------------------------------------------------------------------
	Если ТипДок = "Налоговая накладная" Тогда 
		Элементы.ОбновлениеЕРНН.Доступность = Истина;
		                                      
		Если Объект.Конфигурация = "ERP" Тогда
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		НалоговаяНакладная.Дата КАК Дата, 
			|		НалоговаяНакладная.Ссылка КАК Ссылка, 
			|		НалоговаяНакладная.Контрагент КАК Контрагент, 
			|		НалоговаяНакладная.Договор КАК ДоговорКонтрагента, 
			|		НалоговаяНакладная.Ответственный КАК Ответственный, 
			|		НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
			|		НалоговаяНакладная.ПометкаУдаления КАК ПометкаУдаления,   
			|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|		НалоговаяНакладная.СтатусРегистрацииВЕРНН КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, 
			|		НалоговаяНакладная.Проведен КАК Проведен,
			|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную,
			|		НалоговаяНакладная.Контрагент.ИННПлательщикаНДС КАК ИНН
			|	ИЗ
			|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
			|	ГДЕ
			|		НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
			//|		И &ОтображатьСлужебные = ИСТИНА
			|		И НалоговаяНакладная.Организация  =  &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.СпецРежимНалогообложения, 
			|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
			|	ВложенныйЗапрос.ИНН,
			|	ВложенныйЗапрос.Проведен} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НалогДокНачПериода) И НЕ ЗначениеЗаполнено(НалогДокКонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И НалоговаяНакладная.Организация  =  &Организация",   "НалоговаяНакладная.Организация  =  &Организация");
			КонецЕсли;	
			//09.12.21 - DOCKING 357
		Иначе
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		НалоговаяНакладная.Дата КАК Дата, 
			|		НалоговаяНакладная.Ссылка КАК Ссылка, 
			|		НалоговаяНакладная.Контрагент КАК Контрагент, 
			|		НалоговаяНакладная.ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|		НалоговаяНакладная.Ответственный КАК Ответственный, 
			|		НалоговаяНакладная.СпецРежимНалогообложения КАК СпецРежимНалогообложения, 
			|		НалоговаяНакладная.ПометкаУдаления КАК ПометкаУдаления,   
			|		НалоговаяНакладная.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|		НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных, 
			|		НалоговаяНакладная.Проведен КАК Проведен,
			|		НалоговаяНакладная.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную,
			|		НалоговаяНакладная.Контрагент.ИНН КАК ИНН
			|	ИЗ
			|		Документ.НалоговаяНакладная КАК НалоговаяНакладная
			|	ГДЕ
			|		НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И (НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = ЗНАЧЕНИЕ(Документ.НалоговаяНакладная.ПустаяСсылка)
			|		ИЛИ &ОтображатьСлужебные = ИСТИНА)
			|		И НалоговаяНакладная.Организация  =  &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.СпецРежимНалогообложения, 
			|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
			|	ВложенныйЗапрос.ИНН,
			|	ВложенныйЗапрос.Проведен} 		
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НалогДокНачПериода) И НЕ ЗначениеЗаполнено(НалогДокКонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "НалоговаяНакладная.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И (НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = ЗНАЧЕНИЕ(Документ.НалоговаяНакладная.ПустаяСсылка)",   "(НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = ЗНАЧЕНИЕ(Документ.НалоговаяНакладная.ПустаяСсылка)");
			КонецЕсли;	
			//09.12.21 - DOCKING 357
			//------------------------------------------------------------------------------
			//15.12.21 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				Если НЕ ЗначениеЗаполнено(НалогДокНачПериода) И НЕ ЗначениеЗаполнено(НалогДокКонПериода) Тогда
					ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "(НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = ЗНАЧЕНИЕ(Документ.НалоговаяНакладная.ПустаяСсылка)",   "");
					ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И НалоговаяНакладная.Организация  =",   "НалоговаяНакладная.Организация  =");
				Иначе
					ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И (НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены = ЗНАЧЕНИЕ(Документ.НалоговаяНакладная.ПустаяСсылка)",   "");	
				КонецЕсли;
				
				
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ИЛИ &ОтображатьСлужебные = ИСТИНА)",   "");
				
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента",   "Договор");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных,",   "");
				
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "НалоговаяНакладная.Контрагент.ИНН КАК ИНН",   "НалоговаяНакладная.Контрагент.ИННПлательщикаНДС КАК ИННПлательщикаНДС");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ИНН",   "ВложенныйЗапрос.ИННПлательщикаНДС");
			КонецЕсли;
			//15.12.21 - DOCKING 368

			Если Объект.Конфигурация = "SB" Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента",   "Договор");
			КонецЕсли;	
			
			
		КонецЕсли;

		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса); 		
		ПостроительЗапроса.ЗаполнитьНастройки();     		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НалогДокНачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(НалогДокКонПериода));//Элементы.КонПериода);
		ПостроительЗапроса.Параметры.Вставить("Организация",  НалогДокОрганизацияПервичка);   
		ПостроительЗапроса.Параметры.Вставить("ОтображатьСлужебные", ОтображатьСлужебныеНН);
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗарегистрированныеПоДанным1С и ДаФ = "1" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		Если ЗарегистрированныеПоДанным1С и ДаФ = "2" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;
		
		Если ЗарегистрированныеПоДанным1СПлан и ДаП = "1" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		Если ЗарегистрированныеПоДанным1СПлан и ДаП = "2" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалогДокКонтрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокКонтрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(НалогДокКонтрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если НалогДокКонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(НалогДокКонтрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(НалогДокКонтрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалогДокДоговорКонтрагента) Тогда
			//ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" ИЛИ Объект.Конфигурация = "SB" Тогда
				ЭлементОтбора  =  Отбор.Добавить("Договор");
			Иначе
				ЭлементОтбора  =  Отбор.Добавить("ДоговорКонтрагента");
			КонецЕсли;
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(НалогДокДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалогДокОтветственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокОтветственный;
			ЭлементОтбора.ВидСравнения   =  ?(НалогДокОтветственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		//Если СпецРежимНалогообложения <> Неопределено Тогда
		Если ЗначениеЗаполнено(СпецРежимНалогообложения) Тогда
		Если СпецРежимНалогообложения <> "(Пусто)" Тогда	
			ЭлементОтбора  =  Отбор.Добавить("СпецРежимНалогообложения");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  СпецРежимНалогообложения;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		КонецЕсли;
		КонецЕсли;
		
		Если НалогДокПроведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалогДокВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("КтоВыписалНалоговуюНакладную");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если НалогДокБезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
		ОбщийНДС = 0;
		ОбщийБезНДС = 0;
		ОбщийСума=0;
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаНалоговых.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаНалоговых.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				Если НЕ ПодобранныйДокумент.Документ.Контрагент = Неопределено
					// DOCKING 517 + 07.06.2023
					И ТипЗнч(ПодобранныйДокумент.Документ.Контрагент) = Тип("СправочникСсылка.Контрагенты")
					// DOCKING 517 - 07.06.2023
					Тогда //// 17.03.2023 +- DOCKING 491
					НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
				КонецЕсли;	
			КонецЕсли;	
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Док  =  ПодобранныйДокумент.Документ;
			Если Объект.Конфигурация = "УПП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НематериальныеАктивы.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			ИначеЕсли Объект.Конфигурация = "УТ" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			ИначеЕсли Объект.Конфигурация = "ERP" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");
			ИначеЕсли Объект.Конфигурация = "КУП" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Товары.Итог("СуммаНДС");	
			ИначеЕсли Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Запасы.Итог("СуммаНДС");		
			Иначе	
				НоваяСтрока.СуммаБезНДС  =  Док.СуммаДокумента - Док.Услуги.Итог("СуммаНДС") - Док.Товары.Итог("СуммаНДС")- Док.ОС.Итог("СуммаНДС") - Док.НМА.Итог("СуммаНДС") - Док.ВозвратнаяТара.Итог("Сумма");
			КонецЕсли;	
			НоваяСтрока.СуммаНДСДокумента = Док.СуммаДокумента - НоваяСтрока.СуммаБезНДС; 
		
			ОбщийНДС = ОбщийНДС + НоваяСтрока.СуммаНДСДокумента;
			ОбщийБезНДС = ОбщийБезНДС + НоваяСтрока.СуммаБезНДС;
			ОбщийСума = ОбщийСума + Док.СуммаДокумента;
			
		КонецЦикла; 
		
		Если ТаблицаНалоговых.Количество() > 0 Тогда 	
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовНН(); 
		Иначе
			ИзменениеОсновныхПараметровНалоговых();
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//БезНДСЧисло1 =ОбщийБезНДС;
		//ВсегоНДСЧисло1 =ОбщийНДС;
		//ВсегоЧисло3 =ОбщийСума; 
		Если Вкладка = 0 Тогда
		//13.12.21 - DOCKING 357
			БезНДСЧисло1 =ОбщийБезНДС;
			ВсегоНДСЧисло1 =ОбщийНДС;
			ВсегоЧисло3 =ОбщийСума; 	
		Иначе
			БезНДСЧисло1 = БезНДСЧисло1 + ОбщийБезНДС;
			ВсегоНДСЧисло1 = ВсегоНДСЧисло1 + ОбщийНДС;
			ВсегоЧисло3 = ВсегоЧисло3 + ОбщийСума; 
		КонецЕсли;
		
		 Скрытие(БезНДСЧисло1, ВсегоНДСЧисло1, ВсегоЧисло3, "НД");

		//ЗаполнитьРеквизитыДокументовНН(); 		
	КонецЕсли;
	//-----------------------------------------------
	Если ТипДок = "Приложение 2" Тогда
		
		Элементы.ОбновлениеЕРНН.Доступность = Истина;
		Если Объект.Конфигурация = "ERP" Тогда
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		Приложение2КНалоговойНакладной.Дата КАК Дата,
			|		Приложение2КНалоговойНакладной.Ссылка КАК Ссылка,
			|		Приложение2КНалоговойНакладной.Контрагент КАК Контрагент,
			|		Приложение2КНалоговойНакладной.Договор КАК ДоговорКонтрагента,
			|		Приложение2КНалоговойНакладной.Ответственный КАК Ответственный,
			|		Приложение2КНалоговойНакладной.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
			|		Приложение2КНалоговойНакладной.Проведен КАК Проведен,
			|		Приложение2КНалоговойНакладной.ПометкаУдаления КАК ПометкаУдаления,
			|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|		Приложение2КНалоговойНакладной.СтатусРегистрацииВЕРНН КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,
			|		Приложение2КНалоговойНакладной.Контрагент.ИННПлательщикаНДС КАК ИНН,
			|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
			|	ИЗ
			|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
			|	ГДЕ
			|		Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И Приложение2КНалоговойНакладной.Организация = &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.СпецРежимНалогообложения, 
			|	ВложенныйЗапрос.Проведен, 
			|	ВложенныйЗапрос.ПометкаУдаления, 
			|	ВложенныйЗапрос.ИНН,
			|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
			|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.Проведен} 
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НалогДокНачПериода) И НЕ ЗначениеЗаполнено(НалогДокКонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И Приложение2КНалоговойНакладной.Организация = &Организация",   "Приложение2КНалоговойНакладной.Организация = &Организация");
			КонецЕсли;	
			//09.12.21 - DOCKING 357
		Иначе 	
			
			ТекстЗапроса  =  
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Документ
			|ИЗ
			|	(ВЫБРАТЬ
			|		Приложение2КНалоговойНакладной.Дата КАК Дата,
			|		Приложение2КНалоговойНакладной.Ссылка КАК Ссылка,
			|		Приложение2КНалоговойНакладной.Контрагент КАК Контрагент,
			|		Приложение2КНалоговойНакладной.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|		Приложение2КНалоговойНакладной.Ответственный КАК Ответственный,
			|		Приложение2КНалоговойНакладной.СпецРежимНалогообложения КАК СпецРежимНалогообложения,
			|		Приложение2КНалоговойНакладной.Проведен КАК Проведен,
			|		Приложение2КНалоговойНакладной.ПометкаУдаления КАК ПометкаУдаления,
			|		Приложение2КНалоговойНакладной.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных КАК ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|		Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,
			|		Приложение2КНалоговойНакладной.Контрагент.ИНН КАК ИНН,
			|		Приложение2КНалоговойНакладной.КтоВыписалНалоговуюНакладную КАК КтоВыписалНалоговуюНакладную
			|	ИЗ
			|		Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
			|	ГДЕ
			|		Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода
			|		И Приложение2КНалоговойНакладной.Организация = &Организация) КАК ВложенныйЗапрос
			|{ГДЕ
			|	ВложенныйЗапрос.Контрагент, 
			|	ВложенныйЗапрос.ДоговорКонтрагента, 
			|	ВложенныйЗапрос.Ответственный, 
			|	ВложенныйЗапрос.СпецРежимНалогообложения, 
			|	ВложенныйЗапрос.Проведен, 
			|	ВложенныйЗапрос.ПометкаУдаления, 
			|	ВложенныйЗапрос.ИНН,
			|	ВложенныйЗапрос.КтоВыписалНалоговуюНакладную,
			|	ВложенныйЗапрос.ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных, 
			|	ВложенныйЗапрос.Проведен} 
			|
			|УПОРЯДОЧИТЬ ПО 
			|	ВложенныйЗапрос.Дата УБЫВ";
			//09.12.21 + DOCKING 357
			Если НЕ ЗначениеЗаполнено(НалогДокНачПериода) И НЕ ЗначениеЗаполнено(НалогДокКонПериода) Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Приложение2КНалоговойНакладной.Дата МЕЖДУ &НачПериода И &КонПериода",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "И Приложение2КНалоговойНакладной.Организация = &Организация",   "Приложение2КНалоговойНакладной.Организация = &Организация");
			КонецЕсли;	
			//09.12.21 - DOCKING 357
			//----------------------------------------------------------------------------------------
			//15.12.21 + DOCKING 368
			Если Объект.Конфигурация = "КУП" ИЛИ Объект.Конфигурация = "ERP" Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента",   "Договор");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Приложение2КНалоговойНакладной.Контрагент.ИНН КАК ИНН",   "Приложение2КНалоговойНакладной.Контрагент.ИННПлательщикаНДС КАК ИННПлательщикаНДС");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ИНН",   "ВложенныйЗапрос.ИННПлательщикаНДС");
				
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных КАК ВключенаВЕдиныйРеестрНалоговыхНакладных,",   "");
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ВложенныйЗапрос.ВключенаВЕдиныйРеестрНалоговыхНакладных,",   "");
			КонецЕсли;
			//15.12.21 - DOCKING 368
			Если Объект.Конфигурация = "SB" Тогда
				ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "ДоговорКонтрагента",   "Договор");
			КонецЕсли;	
			
		КонецЕсли;
		
		//Если УчетПоОбособленнымПодразделениям Тогда  	
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеП2",   "Приложение2КНалоговойНакладной.НалоговаяНакладная.ОбособленноеПодразделение");
		//Иначе
		//	ТекстЗапроса  =  СтрЗаменить(ТекстЗапроса,  "&ОбособленноеПодразделениеП2",   "NULL");
		//КонецЕсли;		
		
		ПостроительЗапроса  =  Новый ПостроительЗапроса(ТекстЗапроса);  		
		ПостроительЗапроса.ЗаполнитьНастройки();           		
		ПостроительЗапроса.Параметры.Вставить("НачПериода",   НачалоДня(НалогДокНачПериода));
		ПостроительЗапроса.Параметры.Вставить("КонПериода",   КонецДня(НалогДокКонПериода));
		ПостроительЗапроса.Параметры.Вставить("Организация",  НалогДокОрганизацияПервичка);    		
		Отбор  =  ПостроительЗапроса.Отбор;
		
		Если ЗарегистрированныеПоДанным1С и ДаФ = "1" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		Если ЗарегистрированныеПоДанным1С и ДаФ = "2" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ВключенаВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;
		
		Если ЗарегистрированныеПоДанным1СПлан и ДаП = "1" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		Если ЗарегистрированныеПоДанным1СПлан и ДаП = "2" Тогда
			ЭлементОтбора  =  Отбор.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно 
		КонецЕсли;

		
		Если ЗначениеЗаполнено(НалогДокКонтрагент) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокКонтрагент;
			// 15.12.2021 + DOCKING 206
			//ЭлементОтбора.ВидСравнения   =  ?(НалогДокКонтрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			Если НалогДокКонтрагентКромеЭтого Тогда
				ЭлементОтбора.ВидСравнения   =  ?(НалогДокКонтрагент.ЭтоГруппа,  ВидСравнения.НеВСпискеПоИерархии,  ВидСравнения.НеРавно);
			Иначе
				ЭлементОтбора.ВидСравнения   =  ?(НалогДокКонтрагент.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
			КонецЕсли;
			// 15.12.2021 - DOCKING 206
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалогДокДоговорКонтрагента) Тогда
			ЭлементОтбора  =  Отбор.Добавить("НалогДокДоговорКонтрагента");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокДоговорКонтрагента;
			ЭлементОтбора.ВидСравнения   =  ?(НалогДокДоговорКонтрагента.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалогДокОтветственный) Тогда
			ЭлементОтбора  =  Отбор.Добавить("Ответственный");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокОтветственный;
			ЭлементОтбора.ВидСравнения   =  ?(НалогДокОтветственный.ЭтоГруппа,  ВидСравнения.ВСпискеПоИерархии,  ВидСравнения.Равно);
		КонецЕсли;
		
		
		//Если СпецРежимНалогообложения <> Неопределено Тогда
		Если ЗначениеЗаполнено(СпецРежимНалогообложения) Тогда
		Если СпецРежимНалогообложения <> "(Пусто)" Тогда
			ЭлементОтбора  =  Отбор.Добавить("СпецРежимНалогообложения");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  СпецРежимНалогообложения;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно;
		КонецЕсли;
		КонецЕсли;
		
		Если НалогДокПроведен = Истина Тогда
			ЭлементОтбора  =  Отбор.Добавить("Проведен");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  Истина;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалогДокВыписалНН) Тогда
			ЭлементОтбора  =  Отбор.Добавить("КтоВыписалНалоговуюНакладную");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  НалогДокВыписалНН;
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.Равно 
		КонецЕсли;
		
		Если НалогДокБезНеплательщиков Тогда
			ЭлементОтбора  =  Отбор.Добавить("ИНН");
			ЭлементОтбора.Использование  =  Истина;
			ЭлементОтбора.Значение       =  "";
			ЭлементОтбора.ВидСравнения   =  ВидСравнения.НеРавно; 
		КонецЕсли;
		
		ПостроительЗапроса.Выполнить();
		ПодобранныеДокументы  =  ПостроительЗапроса.Результат.Выгрузить();
		
			ОбщийНДС = 0;
			ОбщийСума=0;
		
		
		Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
			// 14.12.2021 + DOCKING 357
			ФильтрНаДубли = Новый Структура("Документ", ПодобранныйДокумент.Документ);
			НайденныеДубли = ТаблицаНалоговых.НайтиСтроки(ФильтрНаДубли);
			Если НайденныеДубли.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			// 14.12.2021 - DOCKING 357
			НоваяСтрока  =  ТаблицаНалоговых.Добавить();
			НоваяСтрока.Документ  =  ПодобранныйДокумент.Документ;
			Если НЕ Объект.Конфигурация = "SB" Тогда
				НоваяСтрока.КодФилиала = ПодобранныйДокумент.Документ.Контрагент.КодФилиала;
			КонецЕсли;	
			
			//01.12.2021 + DOCKING 356
			НоваяСтрока.Тип = ТипЗНЧ(ПодобранныйДокумент.Документ);
			НоваяСтрока.ТипСтрока = ТипДок;
			НоваяСтрока.НаименованиеДок = ПодобранныйДокумент.Документ.Номер+ " от "+ПодобранныйДокумент.Документ.Дата;
			//01.12.2021 - DOCKING 356
			
			Если Объект.Конфигурация = "ERP" Тогда
				ОбщийНДС = ОбщийНДС + ПодобранныйДокумент.Документ.Товары.Итог("СуммаНДС"); 
			ИначеЕсли Объект.Конфигурация = "КУП" Тогда	
				ОбщийНДС = ОбщийНДС + ПодобранныйДокумент.Документ.Товары.Итог("СуммаНДС"); 
			ИначеЕсли Объект.Конфигурация = "SB" Тогда	
				ОбщийНДС = ОбщийНДС + ПодобранныйДокумент.Документ.Запасы.Итог("СуммаНДС"); 	
			Иначе
				ОбщийНДС = ОбщийНДС + ПодобранныйДокумент.Документ.СуммаНДСДокумента;
			КонецЕсли;

			ОбщийСума = ОбщийСума + ПодобранныйДокумент.Документ.СуммаДокумента;
		КонецЦикла; 
		
		Если ТаблицаНалоговых.Количество() > 0 Тогда 
			ОтобразитьВозможности();
			ЗаполнитьРеквизитыДокументовДод2(); 
		Иначе
			ИзменениеОсновныхПараметровНалоговых();
		КонецЕсли;
		
		//13.12.21 + DOCKING 357
		//ВсегоНДСЧисло1 = ОбщийНДС;
		//ВсегоЧисло3 = ОбщийСума;
		Если Вкладка = 0 Тогда
			ВсегоНДСЧисло1 = ОбщийНДС;
			ВсегоЧисло3 = ОбщийСума;
		Иначе
			ВсегоНДСЧисло1 = ВсегоНДСЧисло1 + ОбщийНДС;
			ВсегоЧисло3 = ВсегоЧисло3 + ОбщийСума;
		КонецЕсли;	
		//13.12.21 - DOCKING 357
		
		 Скрытие(БезНДСЧисло1, ВсегоНДСЧисло1, ВсегоЧисло3, "НД");
		//ЗаполнитьРеквизитыДокументовДод2();  		
	КонецЕсли;
		
КонецПроцедуры   // 03.12.2021 - DOCKING 361

// 03.12.2021 + DOCKING 361
&НаКлиенте
Процедура НалогДокОрганизацияПриИзменении(Элемент)
	
	КонтрагентДоИзменений = Строка(НалогДокКонтрагент);
	
	ЮрикФизик = ЮрикФизик(); 
	
	КодПоЕДРПОУ = НалогДокОрганизацияПриИзмененииНаСервере();
	Если КодПоЕДРПОУ = Неопределено Тогда
		Предупреждение(НСтр("ru = 'У Вас не указан код ЕДРПОУ для "+НалогДокОрганизацияПервичка+"!';uk = 'У Вас не вказаний код ЄДРПОУ для "+НалогДокОрганизацияПервичка+"'"));
		КодПоЕДРПОУ =  НСтр("ru = 'Неопределен';uk = 'Невизначений'");
	КонецЕсли;      
	
КонецПроцедуры // 03.12.2021 - DOCKING 361

// 03.12.2021 + DOCKING 361
&НаСервере
Функция НалогДокОрганизацияПриИзмененииНаСервере()
	
	КодОргДоИзменений = Строка(КодПоЕДРПОУ);  
	
	Если (ЗначениеЗаполнено(НалогДокДоговорКонтрагента))
		И (НалогДокДоговорКонтрагента.Организация <> НалогДокОрганизацияПервичка) Тогда
		НалогДокДоговорКонтрагента  =  Неопределено;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОбособленноеПодразделение)) 
		И (ОбособленноеПодразделение.Владелец <> НалогДокОрганизацияПервичка) Тогда
		ОбособленноеПодразделение  =  Неопределено;
	КонецЕсли;
	//-----------------------------------------------------------------
	
	Если НЕ НалогДокОрганизацияПервичка.Пустая() Тогда
		КодЯзыкаПечать = КодЯзыкаПечать();
		//КодЯзыкаПечать  =  Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),  "РежимФормированияПечатныхФорм"));
		// DOCKING 459 + 22.11.2022
		// ----------------------------------------
		//Если Объект.Конфигурация = "ERP" или ПолучитьИмяБазы() = "КУП" Тогда
		//	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(НалогДокОрганизацияПервичка, ТекущаяДата(),);
		//	//СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		//Иначе
		//	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(НалогДокОрганизацияПервичка, ТекущаяДата(),,,КодЯзыкаПечать);
		//КонецЕсли;
		// ----------------------------------------
		Если Объект.Конфигурация = "ERP" или ПолучитьИмяБазы() = "КУП" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(НалогДокОрганизацияПервичка, ТекущаяДата(),);
			
		ИначеЕсли Объект.Конфигурация = "SB" Тогда
			ОбщМодуль = ПолучитьОбщийМодуль("ПечатьДокументовУНФ");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(НалогДокОрганизацияПервичка, ТекущаяДата(),,,КодЯзыкаПечать);			
		Иначе
			ОбщМодуль = ПолучитьОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			СведенияОПоставщике = ОбщМодуль.СведенияОЮрФизЛице(НалогДокОрганизацияПервичка, ТекущаяДата(),,,КодЯзыкаПечать);
		КонецЕсли;
	    // ----------------------------------------
		// DOCKING 459 - 22.11.2022
		
		Если НалогДокОрганизацияПервичка.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда			
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоЕДРПОУ) Тогда
				КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоЕДРПОУ);
			КонецЕсли;	
		ИначеЕсли НалогДокОрганизацияПервичка.ЮридическоеФизическоеЛицо  =  Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Если ЗначениеЗаполнено(СведенияОПоставщике.КодПоДРФО) Тогда
				КодПоЕДРПОУ  =  СокрЛП(СведенияОПоставщике.КодПоДРФО);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
		
	Если КодОргДоИзменений<>Строка(КодПоЕДРПОУ)   тогда
		//
		ИзменениеОсновныхПараметровНалоговых();
		//Элементы.Организация.Заголовок = СведенияОПоставщике.Представление;
	КонецЕсли; 
	ОбновлениеОтображенияКнопокПервичка();// Кнопка только для указанного кода ЕДРПОУ
			
	Возврат КодПоЕДРПОУ;

КонецФункции    // 03.12.2021 - DOCKING 361

// 03.12.2021 + DOCKING 361
&НаКлиенте
Процедура НастройкаПериодаНалогДок(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если Диалог.Редактировать() Тогда 
		НалогДокНачПериода = Диалог.Период.ДатаНачала;
		НалогДокКонПериода = Диалог.Период.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры // 03.12.2021 - DOCKING 361


// 01.12.2021 + DOCKING 363
&НаСервере
Функция ПолучитьПустоеЗначениеСпискаПервичкиНаСервере()
	ПустоеЗнач = Элементы.ТипДокФорма.СписокВыбора.Получить(0);
	Возврат Строка(ПустоеЗнач);
КонецФункции  // 01.12.2021 - DOCKING 363

// 03.12.2021 + DOCKING 361
&НаСервере
Функция ПолучитьПустоеЗначениеСпискаНалоговыхНаСервере()
	ПустоеЗнач = Элементы.ТипДокФорма1.СписокВыбора.Получить(0);
	Возврат Строка(ПустоеЗнач);
КонецФункции  // 03.12.2021 - DOCKING 361

// 01.12.2021 + DOCKING 363
&НаСервере
Функция ПолучитьПустоеЗначениеСпецРежимНалогообложенияНаСервере()
	ПустоеЗнач = Элементы.СпецРежимНалогообложения.СписокВыбора.Получить(0);
	Возврат Строка(ПустоеЗнач);
КонецФункции  // 01.12.2021 - DOCKING 363

// 01.12.2021 + DOCKING 363
&НаКлиенте
Процедура КоманднаяПанельТаблицаДокументовОчиститьФильтр(Команда)
	
	// 03.12.2021 + DOCKING 361
	ИмяТК = ПолучитьИмяТекущейВкладки();
	
	Если ИмяТК = "ПД" Тогда
	
		НачПериода = Дата(1,1,1);
		КонПериода = Дата(1,1,1);
		ТипДокФорма = ПолучитьПустоеЗначениеСпискаПервичкиНаСервере();
		СпецРежимНалогообложения = ПолучитьПустоеЗначениеСпецРежимНалогообложенияНаСервере();
		Проведен = Ложь;
		ВхДокМедок = Ложь;
		ВыписалНН = Неопределено;
		БезНеплательщиков = Неопределено;
		Контрагент = Неопределено;
		ДоговорКонтрагента = Неопределено;
		Ответственный = Неопределено;
		ТипСтатусаПД = Неопределено;
		ЗарегистрированныеПоДанным1СПлан = Ложь;
		ЗарегистрированныеПоДанным1С = Ложь;
		ПроизошлоФормированиеПД = Ложь;
		
	ИначеЕсли ИмяТК = "НД" Тогда
		
		НалогДокНачПериода = Дата(1,1,1);
		НалогДокКонПериода = Дата(1,1,1);
		ТипДокФорма1 = ПолучитьПустоеЗначениеСпискаНалоговыхНаСервере();
		НалогДокСпецРежимНалогообложения = ПолучитьПустоеЗначениеСпецРежимНалогообложенияНаСервере();
		НалогДокПроведен = Ложь;
		НалогДокВхДокМедок = Ложь;
		ОтображатьСлужебныеНН = Ложь;
		НалогДокВыписалНН = Неопределено;
		НалогДокБезНеплательщиков = Неопределено;
		НалогДокКонтрагент = Неопределено;
		НалогДокДоговорКонтрагента = Неопределено;
		НалогДокОтветственный = Неопределено;
		ПроизошлоФормированиеНД = Ложь;
		ТипСтатусаНН = Неопределено;
		ТипСтатусаЕРНН = Неопределено;
		 		
	КонецЕсли;
	ДоступностьКнопокПервички(,ИмяТК);
	// 03.12.2021 - DOCKING 361	
	
	
КонецПроцедуры  // 01.12.2021 - DOCKING 363

// 03.12.2021 + DOCKING 361
&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
		
	//Если ИмяТК = "ПД" ИЛИ ИмяТК = "НД" Тогда
	//	Если ИмяТекущейВкладки <> ИмяТК Тогда
	//		ИмяТекущейВкладки = ИмяТК;
	//		//ИзменениеОсновныхПараметров(); // обнуление таблицы
	//		
	//		Если ИмяТекущейВкладки = "ПД" Тогда
	//		//	ТипДок = ПолучитьТекущийТипДок(ТипДокФорма, ИмяТекущейВкладки);
	//			ОрганизацияПриИзмененииНаСервере();
	//			//Если ПроизошлоФормированиеПД Тогда
	//			//	КоманднаяПанельТаблицаДокументовЗаполнить(Элемент);
	//			//КонецЕсли;	
	//		ИначеЕсли ИмяТекущейВкладки = "НД" Тогда
	//		//	ТипДок = ПолучитьТекущийТипДок(ТипДокФорма1, ИмяТекущейВкладки);
	//			НалогДокОрганизацияПриИзмененииНаСервере();
	//		//	Если ПроизошлоФормированиеНД Тогда
	//		//		КоманднаяПанельТаблицаДокументовНалогДокЗаполнить(Элемент);
	//		//	КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
		//ДоступностьКнопокПервички(Ложь,ИмяТК);
	//КонецЕсли;	
	
КонецПроцедуры // 03.12.2021 - DOCKING 361

// 08.12.2021 + DOCKING 361
&НаКлиенте
Процедура Флажок1ПриИзменении(Элемент)
	ТаблицаДокументовПриАктивизацииСтроки(Элемент);
КонецПроцедуры // 08.12.2021 - DOCKING 361

// 08.12.2021 + DOCKING 361
&НаКлиенте
Процедура ФлажокПриИзменении(Элемент)
	ТаблицаДокументовПриАктивизацииСтроки(Элемент);
КонецПроцедуры // 08.12.2021 - DOCKING 361

&НаКлиенте
Процедура ТипРТУСохраненныйПриИзменении(Элемент)
	
	ТаблицаДокументов.Очистить();
		
	ВсегоЧисло = "0";    
	ИзНихЧисло = "0"; 
	БезНДСЧисло = "0";
	ВсегоНДСЧисло = "0";
	ВсегоЧисло1 = "0";
	Элементы.ФР.Видимость = Ложь;
	Этаформа.ФР = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура СтатусПДПриИзменении(Элемент)
	ИзменениеОсновныхПараметров();
КонецПроцедуры

&НаКлиенте
Процедура СтатусННПриИзменении(Элемент)
	ИзменениеОсновныхПараметровНалоговых();
КонецПроцедуры

&НаКлиенте
Процедура СтатусЕРННПриИзменении(Элемент)
	ИзменениеОсновныхПараметровНалоговых();
КонецПроцедуры

СуффиксДСС = Строка("SS");
СуффиксМДЗ = Строка("MD");  

УчетПоОбособленнымПодлазделениям = Ложь;

СписокПервички  =  Новый СписокЗначений();
// 01.12.2021 + DOCKING 359
СписокПервички.Добавить("Пусто",  Нстр("ru = '(Пусто)';uk = '(Пусто)'"));
// 01.12.2021 - DOCKING 359
//-----------------------------------------------------------------------------
//15.12.21 + DOCKING 368
//СписокПервички.Добавить("Акт выполненных работ",  Нстр("ru = 'Акт выполненных работ';uk = 'Акт виконаних послуг'"));
//Если НЕ Объект.Конфигурация = "КУП" Тогда
СписокПервички.Добавить("Акт выполненных работ",  Нстр("ru = 'Акт выполненных работ';uk = 'Акт виконаних послуг'"));
//КонецЕсли;
//15.12.21 - DOCKING 368
//-----------------------------------------------------------------------------
//11.05.22 + DOCKING 406
Если ЭтотОбъект.КодПоЕДРПОУ = "20079914" Тогда
	СписокПервички.Добавить("Акт приема передачи ПО",  Нстр("ru = 'Акт приема передачи ПО';uk = 'Акт приманні передачі ПО'"));
КонецЕсли;	
//11.05.22 - DOCKING 406
//-----------------------------------------------------------------------------
СписокПервички.Добавить("Акт Сверки",  Нстр("ru = 'Акт сверки';uk = 'Акт звіряння'"));
СписокПервички.Добавить("Расходная накладная",  Нстр("ru = 'Расходная накладная';uk = 'Видаткова накладна'"));
Если НЕ (Объект.Конфигурация = "ERP"  
	ИЛИ ИмяКлиентскойБазы = "КУПФ"
	)
	Тогда
	СписокПервички.Добавить("Счет покупателям",  Нстр("ru = 'Счет покупателям';uk = 'Рахунок покупцям'"));  
КонецЕсли;

//24.07.2023 + DOCKING 531
Если Объект.Конфигурация = "КУП" Тогда 
	СписокПервички.Добавить("Счет клиентам",  Нстр("ru = 'Счет клиентам';uk = 'Рахунок клієнтам'"));
КонецЕсли;
//24.07.2023 + DOCKING 531

Если НЕ Объект.Конфигурация = "SB" Тогда //01.11.22 +- DOCKING 459
	СписокПервички.Добавить("Возврат от покупателя",  Нстр("ru = 'Возврат от покупателя';uk = 'Зворотна накладна від покупця'"));
	СписокПервички.Добавить("Возврат поставщику",  Нстр("ru = 'Возврат поставщику';uk = 'Повернення постачальнику'")); 
КонецЕсли;

//-----------------------------------------------------------------------------
//18.03.2024 + DOCKING 669
Если ЭтотОбъект.КодПоЕДРПОУ = "41007704" Тогда
	СписокПервички.Добавить("ПостТоваровКлиент",  Нстр("ru = 'Поступление товаров';uk = 'Надходження товарів'"));
	СписокПервички.Добавить("ПостУслугКлиент",  Нстр("ru = 'Поступление услуг';uk = 'Надходження послуг'"));
КонецЕсли;	
//18.03.2024 - DOCKING 669
//-----------------------------------------------------------------------------

//СписокПервички.Добавить("-----------------",  Нстр("ru = '-------------------------------------------';uk = '-------------------------------------------'"));
//СписокПервички.Добавить("Налоговая накладная",  Нстр("ru = 'Налоговая накладная';uk = 'Податкова накладна'"));
//СписокПервички.Добавить("Приложение 2",  Нстр("ru = 'Приложение 2';uk = 'Додаток 2'"));
//СписокПервички.Добавить("-----------------",  Нстр("ru = '-------------------------------------------';uk = '-------------------------------------------'"));
СписокПервички.Добавить("ТТН спирт этиловый",  Нстр("ru = 'ТТН спирт этиловый';uk = 'ТТН спирт етиловий'"));
СписокПервички.Добавить("ТТН алкогольные напитки",  Нстр("ru = 'ТТН алкогольные напитки';uk = 'ТТН алкогольні вироби'"));

// 03.12.2021 + DOCKING 361
//ИмяТекущейВкладки = ПолучитьИмяТекущейВкладки();

СписокНалоговых  =  Новый СписокЗначений();

СписокНалоговых.Добавить("Пусто",  				 Нстр("ru = '(Пусто)';uk = '(Пусто)'"));
СписокНалоговых.Добавить("Налоговая накладная",  Нстр("ru = 'Налоговая накладная';uk = 'Податкова накладна'"));
СписокНалоговых.Добавить("Приложение 2",  		 Нстр("ru = 'Приложение 2';uk = 'Додаток 2'"));
// 03.12.2021 - DOCKING 361

мСписокВыбораСпецРежимНалогообложения  =  Новый СписокЗначений();
мСписокВыбораСпецРежимНалогообложения.Добавить(Неопределено,  НСтр("ru = '(Пусто)';uk = '(Пусто)'"));
мСписокВыбораСпецРежимНалогообложения.Добавить(2,  НСтр("ru = '2   с/х предприятия (специальный режим)';uk = '2   с/г підприємства (спеціальний режим)'"));
мСписокВыбораСпецРежимНалогообложения.Добавить(3,  НСтр("ru = '3   с/х предприятия (всех форм собственности)';uk = '3   с/г підприємства (усіх форм власності)'"));
мСписокВыбораСпецРежимНалогообложения.Добавить(4,  НСтр("ru = '4   перерабатывающие предприятия (всех форм собственности)';uk = '4   переробні підприємства (усіх форм власності)'"));

СписокРегОтчетов = Новый СписокЗначений();
СписокРегОтчетов.Добавить("Форма №1ДФ",  Нстр("ru = 'Форма №1ДФ';uk = 'Форма №1ДФ'"));
СписокРегОтчетов.Добавить("Форма 1-ПВ",  Нстр("ru = '1-ПВ. Отчет по труду';uk = '1-ПВ. Звіт з праці'"));
СписокРегОтчетов.Добавить("Ф4-ФССзТВП",  Нстр("ru = 'Отчет Ф4-ФССсТВП';uk = 'Звіт Ф4-ФССзТВП'"));
СписокРегОтчетов.Добавить("Форма № 1. Баланс",  Нстр("ru = 'Форма № 1. Баланс';uk = 'Форма № 1. Баланс'"));
СписокРегОтчетов.Добавить("1-м, 2-м. Финансовий отчет",  Нстр("ru = '1-м, 2-м. Отчет МП (стандарт № 25) ';uk = '1-м, 2-м. Звіт МП (стандарт № 25) '"));
СписокРегОтчетов.Добавить("1-мс, 2-мс. Финансовий отчет",  Нстр("ru = '1-мс, 2-мс. Отчет МП сокращенный (стандарт № 25) ';uk = '1-мс, 2-мс. Звіт МП скорочений (стандарт № 25) '"));
СписокРегОтчетов.Добавить("Отчет по единому социальному взносу (Приложение 4)",  Нстр("ru = 'Отчет ПДФО та ЄСВ';uk = 'Звіт ПДФО та ЄСВ'"));
СписокРегОтчетов.Добавить("Декларация плательщика единого налога",  Нстр("ru = 'Декларация плательщика единого налога';uk = 'Декларація платника єдиного податку'"));
СписокРегОтчетов.Добавить("Декларация по налогу на прибыль предприятий",  Нстр("ru = 'Декларация по налогу на прибыль предприятий';uk = 'Декларація з податку на прибуток підприємств'"));
СписокРегОтчетов.Добавить("Декларация по НДС",  Нстр("ru = 'Декларация по НДС';uk = 'Декларація по ПДВ'"));
СписокРегОтчетов.Добавить("Уточняющий расчет Декларация по НДС",  Нстр("ru = 'Уточняющий расчет Декларация по НДС';uk = 'Уточнюючий розрахунок Декларація по ПДВ'"));
СписокРегОтчетов.Добавить("ОтчетЕСВ",  Нстр("ru = 'Отчет по единому социальному взносу ';uk = 'Звіт по єдиному соціальному внеску'"));

// 02.08.2022 + DOCKING 382
СписокТипРасчетов = Новый СписокЗначений();

СписокТипРасчетов.Добавить("Отчетный",       Нстр("ru = 'Отчетный';uk = 'Звітний'"));
СписокТипРасчетов.Добавить("ОтчетныйНовый",  Нстр("ru = 'Отчетный новый';uk = 'Звітний новий'"));
СписокТипРасчетов.Добавить("Уточняющий",     Нстр("ru = 'Уточняющий';uk = 'Уточнюючий'"));
СписокТипРасчетов.Добавить("Справочный",     Нстр("ru = 'Справочный';uk = 'Довідковий'"));   // 08.06.2023 DOCKING 537
// 02.08.2022 - DOCKING 382

// 30.10.2023 + DOCKING 518
СписокСтатусов = Новый СписокЗначений();

СписокСтатусов.Добавить("0",  НСтр("ru = 'Готовится';uk = 'Готується'"));
СписокСтатусов.Добавить("1",  НСтр("ru = 'Подписан бухгалтером';uk = 'Підписано бухгалтером'"));
СписокСтатусов.Добавить("2",  НСтр("ru = 'Подписан директором';uk = 'Підписано директором'"));
СписокСтатусов.Добавить("3",  НСтр("ru = 'Подписан печатью';uk = 'Підписано печаткою установи'"));
СписокСтатусов.Добавить("4",  НСтр("ru = 'Отправлен';uk = 'Відправлено'"));
СписокСтатусов.Добавить("6",  НСтр("ru = 'Получено сообщение';uk = 'Отримано повідомлення'")); 
СписокСтатусов.Добавить("9",  НСтр("ru = 'Принято';uk = 'Прийнято'")); 
СписокСтатусов.Добавить("10", НСтр("ru = 'Не принято';uk = 'Не прийнято'"));
СписокСтатусов.Добавить("11", НСтр("ru = 'Ошибка отправки';uk = 'Помилка відправки'")); 
СписокСтатусов.Добавить("12", НСтр("ru = 'На подпись';uk = 'На підпис'"));
СписокСтатусов.Добавить("13", НСтр("ru = 'Архив';uk = 'Архів'"));
СписокСтатусов.Добавить("14", НСтр("ru = 'Получено';uk = 'Отримано'")); 
СписокСтатусов.Добавить("15", НСтр("ru = 'Импортирован';uk = 'Імпортований'"));
СписокСтатусов.Добавить("16", НСтр("ru = 'Отклонен контрагентом';uk = 'Відхилено контрагентом'"));
СписокСтатусов.Добавить("17", НСтр("ru = 'Подписан сотрудником';uk = 'Підписано співробітником'")); 
СписокСтатусов.Добавить("19", НСтр("ru = 'Доставлено контрагенту';uk = 'Доставлено контрагенту'"));	
СписокСтатусов.Добавить("20", НСтр("ru = 'Утвержден контрагеном';uk = 'Затверджено контрагентом'"));
СписокСтатусов.Добавить("32", НСтр("ru = 'Доставка контрагенту невозможна';uk = 'Доставка контрагенту неможлива'"));	

СписокСтатусов.Добавить("00",  Нстр("ru = 'Документ не передавался в M.E.Doc';uk = 'Документ не передавався в M.E.Doc'"));


СписокСтатусовЕРНН = Новый СписокЗначений();

СписокСтатусовЕРНН.Добавить("4",   НСтр("ru = 'Отправлено в ГФС';uk = 'Відправлено в ДПС'"));
СписокСтатусовЕРНН.Добавить("6",   НСтр("ru = 'Доставлено к получателю';uk = 'Доставлено до отримувача'"));
СписокСтатусовЕРНН.Добавить("9",   НСтр("ru = 'Принято в ГФС';uk = 'Прийнято в ДПС'"));
СписокСтатусовЕРНН.Добавить("10",  НСтр("ru = 'Отклонено в ГФС';uk = 'Відхилено в ДПС'"));
СписокСтатусовЕРНН.Добавить("110", НСтр("ru = 'СМКОР Регистрация остановлена';uk = 'СМКОР Реєстрація зупинена'"));
СписокСтатусовЕРНН.Добавить("111", НСтр("ru = 'Решение СМКОР про регистрацию';uk = 'Рішення СМКОР про реєстрацію'")); 
СписокСтатусовЕРНН.Добавить("112", НСтр("ru = 'Решение СМКОР про отказ';uk = 'Рішення СМКОР про відмову'")); 
СписокСтатусовЕРНН.Добавить("113", НСтр("ru = 'СМКОР Решение про рассмотрения жалобы';uk = 'СМКОР Рішення про розгляд скарги'"));
СписокСтатусовЕРНН.Добавить("ELSE",НСтр("ru = 'Другой статус';uk = 'Інший статус'"));

// 30.10.2023 - DOCKING 518
