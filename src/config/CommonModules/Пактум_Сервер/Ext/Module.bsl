Функция ПолучитьНастройкиПодключения() Экспорт
	Настройки=ХранилищеОбщихНастроек.Загрузить("Обработка.Пактум_Контрагент");
	Если ТипЗнч(Настройки)=Тип("Структура") Тогда
		
	Иначе
		Настройки=Новый Структура;
		Настройки.Вставить("фИспользоватьПрокси", Ложь);
		Настройки.Вставить("АдресПрокси");
		Настройки.Вставить("ПортПрокси");
		Настройки.Вставить("фИспользоватьЛогинПарольПрокси", Ложь);
		Настройки.Вставить("ЛогинПрокси");
		Настройки.Вставить("ПарольПрокси");
	КонецЕсли;	
	
	Настройки.Вставить("Логин", "");
	Настройки.Вставить("Пароль", "");
	Настройки2=ХранилищеОбщихНастроек.Загрузить("Обработка.Пактум_Контрагент_Подключение");
	Если ТипЗнч(Настройки2)=Тип("Структура") Тогда
		Настройки.Вставить("Логин", Настройки2.Логин);
		Настройки.Вставить("Пароль", Настройки2.Пароль);
	Иначе
		Настройки.Вставить("Логин");
		Настройки.Вставить("Пароль");
	КонецЕсли;
	Возврат Настройки;
КонецФункции

Функция ПроверитьНаличиеПинкода() Экспорт
	СтруктураРезультат = Новый Структура("Результат, ТекстОшибки", Ложь, "");
	ТекстОшибки = 
		НСтр("ru='Для автоматизированного заполнения карточек контрагентов в соответствии с введенным набором кодов ЕГРПОУ (ГРФЛ) подключите сервис Пактум.Контрагент: https://portal.bas-soft.eu/applications/Pactum-Ukraine'
			|;uk= 'Для автоматизованого заповнення карток контрагентів відповідно до введеного набору кодів ЄДРПОУ (ДРФО) підключіть сервіс Пактум.Контрагент: https://portal.bas-soft.eu/applications/Pactum-Ukraine'");
	НастройкиПодключения=ПолучитьНастройкиПодключения();
	Если ПустаяСтрока(НастройкиПодключения.Логин) Тогда
		СтруктураРезультат.ТекстОшибки = ТекстОшибки;
	Иначе
		Попытка
			Соединение = Новый HTTPСоединение("pactumsys.com", 443, СокрЛП(НастройкиПодключения.Логин), СокрЛП(НастройкиПодключения.Логин), ПолучитьПрокси(НастройкиПодключения), 20, ПолучитьSSL());
			Запрос = Новый HTTPЗапрос("/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/accounts/authentication");
			Запрос.Заголовки.Вставить("Accept-Language",  "ru");
			Запрос.Заголовки.Вставить("Content-Language", "ru");
			Запрос.Заголовки.Вставить("Accept-Charset",   "utf-8");
			Запрос.Заголовки.Вставить("Content-Charset",  "utf-8");
			Запрос.Заголовки.Вставить("Content-type",     "application/x-www-form-urlencoded; charset=utf-8");
			ПараметрыПОСТ = "UserName=" + СокрЛП(НастройкиПодключения.Логин) + "&Password=" + СокрЛП(НастройкиПодключения.Логин);
			Запрос.УстановитьТелоИзСтроки(ПараметрыПОСТ);
			
		    Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
			Если Найти(ТекстОтвета,"указаны не верно" )>0 Тогда
				СтруктураРезультат.ТекстОшибки = ТекстОшибки;
			Иначе
				СтруктураРезультат.Результат = Истина;	
			КонецЕсли;
		Исключение
			СтруктураРезультат.ТекстОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СтруктураРезультат; 
КонецФункции

Функция Авторизация_Пактум() Экспорт
	НастройкиПодключения=ПолучитьНастройкиПодключения();
	СтруАвторизация=Новый Структура;
	СтруАвторизация.Вставить("Результат", Ложь);
	СтруАвторизация.Вставить("Токен");
	
	Если СокрЛП(НастройкиПодключения.Логин)="" Тогда
		Индикатор1 = 0;
		Возврат СтруАвторизация;
	КонецЕсли;
	Попытка
		Соединение = Новый HTTPСоединение("pactumsys.com", 443, СокрЛП(НастройкиПодключения.Логин), СокрЛП(НастройкиПодключения.Логин), ПолучитьПрокси(НастройкиПодключения), 20, ПолучитьSSL());
		Запрос = Новый HTTPЗапрос("/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/accounts/authentication");
		Запрос.Заголовки.Вставить("Accept-Language",  "ru");
		Запрос.Заголовки.Вставить("Content-Language", "ru");
		Запрос.Заголовки.Вставить("Accept-Charset",   "utf-8");
		Запрос.Заголовки.Вставить("Content-Charset",  "utf-8");
		Запрос.Заголовки.Вставить("Content-type",     "application/x-www-form-urlencoded; charset=utf-8");
		ПараметрыПОСТ = "UserName=" + СокрЛП(НастройкиПодключения.Логин) + "&Password=" + СокрЛП(НастройкиПодключения.Логин);
		Запрос.УстановитьТелоИзСтроки(ПараметрыПОСТ);
		
	    Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();	
		СтруАвторизация.Вставить("Результат", Истина);
	Исключение
		Индикатор1 = 0;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сервер недоступен. Проверьте подключение к Интернету.'
						|;uk='Сервер недоступний. Перевірте підключення до мережі Інтернет.'"));
		СтруАвторизация.Вставить("Результат", Ложь);
	КонецПопытки;

	Если СтруАвторизация.Результат Тогда
		СтруАвторизация.Вставить("Токен");
		Если Найти(ТекстОтвета,"Пинкод указан не верно" )=0 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
			СтрТокен = ПрочитатьJSON (ЧтениеJSON);	
			Если Не СтрТокен = Неопределено Тогда
				Если СтрТокен.Свойство("access_token") Тогда
					стрПактум_Токен = СтрТокен.access_token;
					СтруДанныеДепозит=Депозит_Пактум(стрПактум_Токен, НастройкиПодключения);
					СтруАвторизация.Вставить("Токен", стрПактум_Токен);
					СтруАвторизация.Вставить("Депозит", СтруДанныеДепозит.Депозит);
					СтруАвторизация.Вставить("ДатаСтарт", СтруДанныеДепозит.ДатаСтарт);
					СтруАвторизация.Вставить("ДатаКонец", СтруДанныеДепозит.ДатаКонец);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Пинкод указан не верно';uk= 'Пінкод вказаний не вірно'"));
			СтруАвторизация.Вставить("Результат", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруАвторизация;
КонецФункции

Функция ПроверкаКорректностиЕДРПОУ_Пактум(КодЕДРПОУ) Экспорт
	НастройкиПодключения=ПолучитьНастройкиПодключения();
	
	Стру = Авторизация_Пактум();
	Стру.Вставить("КорректностьЕДРПОУ_Значение", Ложь);
	Стру.Вставить("КорректностьЕДРПОУ_ТекстОшибки", "");
	
	фВсеОК=Истина;
	Попытка
		Соединение = Новый HTTPСоединение("pactumsys.com", 443, , , ПолучитьПрокси(НастройкиПодключения), 20, ПолучитьSSL());
		Запрос = Новый HTTPЗапрос("/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/contractors/"+КодЕДРПОУ+"?source=bas;skipRegisters=2,3");
		Запрос.Заголовки.Вставить("Accept-Language",  "ru");
		Запрос.Заголовки.Вставить("Content-Language", "ru");
		Запрос.Заголовки.Вставить("Accept-Charset",   "utf-8");
		Запрос.Заголовки.Вставить("Content-Charset",  "utf-8");
		Запрос.Заголовки.Вставить("Content-type",     "application/x-www-form-urlencoded; charset=utf-8");
		Запрос.Заголовки.Вставить("Authorization", "Bearer "+Стру.Токен);
		Ответ = Соединение.Получить(Запрос);
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	Исключение
		фВсеОК=Ложь;
	КонецПопытки;
	
	Если Не фВсеОК Тогда
		Стру.Вставить("КорректностьЕДРПОУ_Значение", Ложь);
		Стру.Вставить("КорректностьЕДРПОУ_ТекстОшибки", НСтр("ru='Сервер недоступен. Проверьте подключение к Интернету.'
						|;uk='Сервер недоступний. Перевірте підключення до мережі Інтернет.'"));
		Возврат Стру;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Контрагент = ПрочитатьJSON (ЧтениеJSON);	
	
	Если Контрагент.Свойство("Status") Тогда
		Стру.Вставить("КорректностьЕДРПОУ_Значение", Истина);
	Иначе
		Стру.Вставить("КорректностьЕДРПОУ_Значение", Ложь);
		Если Контрагент.Message = "Request not authenticated" Тогда
			ТекстОшибки = НСтр("ru='Для автоматизированного заполнения карточки контрагента в соответствии с введенным кодом ЕГРПОУ (ГРФЛ) подключите сервис Пактум.Контрагент: https://portal.bas-soft.eu/applications/Pactum-Ukraine';uk= 'Для автоматизованого заповнення картки контрагента відповідно до введеного коду ЄДРПОУ (ДРФО) підключіть сервіс Пактум.Контрагент: https://portal.bas-soft.eu/applications/Pactum-Ukraine'");
		ИначеЕсли Лев(Контрагент.Message, 38) = "Некорректный идентификатор контрагента" Тогда
			ТекстОшибки = НСтр("ru='Некорректный идентификатор контрагента';uk= 'Некоректний ідентифікатор контрагента'") + ": " + КодЕДРПОУ;
		Иначе
			ТекстОшибки = Контрагент.Message;
		КонецЕсли;
		Стру.Вставить("КорректностьЕДРПОУ_ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Стру;
КонецФункции

Функция Депозит_Пактум(Токен, НастройкиПодключения = Неопределено) Экспорт
	СуммаДепозита=0;
	Если НастройкиПодключения = Неопределено Тогда 
		НастройкиПодключения=ПолучитьНастройкиПодключения();
	КонецЕсли;
	Попытка
		Соединение = Новый HTTPСоединение("pactumsys.com", 443, , , ПолучитьПрокси(НастройкиПодключения), 20, ПолучитьSSL());
		Запрос = Новый HTTPЗапрос("/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/accounts/profile");
		Запрос.Заголовки.Вставить("Accept-Language",  "ru");
		Запрос.Заголовки.Вставить("Content-Language", "ru");
		Запрос.Заголовки.Вставить("Accept-Charset",   "utf-8");
		Запрос.Заголовки.Вставить("Content-Charset",  "utf-8");
		Запрос.Заголовки.Вставить("Content-type",     "application/x-www-form-urlencoded; charset=utf-8");
		Запрос.Заголовки.Вставить("Authorization", "Bearer "+Токен);
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON=Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
		СтрТокен = ПрочитатьJSON(ЧтениеJSON);	
		
		пСумма=0; ДатаСтарт=0; ДатаКонец=0;
		Мас=СтрТокен.Subscriptions;
		Для Каждого Эл Из Мас Цикл
			Если Не Эл.AllowToUse Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				пСумма1=Эл.RequestsLimit;
				Если пСумма1=Неопределено Тогда
					пСумма1=0;
				КонецЕсли;
			Исключение
				пСумма1=0;
			КонецПопытки;
			Попытка
				пСумма2=Эл.TotalUsage;
				Если пСумма2=Неопределено Тогда
					пСумма2=0;
				КонецЕсли;
			Исключение
				пСумма2=0;
			КонецПопытки;
			пСумма=пСумма+пСумма1-пСумма2;
			
			Попытка
				Если Не Эл.StartDate=Неопределено Тогда
					ДатаСтарт=Эл.StartDate;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если Не Эл.EndDate=Неопределено Тогда
					ДатаКонец=Эл.EndDate;
				КонецЕсли;
			Исключение
			КонецПопытки;

		КонецЦикла;
		СуммаДепозита=пСумма;
	Исключение
	КонецПопытки;
	
	Стру=Новый Структура;
	Стру.Вставить("Депозит", СуммаДепозита);
	Стру.Вставить("ДатаСтарт", ДатаСтарт);
	Стру.Вставить("ДатаКонец", ДатаКонец);
	Возврат Стру;
КонецФункции

Функция Пактум_Права(ПоказыватьСообщения = Истина) Экспорт
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	Если Не РольДоступна("ПактумИспользование") Тогда
		Если ПоказыватьСообщения Тогда      
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недостаточно прав на использование сервиса ""Пактум.Контрагент"".';uk='Недостатньо прав на використання сервісу ""Пактум.Контрагент"".'"));
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ЗапускФоновогоЗадания(Стру) Экспорт
	Мас=Новый Массив;
	Мас.Добавить(Стру);
	ФоновыеЗадания.Выполнить("Пактум_ФоновыеЗадания.ПолучитьКарточкуКонтрагента", Мас, Стру.УИД, "ФоновоеЗадание_Пактум_ПолучитьКарточкуКонтрагента");
КонецПроцедуры

Функция ПолучитьПодтверждение_ЗавершенияФоновогоЗадания(пУИД) Экспорт
	Стру=Новый Структура("Выполнено, Ошибки, ТекстОшибки", Ложь, Ложь, "");
	Зап=Новый Запрос;
	Зап.Текст=
	"ВЫБРАТЬ
	|	Пактум_ФоновыеЗадания.УИД,
	|	Пактум_ФоновыеЗадания.фОшибки,
	|	Пактум_ФоновыеЗадания.ТекстОшибки
	|ИЗ
	|	РегистрСведений.Пактум_ФоновыеЗадания КАК Пактум_ФоновыеЗадания
	|ГДЕ
	|	Пактум_ФоновыеЗадания.УИД = &ВыбУИД";
	Зап.УстановитьПараметр("ВыбУИД", пУИД);
	Рез=Зап.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выб=Рез.Выбрать();
		Выб.Следующий();
		Стру.Выполнено=Истина;
		Стру.Ошибки=Выб.фОшибки;
		Стру.ТекстОшибки=Выб.ТекстОшибки;
	КонецЕсли;
	Возврат Стру;
КонецФункции

Процедура УдалитьИзРегистра_ФоновыеЗадания(пУИД) Экспорт
	пРег=РегистрыСведений.Пактум_ФоновыеЗадания;
	НаборЗаписей=пРег.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УИД.Установить(пУИД);	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Удалить(НаборЗаписей[0]);
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКонтрагента(КодЕДРПОУ, Код = "") Экспорт
	Стру=Новый Структура("Контрагент, спКонтрагенты, Кво", Неопределено, Новый СписокЗначений, 0);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|	,Контрагенты.Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ
	|";
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодЕДРПОУ);
	Запрос.УстановитьПараметр("Код", Код);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Стру;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если ЗначениеЗаполнено(Код) Тогда
			Стру.Вставить("Контрагент", Выб.Ссылка);
		КонецЕсли;
		Стру.спКонтрагенты.Добавить(Выб.Ссылка);
	КонецЦикла;
	Стру.Вставить("Кво", Выб.Количество());
	
	Возврат Стру;
КОнецФункции

Функция ВероятноЕДРПОУ(пСтрока) Экспорт
	Если СтрДлина(пСтрока)=8 Или СтрДлина(пСтрока)=10 Тогда
		Если ВсеЦифры(пСтрока) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ВсеЦифры(пСтрока)
	Для А=1 По СтрДлина(пСтрока) Цикл
		пСимв=Сред(пСтрока, А, 1);
		Если Найти("1234567890", пСимв)=0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ПолучитьСписокЕДРПОУПоСтроке(КодЕДРПОУ) Экспорт
	Сп = Новый СписокЗначений;
	ИсходнаяСтрока = СокрЛП(КодЕДРПОУ);
	ТекущийКод = "";
	
	Для А = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимвол = Сред(ИсходнаяСтрока, А, 1);
	//	Если СтрЧислоВхождений("1234567890", ТекСимвол) = 0 Тогда
	//		Если Не ПустаяСтрока(ТекущийКод) Тогда
	//			Сп.Добавить(ТекущийКод);
	//			ТекущийКод = "";
	//		КонецЕсли;
	//	Иначе
	//		ТекущийКод = ТекущийКод + ТекСимвол;
	//	КонецЕсли;
	//КонецЦикла;
	Если СтрЧислоВхождений(".,;_ ", ТекСимвол) > 0 Тогда
			Если Не ПустаяСтрока(ТекущийКод) Тогда
				Сп.Добавить(ТекущийКод);
				ТекущийКод = "";
			КонецЕсли;
		Иначе
			ТекущийКод = ТекущийКод + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекущийКод) Тогда
		Сп.Добавить(ТекущийКод);
	КонецЕсли;
	
	Возврат Сп;
КонецФункции

Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) Экспорт
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользованиеСервисаВозможно() Экспорт
	
	ИспользованиеВозможно = Истина;
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		// еще не адаптирован для работы в режиме сервиса
		ИспользованиеВозможно = Ложь;
	КонецЕсли;
	Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда 
		// еще не адаптирован для работы в Linux
		ИспользованиеВозможно = Ложь;
	КонецЕсли;
	
	Возврат ИспользованиеВозможно;
КонецФункции

Функция ПолучитьДополнительныеСведенияКонтрагента(КонтрагентСсылка) Экспорт
	ЗначениеНеУказано = НСтр("ru='Не указан';uk= 'Не вказаний'"); 
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если КонтрагентСсылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пактум_ДополнительныеСведенияОКонтрагентах.ИД КАК ИД,
	|	Пактум_ДополнительныеСведенияОКонтрагентах.Значение КАК Значение,
	|	Пактум_ДополнительныеСведенияОКонтрагентах.Период КАК Период,
	|	Пактум_ДополнительныеСведенияОКонтрагентах.Представление КАК Представление,
	|	Пактум_ДополнительныеСведенияОКонтрагентах.Заголовок КАК Заголовок,
	|	Пактум_ДополнительныеСведенияОКонтрагентах.ЕстьОтступ КАК ЕстьОтступ,
	|	Пактум_ДополнительныеСведенияОКонтрагентах.Сортировка КАК Сортировка
	|ИЗ
	|	РегистрСведений.Пактум_ДополнительныеСведенияОКонтрагентах КАК Пактум_ДополнительныеСведенияОКонтрагентах
	|ГДЕ
	|	Пактум_ДополнительныеСведенияОКонтрагентах.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка";
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьРеквизитыФормы_Пактум() Экспорт
	ТабРеквизиты = Новый ТаблицаЗначений;
	ТабРеквизиты.Колонки.Добавить("ИД", Новый ОписаниеТипов("Строка"));
	ТабРеквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТабРеквизиты.Колонки.Добавить("Сортировка", Новый ОписаниеТипов("Число"));
	
	НастройкиПодключения=ПолучитьНастройкиПодключения();
	СтруАвторизация=Пактум_Сервер.Авторизация_Пактум();
	
	Попытка
		Соединение = Новый HTTPСоединение("pactumsys.com", 443, , , ПолучитьПрокси(НастройкиПодключения), 20, ПолучитьSSL());
		Запрос = Новый HTTPЗапрос("/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/account/settings/datastructure");
		Запрос.Заголовки.Вставить("Accept-Language",  "ru");
		Запрос.Заголовки.Вставить("Content-Language", "ru");
		Запрос.Заголовки.Вставить("Accept-Charset",   "utf-8");
		Запрос.Заголовки.Вставить("Content-Charset",  "utf-8");
		Запрос.Заголовки.Вставить("Content-type",     "application/x-www-form-urlencoded; charset=utf-8");
		//Запрос.Заголовки.Вставить("Authorization", "Bearer " + СтруАвторизация.Токен);
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сервер недоступен. Проверьте подключение к Интернету.'
						|;uk='Сервер недоступний. Перевірте підключення до мережі Інтернет.'"));
		Возврат ТабРеквизиты;
	КонецПопытки;
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	ДанныеПактум = ПрочитатьJSON(ЧтениеJSON);
	
	Для Каждого Элемент Из ДанныеПактум Цикл
		Если ТипЗнч(Элемент.Значение) <> Тип("Структура") И ТипЗнч(Элемент.Значение) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если ПустаяСтрока(Элемент.Значение.field) Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтрока = ТабРеквизиты.Добавить();
			НовСтрока.ИД = Элемент.Ключ;
			НовСтрока.Представление = Элемент.Значение.field;
			НовСтрока.Сортировка = Элемент.Значение.level;
		КонецЕсли;
	КонецЦикла;
	
	ТабРеквизиты.Сортировать("Сортировка");
	
	Возврат ТабРеквизиты;
КонецФункции

Функция ПолучитьПрокси(НастройкиПодключения = Неопределено) Экспорт
	Если НастройкиПодключения = Неопределено Тогда 
		НастройкиПодключения=ПолучитьНастройкиПодключения();
	КонецЕсли;
	
	Если НастройкиПодключения.фИспользоватьПрокси Тогда
		ПроксиСервер = Новый ИнтернетПрокси;
		ПроксиСервер.Сервер(СокрЛП(НастройкиПодключения.АдресПрокси));
		ПроксиСервер.Порт(СокрЛП(НастройкиПодключения.ПортПрокси));
		Если НастройкиПодключения.фИспользоватьЛогинПарольПрокси Тогда
			ПроксиСервер.Пользователь = СокрЛП(НастройкиПодключения.ЛогинПрокси);
			ПроксиСервер.Пароль       = СокрЛП(НастройкиПодключения.ПарольПрокси);
		КонецЕсли;
	Иначе
	    ПроксиСервер = Неопределено;
	КонецЕсли;
	Возврат ПроксиСервер;
КонецФункции

Функция ПолучитьSSL() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
                 Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	Если ЭтоLinuxКлиент Тогда
		СертификатКлиента = Неопределено;
		Выполнить("СертификатКлиента = Новый СертификатКлиентаLinux();");
		SSL = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, Новый СертификатыУдостоверяющихЦентровLinux());
	Иначе
		СертификатКлиента = Неопределено;
		Выполнить("СертификатКлиента = Новый СертификатКлиентаWindows();");
		SSL = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, Новый СертификатыУдостоверяющихЦентровWindows());
	КонецЕсли;
	
	Возврат SSL; 
КонецФункции