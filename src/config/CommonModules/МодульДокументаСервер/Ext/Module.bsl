// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПередПроведениемДокумента(ТекДокумент, ТекстОшибки, ПродолжатьПриБлокировке, ВосстановлениеПоследовательности, ГраницаУстановлена) Экспорт
	
	Если ВосстановлениеПоследовательности И Не ТекДокумент.Проведен Тогда        
		ГраницаУстановлена = Истина;
		Возврат Истина;
	КонецЕсли;
	
	ДокументПроведен 			= ПровестиДокументНаСервере(ТекДокумент, ТекстОшибки , ВосстановлениеПоследовательности , ГраницаУстановлена);
	Если НЕ ДокументПроведен Тогда
		
		Если ПродолжатьПриБлокировке и ЭтоОшибкаБлокировки(ТекстОшибки) Тогда
			Сообщить("Конфлікт блокувань, робимо паузу на 5 секунд");
			ОбменДаннымиСервер.Пауза(5);
			
			ДокументПроведен 			= ПровестиДокументНаСервере(ТекДокумент, ТекстОшибки, ВосстановлениеПоследовательности , ГраницаУстановлена);
			Если НЕ ДокументПроведен Тогда
				
				Если ЭтоОшибкаБлокировки(ТекстОшибки) Тогда
					Сообщить("Конфлікт блокувань, робимо паузу на 5 секунд");
					ОбменДаннымиСервер.Пауза(5);
				КонецЕсли;
				
				ДокументПроведен 			= ПровестиДокументНаСервере(ТекДокумент, ТекстОшибки, ВосстановлениеПоследовательности , ГраницаУстановлена);
				Если НЕ ДокументПроведен Тогда
					
					Если ЭтоОшибкаБлокировки(ТекстОшибки) Тогда
						Сообщить("Конфлікт блокувань, робимо паузу на 5 секунд");
						ОбменДаннымиСервер.Пауза(5);
					КонецЕсли;
					
					ДокументПроведен 			= ПровестиДокументНаСервере(ТекДокумент, ТекстОшибки, ВосстановлениеПоследовательности , ГраницаУстановлена);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;                       
		
	КонецЕсли;
	
	
	
	
	Возврат ДокументПроведен;
		
КонецФункции // ПередПроведениемДокумента()

Функция ЭтоОшибкаБлокировки(ТекстОшибки) Экспорт
	Возврат СтрНайти(ТекстОшибки, "конфлікт блокувань") > 0 или СтрНайти(ТекстОшибки, "конфликт блокировок") > 0;
КонецФункции

Функция ПровестиДокументНаСервере(ТекДокумент, ТекстОшибки = "", ВосстановлениеПоследовательности, ГраницаУстановлена)
	
	Проведен = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекДокумент) Тогда
		//ТекстОшибки = "Не передано документ!"
		Возврат Истина;
	КонецЕсли;
	
	ТекстОшибки 	= "";
	УзелОбмена		= ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерияBAS.НайтиПоКоду("ТБ");
	
	Если УзелОбмена.Пустая() Тогда
		ЕстьИзменения = Истина;
	Иначе
		
		Запрос 			= Новый Запрос;
		Запрос.УстановитьПараметр("Узел"	, УзелОбмена);
		Запрос.УстановитьПараметр("Ссылка"	, ТекДокумент);
		Запрос.Текст 	= 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриходнаяНакладнаяИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходнаяНакладная.Изменения КАК ПриходнаяНакладнаяИзменения
		|ГДЕ
		|	ПриходнаяНакладнаяИзменения.Узел = &Узел
		|	И ПриходнаяНакладнаяИзменения.Ссылка = &Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриходнаяНакладная", "Документ." + ТекДокумент.Метаданные().Имя);
		
		Выборка 		= Запрос.Выполнить().Выбрать();
		ЕстьИзменения 	= Выборка.Следующий() и ЗначениеЗаполнено(Выборка.Ссылка);
	КонецЕсли;
	
	
	ТекОб 			= ТекДокумент.ПолучитьОбъект();
	ТекОб.ДополнительныеСвойства.Вставить("ИнструментПроведениеДокументов");
	
	Попытка
		
		ТекОб.Записать(РежимЗаписиДокумента.Проведение);
		
		Проведен = Истина;  
		
		Если НЕ ЕстьИзменения Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ТекДокумент);
		КонецЕсли;
		
	Исключение
		
		Сообщить("Не проведено документ " + ТекДокумент + "
		|" + ОписаниеОшибки());
		
		Проведен = Ложь;
	
	КонецПопытки;   
	
	Если ВосстановлениеПоследовательности И Проведен Тогда
		
		ГраницаПоследовательности = Последовательности.ПартииЗапасов.ПолучитьГраницу();
		
		МоментРегистратора = ТекДокумент.МоментВремени();
		
		ГраницаУстановлена = ГраницаПоследовательности.Сравнить(МоментРегистратора) = 0; 
	
	КонецЕсли;   
	
	Возврат Проведен;
	
КонецФункции