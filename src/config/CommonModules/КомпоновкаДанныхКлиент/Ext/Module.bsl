Процедура ДобавитьКнопкуСКомандойНаФорму(ТекФорма, ИмяКнопки, ИмяКоманды, Заголовок, Действие, ЭлементРодитель) Экспорт
	
	ТекКоманда = ТекФорма.Команды.Добавить(ИмяКоманды);
	ТекКоманда.Заголовок = Заголовок;
	ТекКоманда.Действие = Действие;
	
	ТекКнопка = ТекФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭлементРодитель);
	ТекКнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

Функция ПолучитьСписокПолейГруппировокОтчетаПоУмолчанию(ТекОбъект) Экспорт
	
	СписокПолейПоУмолчанию = Новый СписокЗначений;
	//
	//ДоступныеПоля = ТекОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы;
	//
	//Для каждого ТекЗнач Из ПараметрыСеанса.СписокПолейГруппировокОтчетаПоУмолчанию Цикл
	//	НайдПоле = ДоступныеПоля.Найти(ТекЗнач);
	//	Если СписокПолейПоУмолчанию.НайтиПоЗначению(ТекЗнач) = Неопределено И Не НайдПоле = Неопределено Тогда
	//		СписокПолейПоУмолчанию.Добавить(ТекЗнач, НайдПоле.Заголовок);
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СписокПолейПоУмолчанию;
	
КонецФункции

Процедура ИнициализацияОтчетаТонкийКлиент(ТекОбъект, ТекФорма, НастраиватьКнопкиПериода = Истина) Экспорт
	
	ЭтоРасшифровка = ТекОбъект.Отчет.ЭтоРасшифровка;//ТекОбъект.ЭтоРасшифровка;
	
	//ТекОбъект.ДатаНачала = ТекущаяДата();
	//ТекОбъект.ДатаОкончания = ТекущаяДата();
	//СоздатьПредопределенныеНастройкиОтчета(ТекОбъект);
	//
	//УстановитьПредопределеннуюНастройку(ТекОбъект);
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементСтруктураОтчета = ТекФорма.Элементы.Найти("СтруктураОтчета");
	Если Не ЭлементСтруктураОтчета = Неопределено Тогда

		СписокПолейПоУмолчанию = Новый СписокЗначений;//ПолучитьСписокПолейГруппировокОтчетаПоУмолчанию(ТекОбъект);
		
		ТекПериодичность = ТекФорма.Элементы.Найти("Периодичность");
		Если Не ТекПериодичность = Неопределено Тогда
			СписокВыбора = ТекПериодичность.СписокВыбора;
			
			СписокВыбора.Добавить("", "За период отчета");
			ТекФорма.Отчет.Периодичность = "";
			
			СписокПолейПериод = Новый Структура("ПериодМесяц, ПериодДень, ПериодНеделя, ПериодКвартал, ПериодГод");
			ДоступныеПоля = ТекОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы;
			Для каждого ТекЗнач Из СписокПолейПериод Цикл
				НайдПоле = ДоступныеПоля.Найти(ТекЗнач.Ключ);
				Если Не НайдПоле = Неопределено Тогда
					СписокВыбора.Добавить(ТекЗнач.Ключ, НайдПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ТекПоле Из СписокПолейПоУмолчанию Цикл
				СписокВыбора.Добавить(ТекПоле.Значение, ТекПоле.Представление);
			КонецЦикла;
			
			Для каждого ТекПоле Из ДоступныеПоля Цикл
				Если Не ТекПоле.Ресурс И СписокВыбора.НайтиПоЗначению(Строка(ТекПоле.Поле)) = Неопределено Тогда
					СписокВыбора.Добавить(Строка(ТекПоле.Поле), ТекПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			СписокВыбора.СортироватьПоЗначению();
			
		КонецЕсли;
		
		Периодичность = Неопределено;
		КомпоновкаДанныхСервер.ПреобразоватьНастройкиОтчетаКТабличномуВиду(ТекОбъект, ТекОбъект.КомпоновщикНастроек.Настройки, ТекОбъект.СтруктураОтчетаТаблица, Периодичность, Истина, СписокПолейПоУмолчанию);
		
		ТекФорма.Отчет.Периодичность = Периодичность;
		
			
	КонецЕсли;
	
	КомпоновкаДанныхСервер.СоздатьПредопределенныеНастройкиОтчета(ТекОбъект);
	
	Если НЕ ЭтоРасшифровка Тогда
		
		ПереноситьОтбор = Неопределено;
		ТекОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ПереноситьОтбор", ПереноситьОтбор);
		Если ПереноситьОтбор = Неопределено Тогда
			ПереноситьОтбор = Истина;
		КонецЕсли;
		
		КомпоновкаДанныхСервер.УстановитьПредопределеннуюНастройку(ТекОбъект, , , ПереноситьОтбор);
		ЗаполнитьЗначенияРеквизитовОтчетаПоУмолчанию(ТекОбъект);
		
		Если ТекОбъект.ОтображатьТаблицуСтруктурыНастроек Тогда
			ТекФорма.ПодробноНажатиеСервер("ПодробноОтключить");
		Иначе
			ТекФорма.ПодробноНажатиеСервер("ПодробноВключить");
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НастраиватьКнопкиПериода Тогда
		
		ЕстьПериод = Истина;//ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодОтчета", ТекОбъект.Метаданные());
		Если НЕ ЗначениеЗаполнено(ТекОбъект.ДатаНачала) Тогда
			ТекОбъект.ДатаНачала = ТекущаяДата();
			ТекОбъект.ДатаОкончания = ТекущаяДата();
			
			Если ЕстьПериод Тогда
				ТекОбъект.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
				ТекОбъект.ПериодОтчета.ДатаНачала = ТекущаяДата();
				ТекОбъект.ПериодОтчета.ДатаОкончания = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьПериод Тогда
			
			ДобавитьКнопкуСКомандойНаФорму(ТекФорма, "ЭтотМесяц", "ЭтотМесяц"	, "Текущий месяц"	, "ПериодОтчетаНажатие", ТекФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ТекФорма, "Сегодня"	, "Сегодня"		, "Сегодня"			, "ПериодОтчетаНажатие", ТекФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ТекФорма, "Вчера"	, "Вчера"		, "Вчера"			, "ПериодОтчетаНажатие", ТекФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ТекФорма, "СНачалаЭтогоМесяца", "СНачалаЭтогоМесяца", "С начала этого месяца", "ПериодОтчетаНажатие", ТекФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ТекФорма, "СНачалаЭтойНедели", "СНачалаЭтойНедели", "С начала этой недели", "ПериодОтчетаНажатие", ТекФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ТекФорма, "ПрошлыйМесяц", "ПрошлыйМесяц", "Прошлый месяц", "ПериодОтчетаНажатие", ТекФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ТекФорма, "ПрошлаяНеделя", "ПрошлаяНеделя", "Прошлая неделя", "ПериодОтчетаНажатие", ТекФорма.Элементы.Период);
			
			ТекОбъект.ДатаНачала = ТекОбъект.ПериодОтчета.ДатаНачала;
			ТекОбъект.ДатаОкончания = ТекОбъект.ПериодОтчета.ДатаОкончания;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовОтчетаПоУмолчанию(ТекОбъект) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекОбъект.ПериодОтчета.Вариант) Тогда
		ТекОбъект.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиСтруктуруОтборовМеждуНастройками(НастройкиИсточник,НастройкиПолучатель) Экспорт
	Попытка
		ОтборыИсточник 		= НастройкиИсточник.Отбор.Элементы;
	Исключение
		ОтборыИсточник 		= НастройкиИсточник.Элементы;
	КонецПопытки;
	Попытка
		ОтборыПолучатель 	= НастройкиПолучатель.Отбор.Элементы;
	Исключение
		ОтборыПолучатель 	= НастройкиПолучатель.Элементы;
	КонецПопытки;
	
	ОтборыПолучатель.Очистить();
	Для Каждого ТекОтбор Из ОтборыИсточник Цикл
		НовОтбор = ОтборыПолучатель.Добавить(ТипЗнч(ТекОтбор));
		ЗаполнитьЗначенияСвойств(НовОтбор,ТекОтбор);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьОтборыВНастройку(ТаблицаОтборов,ТекНастройки) Экспорт
	Если ТаблицаОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ТаблицаОтборов) = Тип("ОтборКомпоновкиДанных") Тогда
		ПеренестиСтруктуруОтборовМеждуНастройками(ТаблицаОтборов,ТекНастройки);
		
	//ИначеЕсли ТипЗнч(ТаблицаОтборов) = Тип("ТаблицаЗначений") Тогда
	//	Для каждого Стр Из ТаблицаОтборов Цикл
	//		УстановитьЗначениеОтбора(ТекНастройки, Стр.ИмяПоля, Стр.Значение);
	//	КонецЦикла;
		
	ИначеЕсли ТипЗнч(ТаблицаОтборов) = Тип("Структура") Тогда
		Для каждого Стр Из ТаблицаОтборов Цикл
			УстановитьЗначениеОтбора(ТекНастройки, Стр.Ключ, Стр.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция УстановитьЗначениеОтбора(ТекОбъект, ИмяОтбора, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	Если ТипЗнч(ТекОбъект) = Тип("ДинамическийСписок") Тогда
		КоллекцияОтборов = ТекОбъект.Отбор.Элементы;
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("НастройкиКомпоновкиДанных") Тогда
		КоллекцияОтборов = ТекОбъект.Отбор.Элементы;
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ОтборКомпоновкиДанных") Тогда
		КоллекцияОтборов = ТекОбъект.Элементы;
	Иначе
		КоллекцияОтборов = ТекОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	КонецЕсли;
	
	// Ищем
	ИскомыйОтбор = Неопределено;
	Для Каждого ТекОтбор Из КоллекцияОтборов Цикл
		Если Строка(ТекОтбор.ЛевоеЗначение) = ИмяОтбора Тогда
			ИскомыйОтбор = ТекОтбор;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИскомыйОтбор = Неопределено Тогда // Если нету
		ИскомыйОтбор = КоллекцияОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИскомыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОтбора);
	КонецЕсли;
	// Заполняем
	ИскомыйОтбор.Использование  = Использование;
	ИскомыйОтбор.ВидСравнения   = ВидСравнения;
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		ИскомыйОтбор.ПравоеЗначение = Новый Массив;
		Для Каждого ТекЗначение Из Значение Цикл
			ИскомыйОтбор.ПравоеЗначение.Добавить(ТекЗначение);
		КонецЦикла;
	Иначе
		ИскомыйОтбор.ПравоеЗначение = Значение;
	КонецЕсли;
	Возврат ИскомыйОтбор;
КонецФункции

Процедура ОткрытьСформироватьОтчет(ИмяОтчета,ИмяВарианта,ДатаНачала,ДатаОкончания,Отборы) Экспорт
	Форма =  ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма.ФормаОтчета");
	Форма.Открыть();
	
	Форма.Отчет.СохраненнаяНастройка = КомпоновкаДанныхСервер.НайтиПредопределенныйВариантВСохраненных(ИмяОтчета,ИмяВарианта);
	
	Форма.Отчет.ДатаНачала 		= ДатаНачала;
	Форма.Отчет.ДатаОкончания 	= ДатаОкончания;
	
	Форма.ПрименитьНастройкуСервер(Форма.Отчет.СохраненнаяНастройка, Ложь);;
	
	КомпоновкаДанныхКлиент.ЗагрузитьОтборыВНастройку(Отборы,Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор);
	
	Форма.Сформировать(Неопределено);
КонецПроцедуры

Функция ОбработкаРасшифровкиТиповогоОтчета(ДанныеРасшифровки, Расшифровка, СтандартнаяОбработка, ФормаОтчета) Экспорт

    СтандартнаяОбработка 		= Ложь;
 
    ИсточникДоступныхНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(ФормаОтчета.Отчет);
    ОбработкаРасшифровки 		= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	СтрокаПропуска 				= "----------------------------------------------------------------";
	ДополнительныеДействия 		= Новый СписокЗначений;
	ТипЗначения 				= "";
	ВидЗначения					= "";
	ЭтоГруппировкаСРегистратором= Ложь;
	
	ЗначениеРасшифровки = КомпоновкаДанныхСервер.ЗначениеРасшифровки(ДанныеРасшифровки, Расшифровка, ТипЗначения, ВидЗначения, ЭтоГруппировкаСРегистратором);
	
	//Если ЗначениеЗаполнено(ФормаОтчета.Отчет.НастройкаСистемыОтчет) Тогда
		ДополнительныеДействия.Добавить("ОткрытьЗначение", "Открыть """ + ЗначениеРасшифровки + """");
		Если ТипЗначения = "Справочник" или ТипЗначения = "Документ" Тогда
			ДополнительныеДействия.Добавить("ОткрытьЗначениеВСписке", "Открыть """ + ЗначениеРасшифровки + """ в списке");
		КонецЕсли;
	//КонецЕсли;
	
	Если ТипЗначения = "Документ" Тогда
		ДополнительныеДействия.Добавить("Пропуск",СтрокаПропуска);
		ДополнительныеДействия.Добавить("ДвиженияДокумента","Движения документа");
		ДополнительныеДействия.Добавить("ПодчиненныеДокументы","Подчиненные документы");
		ДополнительныеДействия.Добавить("ПровестиДокумент","Провести документ");
		//ДополнительныеДействия.Добавить("ОткрытьДокументВСписке","Открыть документ в списке");
		Если ВидЗначения = "упЗадача" Тогда
			МассивСпринтов = 
			ДополнительныеДействия.Добавить("УстановитьСпринт","Установить спринт");
		КонецЕсли;
		ДополнительныеДействия.Добавить("Пропуск",СтрокаПропуска);
	КонецЕсли;
	
	Если Не ЭтоГруппировкаСРегистратором Тогда
		//И ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти("Регистратор") <> Неопределено Тогда
		
		ДополнительныеДействия.Добавить("Пропуск",СтрокаПропуска);
		ДополнительныеДействия.Добавить("РасшифроватьПоРегистраторам", "Расшифровать по регистраторам");
		ДополнительныеДействия.Добавить("Перепровести", "Провести регистраторы");
		ДополнительныеДействия.Добавить("ПерепровестиБезусловно", "Провести регистраторы (пропускать непроведенные)");
		ДополнительныеДействия.Добавить("Пропуск",СтрокаПропуска);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Расшифровка", Расшифровка);
	ДопПараметры.Вставить("ДанныеРасшифровки"	, ДанныеРасшифровки);
	ДопПараметры.Вставить("ЗначениеРасшифровки"	, ЗначениеРасшифровки);
	ДопПараметры.Вставить("ФормаОтчета"			, ФормаОтчета);
	
    Оповещение = Новый ОписаниеОповещения("РезультатОбработкаРасшифровкиОбработатьВыбор", КомпоновкаДанныхКлиент, ДопПараметры);
    ОбработкаРасшифровки.ПоказатьВыборДействия(Оповещение, Расшифровка, , ДополнительныеДействия);	
			
КонецФункции

Функция ВернутьМассивДокументовДляПерепроведения(КомпоновщикНастроек, ДанныеРасшифровки, Расшифровка, Отчет, ИмяОтчета) Экспорт
	
	//ИсточникДоступныхНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет);
	//ОбработкаРасшифровки 		= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	//ИсходныеНастройки 			= КомпоновщикНастроек.ПолучитьНастройки();
	//
	//ЕстьРегистратор = Ложь;
	//ЕстьDocument 	= Ложь;
	//
	//Для Каждого ТекГруппировка из ИсходныеНастройки.ДоступныеПоляГруппировок.Элементы Цикл
	//	ТекПолеСтрокой = Строка(ТекГруппировка.Поле);
	//	Если ТекПолеСтрокой = "Регистратор" Тогда
	//		ЕстьРегистратор = Истина;
	//	ИначеЕсли ТекПолеСтрокой = "Document" Тогда
	//		ЕстьDocument = Истина;
	//	КонецЕсли; 
	//КонецЦикла;

	//Если НЕ ЕстьРегистратор и НЕ ЕстьDocument Тогда
	//	Сообщить("ВНИМАНИЕ! Не найдено группировки Регистратор!");
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//ИмяПоляРегистратора = ?(ЕстьРегистратор, "Регистратор", "Document");
	//ПолеРегистратора 	= Новый ПолеКомпоновкиДанных(ИмяПоляРегистратора);
	//
	//НастройкиПоВыбранномуПолю = ОбработкаРасшифровки.Расшифровать(Расшифровка, ПолеРегистратора);	
	//
	//темпОтчет = Отчеты[ИмяОтчета].Создать();
	//СхемаКомпоновкиДанных = темпОтчет.СхемаКомпоновкиДанных;
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиПоВыбранномуПолю, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//
	//тз = Новый ТаблицаЗначений;
	//тз.Колонки.Добавить("Регистратор");
	//тз.Колонки.Добавить("Дата");
	//тз.Колонки.Добавить("МоментВремени");
	//
	//ПроцессорВывода.УстановитьОбъект(тз);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//МассивУдаляемыхСтрок = Новый Массив;
	//
	//Для Каждого Строка Из тз Цикл
	//	
	//	ТекРегистратор = Строка[ИмяПоляРегистратора];
	//	
	//	Если Не ЗначениеЗаполнено(ТекРегистратор) Тогда
	//		
	//		МассивУдаляемыхСтрок.Добавить(Строка);
	//		
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	Попытка
	//		Строка.МоментВремени = ТекРегистратор.МоментВремени();
	//	Исключение 
	//		МассивУдаляемыхСтрок.Добавить(Строка);	
	//	КонецПопытки;
	//	
	//КонецЦикла;	
	//
	//Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
	//	тз.Удалить(Строка);
	//КонецЦикла;	
	//
	//тз.Сортировать("МоментВремени", Новый СравнениеЗначений);
	//
	//массивРегистраторов = тз.ВыгрузитьКолонку(ИмяПоляРегистратора);
	//
	//Возврат массивРегистраторов;
	
КонецФункции

Процедура ОткрытьФормуБазовогоОтчетаСНастройкойОтчета(НастройкаОтчета) Экспорт
	
	Параметры 			= Новый Структура("НастройкаСистемыОтчет", НастройкаОтчета);
	
	ФормаБазовогоОтчета	= ПолучитьФорму("Отчет.БазовыйОтчет.Форма.ФормаОтчета", Параметры, , Новый УникальныйИдентификатор);
	ФормаБазовогоОтчета.НастройкаСистемыОтчетПриИзменении(Неопределено);
	ФормаБазовогоОтчета.Открыть();
	
	ФормаБазовогоОтчета.Элементы.НастройкаСистемыОтчет.ТолькоПросмотр 	= Истина;
	ФормаБазовогоОтчета.Элементы.НастройкаСистемыОтчет.КнопкаОткрытия 	= Ложь;
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровкиОбработатьВыбор(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт

	Если ВыполненноеДействие = "ОткрытьЗначение" Тогда
		
		ПоказатьЗначение(, ДополнительныеПараметры.ЗначениеРасшифровки);
		
	ИначеЕсли ВыполненноеДействие = "ОткрытьЗначениеВСписке" Тогда
		
		ТекРасшифровка 			= ДополнительныеПараметры.ЗначениеРасшифровки;
		ИмяФормыСписка 			= КомпоновкаДанныхСервер.ПолучитьИмяФормыСпискаПоДокументу(ТекРасшифровка);
		ПараметрыОткрытия 		= Новый Структура("ТекущаяСтрока", ТекРасшифровка);
		ОткрытьФорму(ИмяФормыСписка, ПараметрыОткрытия, , КомпоновкаДанныхСервер.ВернутьGUIDОбъекта(ТекРасшифровка));
		
	ИначеЕсли ВыполненноеДействие = "РасшифроватьПоРегистраторам" Тогда
		
		Отчет = ДополнительныеПараметры.ФормаОтчета.Отчет; 
		
		Если Отчет.НастройкаСистемыОтчет.Пустая() Тогда
			ИсточникДоступныхНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет);
		Иначе
			АдресСКД = КомпоновкаДанныхСервер.ПолучитьСхемуКомпоновкиДанныхИзНастройкиОтчета(Отчет.НастройкаСистемыОтчет);
			//Отчет.НастройкаСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
			ИсточникДоступныхНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		КонецЕсли;
		
		НовыеНастройкиКомпоновкиДанных 								= РасшифроватьПоРегистраторам(ДополнительныеПараметры.ФормаОтчета.Отчет.КомпоновщикНастроек, ДополнительныеПараметры.ДанныеРасшифровки, ДополнительныеПараметры.Расшифровка, ИсточникДоступныхНастроек, Отчет.НастройкаСистемыОтчет);
		
		Если НовыеНастройкиКомпоновкиДанных = Неопределено Тогда
			Сообщить("Ошибка формирования расшифровки по регистраторам!");
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("НастройкаСистемыОтчет", Отчет.НастройкаСистемыОтчет);
		ФормаРасшифровки 											= ПолучитьФорму("Отчет." + ДополнительныеПараметры.ФормаОтчета.ИмяОтчета + ".Форма.ФормаОтчета", СтруктураПараметров, , Новый УникальныйИдентификатор);
		
		//Если НЕ Отчет.НастройкаСистемыОтчет.Пустая() Тогда
		//	
		//	ФормаРасшифровки.Отчет.НастройкаСистемыОтчет			= Отчет.НастройкаСистемыОтчет;
		//	//ФормаРасшифровки.Вставить("НастройкаСистемыОтчет", Отчет.НастройкаСистемыОтчет);
		//	ФормаРасшифровки.НастройкаСистемыОтчетПриИзменении(Неопределено);
		//	
		//	
		//КонецЕсли;
		
		ФормаРасшифровки.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКомпоновкиДанных);
		
		ФормаРасшифровки.Отчет.ДатаНачала 							= ДополнительныеПараметры.ФормаОтчета.Отчет.ДатаНачала;
		ФормаРасшифровки.Отчет.ДатаОкончания 						= ДополнительныеПараметры.ФормаОтчета.Отчет.ДатаОкончания;
		
		ПериодОтчета												= Новый СтандартныйПериод;
		ПериодОтчета.Вариант 										= ВариантСтандартногоПериода.ПроизвольныйПериод;
		ПериодОтчета.ДатаНачала 									= ФормаРасшифровки.Отчет.ДатаНачала;
		ПериодОтчета.ДатаОкончания 									= КонецДня(ФормаРасшифровки.Отчет.ДатаОкончания);
		
		ФормаРасшифровки.Отчет.ПериодОтчета 						= ПериодОтчета;
		
		ФормаРасшифровки.ДанныеРасшифровки 							= Неопределено;
		ФормаРасшифровки.Отчет.ОтображатьТаблицуСтруктурыНастроек 	= ДополнительныеПараметры.ФормаОтчета.Отчет.ОтображатьТаблицуСтруктурыНастроек;
		ФормаРасшифровки.Отчет.Периодичность 						= ДополнительныеПараметры.ФормаОтчета.Отчет.Периодичность;
		
		Если ФормаРасшифровки.Отчет.ОтображатьТаблицуСтруктурыНастроек Тогда
			
			ТекОтчет = ФормаРасшифровки.Отчет;
			ПреобразоватьНастройкиОтчетаКТабличномуВиду(ТекОтчет);
			КопироватьДанныеФормы(ТекОтчет, ФормаРасшифровки.Отчет);

			УстановитьВидимостьСтруктурыОтчета(ФормаРасшифровки);
			
		КонецЕсли;
		
		ФормаРасшифровки.ДополнительныеСвойства.Вставить("ЭтоРасшифровка", Истина);
		ФормаРасшифровки.Открыть();
		Сформировать(ФормаРасшифровки);
		ФормаРасшифровки.ДополнительныеСвойства.Удалить("ЭтоРасшифровка");
		
		Возврат;
		
	ИначеЕсли ВыполненноеДействие = "ДвиженияДокумента" Тогда
		
		//ЭтоПроведенныйДокумент 	= Ложь;
		ТекРасшифровка 			= ДополнительныеПараметры.ЗначениеРасшифровки;
		Если НЕ ЗначениеЗаполнено(ТекРасшифровка) Тогда
			Сообщить("Документ не найден!",СтатусСообщения.ОченьВажное);
			Возврат;
		//ИначеЕсли НЕ ЭтоПроведенныйДокумент Тогда
		//	Сообщить("Документ не проведен!",СтатусСообщения.ОченьВажное);
		//	Возврат;
		КонецЕсли;
	
		ПараметрыФормы = Новый Структура("ДокументДвижений", ТекРасшифровка);
		Попытка
			ОткрытьФорму("Обработка.КорректировкаДвижений.Форма",ПараметрыФормы, , );
		Исключение
			ОткрытьФорму("Обработка.ИнструментПросмотрДвиженийДокумента.Форма",ПараметрыФормы, , );
		КонецПопытки;
			
	ИначеЕсли ВыполненноеДействие = "ПодчиненныеДокументы" Тогда
		
		ТекРасшифровка 			= ДополнительныеПараметры.ЗначениеРасшифровки;
		
		Если НЕ ЗначениеЗаполнено(ТекРасшифровка) Тогда
			Сообщить("Документ не найден!",СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;
		
		КомпоновкаДанныхКлиент.ОткрытьСтруктуруПодчиненности(ТекРасшифровка, Неопределено);
		
	ИначеЕсли ВыполненноеДействие = "ПровестиДокумент" Тогда
		
		ТекРасшифровка 		= ДополнительныеПараметры.ЗначениеРасшифровки;
		
		МассивДокументов 	= Новый Массив;
		МассивДокументов.Добавить(ТекРасшифровка);
		МассивНепроведенных = КомпоновкаДанныхСервер.ПровестиМассивДокументов(МассивДокументов);
		Если МассивНепроведенных.Количество() > 0 Тогда
			Сообщить("Не проведен документ " + МассивНепроведенных[0].Ссылка + ": " + МассивНепроведенных[0].ОписаниеОшибки, СтатусСообщения.ОченьВажное);
		КонецЕсли;		
		
	ИначеЕсли ВыполненноеДействие = "ОткрытьДокументВСписке" Тогда
		
		ТекРасшифровка 			= ДополнительныеПараметры.ЗначениеРасшифровки;
		ИмяФормыСписка 			= КомпоновкаДанныхСервер.ПолучитьИмяФормыСпискаПоДокументу(ТекРасшифровка);
		ПараметрыОткрытия 		= Новый Структура("ТекущаяСтрока", ТекРасшифровка);
		ОткрытьФорму(ИмяФормыСписка, ПараметрыОткрытия, , КомпоновкаДанныхСервер.ВернутьGUIDОбъекта(ТекРасшифровка));
		
	ИначеЕсли ВыполненноеДействие = "Перепровести" или ВыполненноеДействие = "ПерепровестиБезусловно" Тогда
		
		Отчет = ДополнительныеПараметры.ФормаОтчета.Отчет; 
		//МассивДокументовДляПерепроведения = общКомпоновкаДанныхСервер.ВернутьМассивДокументовДляПерепроведения(ДополнительныеПараметры.ФормаОтчета.Отчет.КомпоновщикНастроек, ДополнительныеПараметры.ДанныеРасшифровки, ДополнительныеПараметры.Расшифровка, Отчет, ДополнительныеПараметры.ФормаОтчета.ИмяОтчета);
		МассивДокументовДляПерепроведения = КомпоновкаДанныхСервер.ВернутьМассивДокументовДляПерепроведения(ДополнительныеПараметры.ФормаОтчета.Отчет.КомпоновщикНастроек, ДополнительныеПараметры.ДанныеРасшифровки, ДополнительныеПараметры.Расшифровка, Отчет, ДополнительныеПараметры.ФормаОтчета.ИмяОтчета, Отчет.НастройкаСистемыОтчет);
		
		Параметры = Новый Структура("МассивДокументовДляПерепроведения, АвтостартПроведенияПриОткрытии, ПропускатьНепроведенные", МассивДокументовДляПерепроведения, Истина, ВыполненноеДействие = "ПерепровестиБезусловно");
		
		Форма = ПолучитьФорму("Обработка.ИнструментПроведениеДокументов.Форма.ПроведениеДокументов", Параметры, ДополнительныеПараметры.ФормаОтчета, Новый УникальныйИдентификатор);
		Форма.Открыть();
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрВыполненногоДействия) Тогда 
	
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
            ПоказатьЗначение(,ПараметрВыполненногоДействия);
		Иначе
			Отчет = ДополнительныеПараметры.ФормаОтчета.Отчет;
			НовыеНастройкиКомпоновкиДанных = КомпоновкаДанныхСервер.ПрименитьНастройкиКомпоновкиДанных(Отчет, ДополнительныеПараметры.ДанныеРасшифровки, ДополнительныеПараметры.Расшифровка, ПараметрВыполненногоДействия);
			ДополнительныеПараметры.ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКомпоновкиДанных);
			Сформировать(ДополнительныеПараметры.ФормаОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьУровеньГруппировкиОтчета(ЭтаФорма,Команда) Экспорт
	
	ИмяОтчета = Лев(Команда.Имя,СтрНайти(Команда.Имя,"ПоказатьУровень")-1);
	
	ЭтаФорма[ИмяОтчета + "Результат"].ПоказатьУровеньГруппировокСтрок(Число(СтрЗаменить(Команда.Имя,ИмяОтчета + "ПоказатьУровень","")) - 1);
	
КонецПроцедуры

Процедура ИзменитьПериодОтчета(ЭтаФорма,ИмяКоманды) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	Структура = Новый Структура("ДатаНачала,ДатаОкончания,ПериодОтчета");
	ЗаполнитьЗначенияСвойств(Структура,Отчет);
	
	Как 								= ?(ИмяКоманды = "МесяцНазад",-1,1);
	Отчет.ДатаНачала 					= НачалоМесяца(ДобавитьМесяц(Отчет.ДатаНачала,Как));
	Отчет.ДатаОкончания 				= КонецМесяца(Отчет.ДатаНачала);
	Отчет.ПериодОтчета.Вариант 			= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Отчет.ПериодОтчета.ДатаНачала 		= Отчет.ДатаНачала;
	Отчет.ПериодОтчета.ДатаОкончания 	= Отчет.ДатаОкончания;
	
	//ЗаполнитьЗначенияСвойств(Отчет,Структура);
	
КонецПроцедуры

Процедура УстановитьВидимостьСтруктурыОтчета(ЭтаФорма) Экспорт
	
	Если ЭтаФорма.Отчет.ОтображатьТаблицуСтруктурыНастроек Тогда
		ЭтаФорма.Элементы.СтруктураОтчета.Видимость 		= Ложь;
		ЭтаФорма.Элементы.СтруктураОтчетаТаблица.Видимость 	= Истина;
		ЭтаФорма.Элементы.Периодичность.Видимость 			= Истина;
	Иначе
		ЭтаФорма.Элементы.СтруктураОтчета.Видимость 		= Истина;
		ЭтаФорма.Элементы.СтруктураОтчетаТаблица.Видимость 	= Ложь;
		ЭтаФорма.Элементы.Периодичность.Видимость 			= Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку(ЭтаФорма,СтруктураНастроек) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.СохранениеНастроек", Новый Структура("ИмяОтчета, ТекНастройка, СтруктураНастроек, НастройкаСистемыОтчет", ЭтаФорма.ИмяОтчета, ЭтаФорма.Отчет.СохраненнаяНастройка, СтруктураНастроек, ?(ЭтаФорма.Отчет.Свойство("НастройкаСистемыОтчет"), ЭтаФорма.Отчет.НастройкаСистемыОтчет, Неопределено)), ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Функция ВернутьСтруктуруНастроекОтчета(ЭтаФорма, НастройкаСсылка) Экспорт
		
	Отчет			= ЭтаФорма.Отчет;
	
	МассивИменРеквизитов = КомпоновкаДанныхСервер.ВернутьМассивИменРеквизитовОтчета(ЭтаФорма.ИмяОтчета); 
	
	ОтчетСтруктура 	= Новый Структура;
	Для Каждого Реквизит Из МассивИменРеквизитов Цикл
		ОтчетСтруктура.Вставить(Реквизит, Отчет[Реквизит]);	
	КонецЦикла;	
	
	ОтчетСтруктура.Вставить("КомпоновщикНастроек", Отчет["КомпоновщикНастроек"]);
	
	Отчет.СохраненнаяНастройка = НастройкаСсылка;
	
	СтруктураНастроек = КомпоновкаДанныхСервер.ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетСтруктура);
	КомпоновкаДанныхСервер.СохранитьНастройкуОбъекта(Отчет.СохраненнаяНастройка, СтруктураНастроек);
	
	Возврат СтруктураНастроек;
	
КонецФункции	

Процедура ПослеСохраненияНастроекОтчета(Результат, Параметры) Экспорт
	Если Результат <> Неопределено Тогда
		СтруктураНастроекОтчета = ВернутьСтруктуруНастроекОтчета(Параметры.Форма, Результат);
		КомпоновкаДанныхСервер.СохранитьНастройкуОбъекта(Результат, СтруктураНастроекОтчета);
		Параметры.Форма.Элементы.СохраненныеНастройки.Обновить();
	КонецЕсли;	
КонецПроцедуры	

Функция ЭтоСохранениеНастроекОтчета(ИсточникВыбора) Экспорт
	
	Если ТипЗнч(ИсточникВыбора)  = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.СохранениеНастроек" Тогда
		
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

Процедура ПриОткрытииФормыОтчета(ЭтаФорма, Отказ) Экспорт
	
	Если ЭтаФорма.Отчет.МоиНастройки Тогда
		ЭтаФорма.Отчет.МоиНастройки = Ложь;
		МоиНастройки(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура МоиНастройки(ЭтаФорма) Экспорт
	
	ЭлементОтбора 	= Неопределено;
	ПолеОтбора 		= Новый ПолеКомпоновкиДанных("Автор");
	Для каждого ТекОтбор Из ЭтаФорма.СохраненныеНастройки.Отбор.Элементы Цикл
		Если ТипЗнч(ТекОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") И ТекОтбор.ЛевоеЗначение = ПолеОтбора Тогда
			ЭлементОтбора = ТекОтбор;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора 					= ЭтаФорма.СохраненныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ЛевоеЗначение 	= ПолеОтбора;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение 	= ФормыСервер.ВычислитьНаСервере("ПараметрыСеанса.ТекущийПользователь");
	Иначе
		ЭлементОтбора.Использование 	= Не ЭлементОтбора.Использование;
	КонецЕсли;
	
	ЭтаФорма.Отчет.МоиНастройки 			= ЭлементОтбора.Использование; 
	ЭтаФорма.Элементы.МоиНастройки.Пометка 	= ЭтаФорма.Отчет.МоиНастройки;
	
КонецПроцедуры

Процедура ДобавитьКнопкиУровней(ЭтаФорма) Экспорт
	
	Попытка
		ИмяРеквизитаРезультата = ЭтаФорма.ИмяРеквизитаРезультата;
	Исключение
		ИмяРеквизитаРезультата = "Результат";
	КонецПопытки;
	
	ПоказатьКоличествоКнопок = ЭтаФорма[ИмяРеквизитаРезультата].КоличествоУровнейГруппировокСтрок();
	Для Н = 1 по ПоказатьКоличествоКнопок Цикл
		УстановитьВидимостьРеквизита(ЭтаФорма, "Уровень" + Н, Истина);
	КонецЦикла;
	Для Н = ПоказатьКоличествоКнопок + 1 по 10 Цикл
		УстановитьВидимостьРеквизита(ЭтаФорма, "Уровень" + Н, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьВсеПоля(ЭтаФорма, ИмяКоманды) Экспорт
	Как = ИмяКоманды = "ПометитьВсеПоля";
	Для каждого ТекСтрока Из ЭтаФорма.Отчет.СтруктураОтчетаТаблица Цикл
		ТекСтрока.Использование = Как;
	КонецЦикла;
КонецПроцедуры

Процедура ОтключитьОчиститьОтборыИерархически(КолллекцияЭлементов, РежимОчистки = Ложь) Экспорт
	
	Для каждого ТекЭлемент Из КолллекцияЭлементов.Элементы Цикл
		
		ТекЭлемент.Использование = Ложь;
		
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОтключитьОчиститьОтборыИерархически(ТекЭлемент, РежимОчистки);
		ИначеЕсли РежимОчистки Тогда
			ТекЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлемент.ПравоеЗначение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоле(ЭтаФорма) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура("КомпоновщикНастроек, АдресДереваДоступныхПолей", ЭтаФорма.Отчет.КомпоновщикНастроек, ЭтаФорма.АдресДереваДоступныхПолей);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоляКомпоновщикаНастроекУправляемая", ПараметрыОткрытияФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура СохраненныеНастройкиВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЭтаФорма.Отчет.СохраненнаяНастройка = ВыбраннаяСтрока;
	
	ЭтаФорма.СохраненныеНастройки.Параметры.УстановитьЗначениеПараметра("ТекущаяНастройка", ВыбраннаяСтрока);
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновкаДанныхСервер.ПрименитьСохраненнуюНастройку( Отчет, ЭтаФорма.ИмяОтчета);
	
	УстановитьВидимостьСтруктурыОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ПолучитьНастройкиОтчетаПоТаблицеНастроек(ОтчетОбъект, ФормаОтчета, РежимУФ = Ложь) Экспорт
	
	Если Не РежимУФ И ФормаОтчета.Элементы.Найти("СтруктураОтчетаТаблица") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РежимУФ Тогда
		ТекНастройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	Иначе
		ТекНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	ТекНастройки.Структура.Очистить();
	
	Если ЗначениеЗаполнено(ФормаОтчета.Отчет.Периодичность) Тогда
		
		ТекСтрукТаблица = ТекНастройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		ТекСтрукТаблица.Использование = Истина;
		
		НоваяГруппировкаКолонка = ТекСтрукТаблица.Колонки.Добавить();
		НоваяГруппировкаКолонка.Использование = Истина;
		НовоеПолеГруппировки = НоваяГруппировкаКолонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПолеГруппировки.Использование = Истина;
		НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ФормаОтчета.Отчет.Периодичность);
		НоваяГруппировкаКолонка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НоваяГруппировкаКолонка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		ТекРодитель = ТекСтрукТаблица.Строки;
	Иначе
		
		ТекРодитель = ТекНастройки.Структура;
		
	КонецЕсли;
	
	Для каждого ТекСтрока Из ОтчетОбъект.СтруктураОтчетаТаблица Цикл
		
		Если Не ТекСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекРодитель) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Или ТипЗнч(ТекРодитель) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			НоваяГруппировка = ТекРодитель.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Иначе
			НоваяГруппировка = ТекРодитель.Добавить();
		КонецЕсли;
		
		НоваяГруппировка.Использование = ТекСтрока.Использование;
		
		СтрокаСпискаПолей = ТекСтрока.Поле;
		Пока Не ПустаяСтрока(СтрокаСпискаПолей) Цикл
			
			ПозицияРазделителя = Найти(СтрокаСпискаПолей, ",");
			Если ПозицияРазделителя = 0 Тогда
				ТекПолеПолное = СтрокаСпискаПолей;
				СтрокаСпискаПолей = "";
			Иначе
				ТекПолеПолное = Лев(СтрокаСпискаПолей, ПозицияРазделителя - 1);
				СтрокаСпискаПолей = Сред(СтрокаСпискаПолей, ПозицияРазделителя + 1);
			КонецЕсли;
			
			НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			Если Не Найти(ТекПолеПолное, "%ТИ") = 0 Тогда
				НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			ИначеЕсли Не Найти(ТекПолеПолное, "%И") = 0 Тогда
				НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			Иначе
				НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Если Не Найти(ТекПолеПолное, "%П") = 0 Тогда
				НовоеПолеГруппировки.Использование = Истина;
			Иначе
				НовоеПолеГруппировки.Использование = Ложь;
			КонецЕсли;
			
			ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%ТИ", "");
			ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%И", "");
			ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%П", "");
			
			НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ТекПолеПолное);
			
		КонецЦикла;
		
		НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		Если НоваяГруппировка.Использование Тогда
			ТекРодитель = НоваяГруппировка.Структура;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РежимУФ Тогда
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура Сформировать(ЭтаФорма) Экспорт
	
	ЭтаФорма.Отчет.ДатаНачала 		= ЭтаФорма.Отчет.ПериодОтчета.ДатаНачала;
	ЭтаФорма.Отчет.ДатаОкончания 	= ЭтаФорма.Отчет.ПериодОтчета.ДатаОкончания;
	
	Если ЭтаФорма.Отчет.ОтображатьТаблицуСтруктурыНастроек ТОгда
		ПолучитьНастройкиОтчетаПоТаблицеНастроек(ЭтаФорма.Отчет, ЭтаФорма, Истина);
	КонецЕсли;
		
	ЭтаФорма.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
	
	ДобавитьКнопкиУровней(ЭтаФорма);
	
	ЭтаФорма.Элементы.Панель.ТекущаяСтраница 										= ЭтаФорма.Элементы.РезультатФормирования;
	ЭтаФорма.Элементы.Результат.ОтображениеСостояния.Видимость 						= Ложь;
	ЭтаФорма.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	
КонецПроцедуры

Процедура Редактировать(ЭтаФорма) Экспорт
	
	ЭтаФорма.Элементы.Редактировать.Пометка 	= Не ЭтаФорма.Элементы.Редактировать.Пометка;
	ЭтаФорма.Элементы.Результат.ТолькоПросмотр 	= Не ЭтаФорма.Элементы.Редактировать.Пометка;
	ЭтаФорма.Элементы.Результат.Редактирование 	= ЭтаФорма.Элементы.Редактировать.Пометка;
	
КонецПроцедуры

Процедура Заголовки(ЭтаФорма) Экспорт
	
	ЭтаФорма.Элементы.Заголовки.Пометка 			= Не ЭтаФорма.Элементы.Заголовки.Пометка;
	ЭтаФорма.Элементы.Результат.ОтображатьЗаголовки = ЭтаФорма.Элементы.Заголовки.Пометка;
	
КонецПроцедуры

Процедура Сетка(ЭтаФорма) Экспорт
	
	ЭтаФорма.Элементы.Сетка.Пометка 				= Не ЭтаФорма.Элементы.Сетка.Пометка;
	ЭтаФорма.Элементы.Результат.ОтображатьСетку 	= ЭтаФорма.Элементы.Сетка.Пометка;
	
КонецПроцедуры

Процедура Портрет(ЭтаФорма) Экспорт
	
	Если ЭтаФорма.Элементы.Портрет.Картинка = БиблиотекаКартинок.ПереключательВключен Тогда
		ЭтаФорма.Элементы.Портрет.Картинка 	= БиблиотекаКартинок.ПереключательВыключен;
		ЭтаФорма.Элементы.Ландшафт.Картинка = БиблиотекаКартинок.ПереключательВключен;
		ТекОриентация 						= ОриентацияСтраницы.Ландшафт;
	Иначе
		ЭтаФорма.Элементы.Портрет.Картинка 	= БиблиотекаКартинок.ПереключательВключен;
		ЭтаФорма.Элементы.Ландшафт.Картинка = БиблиотекаКартинок.ПереключательВыключен;
		ТекОриентация 						= ОриентацияСтраницы.Портрет;
	КонецЕсли;
	
	ЭтаФорма.Результат.ОриентацияСтраницы 	= ТекОриентация;
	
КонецПроцедуры

Процедура Ландшафт(ЭтаФорма) Экспорт
	
	Если ЭтаФорма.Элементы.Ландшафт.Картинка 	= БиблиотекаКартинок.ПереключательВключен Тогда
		ЭтаФорма.Элементы.Ландшафт.Картинка 	= БиблиотекаКартинок.ПереключательВыключен;
		ЭтаФорма.Элементы.Портрет.Картинка 		= БиблиотекаКартинок.ПереключательВключен;
		ТекОриентация 							= ОриентацияСтраницы.Портрет;
	Иначе
		ЭтаФорма.Элементы.Ландшафт.Картинка 	= БиблиотекаКартинок.ПереключательВключен;
		ЭтаФорма.Элементы.Портрет.Картинка 		= БиблиотекаКартинок.ПереключательВыключен;
		ТекОриентация 							= ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	
	ЭтаФорма.Результат.ОриентацияСтраницы 		= ТекОриентация;
	
КонецПроцедуры

Процедура ПодробноНажатиеСервер(ЭтаФорма, ИмяКоманды) Экспорт
	
КонецПроцедуры

Процедура ПодробноНажатие(ЭтаФорма, ИмяКоманды) Экспорт
	
	ЭтаФорма.Отчет.ОтображатьТаблицуСтруктурыНастроек = НЕ ЭтаФорма.Отчет.ОтображатьТаблицуСтруктурыНастроек;
	УстановитьВидимостьСтруктурыОтчета(ЭтаФорма);
	
КонецПроцедуры

Процедура ПериодОтчетаНажатие(ЭтаФорма, ИмяКоманды) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	
	Если ИмяКоманды = "Вчера" Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Вчера;
	ИначеЕсли ИмяКоманды = "Сегодня" Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
	ИначеЕсли ИмяКоманды = "ЭтотМесяц" Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	ИначеЕсли ИмяКоманды = "ПрошлыйМесяц" Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	ИначеЕсли ИмяКоманды = "ПрошлаяНеделя" Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя;
	ИначеЕсли ИмяКоманды = "СНачалаЭтогоМесяца" Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца;
	ИначеЕсли ИмяКоманды = "СНачалаЭтойНедели" Тогда
		Отчет.ПериодОтчета.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели;
	КонецЕсли;
	
	Отчет.ДатаНачала 			= Отчет.ПериодОтчета.ДатаНачала;
	Отчет.ДатаОкончания 		= Отчет.ПериодОтчета.ДатаОкончания;
	Отчет.ПериодОтчета.Вариант 	= ВариантСтандартногоПериода.ПроизвольныйПериод;
	
КонецПроцедуры

Функция  СтруктураОтчетаТаблицаВыборЗавершение(ЭтаФорма, Результат1, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	РезультатОткрытия = Результат1;
	
	УдалитьИзВременногоХранилища(ЭтаФорма.АдресДереваДоступныхПолей);
	
	Возврат РезультатОткрытия;

КонецФункции

Процедура ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	Если ЭтоСохранениеНастроекОтчета(ИсточникВыбора) Тогда
		ЭтаФорма.Элементы.СохраненныеНастройки.Обновить();
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьСтруктуруПодчиненности(Ссылка, ФормаВладелец) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		Выполнить("РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка)");
		Возврат;
	Исключение КонецПопытки;
	ОткрытьФорму("ОбщаяФорма.ФормаСтруктурыПодчиненности", Новый Структура("ДокументСсылка", Ссылка),
	ФормаВладелец,
	Новый УникальныйИдентификатор,
	Неопределено);
		
КонецПроцедуры

// Возвращает последний элемент структуры - группировку
Функция ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки = Истина) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции


// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	ЭлементСтруктуры = Неопределено;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
		//ли ЭлементСтруктуры = Неопределено ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено И Поле = Неопределено Тогда
		Если ЭлементСтруктуры = Неопределено ИЛИ Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
		тогда
		Если ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") тогда 
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Строки; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Колонки; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Серии; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Точки; 
			КонецЕсли;
		Иначе
			ЭлементСтруктуры = КомпоновщикНастроек; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

Функция НайтиГруппировкуДляРегистратора(ТекущаяГруппировка, ПолеРегистратора)
	
	
	Если ТипЗнч(ТекущаяГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или ТипЗнч(ТекущаяГруппировка) = Тип("ГруппировкаКомпоновкиДанных")Тогда
		
		Если НЕ ТекущаяГруппировка.Использование Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьИспользуемыеПоля = Ложь;
	
		Для Каждого ПолеГруппировки Из ТекущаяГруппировка.ПоляГруппировки.Элементы Цикл
			
			Если НЕ ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолеГруппировки.Поле = ПолеРегистратора Тогда
				ПолеГруппировки.Использование = Ложь;
				//ТекущаяГруппировка.Использование = Истина;
				ЕстьГруппировкаРегистратора = Истина;
				Прервать;
			Иначе
				ЕстьИспользуемыеПоля = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьИспользуемыеПоля Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТекущаяГруппировка.Структура.Количество() = 0 Тогда 
			Возврат ТекущаяГруппировка;
		КонецЕсли;			
		
		Для Н = 1 по ТекущаяГруппировка.Структура.Количество() Цикл
			ПоследняяГруппировка = НайтиГруппировкуДляРегистратора(ТекущаяГруппировка.Структура[Н - 1], ПолеРегистратора);
			Если ПоследняяГруппировка <> Неопределено Тогда
				Возврат ПоследняяГруппировка;
			Иначе
				Возврат ТекущаяГруппировка;
			КонецЕсли;
		КонецЦикла;
			
		//ПоследняяГруппировка =  ТекущаяГруппировка = ТекущаяГруппировка.Структура[0];
		
	ИначеЕсли ТипЗнч(ТекущаяГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Если НЕ ТекущаяГруппировка.Использование Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТекущаяГруппировка.Строки.Количество() = 0 Тогда
			НижняяГруппировка = ТекущаяГруппировка;
			Возврат Неопределено;
		КонецЕсли;
		
		Для Н = 1 по ТекущаяГруппировка.Строки.Количество() Цикл
			ПоследняяГруппировка = НайтиГруппировкуДляРегистратора(ТекущаяГруппировка.Строки[Н - 1], ПолеРегистратора);
			Если ПоследняяГруппировка <> Неопределено Тогда
				Возврат ПоследняяГруппировка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		//ТекущаяГруппировка = ТекущаяГруппировка.Строки[0];
		
	КонецЕсли;
		
КонецФункции

Функция РасшифроватьПоРегистраторам(Знач КомпоновщикНастроек, ДанныеРасшифровки, Расшифровка, ИсточникДоступныхНастроек, НастройкаСистемыОтчет = Неопределено) Экспорт
	
	Попытка
		ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);	
	Исключение
		Возврат КомпоновкаДанныхСервер.РасшифроватьПоРегистраторам(КомпоновщикНастроек, ДанныеРасшифровки, Расшифровка, ИсточникДоступныхНастроек, НастройкаСистемыОтчет);
	КонецПопытки;
	
	ВременныйКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	ИсходныеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//ИсходныеНастройки.ДоступныеПоляГруппировок.Элементы
	
	ЕстьРегистратор = Ложь;
	ЕстьDocument 	= Ложь;
	Для Каждого ТекГруппировка из ИсходныеНастройки.ДоступныеПоляГруппировок.Элементы Цикл
		ТекПолеСтрокой = Строка(ТекГруппировка.Поле);
		Если ТекПолеСтрокой = "Регистратор" Тогда
			ЕстьРегистратор = Истина;
		ИначеЕсли ТекПолеСтрокой = "Document" Тогда
			ЕстьDocument = Истина;
		КонецЕсли; 
	КонецЦикла;

	Если НЕ ЕстьРегистратор и НЕ ЕстьDocument Тогда
		Сообщить("ВНИМАНИЕ! Не найдено группировки Регистратор!");
		Возврат Неопределено;
	КонецЕсли;
	
	ПолеРегистратора 	= Новый ПолеКомпоновкиДанных(?(ЕстьРегистратор, "Регистратор", "Document"));
	
	ВременныйКомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровкиОбъект.Настройки);//ИсходныеНастройки);
	
	НастройкиДляИзменения = ВременныйКомпоновщикНастроек.Настройки;
	
	Для Ном = 0 по НастройкиДляИзменения.Структура.Количество() - 1 Цикл
		
		ПоследняяГруппировка = НайтиГруппировкуДляРегистратора(НастройкиДляИзменения.Структура[Ном], ПолеРегистратора);
		Если ПоследняяГруппировка <> Неопределено Тогда
			ДобавитьГруппировку(ПоследняяГруппировка, ПолеРегистратора);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущаяГруппировка 	= НастройкиДляИзменения.Структура[0];
	НижняяГруппировка 	= ТекущаяГруппировка;
	
	//ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	// получаем правильные отборы:
	
	НастройкиПоВыбранномуПолю = ОбработкаРасшифровки.Расшифровать(Расшифровка, ПолеРегистратора);
	                           
	НастройкиДляИзменения.Отбор.Элементы.Очистить();	
	// помещаем отборы в родительскую структуру
	
	Для Каждого ЭлементОтбора Из НастройкиПоВыбранномуПолю.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ИмяОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			
			Если ИмяОтбора = "Номенклатура.ФорматированныйКод" или ИмяОтбора = "Пусто" Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйЭлемент = НастройкиДляИзменения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
		
	КонецЦикла;	
	
	Возврат НастройкиДляИзменения;
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить


Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ДоступноеПоле = Коллекция.Элементы.Найти(Поле);
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
		
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПолеПредставлениеСтрокиТаблицыНастроек(ОтчетОбъект, ТекГруппировка, ТекСтрока, СписокПолейПоУмолчанию)
	
	СтрокаПолей = "";
	СтрокаПредставления = "";
	
	ТекИерархия = Неопределено;
	КвоИспользование = 0;
	
	Для каждого Стр Из ТекГруппировка.ПоляГруппировки.Элементы Цикл
		
		ТекПоле = Строка(Стр.Поле);
		
		НайдЗнач = СписокПолейПоУмолчанию.НайтиПоЗначению(ТекПоле);
		Если Не НайдЗнач = Неопределено Тогда
			СписокПолейПоУмолчанию.Удалить(НайдЗнач);
		КонецЕсли;
		
		ТекПредставление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ТекПоле));
		
		ТекИерархия = Стр.ТипГруппировки;
		
		Если Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			ТекПоле = ТекПоле + "%ТИ";
			ТекПредставление = ТекПредставление + " (Только группы)";
		ИначеЕсли Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
			ТекПоле = ТекПоле + "%И";
			ТекПредставление = ТекПредставление + " (С группами)";
		КонецЕсли;
		Если Стр.Использование Тогда
			КвоИспользование = КвоИспользование + 1;
			ТекПоле = ТекПоле + "%П";
		Иначе
			ТекПредставление = "";
		КонецЕсли;
		
		СтрокаПолей = СтрокаПолей + "," + ТекПоле;
		Если Не ПустаяСтрока(ТекПредставление) Тогда
			СтрокаПредставления = СтрокаПредставления + ", " + ТекПредставление;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КвоИспользование = 1 Тогда
		
		Если Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			ТекСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия");
		ИначеЕсли Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
			ТекСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Иерархия");
		Иначе
			ТекСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.ТипДетализацииСтандартныхОтчетов.Элементы");// ФормыСервер.ВычислитьНаСервере("Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы");
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПолей = Сред(СтрокаПолей, 2);
	СтрокаПредставления = Сред(СтрокаПредставления, 3);
	
	ТекСтрока.Поле = СтрокаПолей;
	ТекСтрока.Представление = СтрокаПредставления;
	
КонецПроцедуры

Процедура ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, КоллекцияНастроек, СписокПолейПоУмолчанию)
	Для каждого ТекГруппировка Из КоллекцияНастроек Цикл
		Если ТипЗнч(ТекГруппировка) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, ТекГруппировка, СписокПолейПоУмолчанию);
		ИначеЕсли Не (ТипЗнч(ТекГруппировка) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ТекГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда
			ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, ТекГруппировка.Строки, СписокПолейПоУмолчанию);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 				= Отчет.СтруктураОтчетаТаблица.Добавить();
		НоваяСтрока.Использование 	= ТекГруппировка.Использование;// И ТекИспользование;
		
		УстановитьПолеПредставлениеСтрокиТаблицыНастроек(Отчет, ТекГруппировка, НоваяСтрока, СписокПолейПоУмолчанию);
		
		ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, ТекГруппировка.Структура, СписокПолейПоУмолчанию);
		
	КонецЦикла;
КонецПроцедуры

Процедура ПреобразоватьНастройкиОтчетаКТабличномуВиду(Отчет) Экспорт
	
	ТаблицаНастроек = Отчет.СтруктураОтчетаТаблица;
	ТаблицаНастроек.Очистить();
	
	СписокПолейПоУмолчанию = ПолучитьСписокПолейГруппировокОтчетаПоУмолчанию(Отчет);
	
	НастройкиОтчета = Отчет.КомпоновщикНастроек.Настройки;
	
	НашлиПериодичность = Ложь;
	Если НастройкиОтчета.Структура.Количество() > 0 и ТипЗнч(НастройкиОтчета.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		КоллекцияНастроек = НастройкиОтчета.Структура[0].Строки;
		
		КолонкиСтруктуры = НастройкиОтчета.Структура[0].Колонки; 
		
		Для каждого ТекКолонка Из КолонкиСтруктуры Цикл	
			
			Если Не ТекКолонка.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ПолеГруппировки Из ТекКолонка.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки.Использование И ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					Отчет.Периодичность = Строка(ПолеГруппировки.Поле);
					НашлиПериодичность = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НашлиПериодичность Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		КоллекцияНастроек = НастройкиОтчета.Структура;
	КонецЕсли;
	
	Если Не НашлиПериодичность Тогда
		Отчет.Периодичность = "";
	КонецЕсли;	
	ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, КоллекцияНастроек, СписокПолейПоУмолчанию);
	
	Для каждого ЭлементСписка Из СписокПолейПоУмолчанию Цикл
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.Использование = Ложь;
		НоваяСтрока.Поле = ЭлементСписка.Значение + "%П";
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СкдВывестиКакТекст(Значение) Экспорт

	Возврат Строка(Значение);

КонецФункции // СкдВывестиКакТекст()

Процедура ВычислитьСуммуВыделенныхЯчеек(ЭтаФорма) Экспорт	
	
	СуммаВыделенныхЯчеек = 0; 
	
	Для Каждого ТекОбласть Из ЭтаФорма.Результат.ВыделенныеОбласти Цикл
		СуммаВЯчейках = 0;
		Для ИндексСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ИндексКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Попытка
					Ячейка = ЭтаФорма.Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							ЧислоВЯчейке  = Вычислить("Число(СтрЗаменить(Ячейка.Текст, Символ(32), Символ(0)))");
							СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
						КонецЕсли;
					КонецЕсли;
				Исключение КонецПопытки;	
			КонецЦикла;
		КонецЦикла;
		СуммаВыделенныхЯчеек = СуммаВыделенныхЯчеек + СуммаВЯчейках;
	КонецЦикла;
	
	Если ТипЗнч(ЭтаФорма) = Тип("ЭлементыФормы") Тогда
		ЭтаФорма.СуммаВыделенныхЯчеек.Значение = СуммаВыделенныхЯчеек;
	Иначе
		ЭтаФорма.СуммаВыделенныхЯчеек = СуммаВыделенныхЯчеек;
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФормуВыбораСпринта(Задача, ЭтаФорма)
 
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("РежимВыбора"			, Истина);
	//ПараметрыФормы.Вставить("МножественныйВыбор"	, Ложь);
	//ПараметрыФормы.Вставить("Задача"				, Задача);

	////ОбработкаВыбора = Новый ОписаниеОповещения("общКомпоновкаДанныхКлиент.ПриЗакрытииФормыВыбораСпринта", ЭтаФорма,"ПодборРеализации");

	////ОткрытьФорму("Справочник.упСпринтыПроектов.ФормаВыбора",ПараметрыФормы, ЭтаФорма, , , , ОбработкаВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//ОткрытьФорму("Справочник.упСпринтыПроектов.ФормаВыбора",ПараметрыФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

Процедура ПериодОтчетаПриИзменении(ЭтаФорма, Элемент) Экспорт
	
	Отчет 		= ЭтаФорма.Отчет;
	Структура 	= Новый Структура("ДатаНачала,ДатаОкончания");
	ЗаполнитьЗначенияСвойств(Отчет, Отчет.ПериодОтчета);
	
КонецПроцедуры

Функция ПостроитьПроверкуОстатков(Дата, Склад, Номенклатура) Экспорт
	
	//ФормаОтчета = ПолучитьФорму("Отчет.Запасы.Форма.ФормаОтчета");
	//
	//ФормаОтчета.Отчет.СохраненнаяНастройка = КомпоновкаДанныхСервер.НайтиПредопределенныйВариантВСохраненных("Запасы", "ПроверкаОстатков");
	//ФормаОтчета.ПрименитьНастройкуСервер(ФормаОтчета.Отчет.СохраненнаяНастройка, Ложь);
	//
	//КоллекцияОтборов = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
	//
	//УстановитьЗначениеОтбора(КоллекцияОтборов,"Склад", Склад);
	//УстановитьЗначениеОтбора(КоллекцияОтборов,"Номенклатура", Номенклатура);
	//
	//ФормаОтчета.Отчет.ДатаНачала 	= Дата;
	//ФормаОтчета.Отчет.ДатаОкончания = Дата;
	//ФормаОтчета.Отчет.ПериодОтчета.ДатаНачала 	 = Дата;
	//ФормаОтчета.Отчет.ПериодОтчета.ДатаОкончания = Дата;
	//
	//ФормаОтчета.Сформировать(Неопределено);
	//ФормаОтчета.Открыть();
	
КонецФункции