// Функция формирует представление периода по дате начала и дате окончания.
//
// Параметры
//  ДатаНачала	   – Дата – дата начала периода.
//  ДатаОкончания  – Дата – дата окончания периода.
//  ДатаНачала	   – Булево – признак того, что описание периода будет сформирован 
//					 без указания чисел месяца.
//
// Возвращаемое значение:
//   Строка   – строковое представление периода.
//
Функция ОписаниеПериода(ДатаНач, ДатаКон, КодЯзыка = "", ПроверятьФинНедели = Ложь) Экспорт
	
	ОписаниеПериода = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина;Л=" + КодЛокализации());//КодЯзыкаИнтерфейса() );
	
	Возврат ОписаниеПериода;
	
КонецФункции	// ОписаниеПериода 

//Функция РазностьДат(Дата1, Дата2) Экспорт
//	
//	Возврат (НачалоДня(Дата2) - НачалоДня(Дата1))/86400;
//	
//КонецФункции

Процедура УстановитьПараметрДанных(ТекОбъект, ИмяПараметра,ТекЗначение,Использование = Истина) Экспорт
	
	Если ТипЗнч(ТекОбъект) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ТекПараметр					= ТекОбъект.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
		
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДинамическийСписок") Тогда
		
		ТекПараметр					= ТекОбъект.Параметры.Элементы.Найти(ИмяПараметра);
		
	Иначе
		
		ТекПараметр					= ТекОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
		
	КонецЕсли;
	
	Если Не ТекПараметр = Неопределено Тогда
		
		ТекПараметр.Значение 		= ТекЗначение;
		ТекПараметр.Использование 	= Использование;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокОтчета(ТекОбъект,ТекстЗаголовка) Экспорт
	ЗаголовокОтчета 					= ТекОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	ЗаголовокОтчета.Значение 			= ТекстЗаголовка;
	ЗаголовокОтчета.Использование 		= Истина;
КонецПроцедуры

Процедура УстановитьФорматПоля(ТекОбъект,ИмяНабораДанных,ИмяПараметра,ФорматПараметра,ЭтоВычисляемоеПоле) Экспорт
	Если НЕ ЭтоВычисляемоеПоле Тогда
		НаборПолей 				= ТекОбъект.СхемаКомпоновкиДанных.НаборыДанных.Найти(ИмяНабораДанных).Поля;
	Иначе
		НаборПолей 				= ТекОбъект.СхемаКомпоновкиДанных.ВычисляемыеПоля;
	КонецЕсли;
	
	ТекПоле 					= НаборПолей.Найти(ИмяПараметра);
	Если ТекПоле = Неопределено Тогда
		Сообщить("Ошибка установки формата для параметра """ + ИмяПараметра + """: параметр не найден",СтатусСообщения.Внимание);
	КонецЕсли;
	ФорматПоля 					= ТекПоле.Оформление.Элементы.Найти("Формат");
	ФорматПоля.Значение 		= ФорматПараметра;
	ФорматПоля.Использование 	= Истина;
КонецПроцедуры

Процедура УстановитьПредставлениеПоляКомпоновщика(ТекНаборДанных,ИмяПараметра,ПредставлениеПараметра) Экспорт
	ТекПоле 					= ТекНаборДанных.Поля.Найти(ИмяПараметра);
	ТекПоле.Заголовок 		= ПредставлениеПараметра;
КонецПроцедуры

Процедура УбратьОтборПоНепустымРесурсам(Настройки) Экспорт
	Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Непустые ресурсы" Тогда
			Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			Возврат;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция ЭтоЭлементРегистратор(Знач ИмяГруппировки)
	
	Если ТипЗнч(ИмяГруппировки) <> Тип("Строка") Тогда
		ИмяГруппировки = Строка(ИмяГруппировки);
	КонецЕсли;
	
	Возврат Найти(ИмяГруппировки,"Реєстратор") <> 0 или Найти(ИмяГруппировки,"Регистратор") <> 0;
	
КонецФункции

Процедура ОбработатьЗаполнениеРегистратора(НастройкиСтруктура) Экспорт
	Для каждого ТекСтруктура Из НастройкиСтруктура Цикл
		Если ТипЗнч(ТекСтруктура) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ВариантСтруктуры = 1;
			ИмяГруппировки = Строка(ТекСтруктура.ПоляГруппировки);
		ИначеЕсли ТипЗнч(ТекСтруктура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			ВариантСтруктуры = 2;
			ИмяГруппировки = Строка(ТекСтруктура.ПоляГруппировки);
		ИначеЕсли ТипЗнч(ТекСтруктура) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ВариантСтруктуры = 3;
			ОбработатьЗаполнениеРегистратора(ТекСтруктура.Строки);
		Иначе
			Сообщить("Ошибка обработки заполнения регистратора в отчете: группировка неописанного типа: " + ТипЗнч(ТекСтруктура),СтатусСообщения.ОченьВажное);
			ВариантСтруктуры = 4;
			Продолжить;
		КонецЕсли;
		Если ЭтоЭлементРегистратор(ИмяГруппировки) Тогда
			//Сообщить(ТипЗнч(ТекСтруктура.Родитель));
			Если ТипЗнч(ТекСтруктура.Родитель) = Тип("НастройкиКомпоновкиДанных") //или 
				//		ТипЗнч(ТекСтруктура.Родитель) = Тип("ТаблицаКомпоновкиДанных") или
				//		ТипЗнч(ТекСтруктура.Родитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
				Тогда
				// Это первая группировка, нужно сохранить остатки
				ПолеПорядка = ТекСтруктура.Родитель.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных("Регистратор.Дата");
				ПолеПорядка.Использование = Истина;
				
				Возврат; // в этом случае группировка по регистратору находится в корне настройки
			КонецЕсли;
			ЕстьОтборРегистраторЗаполнено = Ложь;
			Для Каждого ТекОтбор Из ТекСтруктура.Отбор.Элементы Цикл
				Если ЭтоЭлементРегистратор(ТекОтбор.ЛевоеЗначение) и 
					ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено и 
					ТекОтбор.Использование 
					Тогда
					ЕстьОтборРегистраторЗаполнено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьОтборРегистраторЗаполнено Тогда
				ТекОтбор = ТекСтруктура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ТекОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
				ТекОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
				ТекОтбор.Использование = Истина;
			КонецЕсли;
			Для Каждого ТекОформление Из ТекСтруктура.ПараметрыВывода.Элементы Цикл
				Если Строка(ТекОформление.Параметр) = "ВыводитьОтбор" Тогда
					ТекОформление.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
					ТекОформление.Использование = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ОбработатьЗаполнениеРегистратора(ТекСтруктура.Структура);
		Исключение
			ОбработатьЗаполнениеРегистратора(ТекСтруктура.Строки);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьОтборНепустогоРесурса(ОтборГруппаИЛИ_ПоРесурсам, ВыбранноеПоле)
	Если ТипЗнч(ВыбранноеПоле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Для каждого ПодчПоле Из ВыбранноеПоле.Элементы Цикл
			Если Не ПодчПоле.Использование Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьОтборНепустогоРесурса(ОтборГруппаИЛИ_ПоРесурсам, ПодчПоле);
		КонецЦикла;
	Иначе
		//Сообщить("Непустое: " + ВыбранноеПоле.Поле);   
		Если ТипЗнч(ВыбранноеПоле) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Возврат;
		КонецЕсли;
		
		ПолеСтрокой = Строка(ВыбранноеПоле.Поле);
		Если Не (Найти(ПолеСтрокой, "Процент") = 0 И Найти(ПолеСтрокой, "Цена") = 0 И Найти(ПолеСтрокой, "Разность") = 0) Тогда
			Возврат;
		КонецЕсли;
		Если ПустаяСтрока(ПолеСтрокой) Тогда
			Возврат;
		КонецЕсли;
		НовыйОтбор 					= ОтборГруппаИЛИ_ПоРесурсам.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование 	= Истина;
		НовыйОтбор.ЛевоеЗначение 	= ВыбранноеПоле.Поле;
		НовыйОтбор.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокРесурсовОстатков(СхемаОтчета) Экспорт
	
	СписокВозврата = Новый Массив;
	
	Для каждого НаборДанных Из СхемаОтчета.НаборыДанных Цикл
		
		Для каждого ТекПоле Из НаборДанных.Поля Цикл
			
			Если ТипЗнч(ТекПоле) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				
				Если ТекПоле.Роль.Остаток И СписокВозврата.Найти(ТекПоле.Поле) = Неопределено Тогда
					СписокВозврата.Добавить(ТекПоле.Поле);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокВозврата;
	
КонецФункции

Функция ПроверитьЕстьЛиГруппировкаПериод(СтруктураНастройки)
	ЕстьПериод = Ложь;
	Для Каждого ТекСтруктура Из СтруктураНастройки Цикл
		Если ТипЗнч(ТекСтруктура) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ЕстьПериод = Найти(Строка(ТекСтруктура.ПоляГруппировки),"Период") <> 0;
			Если НЕ ЕстьПериод Тогда
				ЕстьПериод = ПроверитьЕстьЛиГруппировкаПериод(ТекСтруктура.Структура);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтруктура) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Для Каждого ТекКолонка Из ТекСтруктура.Колонки Цикл
				ЕстьПериод = Найти(Строка(ТекСтруктура.Колонки[0].ПоляГруппировки),"Период") <> 0;
				Если ЕстьПериод Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			//Для Каждого ТекКолонка Из ТекСтруктура.Строки[0].Структура[0] Цикл
			//	ЕстьПериод = Найти(Строка(ТекКолонка.Имя),"Период") <> 0;
			//	Если ЕстьПериод Тогда
			//		Прервать;
			//	КонецЕсли;
			//КонецЦикла;
			//Настройки.Структура[1].Строки[0].Структура[0]
		КонецЕсли;
		Если ЕстьПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьПериод;
КонецФункции

Процедура ДоработатьНастройки(Настройки, СписокРесурсовОстатков = Неопределено) Экспорт
	//ЕстьПериод = ПроверитьЕстьЛиГруппировкаПериод(Настройки.Структура);
	////Сообщить("Есть период: " + ЕстьПериод,СтатусСообщения.Внимание);
	//Если ЕстьПериод Тогда
	//	Возврат;
	//КонецЕсли; 
	
	//////ЕстьПериод = Ложь;
	//////// определим группировку с полем Периода, если такая есть
	//////ГруппировкаПериод = ОпределитьГруппировкуПериодВНастройке(Настройки.Структура, ЕстьПериод);
	//////
	//////Если ЕстьПериод Тогда
	//////	УбратьОтборПоНепустымРесурсам(Настройки);
	//////	НастройкиОтбора = ГруппировкаПериод;
	//////Иначе
		НастройкиОтбора = Настройки;
	//////КонецЕсли;
	
	УбратьОтборПоНепустымРесурсам(НастройкиОтбора);
	
	ОтборГруппаИЛИ_ПоРесурсам 				= НастройкиОтбора.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИЛИ_ПоРесурсам.Представление = "Непустые ресурсы";
	ОтборГруппаИЛИ_ПоРесурсам.Использование = Истина;
	ОтборГруппаИЛИ_ПоРесурсам.ТипГруппы 	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Для каждого ВыбранноеПоле Из Настройки.Выбор.Элементы Цикл // выбранные поля берем из настройки отчета!
		Если Не ВыбранноеПоле.Использование Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьОтборНепустогоРесурса(ОтборГруппаИЛИ_ПоРесурсам, ВыбранноеПоле);
	КонецЦикла;
	
	Если Не СписокРесурсовОстатков = Неопределено Тогда
		Если ОтборГруппаИЛИ_ПоРесурсам.Элементы.Количество() = 1 И Не СписокРесурсовОстатков.Найти(Строка(ОтборГруппаИЛИ_ПоРесурсам.Элементы.Получить(0).ЛевоеЗначение)) = Неопределено Тогда
			// нужно выключить использование регистратора
			ВыключитьИспользованиеРегистратора(НастройкиОтбора.Структура);
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьЗаполнениеРегистратора(НастройкиОтбора.Структура)
КонецПроцедуры

Процедура ВыключитьИспользованиеРегистратора(Структура)
	
	Для каждого ТекЭлемент Из Структура Цикл
		
		Если Не ТекЭлемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекЭлемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ВыключитьИспользованиеРегистратора(ТекЭлемент.Строки);
			
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппировкаКомпоновкиДанных")
			Или ТипЗнч(ТекЭлемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			Если Не Найти(Строка(ТекЭлемент.ПоляГруппировки), "Регистратор") = 0 Тогда
				ТекЭлемент.Использование = Ложь;
			КонецЕсли;
			
			ВыключитьИспользованиеРегистратора(ТекЭлемент.Структура);
			
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьГруппировкуПериодВНастройке(СтруктураНастройки, ЕстьПериод)
	
	Для Каждого ТекСтруктура Из СтруктураНастройки Цикл
		Если ТипЗнч(ТекСтруктура) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ЕстьПериод = Найти(Строка(ТекСтруктура.ПоляГруппировки),"Период") <> 0;
			Если ЕстьПериод Тогда
				Возврат ТекСтруктура;
			Иначе
				ТекГруппировка = ОпределитьГруппировкуПериодВНастройке(ТекСтруктура.Структура, ЕстьПериод);
				Если ЕстьПериод Тогда
					Возврат ТекГруппировка;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтруктура) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Для Каждого ТекКолонка Из ТекСтруктура.Колонки Цикл
				ЕстьПериод = Найти(Строка(ТекКолонка.ПоляГруппировки),"Период") <> 0;
				Если ЕстьПериод Тогда
					Возврат ТекКолонка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьВыводРеквизитовРаздельно(Настройки)
	Поле = Настройки.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	Поле.Использование = Истина;
	Поле.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
КонецПроцедуры

Процедура УстановитьПараметрВиджетаКомпоновки(Параметры, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	СтрокаПараметра 		= Параметры.Найти(ИмяПараметра, "Имя");
	Если СтрокаПараметра 	= Неопределено Тогда
		СтрокаПараметра 	= Параметры.Добавить();
		СтрокаПараметра.Имя = ИмяПараметра;
	КонецЕсли;
	СтрокаПараметра.Значение = ЗначениеПараметра;
	
КонецПроцедуры

Функция РассчитатьПараметрыВиджетаКомпоновки(ОтчетОбъект, СКД, НастройкиКомпоновщика) Экспорт
	
	НетОшибок = Истина;
	
	ВиджетСхемаКомпоновки 	= ОтчетОбъект.ВиджетСхемаКомпоновки;
	Параметры 				= ВиджетСхемаКомпоновки.Параметры.Выгрузить();

	Для Каждого ТекСтрока Из Параметры Цикл
		
		ТекЗначение = Неопределено;
		Если ОтчетОбъект.Свойство(ТекСтрока.Имя, ТекЗначение) Тогда
			Если ЗначениеЗаполнено(ТекЗначение) Тогда
				ТекСтрока.Значение = ТекЗначение;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Вычислять Тогда
			
			Результат = Неопределено;
			Попытка
				Выполнить(ТекСтрока.Значение);
				ТекСтрока.Значение = Результат;
			Исключение
				Сообщить("Ошибка вычисления параметра СКД " + ТекСтрока.Имя + " для СКД """ + ОтчетОбъект + """: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				НетОшибок = Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтчетОбъект.Свойство("ДатаНачала") и ОтчетОбъект.Свойство("ДатаОкончания") Тогда
		
		СтрокаПараметра 		= Параметры.Найти("НачалоПериода", "Имя");
		Если СтрокаПараметра 	= Неопределено Тогда
			СтрокаПараметра 	= Параметры.Добавить();
			СтрокаПараметра.Имя = "НачалоПериода";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
			СтрокаПараметра.Значение = ОтчетОбъект.ДатаНачала;
		Иначе
			ОтчетОбъект.ДатаНачала = СтрокаПараметра.Значение; 
		КонецЕсли;
		
		СтрокаПараметра 		= Параметры.Найти("КонецПериода", "Имя");
		Если СтрокаПараметра 	= Неопределено Тогда
			СтрокаПараметра 	= Параметры.Добавить();
			СтрокаПараметра.Имя = "КонецПериода";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаПараметра.Значение) Тогда
			СтрокаПараметра.Значение = ОтчетОбъект.ДатаОкончания;
		Иначе
			ОтчетОбъект.ДатаОкончания = СтрокаПараметра.Значение; 
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ОтчетОбъект.ВиджетСхемаКомпоновки.Наименование = "Account Recieveable Ageing" Тогда
	//	ВычислитьПараметрыОтчетаДебиторкиПоСрокам(ОтчетОбъект, Параметры);
	//КонецЕсли;
	
	Если НЕ ПустаяСтрока(ВиджетСхемаКомпоновки.КодПриВычисленииПараметров) Тогда
		Попытка
			Выполнить(ВиджетСхемаКомпоновки.КодПриВычисленииПараметров);
		Исключение
			Сообщить("Ошибка вычисления общего кода при вычислении параметров для СКД """ + ВиджетСхемаКомпоновки + """: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			НетОшибок = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если НетОшибок и НастройкиКомпоновщика <> Неопределено Тогда
		
		Для Каждого ТекСтрока Из Параметры Цикл
			
			УстановитьПараметрДанных(НастройкиКомпоновщика, ТекСтрока.Имя, ТекСтрока.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ?(НетОшибок, Параметры, Неопределено);
	
КонецФункции

Функция ВывестиОтчетПоКомпоновке(Отчет, ТабДок, ДанныеРасшифровки, МакетОформления = Неопределено, ОчищатьТаблицуРезультата = Истина, ИспользоватьДополнительныеОтборы = Истина, СтруктураВнешДанных = Неопределено, ВозможностьИспользованияВнешнихФункций = Истина, ВыводитьЗаголовок = Истина, УстанавливатьСортировкуНоменклатуры = Истина, ВывестиВТаблицуЗначений = Неопределено) Экспорт
	Перем НачалоОтсчетаВремени;
	
	Если НЕ ЗначениеЗаполнено(ВывестиВТаблицуЗначений) Тогда
		Если ТабДок.ТекущаяОбласть = Неопределено Тогда
			КоординатыТекущейОбласти = Неопределено;
		Иначе
			
			КоординатыТекущейОбласти = Новый Структура;
			
			КоординатыТекущейОбласти.Вставить("Лево", ТабДок.ТекущаяОбласть.Лево);
			КоординатыТекущейОбласти.Вставить("Право", ТабДок.ТекущаяОбласть.Право);
			КоординатыТекущейОбласти.Вставить("Верх", ТабДок.ТекущаяОбласть.Верх);
			КоординатыТекущейОбласти.Вставить("Низ", ТабДок.ТекущаяОбласть.Низ);
			
		КонецЕсли;
		
		Если ОчищатьТаблицуРезультата Тогда
			ТабДок.Очистить();
		КонецЕсли;
	КонецЕсли;

	#Если Клиент Тогда
		НачатьЗамерВремени(НачалоОтсчетаВремени);
		Если ТипЗнч(Отчет) = Тип("Форма") Тогда
			Попытка
				ОтчетОбъект = Отчет.ОтчетОбъект;
			Исключение
				ОтчетОбъект = Отчет.ОбработкаОбъект;
			КонецПопытки;
			
			Если Не Отчет.ЭлементыФормы.Найти("ПанельСтруктураОтчета") = Неопределено И Отчет.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = Отчет.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Таблица Тогда
				//ПолучитьНастройкиОтчетаПоТаблицеНастроек(ОтчетОбъект, Отчет);
				ПолучитьНастройкиОтчетаПоТаблицеНастроек(Отчет);
			КонецЕсли;
			
			ИспользоватьРасшифровку = Истина;
			
			Если Не Отчет.ЭлементыФормы.Найти("ИтогоПерваяКолонка") = Неопределено Тогда
				ИтогоПерваяКолонка = Отчет.ЭлементыФормы.ИтогоПерваяКолонка.Значение;
			Иначе
				ИтогоПерваяКолонка = Ложь;
			КонецЕсли;
			
		Иначе
			ОтчетОбъект 			= Отчет;
			ИспользоватьРасшифровку = Истина;
			ИтогоПерваяКолонка 		= Ложь;
		КонецЕсли;
		ЭтоВиджетСКД				= Ложь;
		СКД 						= ОтчетОбъект.СхемаКомпоновкиДанных;
		
	#Иначе
		
		ОтчетОбъект 				= Отчет;
		ЭтоВиджетСКД				= ТипЗнч(ОтчетОбъект) = Тип("Структура");
		Попытка
			ЭтоНастройкиСистемыОтчет 	= НЕ ОтчетОбъект.НастройкаСистемыОтчет.Пустая();
		Исключение
			ЭтоНастройкиСистемыОтчет 	= Ложь;
		КонецПопытки;
		
		Если ЭтоНастройкиСистемыОтчет Тогда
			//ОтчетОбъект.СхемаКомпоновкиДанных 	= ОтчетОбъект.НастройкаСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
		
		//	АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		//
		//	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		//	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
		//	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
			СКД 					= ОтчетОбъект.НастройкаСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
			//ОтчетОбъект = ЭтаФорма.РеквизитФормыВЗначение("Отчет");
			//СКД = ОтчетОбъект.СхемаКомпоновкиДанных;
			
		ИначеЕсли ЭтоВиджетСКД Тогда
			СКД = ОтчетОбъект.ВиджетСхемаКомпоновки.ХранилищеСхемыКомпоновки.Получить();
			
		Иначе
			СКД = ОтчетОбъект.СхемаКомпоновкиДанных;
		КонецЕсли;
		
		Если ТипЗнч(СКД) <> Тип("СхемаКомпоновкиДанных") Тогда
			Сообщить("Ошибка получения схемы компоновки данных");
			Возврат Ложь;
		КонецЕсли;
		
		ИспользоватьРасшифровку 	= НЕ ЗначениеЗаполнено(ВывестиВТаблицуЗначений);
		ИтогоПерваяКолонка 			= Ложь;
	#КонецЕсли
	
	//ДоработатьПредставлениеДокументовВСхемеКомпоновкиДанных(ОтчетОбъект);
	
	
	Если ЭтоНастройкиСистемыОтчет Тогда
		#Если ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеПриложение Тогда
			Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();//Настройки;
		#Иначе
			Настройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		#КонецЕсли
		
		УстановитьПериодОтчета(Настройки, ОтчетОбъект);
		Если ВыводитьЗаголовок Тогда
			ВывестиШапкуОтчета(Отчет, ТабДок,,, Настройки);
		КонецЕсли;
		
	ИначеЕсли ЭтоВиджетСКД  Тогда
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		тмп = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
		КомпоновщикНастроек.Инициализировать(тмп);
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		Настройки = КомпоновщикНастроек.Настройки;
		
		Если РассчитатьПараметрыВиджетаКомпоновки(ОтчетОбъект, СКД, Настройки) = Неопределено Тогда
			Сообщить("ВНИМАНИЕ! Ошибка формирования виджета СКД " + ОтчетОбъект.ВиджетСхемаКомпоновки, СтатусСообщения.ОченьВажное);
			Возврат Ложь;
		КонецЕсли;
		
		УстановитьПериодОтчета(Настройки, ОтчетОбъект);
		
		Если ВыводитьЗаголовок и НЕ ЗначениеЗаполнено(ВывестиВТаблицуЗначений) Тогда
			ВывестиШапкуОтчета(Отчет,ТабДок,,,Настройки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтчетОбъект.ВиджетСхемаКомпоновки.КодПриКомпоновкеРезультата) Тогда
			Попытка
				Выполнить(ОтчетОбъект.ВиджетСхемаКомпоновки.КодПриКомпоновкеРезультата);
			Исключение
				Сообщить("Ошибка вычисления кода при компоновке результата """ + ОтчетОбъект + """: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеПриложение Тогда
			Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();//Настройки;
		#Иначе
			Настройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
		#КонецЕсли
		
		УстановитьПериодОтчета(Настройки, ОтчетОбъект);
		Если ВыводитьЗаголовок Тогда
			ВывестиШапкуОтчета(Отчет, ТабДок,,, Настройки);
		КонецЕсли;
		
	КонецЕсли;
	
	КомпоновщикМакета 				= Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если МакетОформления = Неопределено Тогда
		МакетОформления = ПолучитьОбщийМакет("МакетОформленияОтчетовНаСКД");
	КонецЕсли;
	
	ПолеГруппировкиНоменклатуры = Неопределено;
	ДобавитьКодНоменклатуры(ОтчетОбъект, Настройки, ПолеГруппировкиНоменклатуры);
	
	СписокИзмерений = Новый Структура;
	СписокРесурсов 	= Новый Массив;
	ДеревоНастроек 	= Новый ДеревоЗначений;
	ДеревоНастроек.Колонки.Добавить("ИндексГруппировки", Новый ОписаниеТипов("Число"));
	ДеревоНастроек.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ДеревоНастроек.Колонки.Добавить("Группировка");
	
	ПолучитьДеревоНастроек(Настройки, ДеревоНастроек, СписокИзмерений, СписокРесурсов, Истина);
	
	УстановитьНастройкуПоложенияИтога(ОтчетОбъект, Настройки, ИтогоПерваяКолонка);
	
	УстановитьЦветаФонаУГруппировокОтчета(ОтчетОбъект, Настройки, ДеревоНастроек);
	//
	ВыделитьЖирнымШрифтомПервуюГруппировку(ОтчетОбъект, Настройки, ДеревоНастроек);
	//
	УстановитьЖирныйШрифтДляГрупп(ОтчетОбъект, Настройки);
	//
	УстановитьОтступы(Настройки, , ПолеГруппировкиНоменклатуры);
	
	УстановитьВыводРеквизитовРаздельно(Настройки);
	
	УстановитьЗаголовкиРесурсов(Настройки);
	
	Если ИспользоватьРасшифровку Тогда
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		ДанныеРасшифровки.Настройки 	= Настройки;
		
	КонецЕсли;
	
	Если ИспользоватьДополнительныеОтборы Тогда
		СписокРесурсовОстатков = ПолучитьСписокРесурсовОстатков(СКД);
		ДоработатьНастройки(Настройки, СписокРесурсовОстатков);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВывестиВТаблицуЗначений) Тогда
		
		МакетКД 			= КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки, МакетОформления, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКД 		= Новый ПроцессорКомпоновкиДанных;
		ПроцессорКД.Инициализировать(МакетКД);
		
		ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений 	= ?(ВывестиВТаблицуЗначений = "ДеревоЗначений", Новый ДеревоЗначений, Новый ТаблицаЗначений);
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКД);
		
		Возврат ТаблицаЗначений;
		
	КонецЕсли;
	
	Если ИспользоватьРасшифровку Тогда

		МакетКД 			= КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки,МакетОформления);
		ПроцессорКД 		= Новый ПроцессорКомпоновкиДанных;
		ПроцессорКД.Инициализировать(МакетКД, СтруктураВнешДанных,ДанныеРасшифровки, ВозможностьИспользованияВнешнихФункций);
		
	Иначе
		МакетКД 			= КомпоновщикМакета.Выполнить(СКД, Настройки, ,МакетОформления);
		
		ПроцессорКД 		= Новый ПроцессорКомпоновкиДанных;
		ПроцессорКД.Инициализировать(МакетКД, СтруктураВнешДанных, , ВозможностьИспользованияВнешнихФункций);
	КонецЕсли;
	
	ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	Попытка
		ПроцессорВывода.Вывести(ПроцессорКД);
	Исключение
		Если Найти(ОписаниеОшибки(),"Вывод прерван пользователем") <> 0 ТОгда
			Сообщить("Вывод прерван пользователем",СтатусСообщения.Важное);
		Иначе
			УбратьОтборПоНепустымРесурсам(Настройки);
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	НастроитьНижнийКолонтитулОтчета(ТабДок);
	
	УбратьОтборПоНепустымРесурсам(Настройки);
	
	ТабДок.Автомасштаб = Истина;
	
	УстановитьФиксациюОбластейОтчетаНаКомпоновке(ОтчетОбъект,Отчет,ТабДок);
	
КонецФункции

Функция ПолучитьИсточникДоступныхНастроек(ЭтаФорма) Экспорт
	
	ОтчетОбъект 		= ЭтаФорма.РеквизитФормыВЗначение("Отчет");
	
	Возврат Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных);
	
КонецФункции

Функция ПолучитьПолеРасшифровки(АдресРасшифровки, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры, ВозвращатьЗначение = Истина) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	
	Попытка
		ТекРасшифровка = ДанныеРасшифровки.Элементы[ДополнительныеПараметры].ПолучитьПоля()[0].Значение;
		ТекПоле = ДанныеРасшифровки.Элементы[ДополнительныеПараметры].ПолучитьПоля()[0].Поле;
	Исключение 
		ТекРасшифровка = Неопределено;
		ТекПоле = Неопределено;
	КонецПопытки;
	
	Возврат ?(ВозвращатьЗначение, ТекРасшифровка, Новый ПолеКомпоновкиДанных(ТекПоле));
	
КонецФункции

Функция ПолучитьИмяФормыСпискаПоДокументу(ТекРасшифровка) Экспорт

	МетаданныеДокумента = ТекРасшифровка.Метаданные();
	ИмяДокумента 		= МетаданныеДокумента.Имя;
	ИмяФормы 			= МетаданныеДокумента.ОсновнаяФормаСписка.Имя;
	
	Если ЭтоДокумент(ТекРасшифровка) Тогда
		Возврат "Документ." + ИмяДокумента + ".Форма." + ИмяФормы;
	Иначе
		Возврат "Справочник." + ИмяДокумента + ".Форма." + ИмяФормы;
	КонецЕсли;

КонецФункции

Функция ПолучитьНастройкиРасшифровкиПоРегистратору(АдресРасшифровки, АдресХранилищаСКД, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт

	ТекРасшифровка = КомпоновкаДанныхСервер.ПолучитьПолеРасшифровки(АдресРасшифровки, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);
	
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиОбъект, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПолучитьИзВременногоХранилища(АдресХранилищаСКД)));
	
	Настройки = ОбработкаРасшифровки.Расшифровать(ДополнительныеПараметры, Новый ПолеКомпоновкиДанных("Регистратор"));
	
	Возврат Настройки;

КонецФункции // ()

Функция ПолучитьНастройкиОтфильтроватьПоПолю(АдресРасшифровки, АдресХранилищаСКД, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт

	ТекРасшифровка = КомпоновкаДанныхСервер.ПолучитьПолеРасшифровки(АдресРасшифровки, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);
	ТекПоле = КомпоновкаДанныхСервер.ПолучитьПолеРасшифровки(АдресРасшифровки, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры, Ложь);
	
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиОбъект, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПолучитьИзВременногоХранилища(АдресХранилищаСКД)));
	
	Настройки = ОбработкаРасшифровки.Отфильтровать(ДополнительныеПараметры, ТекПоле);
	
	Возврат Настройки;

КонецФункции // ()
	
Процедура ДоработатьПредставлениеДокументовВСхемеКомпоновкиДанных(ОтчетОбъект)
	
	СтруктураПоиска = Новый Структура("Отчет, Поле", ОтчетОбъект.Метаданные().Имя);
	
	СписокПолейДокументов = Новый Структура("Сделка, Партия, Регистратор, РасходДС, Инвойс, ВходящийИнвойс, РеестрНаОплату, ЗаявкаНаОплату, ");
	
	Схема = ОтчетОбъект.СхемаКомпоновкиДанных;
	Для каждого Набор Из Схема.НаборыДанных Цикл
		
		Для каждого ПолеНабора Из Набор.Поля Цикл
			
			Если ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				Если ПустаяСтрока(ПолеНабора.Поле) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска.Поле = ПолеНабора.Поле;
				
				#Если Клиент Тогда
					//НайдСтроки = ТаблицаНастроекПредставленияПолейОтчетов.НайтиСтроки(СтруктураПоиска);
					//Если НайдСтроки.Количество() = 0 Тогда
						СтрокаНастроекПредставления = Неопределено;
					//Иначе
					//	СтрокаНастроекПредставления = НайдСтроки.Получить(0);
					//КонецЕсли;
				#Иначе
					СтрокаНастроекПредставления = Неопределено;
				#КонецЕсли
				
				Если Найти(ПолеНабора.Поле,".") = 0 и СписокПолейДокументов.Свойство(ПолеНабора.Поле) Тогда
					
					СтрокаИтНакл = ", ";
					СтрокаЗакрытиеИК = ", ";
					СтрокаВидОперации = ", ";
					Если Не СтрокаНастроекПредставления = Неопределено Тогда
						Если СтрокаНастроекПредставления.ИтоговаяНакладная Тогда
							СтрокаИтНакл = ", " + ПолеНабора.Поле + ".ИтоговаяНакладная";
						КонецЕсли;
						Если СтрокаНастроекПредставления.ЗакрытиеИК Тогда
							СтрокаЗакрытиеИК = ", " + ПолеНабора.Поле + ".ЗакрытиеИК";
						КонецЕсли;
						Если СтрокаНастроекПредставления.ВидОперации Тогда
							СтрокаВидОперации = ", " + ПолеНабора.Поле + ".ВидОперации";
						КонецЕсли;
					Иначе
						
					КонецЕсли;
					
					ПолеНабора.ВыражениеПредставления = "КомпоновкаДанныхСервер.ПредставлениеДокументаДляОтчета(" + ПолеНабора.Поле + ", , " + ПолеНабора.Поле + ".Дата, " + ПолеНабора.Поле + ".Номер" + СтрокаИтНакл + СтрокаЗакрытиеИК + СтрокаВидОперации + ")";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьУсловноеОформление(Настройки, Имя, Поле = Неопределено)
	
	НовоеУО 				= Настройки.УсловноеОформление.Элементы.Добавить();
	НовоеУО.Представление 	= Имя;
	НовоеУО.Использование 	= Истина;
	
	Если Поле <> Неопределено Тогда
		НовоеПоле 				= НовоеУО.Поля.Элементы.Добавить();
		НовоеПоле.Использование = Истина;
		НовоеПоле.Поле 			= Поле;
	КонецЕсли;
	
	Возврат НовоеУО;
КонецФункции

Функция ДобавитьЭлементОформления(НовоеУО, ИмяЭлемента, Значение)
	
	ЭлементОформления 				= НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяЭлемента));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= Значение;
	
КонецФункции

Процедура УстановитьОтступы(Настройки, ТекУровень = 0, ГруппировкаСНоменклатурой, Знач ОтступПоУмолчанию = 0)
	
	Возврат;
	
	//Отступ	 			= 1;
	//Автоотступ 			= 2;
	//АвтоотступИерархия 	= 2;
	//
	//ТипКоллекции = ТипЗнч(Настройки);
	//
	//Если ТипКоллекции = Тип("ТаблицаКомпоновкиДанных") Тогда
	//	
	//	Для каждого Элемент Из Настройки.Строки Цикл
	//		УстановитьОтступы(Элемент, ТекУровень, ГруппировкаСНоменклатурой, ОтступПоУмолчанию);
	//	КонецЦикла;
	//	
	//	//Для каждого Элемент Из Настройки.Колонки Цикл
	//	//	УстановитьОтступы(Элемент, БезИерархии);
	//	//КонецЦикла;
	//	
	//ИначеЕсли ТипКоллекции = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или ТипКоллекции = Тип("ГруппировкаКомпоновкиДанных") Тогда
	//	
	//	Если Настройки.ПоляГруппировки.Элементы.Количество() = 1 Тогда
	//		
	//		Поле = Настройки.ПоляГруппировки.Элементы.Получить(0).Поле;
	//		
	//		НовоеУО = ДобавитьУсловноеОформление(Настройки, "Отступ строки");
	//		ДобавитьЭлементОформления(НовоеУО, "Отступ", 0);
	//		ДобавитьЭлементОформления(НовоеУО, "АвтоОтступ", 1);
	//		
	//		НовоеУО = ДобавитьУсловноеОформление(Настройки, "Отступ поля", Поле);
	//		ДобавитьЭлементОформления(НовоеУО, "Отступ", ОтступПоУмолчанию + ТекУровень);
	//		ДобавитьЭлементОформления(НовоеУО, "АвтоОтступ", 1);
	//		
	//		
	//	ИначеЕсли Настройки.ПоляГруппировки.Элементы.Количество() > 1 Тогда
	//		
	//		ЕстьИерархия = Ложь;
	//		ПолеОтступа = 0;
	//		Индекс = 0;
	//		Для каждого ПолеГруппировки Из Настройки.ПоляГруппировки.Элементы Цикл
	//			
	//			Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
	//				Если Строка(ПолеГруппировки.Поле) = "Пропуск" или Строка(ПолеГруппировки.Поле) = "Пусто" Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				
	//				Если ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
	//					ЕстьИерархия = Истина;
	//					ПолеОтступа = Индекс;
	//					Прервать;
	//				ИначеЕсли Найти(ПолеГруппировки.Поле,".") = 0 Тогда
	//					ПолеОтступа = Индекс;
	//					Прервать;
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//			Индекс = Индекс + 1;
	//			
	//		КонецЦикла;
	//		
	//		Поле = Настройки.ПоляГруппировки.Элементы.Получить(ПолеОтступа).Поле;
	//		
	//		ПредставлениеПоля = Строка(Поле);
	//		ПозицияРазделителя = Найти(ПредставлениеПоля, ".");
	//		Если Не ПозицияРазделителя = 0 Тогда
	//			ПредставлениеПоля = Лев(ПредставлениеПоля, ПозицияРазделителя - 1);
	//		КонецЕсли;
	//		
	//		МетаСправочники = Метаданные.Справочники;
	//		Если МетаСправочники.Найти(ПредставлениеПоля) = Неопределено или Строка(МетаСправочники.Найти(ПредставлениеПоля).ВидИерархии) <> "ИерархияГруппИЭлементов" Тогда
	//			ЕстьИерархия = Ложь;
	//		КонецЕсли;
	//		
	//		Если ЕстьИерархия Тогда
	//			
	//			НовоеУО = ДобавитьУсловноеОформление(Настройки, "Отступ строки");
	//			ДобавитьЭлементОформления(НовоеУО, "Отступ", 0);
	//			ДобавитьЭлементОформления(НовоеУО, "АвтоОтступ", 1);
	//			
	//			НовоеУО = ДобавитьУсловноеОформление(Настройки, "Отступ поля (иерархия)", Поле);
	//			ДобавитьЭлементОформления(НовоеУО, "Отступ", ОтступПоУмолчанию + ?(ПолеОтступа = 0, 0, -ТекУровень));
	//			ДобавитьЭлементОформления(НовоеУО, "АвтоОтступ", 1);
	//			
	//			УстановитьЗначениеОтбора(НовоеУО, ПредставлениеПоля + ".ЭтоГруппа", Истина);
	//			
	//			НовоеУО = ДобавитьУсловноеОформление(Настройки, "Отступ поля", Поле);
	//			
	//			ДобавитьЭлементОформления(НовоеУО, "Отступ", ОтступПоУмолчанию + ТекУровень);
	//			ДобавитьЭлементОформления(НовоеУО, "АвтоОтступ", 0);
	//			
	//			УстановитьЗначениеОтбора(НовоеУО, ПредставлениеПоля + ".ЭтоГруппа", Ложь);
	//			
	//		Иначе
	//			
	//			НовоеУО = ДобавитьУсловноеОформление(Настройки, "Отступ поля", Поле);
	//			
	//			ДобавитьЭлементОформления(НовоеУО, "Отступ", ОтступПоУмолчанию + ТекУровень);
	//			ДобавитьЭлементОформления(НовоеУО, "АвтоОтступ", 1);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Для каждого Элемент Из Настройки.Структура Цикл
	//		УстановитьОтступы(Элемент, ТекУровень + 1, ГруппировкаСНоменклатурой, ОтступПоУмолчанию);
	//	КонецЦикла;
	//	
	//ИначеЕсли ТипКоллекции = Тип("НастройкиКомпоновкиДанных") Тогда
	//	
	//	Для каждого Элемент Из Настройки.Структура Цикл
	//		УстановитьОтступы(Элемент, ТекУровень, ГруппировкаСНоменклатурой, ОтступПоУмолчанию);
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦветаФонаУГруппировокОтчета(ОтчетОбъект, Настройки, ДеревоНастроек)
	
	Для Каждого СтрокаДерева Из ДеревоНастроек.Строки Цикл
		
		Если Не СтрокаДерева.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекГруппировка = СтрокаДерева.Группировка;
		
		Если ТипЗнч(ТекГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			УстановитьЦветаФонаУГруппировокОтчета(ОтчетОбъект, Настройки, СтрокаДерева);
			
			Продолжить;
			
		ИначеЕсли ТипЗнч(ТекГруппировка) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			ТекУровень = СтрокаДерева.Уровень() + 1;
			
		ИначеЕсли ТипЗнч(ТекГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			ТекУровень = СтрокаДерева.Уровень();
		КонецЕсли;
		
		Если ТекУровень = 1 Тогда
			ЦветФона = Новый Цвет(255, 255, 192);
		ИначеЕсли ТекУровень = 2 Тогда
			ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
		ИначеЕсли ТекУровень = 3 Тогда
			ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета2;
		Иначе//Если ТекУровень = 3 Тогда
			ЦветФона = WebЦвета.Белый;
		КонецЕсли;
		
		ПочиститьАвтоматическиеУсловныеОформления(ТекГруппировка);
		
		УстановитьЦветаФонаУГруппировокОтчета(ОтчетОбъект, Настройки, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПочиститьАвтоматическиеУсловныеОформления(ТекГруппировка)
	Ном = 0;
	Пока Ном < ТекГруппировка.УсловноеОформление.Элементы.Количество() Цикл
		ТекЭлементОформления = ТекГруппировка.УсловноеОформление.Элементы[Ном];
		Представление = ТекЭлементОформления.Представление;
		Если Найти(Представление,"-го уровня") > 0 или Найти(Представление,"Отступ строки") > 0 или Найти(Представление,"Отступ поля") > 0
			или Найти(Представление,"Отступ поля (иерархия)") > 0 или Найти(Представление,"Выделить первую группировку жирным шрифтом") > 0 Тогда
			ТекГруппировка.УсловноеОформление.Элементы.Удалить(ТекЭлементОформления);
		Иначе
			Ном = Ном + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыделитьЖирнымШрифтомПервуюГруппировку(ОтчетОбъект, Настройки, ДеревоНастроек)
	
	Для каждого СтрВерхнегоУровня Из ДеревоНастроек.Строки Цикл
		
		Если Не СтрВерхнегоУровня.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрВерхнегоУровня.Строки.Итог("Пометка") > 0 Тогда
			ТекГруппировка = Настройки.Структура.Получить(СтрВерхнегоУровня.ИндексГруппировки);
			
			Если ТипЗнч(ТекГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
				
				Для каждого СтрВторогоУровня Из СтрВерхнегоУровня.Строки Цикл
					
					Если Не СтрВторогоУровня.Пометка Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрВторогоУровня.Строки.Итог("Пометка") > 0 Тогда
						ТекГруппировка = Настройки.Структура.Получить(СтрВерхнегоУровня.ИндексГруппировки).Строки.Получить(СтрВторогоУровня.ИндексГруппировки);
						
						ВыделитьПервуюГруппировку(ТекГруппировка);
						
					КонецЕсли;
					
					
				КонецЦикла;
				
			Иначе
				
				ВыделитьПервуюГруппировку(ТекГруппировка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыделитьПервуюГруппировку(ТекГруппировка)
	
	НовоеУО 							= ТекГруппировка.УсловноеОформление.Элементы.Вставить(0);
	//НовоеУО.Представление 				= "Выделить первую группировку жирным шрифтом";
	НовоеУО.Использование 				= Истина;
	НовоеУО.ИспользоватьВЗаголовке 		= ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	НовоеУО.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	
	УстановитьОформление(НовоеУО, "Шрифт"					, Новый Шрифт("Verdana", 8, Истина));
	УстановитьОформление(НовоеУО, "ЦветТекста"				, WebЦвета.ТемноГрифельноСерый);
	УстановитьОформление(НовоеУО, "ВыделятьОтрицательные"	, Истина);
	
	Возврат НовоеУО;
				
КонецФункции

Процедура УстановитьОформление(НовоеУО, ИмяПараметра, ЗначениеПараметра)
	
	ЭлементОформления 				= НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Значение 		= ЗначениеПараметра;
	
КонецПроцедуры

Процедура УстановитьЖирныйШрифтДляГрупп(ОтчетОбъект, Настройки)
	
	Если ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		КоллекцияНастроек = Настройки.Строки;
	Иначе
		КоллекцияНастроек = Настройки.Структура;
	КонецЕсли;
	
	МетаСправочники = Метаданные.Справочники;
	
	Для каждого ЭлементСтруктуры Из КоллекцияНастроек Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			УстановитьЖирныйШрифтДляГрупп(ОтчетОбъект, ЭлементСтруктуры);
			Продолжить;
		ИначеЕсли Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") И Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Или ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
				
				ПредставлениеПоля = Строка(ПолеГруппировки.Поле);
				Если ПредставлениеПоля = "СтруктураТребований" или ПредставлениеПоля = "ИерархияЗадач" Тогда
					Продолжить;
				КонецЕсли;
				
				ПозицияРазделителя = Найти(ПредставлениеПоля, ".");
				Если Не ПозицияРазделителя = 0 Тогда
					ПредставлениеПоля = Лев(ПредставлениеПоля, ПозицияРазделителя - 1);
				КонецЕсли;
				
				Если МетаСправочники.Найти(ПредставлениеПоля) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НовоеУО = ВыделитьПервуюГруппировку(ЭлементСтруктуры);
				
				//НовоеУО = ЭлементСтруктуры.УсловноеОформление.Элементы.Добавить();
				//НовоеУО.Представление = "Выделить группу иерархии жирным шрифтом";
				//НовоеУО.Использование = Истина;
				//НовоеУО.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
				//НовоеУО.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
				//		
				//ЭлементОформления = НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
				//ЭлементОформления.Использование = Истина;
				//ЭлементОформления.Значение = Новый Шрифт("Verdana", 8, Истина);
				//ЭлементОформления = НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
				//ЭлементОформления.Использование = Истина;
				//ЭлементОформления.Значение = WebЦвета.ТемноГрифельноСерый;
						
				ЭлементОтбора = НовоеУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПредставлениеПоля + ".ЭтоГруппа");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Истина; 
				
				
				НовоеУО = ЭлементСтруктуры.УсловноеОформление.Элементы.Добавить();
				ЭлементОтбора = НовоеУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПредставлениеПоля + ".ЭтоГруппа");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.ПравоеЗначение = Истина; 
				
				УстановитьОформление(НовоеУО, "ВыделятьОтрицательные"	, Истина);
				
			КонецЕсли;
		КонецЦикла;
		
		УстановитьЖирныйШрифтДляГрупп(ОтчетОбъект, ЭлементСтруктуры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНастройкуПоложенияИтога(ОтчетОбъект, Настройки, ИтогоПерваяКолонка)
	
	Для каждого ТекЭлемент Из Настройки.Структура Цикл
		
		ТипЭлемента = ТипЗнч(ТекЭлемент);
		
		Если ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			УОРасположениеИтогов = ТекЭлемент.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГоризонтальноеРасположениеОбщихИтогов"));
			Если НЕ УОРасположениеИтогов.Использование Тогда
				УОРасположениеИтогов.Использование = Истина;
				Если ИтогоПерваяКолонка Тогда
					УОРасположениеИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Начало;
				Иначе
					УОРасположениеИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Конец;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Тогда
			УстановитьНастройкуПоложенияИтога(ОтчетОбъект, ТекЭлемент, ИтогоПерваяКолонка);
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьНижнийКолонтитулОтчета(ТабДок) Экспорт
	
	ТабДок.НижнийКолонтитул.ТекстСправа = "Стр. [&НомерСтраницы] из [&СтраницВсего]";
	ТабДок.НижнийКолонтитул.Выводить = Истина;
	ТабДок.НижнийКолонтитул.НачальнаяСтраница = 1;
	
КонецПроцедуры

Процедура ЗагрузитьСтандартныеНастройки(ТекОбъект) Экспорт
	ТекОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ТекОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
КонецПроцедуры

Процедура УстановитьПараметрыТаблицыОтборов(ТабличноеПолеОтборыКомпоновщика) Экспорт
	ТабличноеПолеОтборыКомпоновщика.Колонки.Использование.ТекстШапки = "Ф";
	
	ТабличноеПолеОтборыКомпоновщика.Колонки.ЛевоеЗначениеДляПодробногоОтображенияЭлементаГлавногоОтбора.ТекстШапки = "Параметр";
	ТабличноеПолеОтборыКомпоновщика.Колонки.ЛевоеЗначениеДляПодробногоОтображенияЭлементаГлавногоОтбора.ТолькоПросмотр = Истина;
	ТабличноеПолеОтборыКомпоновщика.Колонки.ПравоеЗначениеДляПодробногоОтображенияЭлементаГлавногоОтбора.ТекстШапки = "Значение отбора";
	ТабличноеПолеОтборыКомпоновщика.Колонки.ПредставлениеДляПодробногоОтображенияЭлементаГлавногоОтбора.Видимость = Ложь;
	ТабличноеПолеОтборыКомпоновщика.Колонки.ПредставлениеДляПодробногоОтображенияГруппы.Видимость = Ложь;
	ТабличноеПолеОтборыКомпоновщика.Колонки.РежимОтображенияДляПодробногоОтображенияЭлементаГлавногоОтбора.Видимость = Ложь;
	
	ТабличноеПолеОтборыКомпоновщика.ГоризонтальныеЛинии = Истина;
	
	// Установка ширины пока не работает
	//ТабличноеПолеОтборыКомпоновщика.Колонки.ЛевоеЗначениеДляПодробногоОтображенияЭлементаГлавногоОтбора.Ширина = 20;
КонецПроцедуры

Процедура ДобавитьРесурс(ТекОбъект,ИмяРесурса,ВыражениеРесурса) Экспорт
	ТекПоказатель = ТекОбъект.СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ТекПоказатель.ПутьКДанным = ИмяРесурса;
	ТекПоказатель.Выражение = ВыражениеРесурса + "(" + ИмяРесурса + ")";
КонецПроцедуры

Процедура УдалитьРесурс(ТекОбъект,ИмяРесурса,ВыражениеРесурса) Экспорт
	ТекПоказатель = ТекОбъект.СхемаКомпоновкиДанных.ПоляИтога.Найти(ИмяРесурса);
	Если ТекПоказатель <> Неопределено Тогда
	ТекОбъект.СхемаКомпоновкиДанных.ПоляИтога.Удалить(ТекПоказатель);
	КонецЕсли;
КонецПроцедуры

Процедура ОставитьРесурсы(ТекОбъект,СтруктураРесурсов) Экспорт
	НомерРесурса = 1;
	Пока НомерРесурса < ТекОбъект.СхемаКомпоновкиДанных.ПоляИтога.Количество() Цикл
		ТекРесурс = ТекОбъект.СхемаКомпоновкиДанных.ПоляИтога[НомерРесурса-1];
		Если НЕ СтруктураРесурсов.Свойство(ТекРесурс.ПутьКДанным) Тогда
			ТекОбъект.СхемаКомпоновкиДанных.ПоляИтога.Удалить(ТекРесурс);
		Иначе
			НомерРесурса = НомерРесурса + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьСписокРесурсов(ТекОбъект) Экспорт
	ТекОбъект.СхемаКомпоновкиДанных.ПоляИтога.Очистить();
КонецПроцедуры

Функция ПолучитьКолонкуНастройкиТаблицы(ТекОбъект,ИмяКолонки,НомерТаблицы = 0) Экспорт
	КолонкиТаблицы = ТекОбъект.КомпоновщикНастроек.Настройки.Структура[НомерТаблицы].Колонки;
	Для Каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
		Если СокрЛП(КолонкаТаблицы.ПоляГруппировки.Элементы[0].Поле) = ИмяКолонки Тогда
			Возврат КолонкаТаблицы;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура ИспользоватьРесурсыВКолонке(ТекОбъект,ИмяКолонки,СтруктураРесурсов,НомерТаблицы = 0,ВыводГрупп = Ложь) Экспорт
	ТекКолонка = ПолучитьКолонкуНастройкиТаблицы(ТекОбъект,ИмяКолонки,НомерТаблицы);
	Если ТекКолонка = Неопределено Тогда
		Сообщить("Ошибка установки параметров настройки таблицы компоновки данных: не найдена колонка по имени " + ИмяКолонки,СтатусСообщения.Внимание);
	    Возврат;
	КонецЕсли;
	КоллекцияРесурсов = ТекКолонка.Выбор.Элементы;
	Для Каждого ТекРесурс Из КоллекцияРесурсов Цикл
		Если ТипЗнч(ТекРесурс) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			ТекРесурс.Использование = Истина;
			Продолжить;
		ИначеЕсли ТипЗнч(ТекРесурс) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ТекРесурс.Использование = Мин(ВыводГрупп,СтруктураРесурсов.Свойство(ТекРесурс.Заголовок));
			Продолжить;
		КонецЕсли;
		ТекПоле = СокрЛП(ТекРесурс.Поле);
		Если СокрЛП(ТекРесурс.Поле) = ИмяКолонки Тогда
			ТекПоле = Истина;
			Продолжить;
		КонецЕсли;
		Если ВыводГрупп Тогда
			Если ТекРесурс.Родитель = Неопределено Тогда
				ТекРесурс.Использование = Ложь;
			Иначе
				ТекРесурс.Использование = СтруктураРесурсов.Свойство(ТекПоле);
			КонецЕсли;
		Иначе
			ТекРесурс.Использование = СтруктураРесурсов.Свойство(ТекПоле);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьТекущиеНастройки(ТекОбъект) Экспорт
	НовНастройка = Новый КомпоновщикНастроекКомпоновкиДанных;
	НовНастройка.ЗагрузитьНастройки(ТекОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	Возврат НовНастройка;
КонецФункции

Процедура ПеренестиЗначенияОтборовМеждуНастройками(НастройкиИсточник,НастройкиПолучатель,СохранятьИсходныеОтборы = Ложь) Экспорт
	ЭтоОтборыСписка = ТипЗнч(НастройкиИсточник) = Тип("Отбор");
	Если ЭтоОтборыСписка Тогда
		ОтборыИсточник 		= НастройкиИсточник;
	ИначеЕсли ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		ОтборыИсточник 		= НастройкиИсточник.Отбор.Элементы;
	Иначе
		ОтборыИсточник 		= НастройкиИсточник.Элементы;
	КонецЕсли;
	Если ТипЗнч(НастройкиПолучатель) = Тип("НастройкиКомпоновкиДанных") Тогда
		ОтборыПолучатель 	= НастройкиПолучатель.Отбор.Элементы;
	Иначе
		ОтборыПолучатель 	= НастройкиПолучатель.Элементы;
	КонецЕсли;
	Для Каждого ТекОтбор Из ОтборыИсточник Цикл
		Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого НовОтбор Из ОтборыПолучатель Цикл
			Если ТипЗнч(НовОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ЭтоОтборыСписка Тогда
				Если Строка(НовОтбор.ЛевоеЗначение) <> ТекОтбор.Имя Тогда
					Продолжить;
				КонецЕсли;
				Если СохранятьИсходныеОтборы и НовОтбор.Использование = Истина Тогда
					// Оставляем старый отбор
				ИначеЕсли НЕ ТекОтбор.Использование Тогда
					НовОтбор.Использование = Ложь;
				Иначе
					Попытка
						НовОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить(Строка(ТекОтбор.ВидСравнения)," ","")];
					Исключение
						Сообщить("Ошибка установки вида сравнения """ + ТекОтбор.ВидСравнения + """ для отбора по " + ТекОтбор.Имя + "!",СтатусСообщения.Важное);
						Прервать;
					КонецПопытки;
					
					НовОтбор.ПравоеЗначение 	= ТекОтбор.Значение;
					//НовОтбор.ПравоеЗначениеС 	= ТекОтбор.ЗначениеС;
					//НовОтбор.ПравоеЗначениеПо 	= ТекОтбор.ЗначениеПо;
					НовОтбор.Использование 		= Истина;
				КонецЕсли;
			Иначе
				Если НовОтбор.ЛевоеЗначение <> ТекОтбор.ЛевоеЗначение Тогда
					Продолжить;
				КонецЕсли;
				Если СохранятьИсходныеОтборы и НовОтбор.Использование = Истина Тогда
					// Оставляем старый отбор
				Иначе
					ЗаполнитьЗначенияСвойств(НовОтбор,ТекОтбор);
				КонецЕсли;
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиСтруктуруОтборовМеждуНастройками(НастройкиИсточник,НастройкиПолучатель) Экспорт
	Попытка
		ОтборыИсточник 		= НастройкиИсточник.Отбор.Элементы;
	Исключение
		ОтборыИсточник 		= НастройкиИсточник.Элементы;
	КонецПопытки;
	Попытка
		ОтборыПолучатель 	= НастройкиПолучатель.Отбор.Элементы;
	Исключение
		ОтборыПолучатель 	= НастройкиПолучатель.Элементы;
	КонецПопытки;
	
	ОтборыПолучатель.Очистить();
	Для Каждого ТекОтбор Из ОтборыИсточник Цикл
		НовОтбор = ОтборыПолучатель.Добавить(ТипЗнч(ТекОтбор));
		ЗаполнитьЗначенияСвойств(НовОтбор,ТекОтбор);
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиВыбранныеПоляМеждуНастройками(НастройкиИсточник,НастройкиПолучатель) Экспорт
	Попытка
		ВыбранныеПоляИсточник 		= НастройкиИсточник.Выбор.Элементы;
	Исключение
		ВыбранныеПоляИсточник 		= НастройкиИсточник.Элементы;
	КонецПопытки;
	Попытка
		ВыбранныеПоляПолучатель 	= НастройкиПолучатель.Выбор.Элементы;
	Исключение
		ВыбранныеПоляПолучатель 	= НастройкиПолучатель.Элементы;
	КонецПопытки;
	
	ВыбранныеПоляПолучатель.Очистить();
	Для Каждого ТекПоле Из ВыбранныеПоляИсточник Цикл
		ПеренестиВыбранныеПоляИерархически(ТекПоле,ВыбранныеПоляПолучатель);
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиВыбранныеПоляИерархически(ТекПоле,ВыбранныеПоляПолучатель)
	НовПоле = ВыбранныеПоляПолучатель.Добавить(ТипЗнч(ТекПоле));
	ЗаполнитьЗначенияСвойств(НовПоле,ТекПоле);
	Если ТипЗнч(ТекПоле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Для Каждого ПодчПоле Из ТекПоле.Элементы Цикл
			ПеренестиВыбранныеПоляИерархически(ПодчПоле,НовПоле.Элементы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура АктуализироватьОтборы(ТекОбъект, ТекущиеНастройки, ПереноситьСтруктуру = Истина, СохранятьИсходныеОтборы = Ложь) Экспорт
	
	Если ПереноситьСтруктуру Тогда
		ПеренестиСтруктуруОтборовМеждуНастройками(ТекОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию,ТекОбъект.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	
	ПеренестиЗначенияОтборовМеждуНастройками(ТекущиеНастройки.Настройки,ТекОбъект.КомпоновщикНастроек.Настройки,СохранятьИсходныеОтборы);
	
КонецПроцедуры

Функция УстановитьПредопределеннуюНастройку( ТекОбъект, СКД = Неопределено,ИмяОтчета, Знач ИмяНастройки = Неопределено, УстановитьДопНастройки = Истина, ПереноситьОтборы = Истина, НастройкаПоУмолчанию = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
		
		ИмяНастройки = НастройкаПоУмолчанию.Описание;
		
	ИначеЕсли ИмяНастройки = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекОбъект.СохраненнаяНастройка) или НЕ ТекОбъект.СохраненнаяНастройка.Предопределенная Тогда
			ИмяНастройки = "Основной";
		ИначеЕсли Не ПустаяСтрока(ТекОбъект.СохраненнаяНастройка.Описание) Тогда
			ИмяНастройки = СтрЗаменить(ТекОбъект.СохраненнаяНастройка.Описание," ","");
		Иначе
			ИмяНастройки = СтрЗаменить(ТекОбъект.СохраненнаяНастройка," ","");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеНастройки = ПолучитьТекущиеНастройки(ТекОбъект);
	
	ОпределитьУстановитьСхемуОтчета(ТекОбъект, ИмяНастройки);
	
	Если СКД = Неопределено Тогда
		СКД = Отчеты[ИмяОтчета].Создать().СхемаКомпоновкиДанных;
	КонецЕсли; 
	
	НайденныйВариант = СКД.ВариантыНастроек.Найти(ИмяНастройки);//ТекОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяНастройки);
	Если НайденныйВариант = Неопределено И ИмяНастройки = "Основной" Тогда
		ИмяНастройки = ИмяНастройки + "Сложный";
		НайденныйВариант = СКД.ВариантыНастроек.Найти(ИмяНастройки);
	КонецЕсли;
	Если НайденныйВариант = Неопределено Тогда
		Сообщить("Не найден вариант настройки """ + ИмяНастройки + """!", СтатусСообщения.Важное);
		#Если Клиент Тогда
			Предупреждение("Не найден вариант настройки """ + ИмяНастройки + """!", 15);
		#КонецЕсли
		
		Возврат Истина;
	КонецЕсли;
	
	ТекОбъект.ОтображатьТаблицуСтруктурыНастроек = Прав(ИмяНастройки, СтрДлина("Сложный")) <> "Сложный";
	
	ЗагружаемыеНастройки = НайденныйВариант.Настройки;// ТекОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяНастройки).Настройки;
	
	ТекОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ЗагружаемыеНастройки);
	
	Если ПереноситьОтборы Тогда
		АктуализироватьОтборы(ТекОбъект, ТекущиеНастройки, Ложь, Истина);
	КонецЕсли;
	
	ТекОбъект.СохраненнаяНастройка = ?(ЗначениеЗаполнено(НастройкаПоУмолчанию), НастройкаПоУмолчанию, НайтиПредопределенныйВариантВСохраненных(ИмяОтчета, ИмяНастройки));
	//ПрименитьСохраненнуюНастройку(ЭтаФорма, ИмяОтчета, ТекОбъект.СохраненнаяНастройка, Ложь);
	
	Возврат Истина;
	
КонецФункции

Процедура ОпределитьУстановитьСхемуОтчета(ТекОбъект, ИмяНастройки)
	
	Если ИмяНастройки = "Основной" Тогда
		ИмяНастройки1 = "ОсновнойСложный";
	Иначе
		ИмяНастройки1 = ИмяНастройки;
	КонецЕсли;
	
КонецПроцедуры

//Функция ИспользоватьВыделениеНоменклатурыВОтчете(ТекОбъект)
//	Если ТекОбъект.Метаданные().Реквизиты.Найти("ВыделятьНовинкиАкцииНовыеПоступления") = Неопределено Тогда
//		Возврат Ложь;
//	Иначе
//		Возврат ТекОбъект.ВыделятьНовинкиАкцииНовыеПоступления;
//	КонецЕсли;
//КонецФункции

Процедура ДобавитьКодНоменклатуры(ОтчетОбъект, Настройки, ПолеГруппировкиНоменклатуры)
	
	ДобавленКодНоменклатуры = ПоискНоменклатураВСтруктуреОтчетаИерархически(Настройки, ПолеГруппировкиНоменклатуры);
	
	Если НЕ ДобавленКодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Схема = ОтчетОбъект.СхемаКомпоновкиДанных;
	Исключение
		Схема = ОтчетОбъект.ВиджетСхемаКомпоновки.ХранилищеСхемыКомпоновки.Получить();
	КонецПопытки;
	
	ОписаниеМакета 				= Схема.Макеты.Добавить();
	ОписаниеМакета.Имя 			= "ПолеКод";
	ОписаниеМакета.Макет 		= Новый МакетОбластиКомпоновкиДанных;
	
	СтрокаТаблицыОбласти 		= ОписаниеМакета.Макет.Добавить(Тип("СтрокаТаблицыОбластиКомпоновкиДанных"));
	ЯчейкаОбласти 				= СтрокаТаблицыОбласти.Ячейки.Добавить(); 
	ПолеОбласти 				= ЯчейкаОбласти.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
	
	ПолеОбласти.Значение 		= Новый ПараметрКомпоновкиДанных("Код");
	
	пМинШирина 					= ЯчейкаОбласти.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МинимальнаяШирина"));
	пМинШирина.Использование 	= Истина;
	пМинШирина.Значение 		= 11.25;
	
	пМаксШирина 				= ЯчейкаОбласти.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МаксимальнаяШирина"));
	пМаксШирина.Использование 	= Истина;
	пМаксШирина.Значение 		= 30;
	
	пГорПоложение 				= ЯчейкаОбласти.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГоризонтальноеПоложение"));
	пГорПоложение.Использование = Истина;
	пГорПоложение.Значение 		= ГоризонтальноеПоложение.Право;
	
	пГорПоложение 				= ЯчейкаОбласти.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Автоотступ"));
	пГорПоложение.Использование = Истина;
	пГорПоложение.Значение 		= 0;
	
	//ПараметрОбласти 			= ОписаниеМакета.Параметры.Добавить(Тип("ПараметрОбластиВыражениеКомпоновкиДанных"));
	//ПараметрОбласти.Имя 		= "Код";
	//ПараметрОбласти.Выражение 	= "Номенклатура.ФорматированныйКод";
	
	//МакетПоляКод 				= Схема.МакетыПолей.Добавить();
	//МакетПоляКод.Макет 			= "ПолеКод";
	//МакетПоляКод.Поле 			= "Номенклатура.ФорматированныйКод";
		
	ДобавитьСортировкуПоНоменклатуре(ОтчетОбъект, Настройки);//, СортировкаНоменклатурыНеПоУмолчанию);
	
КонецПроцедуры

Процедура ДобавитьСортировкуПоНоменклатуре(ОтчетОбъект, Настройки);//, СортировкаНоменклатурыНеПоУмолчанию)
	
	//Настройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	//СортироватьПоНаименованию = Ложь;
	//МетаданныеОтчета = ОтчетОбъект.Метаданные();
	//Если Не МетаданныеОтчета.Реквизиты.Найти("СортироватьНоменклатуруПоНаименованию") = Неопределено Тогда
	//	СортироватьПоНаименованию = ОтчетОбъект.СортироватьНоменклатуруПоНаименованию;
	//КонецЕсли;
	
	//ЗначениеСортировкиПоУмолчанию = ПараметрыСеанса.СортировкаНоменклатурыВОтчетахПоУмолчанию;
	//Если ЗначениеСортировкиПоУмолчанию = Перечисления.ВидыСортировки.ПоКоду Тогда
	//	Если СортировкаНоменклатурыНеПоУмолчанию Тогда
	//		СортироватьПоНаименованию = Истина;
	//	Иначе
	//		СортироватьПоНаименованию = Ложь;
	//	КонецЕсли;
	//Иначе
	//	Если СортировкаНоменклатурыНеПоУмолчанию Тогда
	//		СортироватьПоНаименованию = Ложь;
	//	Иначе
	//		СортироватьПоНаименованию = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДобавитьСортировкуПоНоменклатуреПоСтруктуреИерархически(Настройки.Структура, Истина);
	
	//ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
КонецПроцедуры

Процедура ДобавитьСортировкуПоНоменклатуреПоСтруктуреИерархически(СтруктураОтчет, СортироватьПоНаименованию)
	
	Для каждого ЭлементСтруктуры Из СтруктураОтчет Цикл
		
		Если Не ЭлементСтруктуры.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ЭлементСтруктуры);
		
		Если ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			ВначалеИдетКод = Неопределено;
			
			ЕстьНоменклатура = Ложь;
			СписокПолей = Новый Массив;
			Для каждого ТекГрупПоле Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если Не ТекГрупПоле.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ТекГрупПоле) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					СписокПолей.Добавить(Строка(ТекГрупПоле.Поле));
					Если Строка(ТекГрупПоле.Поле) = "Номенклатура" Тогда
						ЕстьНоменклатура = Истина;
						Если ВначалеИдетКод = Неопределено Тогда
							ВначалеИдетКод = Ложь;
						КонецЕсли;
					ИначеЕсли Строка(ТекГрупПоле.Поле) = "Номенклатура.Код" или Строка(ТекГрупПоле.Поле) = "Код" Тогда
						ЕстьНоменклатура = Истина;
						Если ВначалеИдетКод = Неопределено Тогда
							ВначалеИдетКод = Истина;
						КонецЕсли;
					ИначеЕсли Строка(ТекГрупПоле.Поле) = "Номенклатура.Наименование" Тогда
						ЕстьНоменклатура = Истина;
						Если ВначалеИдетКод = Неопределено Тогда
							ВначалеИдетКод = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНоменклатура И ЭлементСтруктуры.Порядок.Элементы.Количество() = 0 Или (ЭлементСтруктуры.Порядок.Элементы.Количество() = 1 И ТипЗнч(ЭлементСтруктуры.Порядок.Элементы.Получить(0)) = Тип("АвтоЭлементПорядкаКомпоновкиДанных")) Тогда
				
				Если СортироватьПоНаименованию = ВначалеИдетКод Тогда
					
					Если ЭлементСтруктуры.Порядок.Элементы.Количество() = 1 Тогда
						ЭлементСтруктуры.Порядок.Элементы.Удалить(ЭлементСтруктуры.Порядок.Элементы.Получить(0));
					КонецЕсли;
					
					Для каждого ТекПоле Из СписокПолей Цикл
						Если Лев(ТекПоле, СтрДлина("Номенклатура")) = "Номенклатура" Тогда
							
							Если СортироватьПоНаименованию Тогда
								Поле1 = "Номенклатура.Наименование";
								Поле2 = "Номенклатура.Код";
							Иначе
								Поле1 = "Номенклатура.Код";
								Поле2 = "Номенклатура.Наименование";
							КонецЕсли;
							
							НовЭлемПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
							НовЭлемПорядка.Использование = Истина;
							НовЭлемПорядка.Поле = Новый ПолеКомпоновкиДанных(Поле1);
							
							НовЭлемПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
							НовЭлемПорядка.Использование = Истина;
							НовЭлемПорядка.Поле = Новый ПолеКомпоновкиДанных(Поле2);
							
						Иначе
							НовЭлемПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
							НовЭлемПорядка.Использование = Истина;
							НовЭлемПорядка.Поле = Новый ПолеКомпоновкиДанных(ТекПоле);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДобавитьСортировкуПоНоменклатуреПоСтруктуреИерархически(ЭлементСтруктуры.Структура, СортироватьПоНаименованию);
			
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ДобавитьСортировкуПоНоменклатуреПоСтруктуреИерархически(ЭлементСтруктуры.Строки, СортироватьПоНаименованию);
			
			ДобавитьСортировкуПоНоменклатуреПоСтруктуреИерархически(ЭлементСтруктуры.Колонки, СортироватьПоНаименованию);
			
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

Функция ПоискНоменклатураВСтруктуреОтчетаИерархически(Настройки, ПолеГруппировкиНоменклатуры)
	
	Если ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		КолллекцияЭлементов = Настройки.Строки;
	Иначе
		КолллекцияЭлементов = Настройки.Структура;
	КонецЕсли;
	
	Результат = Ложь;
	
	ДобавленКодНоменклатуры = Ложь;
	
	Для каждого ЭлементСтруктуры Из КолллекцияЭлементов Цикл
		
		Если Не ЭлементСтруктуры.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьНоменклатура = Ложь;
		ЕстьКод = Ложь;
		
		ПозицияНоменклатуры = Неопределено;
		Индекс = 1;
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Результат = Результат Или ПоискНоменклатураВСтруктуреОтчетаИерархически(ЭлементСтруктуры, ПолеГруппировкиНоменклатуры);
			Возврат ДобавленКодНоменклатуры Или Результат;
		КонецЕсли;
		
		Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если Не ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
				ПредставлениеПоля = Строка(ПолеГруппировки.Поле);
				Если ПредставлениеПоля = "Номенклатура" Тогда
					ЕстьНоменклатура = Истина;
					ПозицияНоменклатуры = Индекс;
				//ИначеЕсли ПредставлениеПоля = "Номенклатура.ФорматированныйКод" Тогда
				//	ЕстьКод = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Если ЕстьНоменклатура И Не ЕстьКод И ПозицияНоменклатуры = 1 Тогда
			
			Если ПолеГруппировкиНоменклатуры = Неопределено Тогда
				ПолеГруппировкиНоменклатуры = ЭлементСтруктуры;
			КонецЕсли;
			
			//ПолеГруппировкиКод = ЭлементСтруктуры.ПоляГруппировки.Элементы.Вставить(0, Тип("ПолеГруппировкиКомпоновкиДанных"));
			//ПолеГруппировкиКод.Использование = Истина;
			//ПолеГруппировкиКод.Поле = Новый ПолеКомпоновкиДанных("Номенклатура.ФорматированныйКод");
			//
			//ДобавленКодНоменклатуры = Истина;
			
		КонецЕсли;
		
		Результат = Результат Или ПоискНоменклатураВСтруктуреОтчетаИерархически(ЭлементСтруктуры, ПолеГруппировкиНоменклатуры);
		
	КонецЦикла;
	
	Возврат ДобавленКодНоменклатуры Или Результат;
	
КонецФункции

//Процедура ДобавитьУсловноеОформлениеПоВидамНоменклатуры(ТекОбъект, ТекНастройки)
//	
//	Для Ы = -(ТекНастройки.УсловноеОформление.Элементы.Количество() - 1) По 0 Цикл
//		
//		ЭлементОформления = ТекНастройки.УсловноеОформление.Элементы.Получить(-Ы);
//		
//		Если ЭлементОформления.Представление = "Выделять новые поступления"
//			Или ЭлементОформления.Представление = "Выделять новинки"
//			Или ЭлементОформления.Представление = "Выделять акционные товары" Тогда
//			
//			ТекНастройки.УсловноеОформление.Элементы.Удалить(ЭлементОформления);
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если Не ИспользоватьВыделениеНоменклатурыВОтчете(ТекОбъект) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	парКонецПериода = ТекНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериодаНачалоДня"));
//	Если парКонецПериода = Неопределено Тогда
//		Сообщить("Не найден параметр ""Конец периода начало дня""!", СтатусСообщения.Важное);
//		Возврат;
//	КонецЕсли;
//	
//	
//	НовоеУО = ТекНастройки.УсловноеОформление.Элементы.Добавить();
//	НовоеУО.Представление = "Выделять новые поступления";
//	НовоеУО.Использование = Истина;
//	ЭлементОформления = НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
//	ЭлементОформления.Использование = Истина;
//	ЭлементОформления.Значение = Новый Цвет(0, 255, 255);
//	
//	ЭлементОтбора = НовоеУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.Использование = Истина;
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.СчитатьНовымПоступлениемДоДаты");
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
//	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериодаНачалоДня"); 
//	
//	
//	НовоеУО = ТекНастройки.УсловноеОформление.Элементы.Добавить();
//	НовоеУО.Представление = "Выделять новинки";
//	НовоеУО.Использование = Истина;
//	ЭлементОформления = НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
//	ЭлементОформления.Использование = Истина;
//	ЭлементОформления.Значение = Новый Цвет(0, 255, 0);
//	
//	ЭлементОтбора = НовоеУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.Использование = Истина;
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.СчитатьНовинкойДоДаты");
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
//	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериодаНачалоДня"); 
//	
//	
//	НовоеУО = ТекНастройки.УсловноеОформление.Элементы.Добавить();
//	НовоеУО.Представление = "Выделять акционные товары";
//	НовоеУО.Использование = Истина;
//	ЭлементОформления = НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
//	ЭлементОформления.Использование = Истина;
//	ЭлементОформления.Значение = Новый Цвет(255, 0, 0);
//	
//	ЭлементОформления = НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
//	ЭлементОформления.Использование = Истина;
//	ЭлементОформления.Значение = Новый Цвет(255, 255, 255);
//	
//	ЭлементОтбора = НовоеУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.Использование = Истина;
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.АкционныйТовар");
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ЭлементОтбора.ПравоеЗначение = Истина; 
//	
//КонецПроцедуры

//Процедура ДобавитьУсловноеОформлениеПоВыведеннымИзАссортимента(ОтчетОбъект, Настройки)
//	
//	Если Настройки.ДоступныеПоляОтбораЭлементовСтруктуры.Элементы.Найти("Номенклатура") = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	НовоеУО = Настройки.УсловноеОформление.Элементы.Добавить();
//	НовоеУО.Представление = "Выделять выведенные из ассортимента";
//	НовоеУО.Использование = Истина;
//	ЭлементОформления = НовоеУО.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
//	ЭлементОформления.Использование = Истина;
//	ЭлементОформления.Значение = Новый Цвет(255, 0, 0);
//	
//	ЭлементОтбора = НовоеУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.Использование = Истина;
//	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.ВыведенИзАссортимента");
//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ЭлементОтбора.ПравоеЗначение = Истина; 
//	
//КонецПроцедуры

Процедура УстановитьПараметрыВыводаОтчета(Настройки,СтруктураПараметров,ТипВывода) Экспорт
	ПараметрыВыводаОтчета = Настройки.ПараметрыВывода.Элементы;
	Для Каждого ТекСтрока Из СтруктураПараметров Цикл
		ТекПараметр					= ПараметрыВыводаОтчета.Найти(ТекСтрока.Ключ);
		ТекПараметр.Значение 		= ТипВывода;
		ТекПараметр.Использование 	= Истина;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьПредставлениеОтборов(Настройки,ИсключатьПоля = "") Экспорт
	
	ЭтоПростойОтбор = ТипЗнч(Настройки) = Тип("Отбор") или ТипЗнч(Настройки) = Тип("ОтборКомпоновкиДанных");
	ТекстОтбор 		= Строка(?(ЭтоПростойОтбор,Настройки,Настройки.Отбор));
	
	Если ТекстОтбор = "" Тогда
		Возврат ТекстОтбор;
	КонецЕсли;
	
	СтруктураИсключать 			= Новый Структура(ИсключатьПоля);
	ПростоеПредставлениеОтбора 	= Истина;
	СтруктураСравнений 			= Новый Структура(
	"Равно,НЕравно,Всписке,Вгруппеизсписка,Невсписке,Невгруппеизсписка,Невгруппе,Заполнено,Незаполнено,Меньше,Больше,МеньшеИлиРавно,БольшеИлиРавно");
	
	Для Каждого ТекСтрока Из СтруктураСравнений Цикл
		Если Найти(СтрЗаменить(ТекстОтбор," ",""),ТекСтрока.Ключ) <> 0 Тогда
			ПростоеПредставлениеОтбора = ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПростоеПредставлениеОтбора Тогда // Приведем к красивому нижнему регистру
		
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"Равно","=");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"НЕ равно","не равно");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"В списке","в списке");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"В группе из списка","в группе из списке");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"Не в списке","не в списке");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"Не в группе из списка","не в группе из списке");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"Не в группе","не в группе");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"Заполнено","заполнено");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"Не заполнено","не заполнено");
		ТекстОтбор = СтрЗаменить(ТекстОтбор," И ",", ");
		
		ТекстОтбор = СтрЗаменить(ТекстОтбор,", Непустые ресурсы","");
		ТекстОтбор = СтрЗаменить(ТекстОтбор," И Непустые ресурсы","");
		ТекстОтбор = СтрЗаменить(ТекстОтбор,"Непустые ресурсы","");
		
	Иначе
		
		ТекстОтбор 		= "";
		ЭлементыОтбора 	= ?(ЭтоПростойОтбор,Настройки,Настройки.Отбор.Элементы);
		
		Для Каждого ТекОтбор из ЭлементыОтбора Цикл
			
			Если НЕ ТекОтбор.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ИмяОтбора = ТекОтбор.Имя;
			Исключение
				
				Попытка
					ИмяОтбора = Строка(ТекОтбор.ЛевоеЗначение);
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецПопытки;
			
			
			Если СтруктураИсключать.Количество() > 0 и СтруктураИсключать.Свойство(ИмяОтбора) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПростойОтбор Тогда
				
				Если ПустаяСтрока(ТекОтбор.Значение) и НРЕГ(ТекОтбор.ВидСравнения) = "равно" Тогда
					ТекТекст = ТекОтбор.Представление + " = Не заполнено";
				ИначеЕсли ПустаяСтрока(ТекОтбор.Значение) и НРЕГ(ТекОтбор.ВидСравнения) = "не равно" Тогда
					ТекТекст = ТекОтбор.Представление + " = Заполнено";
				Иначе
					ТекТекст = ТекОтбор.Представление + " " + 
						?(НРЕГ(ТекОтбор.ВидСравнения) = "равно","=",НРЕГ(ТекОтбор.ВидСравнения)) + " " + 
						?(ПустаяСтрока(ТекОтбор.Значение),"''",ТекОтбор.Значение);
				КонецЕсли;
				
			Иначе
				
				ТекТекст = "" + ?(ПустаяСтрока(ТекОтбор.Представление), ТекОтбор.ЛевоеЗначение, ТекОтбор.Представление) + " " + 
				СтрЗаменить(НРЕГ(ТекОтбор.ВидСравнения),"равно","=") + " " + ?(ПустаяСтрока(ТекОтбор.ПравоеЗначение) и 
				ТекОтбор.ВидСравнения <> ВидСравненияКомпоновкиДанных.Заполнено и 
				ТекОтбор.ВидСравнения <> ВидСравненияКомпоновкиДанных.НЕЗаполнено
				,"''",ТекОтбор.ПравоеЗначение);
				
			КонецЕсли;
			
			ТекстОтбор = ТекстОтбор + ?(ТекстОтбор = "","",", ") + ТекТекст;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстОтбор;
КонецФункции

Функция ОпределитьЗаголовокОтчета(ОтчетОбъект)
	
	Если ТипЗнч(ОтчетОбъект) = Тип("Структура") Тогда
		
		Возврат ОтчетОбъект.Наименование;
		
	ИначеЕсли ОтчетОбъект.Метаданные().Имя = "РеестрДокументов" Тогда
		
		Возврат "Реестр " + Метаданные.Документы[ОтчетОбъект.ВидДокумента].Синоним;
		
	ИначеЕсли НЕ ОтчетОбъект.НастройкаСистемыОтчет.Пустая() Тогда
		
		Заголовок = ОтчетОбъект.НастройкаСистемыОтчет.Заголовок;
		
		Возврат ?(ПустаяСтрока(Заголовок), ОтчетОбъект.НастройкаСистемыОтчет.Наименование, Заголовок);
		
	Иначе
		
		Возврат ОтчетОбъект.Метаданные().Синоним;
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьПериодОтчетаДляЗаголовка(ОтчетОбъект, Настройки, ОбластьЗаголовок)
	
	ЕстьПериод 		= Ложь;
	ЕстьПериод2 	= Ложь;
		
	Если ТипЗнч(ОтчетОбъект) = Тип("Структура") Тогда
		
		НачалоПериода 		= Неопределено;
		КонецПериода 		= Неопределено;
		ЕстьПериод 			=  ОтчетОбъект.Свойство("ДатаНачала", НачалоПериода) и ОтчетОбъект.Свойство("ДатаОкончания", КонецПериода);
		
	Иначе
		
		парПериодОтчета 		= Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета");
		
		Если парПериодОтчета = Неопределено Тогда
			Настройки.ДополнительныеСвойства.Свойство("ПериодОтчета", парПериодОтчета);
		КонецЕсли;
		
		НачалоПериода 	= Неопределено;
		КонецПериода 	= Неопределено;
		
		
		
		Если парПериодОтчета = Неопределено Тогда
			
			Если ОтчетОбъект.Метаданные().Реквизиты.Найти("ДатаНачала") <> Неопределено и ОтчетОбъект.Метаданные().Реквизиты.Найти("ДатаОкончания") <> Неопределено Тогда
				НачалоПериода 	= ОтчетОбъект.ДатаНачала;
				КонецПериода 	= ОтчетОбъект.ДатаОкончания;
				ЕстьПериод 		= Истина;
			ИначеЕсли ОтчетОбъект.Метаданные().Реквизиты.Найти("ДатаОтчета") <> Неопределено Тогда
				ДатаОтчета 		= ОтчетОбъект.ДатаОтчета;
				ЕстьПериод2 	= Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(парПериодОтчета) = Тип("СтандартныйПериод") Тогда
			
			НачалоПериода 		= парПериодОтчета.ДатаНачала;
			КонецПериода 		= парПериодОтчета.ДатаОкончания;
			ЕстьПериод 			= Истина;
			
		Иначе
			
			НачалоПериода 		= парПериодОтчета.Значение.ДатаНачала;
			КонецПериода 		= парПериодОтчета.Значение.ДатаОкончания;
			ЕстьПериод 			= Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьПериод Тогда
		ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОбластьЗаголовок.Параметры.ЗаголовокОтчета + ": " + КомпоновкаДанныхСервер.ОписаниеПериода(НачалоПериода, КонецПериода);
	ИначеЕсли ЕстьПериод2 Тогда
		ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОбластьЗаголовок.Параметры.ЗаголовокОтчета + " на " + Формат(ДатаОтчета, "ДФ='dd MMMM yyyy'");
	КонецЕсли;
	
КонецФункции

Процедура ВывестиШапкуОтчета(ОтчетОбъект, ТабДокумент, Макет = Неопределено, УдалитьПервуюОпределяющуюСтроку = Ложь, Настройки = Неопределено) Экспорт
	
	//Если Макет = Неопределено Тогда
		Макет = ПолучитьОбщийМакет("МакетЗаголовкаОтчетовНаСКД");
	//КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки 				= ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	УстановитьПараметрыВыводаОтчета(Настройки, Новый Структура("TitleOutput,FilterOutput,DataParametersOutput"),ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	ВывестиЗаголовокОтчета	(ОтчетОбъект, Настройки, ТабДокумент, Макет);
	ВывестиОтборОтчета		(ОтчетОбъект, Настройки, ТабДокумент, Макет);
	ВывестиАвтораОтчета		(ОтчетОбъект, ТабДокумент, Макет);
	
	ТабДокумент.Область		("R1:R" + ТабДокумент.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

Процедура ВывестиАвтораОтчета(ОтчетОбъект, ТабДокумент, Макет)
	
	ОбластьДатаАвтор      	= Макет.ПолучитьОбласть("ДатаАвтор");
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если Найти(СтрокаСоединения, "Srvr") <> 0 Тогда
		СтрокаСоединения = НСтр(СтрокаСоединенияИнформационнойБазы(), "Srvr") + "/" + НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref")
	Иначе
		СтрокаСоединения = НСтр(СтрокаСоединенияИнформационнойБазы(), "File");	
	КонецЕсли;
	ОбластьДатаАвтор.Параметры.ДатаАвторФормированияОтчета 	= "Сформирован " + ИмяПользователя() + " " + ТекущаяДата() + ". База " + СтрокаСоединения + ".";
	ТабДокумент.Вывести(ОбластьДатаАвтор);
	
КонецПроцедуры

Процедура ВывестиЗаголовокОтчета(ОтчетОбъект, Настройки, ТабДокумент, Макет = Неопределено, УдалитьПервуюОпределяющуюСтроку = Ложь) Экспорт
	
	Если Макет = Неопределено Тогда
		Макет = ПолучитьОбщийМакет("МакетЗаголовкаОтчетовНаСКД");
	КонецЕсли;
	
	//Настройки 				= ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОпределитьЗаголовокОтчета(ОтчетОбъект);
	
	ОпределитьПериодОтчетаДляЗаголовка(ОтчетОбъект, Настройки, ОбластьЗаголовок);
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ВывестиОтборОтчета(ОтчетОбъект, Настройки, ТабДокумент, Макет)
	
	//ВыводитьОтбор = ТипЗнч(ОтчетОбъект) <> Тип("Структура") или ОтчетОбъект.ВыводитьОтборы;
	//
	//Если НЕ ВыводитьОтбор Тогда
	//	Возврат;
	//КонецЕсли;
		
	ТекстОтбор = СформироватьПредставлениеОтборов(Настройки);// ОтчетОбъект.КомпоновщикНастроек.Настройки);//Настройки);
	
	Если ПустаяСтрока(ТекстОтбор) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Отборы";
	ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор + ".";
	
	ТабДокумент.Вывести(ОбластьОписаниеНастроек);
	
КонецПроцедуры

Функция ЭтоСКД(ОтчетОбъект)
	Возврат ТипЗнч(ОтчетОбъект) = Тип("СхемаКомпоновкиДанных");
КонецФункции

Процедура УстановитьПериодОтчета(Настройки, ОтчетОбъектИлиВиджет = Неопределено) Экспорт
	
	ПериодОтчета = Новый СтандартныйПериод;
	
	Если ТипЗнч(ОтчетОбъектИлиВиджет) = Тип("Структура") Тогда
		
		Если ОтчетОбъектИлиВиджет.Свойство("ДатаНачала") и ОтчетОбъектИлиВиджет.Свойство("ДатаОкончания") Тогда
			
			ЗаполнитьЗначенияСвойств(ПериодОтчета, ОтчетОбъектИлиВиджет);
			
			УстановитьПараметрДанных(Настройки,"НачалоПериода"	, ОтчетОбъектИлиВиджет.ДатаНачала);
			УстановитьПараметрДанных(Настройки,"КонецПериода"	, КонецДня(ОтчетОбъектИлиВиджет.ДатаОкончания));
		
		КонецЕсли;
		
		Настройки.ДополнительныеСвойства.Вставить("ПериодОтчета", ПериодОтчета);
		УстановитьПараметрДанных(Настройки,"ПериодОтчета"	, ПериодОтчета);
		
	Иначе
		
		Попытка
			НачалоПериодаИзСКД = ОтчетОбъектИлиВиджет.СхемаКомпоновкиДанных.Параметры.НачалоПериода.Значение;
		Исключение
			НачалоПериодаИзСКД = Неопределено;
		КонецПопытки;
		Попытка
			КонецПериодаИзСКД = ОтчетОбъектИлиВиджет.СхемаКомпоновкиДанных.Параметры.КонецПериода.Значение;
		Исключение
			КонецПериодаИзСКД = Неопределено;
		КонецПопытки;
	
		ПериодОтчета.Вариант 		= ВариантСтандартногоПериода.ПроизвольныйПериод;
		ПериодОтчета.ДатаНачала 	= ?(ЗначениеЗаполнено(НачалоПериодаИзСКД)	, НачалоПериодаИзСКД	, ОтчетОбъектИлиВиджет.ДатаНачала);
		ПериодОтчета.ДатаОкончания 	= ?(ЗначениеЗаполнено(КонецПериодаИзСКД)	, КонецПериодаИзСКД		, КонецДня(ОтчетОбъектИлиВиджет.ДатаОкончания));
		
		УстановитьПараметрДанных(Настройки, "ПериодОтчета"	, ПериодОтчета);
		УстановитьПараметрДанных(Настройки, "НачалоПериода"	, ПериодОтчета.ДатаНачала);
		УстановитьПараметрДанных(Настройки, "КонецПериода"	, ПериодОтчета.ДатаОкончания);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьНастройкиОтчетаПоТаблицеНастроек(ОтчетОбъект) Экспорт
	
	//Если Не РежимУФ И ФормаОтчета.ЭлементыФормы.Найти("СтруктураОтчетаТаблица") = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	ТекНастройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	ТекНастройки.Структура.Очистить();
	
	
	
	Если ЗначениеЗаполнено(ОтчетОбъект.Периодичность) Тогда
		
		ТекСтрукТаблица = ТекНастройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		ТекСтрукТаблица.Использование = Истина;
		
		НоваяГруппировкаКолонка = ТекСтрукТаблица.Колонки.Добавить();
		НоваяГруппировкаКолонка.Использование = Истина;
		НовоеПолеГруппировки = НоваяГруппировкаКолонка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПолеГруппировки.Использование = Истина;
		НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ОтчетОбъект.Периодичность);
		НоваяГруппировкаКолонка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		НоваяГруппировкаКолонка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		ТекРодитель = ТекСтрукТаблица.Строки;
	Иначе
		
		ТекРодитель = ТекНастройки.Структура;
		
	КонецЕсли;
	
	Для каждого ТекСтрока Из ОтчетОбъект.СтруктураОтчетаТаблица Цикл
		
		Если Не ТекСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекРодитель) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Или ТипЗнч(ТекРодитель) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			НоваяГруппировка = ТекРодитель.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Иначе
			НоваяГруппировка = ТекРодитель.Добавить();
		КонецЕсли;
		
		НоваяГруппировка.Использование = ТекСтрока.Использование;
		
		СтрокаСпискаПолей = ТекСтрока.Поле;
		Пока Не ПустаяСтрока(СтрокаСпискаПолей) Цикл
			
			ПозицияРазделителя = Найти(СтрокаСпискаПолей, ",");
			Если ПозицияРазделителя = 0 Тогда
				ТекПолеПолное = СтрокаСпискаПолей;
				СтрокаСпискаПолей = "";
			Иначе
				ТекПолеПолное = Лев(СтрокаСпискаПолей, ПозицияРазделителя - 1);
				СтрокаСпискаПолей = Сред(СтрокаСпискаПолей, ПозицияРазделителя + 1);
			КонецЕсли;
			
			НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			Если Не Найти(ТекПолеПолное, "%ТИ") = 0 Тогда
				НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			ИначеЕсли Не Найти(ТекПолеПолное, "%И") = 0 Тогда
				НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			Иначе
				НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Если Не Найти(ТекПолеПолное, "%П") = 0 Тогда
				НовоеПолеГруппировки.Использование = Истина;
			Иначе
				НовоеПолеГруппировки.Использование = Ложь;
			КонецЕсли;
			
			ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%ТИ", "");
			ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%И", "");
			ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%П", "");
			
			НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ТекПолеПолное);
			
		КонецЦикла;
		
		НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		Если НоваяГруппировка.Использование Тогда
			ТекРодитель = НоваяГруппировка.Структура;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, КоллекцияНастроек, СписокПолейПоУмолчанию)
	Для каждого ТекГруппировка Из КоллекцияНастроек Цикл
		Если ТипЗнч(ТекГруппировка) = Тип("ДиаграммаКомпоновкиДанных") Тогда 
			ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, ТекГруппировка.Серии, СписокПолейПоУмолчанию);
		ИначеЕсли ТипЗнч(ТекГруппировка) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, ТекГруппировка, СписокПолейПоУмолчанию);
		ИначеЕсли Не (ТипЗнч(ТекГруппировка) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ТекГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных"))
			Тогда
			ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, ТекГруппировка.Строки, СписокПолейПоУмолчанию);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 				= Отчет.СтруктураОтчетаТаблица.Добавить();
		НоваяСтрока.Использование 	= ТекГруппировка.Использование;// И ТекИспользование;
		
		УстановитьПолеПредставлениеСтрокиТаблицыНастроек(Отчет, ТекГруппировка, НоваяСтрока, СписокПолейПоУмолчанию);
		
		ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, ТекГруппировка.Структура, СписокПолейПоУмолчанию);
		
	КонецЦикла;
КонецПроцедуры

Процедура ПреобразоватьНастройкиОтчетаКТабличномуВиду(Отчет) Экспорт
	
	ТаблицаНастроек = Отчет.СтруктураОтчетаТаблица;
	ТаблицаНастроек.Очистить();
	
	СписокПолейПоУмолчанию = ПолучитьСписокПолейГруппировокОтчетаПоУмолчанию(Отчет);
	
	НастройкиОтчета = Отчет.КомпоновщикНастроек.Настройки;
	
	НашлиПериодичность = Ложь;
	Если НастройкиОтчета.Структура.Количество() > 0 и ТипЗнч(НастройкиОтчета.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда 
		КоллекцияНастроек = НастройкиОтчета.Структура[0].Строки;
		
		КолонкиСтруктуры = НастройкиОтчета.Структура[0].Колонки; 
		
		Для каждого ТекКолонка Из КолонкиСтруктуры Цикл	
			
			Если Не ТекКолонка.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ПолеГруппировки Из ТекКолонка.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки.Использование И ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					Отчет.Периодичность = Строка(ПолеГруппировки.Поле);
					НашлиПериодичность = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НашлиПериодичность Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		КоллекцияНастроек = НастройкиОтчета.Структура;
	КонецЕсли;
	
	Если Не НашлиПериодичность Тогда
		Отчет.Периодичность = "";
	КонецЕсли;	
	ПреобразоватьГруппировкуВСтрокуТаблицыГруппировок(Отчет, КоллекцияНастроек, СписокПолейПоУмолчанию);
	
	Для каждого ЭлементСписка Из СписокПолейПоУмолчанию Цикл
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.Использование = Ложь;
		НоваяСтрока.Поле = ЭлементСписка.Значение + "%П";
		НоваяСтрока.Представление = ЭлементСписка.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ДоступноеПоле = Коллекция.Элементы.Найти(Поле);
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
		
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

Функция ПолучитьЗапрещенныеПоля(ОтчетОбъект, Режим = "Группировка") Экспорт
	
	Если ОтчетОбъект.Метаданные().Реквизиты.Найти("ДанныеОтчета") = Неопределено Тогда
		ДанныеОтчета = Неопределено;
	Иначе
		ДанныеОтчета = ОтчетОбъект.ДанныеОтчета;
	КонецЕсли;
	
	РодителиПоля = Новый ТаблицаЗначений;
	РодителиПоля.Колонки.Добавить("Поле");
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "UserFields";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "DataParameters";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "SystemFields";
			
	ИдентификаторОбъекта = ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	Если Режим = "ДополнительныеПоля" Тогда
		Для Каждого ДоступноеПоле Из ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = Строка(ДоступноеПоле.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РодителиПоля;
	
КонецФункции

Процедура ГруппировкаДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь, ЭлементаУправления = Неопределено, ПолеСУсловнымиОбозначениями = Ложь) Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Группировка");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Группировка";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		Если ЭлементаУправления = Неопределено Тогда
			НоваяСтрока = ФормаОтчета.ЭлементыФормы.Группировка.Значение.Добавить();
		Иначе
			НоваяСтрока = ЭлементаУправления.Значение.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Использование  = Истина;
		Если ПолеСУсловнымиОбозначениями Тогда
			НоваяСтрока.Представление  = "  " + ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
			НоваяСтрока.Поле           = "" + ТекущиеДанные.Поле + "%П";
		Иначе
			НоваяСтрока.Представление  = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
			НоваяСтрока.Поле           = ТекущиеДанные.Поле;
		КонецЕсли;
		
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		Если ЭлементаУправления = Неопределено Тогда
			ФормаОтчета.ЭлементыФормы.Группировка.ТекущаяСтрока = НоваяСтрока;
		Иначе
			ЭлементаУправления.ТекущаяСтрока = НоваяСтрока;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПолеПредставлениеСтрокиТаблицыНастроек(ОтчетОбъект, ТекГруппировка, ТекСтрока, СписокПолейПоУмолчанию)
	
	СтрокаПолей = "";
	СтрокаПредставления = "";
	
	ТекИерархия = Неопределено;
	КвоИспользование = 0;
	
	Для каждого Стр Из ТекГруппировка.ПоляГруппировки.Элементы Цикл
		
		ТекПоле = Строка(Стр.Поле);
		
		НайдЗнач = СписокПолейПоУмолчанию.НайтиПоЗначению(ТекПоле);
		Если Не НайдЗнач = Неопределено Тогда
			СписокПолейПоУмолчанию.Удалить(НайдЗнач);
		КонецЕсли;
		
		ТекПредставление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ТекПоле));
		Если ТекПредставление = Неопределено Тогда
			ТекПредставление = "";
		КонецЕсли;
		
		ТекИерархия = Стр.ТипГруппировки;
		
		Если Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			ТекПоле = ТекПоле + "%ТИ";
			ТекПредставление = ТекПредставление + " (Только группы)";
		ИначеЕсли Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
			ТекПоле = ТекПоле + "%И";
			ТекПредставление = ТекПредставление + " (С группами)";
		КонецЕсли;
		Если Стр.Использование Тогда
			КвоИспользование = КвоИспользование + 1;
			ТекПоле = ТекПоле + "%П";
		Иначе
			ТекПредставление = "";
		КонецЕсли;
		
		СтрокаПолей = СтрокаПолей + "," + ТекПоле;
		Если Не ПустаяСтрока(ТекПредставление) Тогда
			СтрокаПредставления = СтрокаПредставления + ", " + ТекПредставление;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КвоИспользование = 1 Тогда
		
		Если Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			ТекСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия;
		ИначеЕсли Стр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
			ТекСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия;
		Иначе
			ТекСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПолей = Сред(СтрокаПолей, 2);
	СтрокаПредставления = Сред(СтрокаПредставления, 3);
	
	ТекСтрока.Поле = СтрокаПолей;
	ТекСтрока.Представление = СтрокаПредставления;
	
КонецПроцедуры

Функция ПолучитьСписокПолейГруппировокОтчетаПоУмолчанию(ТекОбъект)
	
	СписокПолейПоУмолчанию = Новый СписокЗначений;
	
	ДоступныеПоля = ТекОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы;
	
	Для каждого ТекЗнач Из глПолучитьСписокПолейГруппировокОтчетаПоУмолчанию() Цикл
		НайдПоле = ДоступныеПоля.Найти(ТекЗнач);
		Если СписокПолейПоУмолчанию.НайтиПоЗначению(ТекЗнач) = Неопределено И Не НайдПоле = Неопределено Тогда
			СписокПолейПоУмолчанию.Добавить(ТекЗнач, НайдПоле.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПолейПоУмолчанию;
	
КонецФункции

Функция глПолучитьСписокПолейГруппировокОтчетаПоУмолчанию() Экспорт
	
	СписокПолейПоУмолчанию = Новый Массив;
	
	СписокРегистров = Новый Структура;
	
	Для каждого ТекРегистр Из Метаданные.РегистрыНакопления Цикл
		
		Для каждого ТекИзмерение Из ТекРегистр.Измерения Цикл
			Если СписокПолейПоУмолчанию.Найти(ТекИзмерение.Имя) = Неопределено Тогда
				СписокПолейПоУмолчанию.Добавить(ТекИзмерение.Имя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СписокПолейПоУмолчанию.Добавить("Регистратор");
	
	Возврат СписокПолейПоУмолчанию;
	
КонецФункции

&Клиент
Процедура ИнициализироватьПериодОтчета(ТекФорма, РежимУФ = Ложь) Экспорт
	ЕстьПериод = ТекФорма.ОтчетОбъект.Метаданные().Реквизиты.Найти("ПериодОтчета") <> Неопределено;
	Если НЕ ЗначениеЗаполнено(ТекФорма.ДатаНачала) Тогда
		ТекФорма.ДатаНачала = ТекущаяДата();
		ТекФорма.ДатаОкончания = ТекущаяДата();
		
		Если ЕстьПериод Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
			ТекФорма.ПериодОтчета.ДатаНачала = ТекущаяДата();
			текФорма.ПериодОтчета.ДатаОкончания = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	Если ЕстьПериод Тогда
		//ДобавитьКнопкиПериодов(ТекФорма);
		ПоказатьПериодОтчета(ТекФорма);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокОтчетовСортироватьПоНаименованию() Экспорт
	Возврат Новый Структура("ВзаиморасчетыСКонтрагентами, КонтрольОстатков, ОстаткиЗапасов, ОстаткиНоменклатуры, Приобретения, ПродажиИОтгрузки, 
	|РеализованныеТоварыПоставщиков, Резервы, РейтингПоЗакупкам, СвободныеОстатки, СкидкиВРознице, УправленческиеОстатки, ЦеныНоменклатуры");
КонецФункции

&Клиент
Процедура ОткрытьНовоеОкноОтчета(ТекФорма)
	
	НовыйОтчет = Отчеты[ТекФорма.ОтчетОбъект.Метаданные().Имя].Создать();
	НоваяФорма = НовыйОтчет.ПолучитьФорму(, , Новый УникальныйИдентификатор);
	//НоваяФорма.ОтчетОбъект.Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НеПроводитьПолнуюИнициализацию");
	
	ЗаполнитьЗначенияСвойств(НовыйОтчет, ТекФорма.ОтчетОбъект);
	НоваяФорма.ДанныеРасшифровки = ТекФорма.ДанныеРасшифровки;
	
	НоваяФорма.Открыть();
	
	НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ТекФорма.ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	
	
	НоваяФорма.ЭлементыФормы.Результат.ВставитьОбласть(ТекФорма.ЭлементыФормы.Результат.Область());
	НоваяФорма.ЭлементыФормы.Результат.ФиксацияСлева = ТекФорма.ЭлементыФормы.Результат.ФиксацияСлева;
	НоваяФорма.ЭлементыФормы.Результат.ФиксацияСверху = ТекФорма.ЭлементыФормы.Результат.ФиксацияСверху;
	Если ТекФорма.ЭлементыФормы.ПанельОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельОтчета.Страницы.Результат Тогда
		НоваяФорма.ЭлементыФормы.ПанельОтчета.ТекущаяСтраница = НоваяФорма.ЭлементыФормы.ПанельОтчета.Страницы.Результат;
	КонецЕсли;
	
	ВывестиКнопкиУровней(НоваяФорма.ЭлементыФормы.Результат, НоваяФорма.ЭлементыФормы.КоманднаяПанельРезультат);
	
КонецПроцедуры

Функция НайтиПредопределенныйВариантВСохраненных(ИмяОтчета,ИмяВарианта) Экспорт
	НастраиваемыйОбъект = "ОтчетОбъект." + ИмяОтчета;//ОбъектОтчет.Метаданные().Имя;
	
	ПроверенныеНастройки = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("ИмяВарианта", ИмяВарианта);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СохраненныеНастройкиОтчетов.Ссылка,
	|	СохраненныеНастройкиОтчетов.Описание,
	|	СохраненныеНастройкиОтчетов.Наименование
	|ИЗ
	|	Справочник.СохраненныеНастройкиОтчетов КАК СохраненныеНастройкиОтчетов
	|ГДЕ
	|	СохраненныеНастройкиОтчетов.Предопределенная
	|	И СохраненныеНастройкиОтчетов.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройкиОтчетов.Описание = &ИмяВарианта";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
	
Функция СоздатьПредопределенныеНастройкиОтчета(ОбъектОтчет, ТекОтчетОбъект, ИмяОтчета, НастройкаПоУмолчанию)
	
	Если ОбъектОтчет.Свойство("НастройкаСистемыОтчет") и ЗначениеЗаполнено(ОбъектОтчет.НастройкаСистемыОтчет) Тогда
		НастраиваемыйОбъект = ОбъектОтчет.НастройкаСистемыОтчет;
		СКД 				= НастраиваемыйОбъект.ХранилищеСхемыКомпоновки.Получить();
	Иначе
		НастраиваемыйОбъект = "ОтчетОбъект." + ИмяОтчета;//ОбъектОтчет.Метаданные().Имя;
		СКД 				= ТекОтчетОбъект.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	ПроверенныеНастройки 	= Новый Массив;
	Запрос 					= Новый Запрос;
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Запрос.Текст 			= 
	"ВЫБРАТЬ
	|	СохраненныеНастройкиОтчетов.Ссылка,
	|	СохраненныеНастройкиОтчетов.Описание,
	|	СохраненныеНастройкиОтчетов.Наименование,
	|	СохраненныеНастройкиОтчетов.НеПоказыватьВСпискеСохраненных
	|ИЗ
	|	Справочник.СохраненныеНастройкиОтчетов КАК СохраненныеНастройкиОтчетов
	|ГДЕ
	|	СохраненныеНастройкиОтчетов.Предопределенная
	|	И СохраненныеНастройкиОтчетов.НастраиваемыйОбъект = &НастраиваемыйОбъект";
	
	Выборка 				= Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Вариант = СКД.ВариантыНастроек.Найти(Выборка.Описание);// ОбъектОтчет.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(Выборка.Описание);
		Если Вариант = Неопределено Тогда
			ТекНастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТекНастройкаОбъект.ДополнительныеСвойства.Вставить("ПрограммноеУдаление",Истина);
			Попытка
				ТекНастройкаОбъект.Удалить();
			Исключение КонецПопытки;
			Продолжить;
		КонецЕсли;
		Если Выборка.Наименование <> Вариант.Представление или Выборка.НеПоказыватьВСпискеСохраненных <> Найти(Вариант.Представление,"*") > 0 Тогда
			ТекНастройкаОбъект 				= Выборка.Ссылка.ПолучитьОбъект();
			ТекНастройкаОбъект.Наименование = Вариант.Представление;
			ТекНастройкаОбъект.НеПоказыватьВСпискеСохраненных = Найти(Вариант.Представление,"*") > 0;
			ТекНастройкаОбъект.Записать();
		КонецЕсли;
		ПроверенныеНастройки.Добавить(Вариант.Имя);
		Если НЕ ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
			НастройкаПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СохраненныеНастройкиОтчетов.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройкиОтчетов КАК СохраненныеНастройкиОтчетов
	|ГДЕ
	|	СохраненныеНастройкиОтчетов.Предопределенная
	|	И СохраненныеНастройкиОтчетов.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройкиОтчетов.Описание = &Наименование";
	
	Для каждого Вариант Из СКд.ВариантыНастроек Цикл
		Если ПроверенныеНастройки.Найти(Вариант.Имя) = Неопределено Тогда
			Запрос.УстановитьПараметр("Наименование", Вариант.Имя);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				НовыйОбъект 					= Справочники.СохраненныеНастройкиОтчетов.СоздатьЭлемент();
				НовыйОбъект.Предопределенная 	= Истина;
				НовыйОбъект.Наименование 		= Вариант.Представление;
				НовыйОбъект.Описание 			= Вариант.Имя;
				НовыйОбъект.НастраиваемыйОбъект = НастраиваемыйОбъект;
				//НовыйОбъект.ТипНастройки 		= Перечисления.ТипыНастроек.НастройкиОтчета;
				НовыйОбъект.НеПоказыватьВСпискеСохраненных = Найти(Вариант.Представление,"*") > 0;
				НовыйОбъект.Записать();
				
				Если НЕ ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
					НастройкаПоУмолчанию = НовыйОбъект.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СКД;
КонецФункции


Процедура ПоказатьПериодОтчета(ТекФорма)
	ТекФорма.ДатаНачала 	= ТекФорма.ПериодОтчета.ДатаНачала;
	ТекФорма.ДатаОкончания 	= ТекФорма.ПериодОтчета.ДатаОкончания;
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовОтчетаПоУмолчанию(ТекОбъект) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекОбъект.ПериодОтчета.Вариант) Тогда
		ТекОбъект.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
	КонецЕсли;
КонецПроцедуры

Процедура ПослеВосстановленияЗначений(ТекОбъект,ТекФорма) Экспорт
	//КомпоновкаДанных.УстановитьПредопределеннуюНастройку(ТекОбъект);
КонецПроцедуры

Функция СформироватьУсловияЗапросаПоПараметрамОтбора(ТекОбъект,ТекЗапрос,СтруктураПолей,ИмяТаблицы) Экспорт
	ЭлементыОтборов = ТекОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ТекстОтборов = "";
	Для Каждого ТекСтрока Из СтруктураПолей Цикл
		ИмяРеквизита 	= ТекСтрока.Ключ;
		ТекОтбор = Неопределено;
		Для Каждого ТекОтбор Из ЭлементыОтборов Цикл
			Если Строка(ТекОтбор.ЛевоеЗначение) = ИмяРеквизита Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//ТекОтбор 		= ЭлементыОтборов.Получить(ИмяРеквизита);
		Если ТекОтбор = Неопределено Тогда
			Сообщить("Ошибка установки отбора по параметру """ + ИмяРеквизита + """",СтатусСообщения.Информация);
			Продолжить;
		КонецЕсли;
		Если НЕ ТекОтбор.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЗапрос.УстановитьПараметр(ИмяРеквизита,ТекОтбор.ПравоеЗначение);
		
		Если ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТекстУсловия = "=";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			ТекстУсловия = ">";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			ТекстУсловия = ">=";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			ТекстУсловия = "<";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			ТекстУсловия = "<=";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
			ТекстУсловия = "В иерархии";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке или ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
			ТекстУсловия = "В";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			ТекстУсловия = "НЕ в иерархии";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке или ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			ТекстУсловия = "НЕ В";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ТекстУсловия = "<>";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
			ТекстУсловия = "Подобно";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
			ТекстУсловия = "НЕ Подобно";
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
			ТекстУсловия = "<>";
			ТекЗапрос.УстановитьПараметр(ИмяРеквизита,ТекСтрока.Значение);
		ИначеЕсли ТекОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ТекстУсловия = "=";
			ТекЗапрос.УстановитьПараметр(ИмяРеквизита,ТекСтрока.Значение);
		Иначе
			Сообщить("Ошибка установки условия вида """+ ТекОтбор.ВидСравнения + """",СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
		ТекТекст 			= "" + ИмяТаблицы + "." + ИмяРеквизита + " " + ТекстУсловия + " (&" + ИмяРеквизита + ")";
		
		Если ТекстОтборов 	= "" Тогда
			ТекстОтборов 	= "ГДЕ " + ТекТекст;
		Иначе
			ТекстОтборов 	= ТекстОтборов + "
			|И " + ТекТекст;
		КонецЕсли;
	КонецЦикла;
	//Сообщить(ТекстОтборов);
	Возврат ТекстОтборов;
КонецФункции

Функция УстановитьЗначениеОтбора(ТекОбъект, ИмяОтбора, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(ТекОбъект) = Тип("ДинамическийСписок") Тогда
		КоллекцияОтборов = ТекОбъект.Отбор.Элементы;
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("НастройкиКомпоновкиДанных") Тогда
		КоллекцияОтборов = ТекОбъект.Отбор.Элементы;
	ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ОтборКомпоновкиДанных") Тогда
		КоллекцияОтборов = ТекОбъект.Элементы;
	Иначе
		КоллекцияОтборов = ТекОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	КонецЕсли;
	
	// Ищем
	ИскомыйОтбор = Неопределено;
	Для Каждого ТекОтбор Из КоллекцияОтборов Цикл
		Если Строка(ТекОтбор.ЛевоеЗначение) = ИмяОтбора Тогда
			ИскомыйОтбор = ТекОтбор;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИскомыйОтбор = Неопределено Тогда // Если нету
		ИскомыйОтбор = КоллекцияОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИскомыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОтбора);
	КонецЕсли;
	// Заполняем
	ИскомыйОтбор.Использование  = Использование;
	ИскомыйОтбор.ВидСравнения   = ВидСравнения;
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		ИскомыйОтбор.ПравоеЗначение = Новый Массив;
		Для Каждого ТекЗначение Из Значение Цикл
			ИскомыйОтбор.ПравоеЗначение.Добавить(ТекЗначение);
		КонецЦикла;
	Иначе
		ИскомыйОтбор.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Возврат ИскомыйОтбор;
	
КонецФункции

Процедура ИзменитьПериодОтчета(ТекОбъект, ИмяКоманды) Экспорт
	Как 									= ?(ИмяКоманды = "МесяцНазад",-1,1);
	ТекОбъект.ДатаНачала 					= НачалоМесяца(ДобавитьМесяц(ТекОбъект.ДатаНачала,Как));
	ТекОбъект.ДатаОкончания 				= КонецМесяца(ТекОбъект.ДатаНачала);
	ТекОбъект.ПериодОтчета.Вариант 			= ВариантСтандартногоПериода.ПроизвольныйПериод;
	ТекОбъект.ПериодОтчета.ДатаНачала 		= ТекОбъект.ДатаНачала;
	ТекОбъект.ПериодОтчета.ДатаОкончания 	= ТекОбъект.ДатаОкончания;
КонецПроцедуры

Процедура НазначитьМакетДляГруппировки(ТекОбъект,ИмяГруппировкиПолучателяМакета,ИмяГруппировкиИсточникаМакета,ТипыМакетов = Неопределено,НазначатьЗаголовок = Ложь) Экспорт
	СписокТиповМакетов = Новый СписокЗначений;
	Если ТипыМакетов = Неопределено Тогда
		СписокТиповМакетов.Добавить(ТипМакетаОбластиКомпоновкиДанных.Заголовок);
	//ИначеЕсли ТипЗнч(ТипыМакетов) = Тип("СтруктураЗначений") Тогда
	//	Для Каждого ТекСтрока Из ТипыМакетов Цикл
	//		СписокТиповМакетов.Добавить(ТекСтрока.Значение);
	//	КонецЦикла;
	ИначеЕсли ТипЗнч(ТипыМакетов) = Тип("ТипМакетаОбластиКомпоновкиДанных") Тогда
		СписокТиповМакетов.Добавить(ТипыМакетов);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СписокТиповМакетов Цикл
		МакетИсточник 		= Неопределено;
		МакетПолучатель 	= Неопределено;
		ТекТипМакета 		= ТекСтрока.Значение;
		Для НомерОбходаПоМакетам = 1 По ?(НазначатьЗаголовок,2,1) Цикл
			
			Если НомерОбходаПоМакетам = 1 Тогда
				МакетыГруппировокСКД 	= ТекОбъект.СхемаКомпоновкиДанных.МакетыГруппировок;
			ИначеЕсли НомерОбходаПоМакетам = 2 Тогда
				МакетыГруппировокСКД 	= ТекОбъект.СхемаКомпоновкиДанных.МакетыЗаголовковГруппировок;
			КонецЕсли;
			
			// Найдем макет-источник
			Для Каждого ТекМакет Из МакетыГруппировокСКД Цикл
				Если ТекМакет.ТипМакета <> ТекТипМакета Тогда
					Продолжить;
				КонецЕсли;
				Если Нрег(ТекМакет.ИмяГруппировки) = Нрег(ИмяГруппировкиИсточникаМакета) Тогда
					МакетИсточник = ТекМакет;
					Прервать;
				КонецЕсли;
				Если ТекМакет.ПоляГруппировки.Количество() > 0 Тогда
					Если Нрег(Строка(ТекМакет.ПоляГруппировки[0])) = НРег(ИмяГруппировкиИсточникаМакета) Тогда
						МакетИсточник = ТекМакет;
						Прервать;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			// Найдем макет-получатель
			Для Каждого ТекМакет Из МакетыГруппировокСКД Цикл
				Если ТекМакет.ТипМакета <> ТекТипМакета Тогда
					Продолжить;
				КонецЕсли;
				Если Нрег(ТекМакет.ИмяГруппировки) = Нрег(ИмяГруппировкиПолучателяМакета) Тогда
					МакетПолучатель = ТекМакет;
					Прервать;
				КонецЕсли;
				Если ТекМакет.ПоляГруппировки.Количество() > 0 Тогда
					Если Нрег(Строка(ТекМакет.ПоляГруппировки[0])) = Нрег(ИмяГруппировкиПолучателяМакета) Тогда
						МакетПолучатель = ТекМакет;
						Прервать;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			// Проверка, все ли найдено
			Если МакетИсточник = Неопределено Тогда
				Сообщить("Ошибка назначения макета для группировки """ + ИмяГруппировкиПолучателяМакета + """: не найден макет-источник (""" + ИмяГруппировкиИсточникаМакета + """)",СтатусСообщения.Внимание);
				Возврат;
			КонецЕсли;
			Если МакетПолучатель = Неопределено Тогда
				Сообщить("Ошибка назначения макета для группировки """ + ИмяГруппировкиПолучателяМакета + """: не найден макет-получатель",СтатусСообщения.Внимание);
				Возврат;
			КонецЕсли;
			
			// Назначение макета
			МакетПолучатель.Макет = МакетИсточник.Макет;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФиксациюОбластейОтчетаНаКомпоновке(ТекОбъект,ТекФорма,ТабДок) Экспорт
	
	Область 			= ТабДок.Область(,1,,1);
	//Область.Автоотступ 	= 2;
	//Область.Отступ 		= 0;
	
	// Проверим ширину фиксации
	ТекШирина = 0;
	Для Н = 1 по ТабДок.ШиринаТаблицы Цикл
		ТекШирина = ТекШирина + ТабДок.Область(1,Н,1,Н).ШиринаКолонки;
		Если ТекШирина > 70 и Н > 1 Тогда
			ТабДок.ФиксацияСлева = Н - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Возврат;
	//
	//ЦветФонаШапкиТаблицы 		= Новый Цвет(244, 236, 196);
	//ЦветФонаШапкиРесурсов 		= Новый Цвет(244, 236, 197);
	//НомерСтроки 				= 0;
	//БылЦветШапкиТаблицы 		= Ложь;
	//БылЦветШапкиРесурсов		= Ложь;
	//ПерваяСтрокаШапки			= 0;
	//Пока НомерСтроки <= ТабДок.ВысотаТаблицы Цикл
	//	НомерСтроки 			= НомерСтроки + 1;
	//	ТекОбласть 				= ТабДок.Область(НомерСтроки,1,НомерСтроки,1);
	//	Если ТекОбласть.ЦветФона = ЦветФонаШапкиТаблицы Тогда
	//		ПерваяСтрокаШапки			= ?(ПерваяСтрокаШапки = 0,НомерСтроки,ПерваяСтрокаШапки);
	//		БылЦветШапкиТаблицы 	= Истина;
	//		Если НЕ БылЦветШапкиРесурсов Тогда
	//			НомерКолонки 		= 0;
	//			Пока НомерКолонки <= ТабДок.ШиринаТаблицы Цикл
	//				НомерКолонки 	= НомерКолонки + 1;
	//				ТекОбласть 		= ТабДок.Область(НомерСтроки,НомерКолонки,НомерСтроки,НомерКолонки);
	//				Если ТекОбласть.ЦветФона = ЦветФонаШапкиРесурсов Тогда
	//					БылЦветШапкиРесурсов = Истина;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//	ИначеЕсли БылЦветШапкиТаблицы Тогда
	//		Если ТабДок.Область(ПерваяСтрокаШапки,1,НомерСтроки,1).ЦветФона = ЦветФонаШапкиТаблицы Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если БылЦветШапкиТаблицы Тогда
	//	ТабДок.ФиксацияСверху = НомерСтроки - 1;
	//КонецЕсли;
	//
	//Если НЕ БылЦветШапкиРесурсов Тогда
	//	НомерСтроки = ТабДок.ВысотаТаблицы;
	//	
	//	Пока НомерСтроки > 0 Цикл
	//		ТекОбласть 				= ТабДок.Область(НомерСтроки,1,НомерСтроки,1);
	//		Если ТекОбласть.Текст <> "Итого" Тогда
	//			НомерСтроки = НомерСтроки - 1;
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		БылЦветШапкиРесурсов = Истина;
	//		Для НомерКолонки = 1 по ТабДок.ШиринаТаблицы Цикл
	//			Если ТабДок.Область(НомерСтроки,НомерКолонки,НомерСтроки,НомерКолонки).Текст <> "Итого" Тогда
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		НомерСтроки = НомерСтроки - 1;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Если БылЦветШапкиРесурсов Или Не ТабДок.ФиксацияСлева = 0 Тогда
	//	
	//	Если БылЦветШапкиРесурсов Тогда
	//		НомерКолонкиФиксации = НомерКолонки - 1;
	//	Иначе
	//		НомерКолонкиФиксации = ТабДок.ФиксацияСлева;
	//	КонецЕсли;
	//	
	//	Пока НомерКолонкиФиксации > 1 Цикл
	//		ШиринаКолонок = 0;
	//		Для Ы = 1 По НомерКолонкиФиксации Цикл
	//			ТекОбласть = ТабДок.Область(1,Ы,1,Ы);
	//			ШиринаКолонок = ШиринаКолонок + ТекОбласть.ШиринаКолонки;
	//		КонецЦикла;
	//		Если ШиринаКолонок > 70 Тогда
	//			НомерКолонкиФиксации = НомерКолонкиФиксации - 1;
	//		Иначе
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	ТабДок.ФиксацияСлева = НомерКолонкиФиксации;
	//КонецЕсли;
КонецПроцедуры

Процедура ПрименениеНастройки(ТекОбъект, ТекФорма, ТекСтрока)
	ТекОбъект.СохраненнаяНастройка = ТекСтрока;
	
	ТекОбъект.ПрименитьНастройку();
	
	Если Не ТекФорма.ЭлементыФормы.Найти("ПанельСтруктураОтчета") = Неопределено Тогда
		Если ТекОбъект.ОтображатьТаблицуСтруктурыНастроек Тогда
			ПреобразоватьНастройкиОтчетаКТабличномуВиду(ТекОбъект);//, ТекОбъект.КомпоновщикНастроек.Настройки, ТекОбъект.СтруктураОтчетаТаблица, ТекФорма.Периодичность, Истина, , Истина);
			ТекФорма.НеВыполнятьОбработкуСобытияПриСменеСтраницыПанелиСтруктурыОтчета = Истина;
			ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Таблица;
		Иначе
			ТекФорма.НеВыполнятьОбработкуСобытияПриСменеСтраницыПанелиСтруктурыОтчета = Истина;
			ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИПрименитьСохраненнуюНастройку(ТекОбъект,ТекФорма) Экспорт
	ТекСтрока = ТекФорма.ЭлементыФормы.СохраненныеНастройки.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПрименениеНастройки(ТекОбъект, ТекФорма, ТекСтрока);
КонецПроцедуры

Процедура ПрименитьСохраненнуюНастройку(ЭтаФорма, ИмяОтчета, СохраненнаяНастройка, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) или ПустаяСтрока(СохраненнаяНастройка.ВерсияДанных) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка 	= Ложь;
	ЭтоОтчетОбъект 			= СтрНайти(Строка(ТипЗнч(ЭтаФорма)), "Отчет объект") > 0 или СтрНайти(Строка(ТипЗнч(ЭтаФорма)), "Звіт об`єкт") > 0;

	Отчет 					= ?(ЭтоОтчетОбъект, ЭтаФорма, ЭтаФорма.Отчет);
	
	Отчет.СохраненнаяНастройка = СохраненнаяНастройка;
	
	//Схема = Отчет.СхемаКомпоновкиДанных;
	//
	//Если Отчет.СохраненнаяНастройка.Пустая() Тогда
	//	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	//	Возврат;
	//КонецЕсли;
	//	
	//Если Отчет.СохраненнаяНастройка.Предопределенная Тогда
	//	УстановитьПредопределеннуюНастройку(Отчет, Отчет.СохраненнаяНастройка.Описание, Ложь);
	//	Возврат;
	//КонецЕсли;
	//	
	//СтруктураНастроек = Отчет.СохраненнаяНастройка.ХранилищеНастроек.Получить();
	//Если СтруктураНастроек = Неопределено Тогда
	//	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	//	Возврат;
	//КонецЕсли;
	
	
	Если НЕ ЭтоОтчетОбъект Тогда
		УстановитьТекущуюНастройкуДляВыделенияВСписке(ЭтаФорма);
	КонецЕсли;
	
	// Считываение структуры настроек отчета
	Если Отчет.СохраненнаяНастройка.Пустая() Тогда
		Сообщить("Объект.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);");
		Возврат;
	КонецЕсли;
	
	Если ЭтоОтчетОбъект Тогда
		СКД 				= ЭтаФорма.СхемаКомпоновкиДанных;
	Иначе
		Если ЭтаФорма.Отчет.НастройкаСистемыОтчет.Пустая() Тогда
			ОтчетОбъект 	= ЭтаФорма.РеквизитФормыВЗначение("Отчет", );
			СКД 			= ОтчетОбъект.СхемаКомпоновкиДанных;
		Иначе
			СКД 			= ЭтаФорма.Отчет.НастройкаСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Если Отчет.СохраненнаяНастройка.Предопределенная Тогда
		УстановитьПредопределеннуюНастройку(Отчет, СКД, ИмяОтчета, Отчет.СохраненнаяНастройка.Описание, Ложь);
		Если Отчет.ОтображатьТаблицуСтруктурыНастроек Тогда
			ПреобразоватьНастройкиОтчетаКТабличномуВиду(Отчет);//, Отчет.КомпоновщикНастроек.Настройки, Отчет.СтруктураОтчетаТаблица, ЭтаФорма.Периодичность, Истина, , Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	СтруктураНастроек = Отчет.СохраненнаяНастройка.ХранилищеНастроек.Получить();
	Если СтруктураНастроек = Неопределено Тогда
		Сообщить("Эта настройка не содержит самих настроек!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
	
	СтрокаКопированияИсключить = "";
	СписокСвойствИсключить = Новый Структура("ДатаНачала, ДатаОкончания");
	Для каждого ТекСвойство Из СписокСвойствИсключить Цикл
		Если СтруктураНастроек.Свойство(ТекСвойство.Ключ) Тогда
			СтрокаКопированияИсключить = СтрокаКопированияИсключить + ", " + ТекСвойство.Ключ;
		КонецЕсли;
	КонецЦикла;
	СтрокаКопированияИсключить = Сред(СтрокаКопированияИсключить, 3);
	
	ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек, , СтрокаКопированияИсключить);
	
	Если Отчет.ОтображатьТаблицуСтруктурыНастроек Тогда
		ПреобразоватьНастройкиОтчетаКТабличномуВиду(Отчет);//, Отчет.КомпоновщикНастроек.Настройки, Отчет.СтруктураОтчетаТаблица, ЭтаФорма.Периодичность, Истина, , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохраненныеНастройкиПриПолученииДанных(ТекФорма, ОформленияСтрок) Экспорт
	Для Каждого ТекОформление Из ОформленияСтрок Цикл
		Если ТекОформление.ДанныеСтроки.Ссылка = ТекФорма.СохраненнаяНастройка Тогда
			ТекОформление.Шрифт = Новый Шрифт(,,Истина);
		КонецЕсли;
		Если ТекОформление.ДанныеСтроки.Ссылка.Предопределенная Тогда
			//ТекОформление.Ячейки.Картинка.УстановитьКартинку(БиблиотекаКартинок.ПредопределенныйЭлемент);
			ТекОформление.ЦветФона = WebЦвета.Бежевый;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

//Процедура УдалитьИспользованныеПоляРасшифровки(СписокПолейРасшифровки, МассивПолейРасшифровки)
//	
//	Для каждого ПолеРасшифровки из МассивПолейРасшифровки Цикл
//		Поле = Неопределено;
//		Если ТипЗНч(ПолеРасшифровки) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
//			Поле = ПолеРасшифровки.Поле
//		ИначеЕсли ТипЗнч(ПолеРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
//			Поле = ПолеРасшифровки.ЛевоеЗначение;
//		КонецЕсли;
//		ПолеСписка = СписокПолейРасшифровки.НайтиПоЗначению(Строка(Поле));
//		Если ПолеСписка <> Неопределено тогда
//			СписокПолейРасшифровки.Удалить(ПолеСписка);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

Процедура ДобавитьПоля(Элементы, СписокПолей, СписокПолейИсключений)   
	
	Для каждого ДоступноеПоле из Элементы Цикл
		Если СписокПолейИсключений.НайтиПоЗначению(Строка(ДоступноеПоле.Поле)) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		Если ДоступноеПоле.Папка тогда
			ДобавитьПоля(ДоступноеПоле.Элементы, СписокПолей, СписокПолейИсключений);
		Иначе
			СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокПолейКомпоновщикаНастроек(ОтчетОбъект, КомпоновщикНастроек) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	СписокПолейИсключений = Новый СписокЗначений;
	Попытка
		Если ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) тогда
			Если ТипЗнч(ОтчетОбъект.ПараметрыПанелиПользователя) <> Тип("ХранилищеЗначения") тогда
				НастройкиПанели = ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
				Если НастройкиПанели.Свойство("СписокИсключаемыхПолейРасшифровки") тогда
					СписокПолейИсключений = НастройкиПанели.СписокИсключаемыхПолейРасшифровки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	ДобавитьПоля(КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы, СписокПолей, СписокПолейИсключений);
	
	Возврат СписокПолей;
КонецФункции

Функция ОбработкаРасшифровкиДляПерепроведения(Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета, ДополнительныеРасшифровки = Неопределено, ПерепроводитьБезусловно = Ложь, Режим  = "Проведение") Экспорт
	//Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	//	И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
	//	Сообщить("В процедуру ОбработкаРасшифровкиДляПерепроведения переданы некорректные параметры!",СтатусСообщения.ОченьВажное);
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//СтандартнаяОбработка = Ложь;
	//
	//ДанныеРасшифровки = ФормаОтчета.ДанныеРасшифровки;
	//
	//МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки);
	//
	//СписокПолейРасшифровки = ПолучитьСписокПолейКомпоновщикаНастроек(ОтчетОбъект, ОтчетОбъект.КомпоновщикНастроек);
	//
	//УдалитьИспользованныеПоляРасшифровки(СписокПолейРасшифровки, МассивПолейРасшифровки);
	//
	/////////////////////////////////////////////////
	//
	//ОбработкаРасшифровки	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
	//
	//НовыйОтчет = РасшифроватьОтчетПоРегистраторам(Расшифровка, ОтчетОбъект, ФормаОтчета, ДанныеРасшифровки, ОбработкаРасшифровки, Истина);
	//
	//ФормаРасшифровки 			= НовыйОтчет.ПолучитьФорму();
	//
	//Если (ОтчетОбъект.Метаданные().Имя = "СверкаРегистров" Или ОтчетОбъект.Метаданные().Имя = "СверкаРегистровБухгалтерии") И ОтчетОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("СтруктураВнешДанных") Тогда
	//	СтруктураВнешДанных = НовыйОтчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.СтруктураВнешДанных;
	//Иначе
	//	СтруктураВнешДанных  = Неопределено;
	//КонецЕсли;
	//
	//НастройкиКомпоновки = НовыйОтчет.КомпоновщикНастроек.ПолучитьНастройки();
	//
	//ТиповыеОтчеты.УдалитьГруппировку(НовыйОтчет.КомпоновщикНастроек, "ПериодСекунда");
	//ТиповыеОтчеты.УдалитьГруппировку(НовыйОтчет.КомпоновщикНастроек, "Регистратор");
	//ТиповыеОтчеты.ДобавитьГруппировку(НовыйОтчет.КомпоновщикНастроек, "ПериодСекунда");
	//ТиповыеОтчеты.ДобавитьГруппировку(НовыйОтчет.КомпоновщикНастроек, "Регистратор");
	//Группировка = ТиповыеОтчеты.ПолучитьПоследнийЭлементСтруктуры(НовыйОтчет.КомпоновщикНастроек);
	//Если Группировка.Порядок.Элементы.Количество() = 0 Тогда
	//	ТиповыеОтчеты.ДобавитьАвтоЭлементПорядка(Группировка);
	//КонецЕсли;

	//ПеренестиЗначенияОтборовМеждуНастройками(НастройкиКомпоновки.Отбор,ДанныеРасшифровки.Настройки.Отбор);
	//
	//УдалитьПолеГруппировки(НовыйОтчет.КомпоновщикНастроек.Настройки,"Номенклатура.Код");
	//ПровестиДокументы(НовыйОтчет.КомпоновщикНастроек, НовыйОтчет.СхемаКомпоновкиДанных, ДанныеРасшифровки, Новый ТабличныйДокумент,ПерепроводитьБезусловно, , СтруктураВнешДанных, Режим);
	//
	//Если ФормаРасшифровки.Открыта() Тогда
	//	ФормаРасшифровки.Закрыть();
	//КонецЕсли;
	//
	//Возврат Истина; 
КонецФункции

Функция ТекущийПользователь() Экспорт
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

// Выполняет попытку проведения документов.
//
// Параметры:
//	Документы                - Массив - документы, которые необходимо провести.
//
// Возвращаемое значение:
//	Массив - массив структур с полями:
//			 Ссылка         - документ, который не удалось провести;
//			 ОписаниеОшибки - текст описания ошибки при проведении.
//
Функция ПровестиМассивДокументов(Документы) Экспорт
	
	НепроведенныеДокументы = Новый Массив;
	
	Для Каждого ДокументСсылка Из Документы Цикл
		
		РезультатПроведения = ПровестиДокумент(ДокументСсылка, Ложь, Ложь, Истина);
	
		Если Не РезультатПроведения.Проведен Тогда
			НепроведенныеДокументы.Добавить(Новый Структура("Ссылка,ОписаниеОшибки", ДокументСсылка, РезультатПроведения.Информация));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеДокументы;
	
КонецФункции

Процедура УдалитьПолеГруппировки(ТекСтруктура,ИмяПоля)
	Для каждого ТекЭлементСтруктуры Из ТекСтруктура.Структура Цикл
		Если Не ТекЭлементСтруктуры.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекГруппировка Из ТекЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если Не ТекГруппировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПолеПредставление = Строка(ТекГруппировка.Поле);
			Если ТекПолеПредставление = ИмяПоля Тогда
				ТекГруппировка.Использование = Ложь;
				Возврат;
			КонецЕсли;
			//ПозицияРазделителя = Найти(ТекПолеПредставление, ".");
			//Если ПозицияРазделителя = 0 Тогда
			//	ТекПоле = ТекПолеПредставление;
			//Иначе
			//	ТекПоле = Лев(ТекПолеПредставление, ПозицияРазделителя - 1);
			//КонецЕсли;
			//
			//Если МассивИспользуемыхПолей.Найти(ТекПоле) = Неопределено Тогда
			//	МассивИспользуемыхПолей.Добавить(ТекПоле);
			//КонецЕсли;
			
		КонецЦикла;
		
		УдалитьПолеГруппировки(ТекЭлементСтруктуры, ИмяПоля);
		
	КонецЦикла;
КонецПроцедуры

Процедура ОтключитьЗапрещенныеДляВыводаВКоллекциюСтруктуры(НастройкиКомпоновки) Экспорт
		
		Для Каждого ЭлементСтруктуры Из НастройкиКомпоновки.Структура Цикл
			
			Если ЭлементСтруктуры.Использование Тогда
				Если 	ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
					Группировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(Группировка,НастройкиКомпоновки.Структура[0].Строки[0]);
					ЗаполнитьЗначенияСвойств(Группировка.ПоляГруппировки.Элементы,НастройкиКомпоновки.Структура[0].Строки[0].ПоляГруппировки.Элементы);
					
					
					Для Каждого Элем из НастройкиКомпоновки.Структура[0].Выбор.Элементы Цикл
						НовыйЭлемент = Группировка.Выбор.Элементы.Добавить(ТипЗнч(Элем));
						ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элем);
					КонецЦикла;
					Для Каждого Элем из НастройкиКомпоновки.Структура[0].Строки[0].ПоляГруппировки.Элементы Цикл
						НовыйЭлемент = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элем);
					КонецЦикла;
					ЭлементСтруктуры.Использование = Ложь;
					
				ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")
					ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")
					Тогда
					ЭлементСтруктуры.Использование = Ложь;
				Иначе
					ОтключитьЗапрещенныеДляВыводаВКоллекциюСтруктуры(ЭлементСтруктуры);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
Функция ЭтоУникальныйИдентификатор(ИдентификаторСтрока) Экспорт
	УИСтрока = ВРЕГ(ИдентификаторСтрока);
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	Если СтрДлина(Шаблон) = СтрДлина(УИСтрока) тогда
		Для Сч = 1 по СтрДлина(УИСтрока) Цикл
			Если КодСимвола(Шаблон, сч) = КодСимвола("Х", 1) И 
				((КодСимвола(УИСтрока, сч) < 48 или КодСимвола(УИСтрока, сч) > 57) и (КодСимвола(УИСтрока, сч) < 65 или КодСимвола(УИСтрока, сч) > 70)) 
				тогда
				Возврат ложь; 
			ИначеЕсли КодСимвола(Шаблон, сч) =  КодСимвола("-", 1) и КодСимвола(УИСтрока, сч) <> КодСимвола("-", 1) тогда
				Возврат ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
Функция ПолучитьСсылкуВарианта(ИдентификаторСтрока) Экспорт
	Если ЭтоУникальныйИдентификатор(ИдентификаторСтрока) тогда
		УД = Новый УникальныйИдентификатор(ИдентификаторСтрока);
		Возврат Справочники.ВариантыОтчетов.ПолучитьСсылку(УД);
	Иначе
		Возврат Справочники.ВариантыОтчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ПровестиДокументы(КомпоновщикНастроек, СхемаКомпоновкиДанных, ДанныеРасшифровки, ДокументРезультат,ПроводитьБезусловно = Ложь, ПриходыНаверх = Ложь, СтруктураВнешДанных = Неопределено, Режим) Экспорт
	ОтключитьЗапрещенныеДляВыводаВКоллекциюСтруктуры(КомпоновщикНастроек.Настройки);
	
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("VerticalOverallPlacement");
	Если Параметр<>Неопределено Тогда
		Параметр.Значение 		= РасположениеИтоговКомпоновкиДанных.Нет;
		Параметр.Использование 	= Истина;
	КонецЕсли;
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных();
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("КлючТекущегоВарианта") Тогда
		КлючТекущегоВарианта = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючТекущегоВарианта;
		
		Ссылка = ПолучитьСсылкуВарианта(КлючТекущегоВарианта);
		
		СКД = Ссылка.ПользовательскаяСхемаКомпоновкиДанных.Получить();
		Если ТипЗнч(СКД) = Тип("СхемаКомпоновкиДанных") Тогда
			СхемаКомпоновкиДанных = СКД;
		КонецЕсли;
		
	КонецЕсли;
	
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(
	СхемаКомпоновкиДанных, 
	КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки, , 
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Подготовим процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, СтруктураВнешДанных,,Истина);
	
	//Получим данные отчета.
	ДанныеОтчета 	= Новый ТаблицаЗначений();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	ДанныеОтчета.Свернуть("Регистратор, ПериодСекунда");
	
	УдалитьСтроки = ДанныеОтчета.НайтиСтроки(Новый Структура("Регистратор",Неопределено));
	Для Каждого ТекСтрока Из УдалитьСтроки Цикл
		ДанныеОтчета.Удалить(ТекСтрока);
	КонецЦикла;
	УдалитьСтроки = ДанныеОтчета.НайтиСтроки(Новый Структура("ПериодСекунда",Неопределено));
	Для Каждого ТекСтрока Из УдалитьСтроки Цикл
		ДанныеОтчета.Удалить(ТекСтрока);
	КонецЦикла;
	
	ДанныеОтчета.Сортировать("ПериодСекунда,Регистратор");
	
	ВсегоРегистраторов = ДанныеОтчета.Количество();
	Если ВсегоРегистраторов = 0 Тогда
		Сообщить("Нет регистраторов для проведения!");
		Возврат;
	КонецЕсли;
	
	//ИндикаторСервер.Инициализировать("Перепроведение документов",ВсегоРегистраторов);
	
	Для Каждого СтрокаТаб из ДанныеОтчета Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаб.ПериодСекунда)Тогда
			Попытка
				СтрокаТаб.ПериодСекунда = СтрокаТаб.Регистратор.Дата;
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый ЗАпрос("ВЫБРАТЬ
	|	Таб.Регистратор КАК Регистратор,
	|	Таб.ПериодСекунда КАК ПериодСекунда
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументов
	|ИЗ
	|	&ТаблицаСсылок КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДокументов.Регистратор,
	|	ВременнаяТаблицаДокументов.ПериодСекунда
	|ИЗ
	|	ВременнаяТаблицаДокументов КАК ВременнаяТаблицаДокументов
	|ГДЕ
	|	ВременнаяТаблицаДокументов.ПериодСекунда <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаДокументов.ПериодСекунда,
	|	ВременнаяТаблицаДокументов.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаДокументов.ПериодСекунда,
	|	ВременнаяТаблицаДокументов.Регистратор");
	Запрос.УстановитьПараметр("ТаблицаСсылок", ДанныеОтчета);
	
	ДанныеОтчета = Запрос.Выполнить().Выгрузить();
	
	
	СоотвТиповДокументов = Новый Соответствие;
	
	МаксКвоПопыток = 1;//10;
	
	Для Каждого Док из ДанныеОтчета Цикл
		//ИндикаторСервер.Обновить();
		
		ТекущийДокумент = Док.Регистратор;
		
		Если ТекущийДокумент = Null Или ТекущийДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//ТипДокумента = ТипЗнч(ТекущийДокумент);
		//
		//ЕстьКонтрагент = Ложь;
		//ЕстьДоговор = Ложь;
		//
		//Если СоотвТиповДокументов.Получить(ТипДокумента) = Неопределено Тогда
		//	
		//	Попытка
		//		
		//		РеквизитыДокумента = ТекущийДокумент.Метаданные().Реквизиты;
		//		ПроверятьРеквизиты = Истина;
		//		
		//	Исключение
		//		ПроверятьРеквизиты = Ложь;
		//	КонецПопытки;
		//	
		//	Если ПроверятьРеквизиты Тогда
		//		
		//		Если Не РеквизитыДокумента.Найти("Контрагент") = Неопределено Тогда
		//			ЕстьКонтрагент = Истина;
		//		КонецЕсли;
		//		
		//		Если Не РеквизитыДокумента.Найти("Договор") = Неопределено Тогда
		//			ЕстьДоговор = Истина;
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//	
		//	СоотвТиповДокументов.Вставить(ТипДокумента, Новый Структура("ЕстьКонтрагент, ЕстьДоговор", ЕстьКонтрагент, ЕстьДоговор));
		//	
		//Иначе
		//	
		//	СтруктураЗначений = СоотвТиповДокументов.Получить(ТипДокумента);
		//	
		//	ЕстьКонтрагент = СтруктураЗначений.ЕстьКонтрагент;
		//	ЕстьДоговор = СтруктураЗначений.ЕстьДоговор;
		//	
		//КонецЕсли;
		
		//ПредставлениеКонтрагент = "";
		//ПредставлениеДоговор = "";
		//
		//Если ЕстьКонтрагент Тогда
		//	ПредставлениеКонтрагент = ", контр. " + ТекущийДокумент.Контрагент;
		//ИначеЕсли ЕстьДоговор Тогда
		//	ПредставлениеКонтрагент = ", контр. " + ТекущийДокумент.Договор.Владелец;
		//КонецЕсли;
		//
		//Если ЕстьДоговор Тогда
		//	ПредставлениеДоговор = ", договор " + ТекущийДокумент.Договор;
		//КонецЕсли;
		//
		//СообщитьСоВременем("ДОКУМЕНТ " + ТекущийДокумент + ПредставлениеКонтрагент + ПредставлениеДоговор, СтатусСообщения.Информация);
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Состояние("Проводится " + ТекущийДокумент);
		#КонецЕсли
		
		РезультатПроведения = КомпоновкаДанныхСервер.ПровестиДокумент(ТекущийДокумент, ПроводитьБезусловно, , Истина);
		
		Если НЕ РезультатПроведения.Проведен и НЕ ПроводитьБезусловно Тогда
			Возврат;
		КонецЕсли;
		
		НужноПроводить = Ложь;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ЗначениеРасшифровки(ДанныеРасшифровки, Расшифровка, ТипЗначения = "", ВидЗначения = "", ЭтоГруппировкаСРегистратором = Ложь) Экспорт
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеРасшифровки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ТекДанныеРасшифровки = ДанныеРасшифровки;
	Иначе
		ТекДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	КонецЕсли;
	
	Попытка
		ТекРасшифровка = ТекДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Исключение 
		ТекРасшифровка = Неопределено;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекРасшифровка) Тогда
		Если ЭтоДокумент(ТекРасшифровка, ВидЗначения) Тогда
			ТипЗначения = "Документ";
		ИначеЕсли ЭтоСправочник(ТекРасшифровка, ВидЗначения) Тогда
			ТипЗначения = "Справочник";
		КонецЕсли;
	КонецЕсли;
	
	МассивПолейТекущейРасшифровки = ТекДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля();
	
	ЭтоГруппировкаСРегистратором = Ложь;
	Для Каждого Поле из МассивПолейТекущейРасшифровки Цикл
		Если Поле.Поле = "Регистратор" Тогда
			ЭтоГруппировкаСРегистратором = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТекРасшифровка;
КонецФункции

Функция ЭтоДокумент(Ссылка, ВидДокумента = "") Экспорт
	
	Попытка
		ТекМетаданные = Ссылка.Метаданные();
	Исключение
		ТекМетаданные = Неопределено;
	КонецПопытки;
	
	Если ТекМетаданные <> Неопределено И Метаданные.Документы.Содержит(ТекМетаданные) Тогда
		ВидДокумента = ТекМетаданные.Имя;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоСправочник(Ссылка, ВидДокумента = "") Экспорт
	
	Попытка
		ТекМетаданные = Ссылка.Метаданные();
	Исключение
		ТекМетаданные = Неопределено;
	КонецПопытки;
	
	Если ТекМетаданные <> Неопределено И Метаданные.Справочники.Содержит(ТекМетаданные) Тогда
		ВидДокумента = ТекМетаданные.Имя;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДополнительныеДействия(Расшифровка, АдресРасшифровки) Экспорт
	
	ДополнительныеДействия = Новый СписокЗначений;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	
	Попытка
		ТекРасшифровка = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
		ТекПоле = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле;
	Исключение 
		ТекРасшифровка = Неопределено;
		ТекПоле = Неопределено;
	КонецПопытки;
	
	Попытка
		ТекМетаданные = ТекРасшифровка.Метаданные();
	Исключение
		ТекМетаданные = Неопределено;
	КонецПопытки;
	
	
	
	Если Не ТекМетаданные = Неопределено И Метаданные.Документы.Содержит(ТекМетаданные) Тогда
		//ДополнительныеДействия.Добавить("ДвиженияДокумента","Движения документа");
		//ДополнительныеДействия.Добавить("ПровестиДокумент","Провести документ");
		//ДополнительныеДействия.Добавить("ОткрытьДокументВСписке","Открыть документ в списке");
	КонецЕсли;
	
	Если ТекПоле <> "Регистратор" Тогда
		ДополнительныеДействия.Добавить("РасшифроватьПоРегистраторам", "Расшифровать по регистраторам");
		//ДополнительныеДействия.Добавить("Перепровести", "Провести регистраторы");
		//ДополнительныеДействия.Добавить("ПерепровестиБезусловно", "Провести регистраторы (пропускать непроведенные)");
	КонецЕсли;
	
	ДополнительныеДействия.Добавить("ОткрытьВНовомОкне", "Открыть в новом окне");
	
	Возврат ДополнительныеДействия;
	
КонецФункции

//Функция РасшифроватьОтчетПоРегистраторам(Расшифровка, ОтчетОбъект, ФормаОтчета, ДанныеРасшифровки, ОбработкаРасшифровки, НеОткрыватьФормуПриРасшифровке = Ложь)
//	
//	Настройки = ОбработкаРасшифровки.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных("Регистратор"));
//		
//	Возврат РасшифроватьОтчет(Расшифровка, ОтчетОбъект, ФормаОтчета, ДанныеРасшифровки, Настройки, НеОткрыватьФормуПриРасшифровке);
//	
//КонецФункции

Процедура ПолучитьДеревоНастроек(Настройки, ДеревоНастроек, СписокИзмерений, СписокРесурсов, УстанавливатьПометки = Ложь) Экспорт
	
	ТекИндекс = -1;
	
	Если ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		КоллекцияНастроек = Настройки.Строки;
	Иначе
		КоллекцияНастроек = Настройки.Структура;
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из КоллекцияНастроек Цикл
		
		ТекИндекс = ТекИндекс + 1;
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			НоваяСтрока = ДеревоНастроек.Строки.Добавить();
			НоваяСтрока.ИндексГруппировки = ТекИндекс;
			НоваяСтрока.Группировка = ЭлементСтруктуры;
			
			Если УстанавливатьПометки Тогда
				НоваяСтрока.Пометка = ЭлементСтруктуры.Использование;
			КонецЕсли;
			
			ПолучитьДеревоНастроек(ЭлементСтруктуры, НоваяСтрока, СписокИзмерений, СписокРесурсов, УстанавливатьПометки);
			Продолжить;
		ИначеЕсли Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") И Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполним список ресурсов
		Для каждого ВыбранноеПоле Из ЭлементСтруктуры.Выбор.Элементы Цикл
			
			Если Не ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			СписокРесурсов.Добавить(Строка(ВыбранноеПоле.Поле));
			
		КонецЦикла;
		
		НоваяСтрока = ДеревоНастроек.Строки.Добавить();
		НоваяСтрока.ИндексГруппировки = ТекИндекс;
		НоваяСтрока.Группировка = ЭлементСтруктуры;
		
		Если УстанавливатьПометки Тогда
			НоваяСтрока.Пометка = ЭлементСтруктуры.Использование;
		КонецЕсли;
		
		Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Попытка
				СписокИзмерений.Вставить(Строка(ПолеГруппировки.Поле), НоваяСтрока);
			Исключение
				
			КонецПопытки;
		КонецЦикла;
		
		ПолучитьДеревоНастроек(ЭлементСтруктуры, НоваяСтрока, СписокИзмерений, СписокРесурсов, УстанавливатьПометки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСтруктуруОтчетаПоДеревуСтруктуры(Настройки, ДеревоНастроек, ПолеРасшифровки, СписокДобавляемыхПолейОтбора) Экспорт
	
	Если ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		КоллекцияНастроек = Настройки.Строки;
	Иначе
		КоллекцияНастроек = Настройки.Структура;
	КонецЕсли;
	
	Для Индекс = -(КоллекцияНастроек.Количество() - 1) По 0 Цикл
		
		ЭлементСтруктуры = КоллекцияНастроек.Получить(-Индекс);
		
		ТипЭлементаСтруктуры = ТипЗнч(ЭлементСтруктуры);
		
		НайдСтрокаДерева = ДеревоНастроек.Строки.Найти(-Индекс, "ИндексГруппировки", Ложь);
		Если НайдСтрокаДерева = Неопределено Или Не НайдСтрокаДерева.Пометка Тогда
			КоллекцияНастроек.Удалить(ЭлементСтруктуры);
		Иначе
			Если ТипЭлементаСтруктуры = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или ТипЭлементаСтруктуры = Тип("ГруппировкаКомпоновкиДанных") Тогда
				
				ДобавленоПолеСТочкой = Ложь;
				Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					Если Не ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
						Продолжить;
					КонецЕсли;
					
					ПредставлениеПоля = Строка(ПолеГруппировки.Поле);
					ПозицияРазделителя = Найти(ПредставлениеПоля, ".");
					Если ПозицияРазделителя = 0 Тогда
						СписокДобавляемыхПолейОтбора.Добавить(ПредставлениеПоля);
						Прервать;
					ИначеЕсли Не ДобавленоПолеСТочкой Тогда
						ПредставлениеПоля = Лев(ПредставлениеПоля, ПозицияРазделителя - 1);
						ДобавленоПолеСТочкой = Истина;
						СписокДобавляемыхПолейОтбора.Добавить(ПредставлениеПоля);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ОчиститьСтруктуруОтчетаПоДеревуСтруктуры(ЭлементСтруктуры, НайдСтрокаДерева, ПолеРасшифровки, СписокДобавляемыхПолейОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоллекцияНастроек.Количество() = 0 Тогда
		Если ТипЗнч(КоллекцияНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
			ЭлементСтруктуры = КоллекцияНастроек.Добавить();
		Иначе
			ЭлементСтруктуры = КоллекцияНастроек.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		КонецЕсли;
		
		ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = ПолеРасшифровки;
		
		ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСписокИспользуемыхИзмерений(Настройки, СписокИзмерений) Экспорт
	
	Если ТипЗнч(Настройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		КоллекцияНастроек = Настройки.Строки;
		КоллекцияНастроек2 = Настройки.Колонки;
	Иначе
		КоллекцияНастроек = Настройки.Структура;
		КоллекцияНастроек2 = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из КоллекцияНастроек Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			ПолучитьСписокИспользуемыхИзмерений(ЭлементСтруктуры, СписокИзмерений);
			Продолжить;
		ИначеЕсли Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") И Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		//// Заполним список ресурсов
		//ТекИндекс = 0;
		//Для каждого ВыбранноеПоле Из ЭлементСтруктуры.Выбор.Элементы Цикл
		//	
		//	Если Не ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	ТекРесурс = Строка(ВыбранноеПоле.Поле);
		//	
		//	СписокРесурсов.Добавить(ТекРесурс);
		//	
		//	Если СписокИскомыхРесурсов.Свойство(ТекРесурс) Тогда
		//		СписокИскомыхРесурсов.Вставить(ТекРесурс, ТекИндекс);
		//	КонецЕсли;
		//	
		//	
		//	ТекИндекс = ТекИндекс + 1;
		//КонецЦикла;
		
		Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Попытка
				СписокИзмерений.Добавить(Строка(ПолеГруппировки.Поле));
			Исключение
				
			КонецПопытки;
		КонецЦикла;
		
		ПолучитьСписокИспользуемыхИзмерений(ЭлементСтруктуры, СписокИзмерений);
		
	КонецЦикла;

	Для каждого ЭлементСтруктуры Из КоллекцияНастроек2 Цикл
		
		Если Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") И Не ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Попытка
				СписокИзмерений.Добавить(Строка(ПолеГруппировки.Поле));
			Исключение
				
			КонецПопытки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСписокИспользуемыхРесурсов(Выбор, ТаблицаДобавитьРесурсы) Экспорт
	
	ТекИндекс1 = -1;
	
	Для каждого ТекЭлемент Из Выбор.Элементы Цикл
		
		ТекИндекс1 = ТекИндекс1 + 1;
		
		//Если Не ТекЭлемент.Использование Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			
			Если Не ТекЭлемент.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ТекИндекс2 = -1;
			
			Для каждого ТекПодчЭлемент Из ТекЭлемент.Элементы Цикл
				
				ТекИндекс2 = ТекИндекс2 + 1;
				
				//Если Не ТекПодчЭлемент.Использование Тогда
				//	Продолжить;
				//КонецЕсли;
				
				ТекРесурс = Строка(ТекПодчЭлемент.Поле);
				
				НайдСтрока1 = ТаблицаДобавитьРесурсы.Найти(ТекРесурс, "Источник");
				НайдСтрока2 = ТаблицаДобавитьРесурсы.Найти(ТекРесурс, "Приемник");
				
				
				Если Не НайдСтрока1 = Неопределено И ТекПодчЭлемент.Использование Тогда
					НайдСтрока1.Использование1 = Истина;
					НайдСтрока1.Индекс1 = ТекИндекс1;
					НайдСтрока1.Индекс2 = ТекИндекс2;
				КонецЕсли;
				
				Если Не НайдСтрока2 = Неопределено Тогда
					НайдСтрока2.ПолеПриемник = ТекПодчЭлемент;
					Если ТекПодчЭлемент.Использование Тогда
						НайдСтрока2.Использование2 = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ТекРесурс = Строка(ТекЭлемент.Поле);
			
			НайдСтрока1 = ТаблицаДобавитьРесурсы.Найти(ТекРесурс, "Источник");
			НайдСтрока2 = ТаблицаДобавитьРесурсы.Найти(ТекРесурс, "Приемник");
			
			Если Не НайдСтрока1 = Неопределено И ТекЭлемент.Использование Тогда
				НайдСтрока1.Использование1 = Истина;
				НайдСтрока1.Индекс1 = ТекИндекс1;
			КонецЕсли;
			
			Если Не НайдСтрока2 = Неопределено Тогда
				НайдСтрока2.ПолеПриемник = ТекЭлемент;
				Если ТекЭлемент.Использование Тогда
					НайдСтрока2.Использование2 = Истина;
				КонецЕсли;
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из ТаблицаДобавитьРесурсы Цикл
		
		Если ТекСтрока.Использование1 И Не ТекСтрока.Использование2 Тогда
			ТекСтрока.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
Процедура СохранитьТекущуюНастройкуКак(ОтчетОбъект, ФормаОтчета) Экспорт
		// ПУШЕНКО
	СохраненнаяСохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	ВыбратьНастройкуФормы(ОтчетОбъект.СохраненнаяНастройка, ФормаОтчета, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Истина);
			
КонецПроцедуры
	
	// Процедура открывает форму выбора настройки форм.
//
// Параметры:
//  ФормаВладелец            - Форма - форма, которая является владельцем формы выбора.
//  НастраиваемыйОбъект       - объект, для которой выбирается настройка.
//  РежимСохраненияНастройки - Истина - форма открыта для выбора сохраняемой настройки.
//
Процедура ВыбратьНастройкуФормы(СохраненнаяНастройка, ФормаВладелец, НастраиваемыйОбъект, РежимСохраненияНастройки) Экспорт

	ФормаВыбора = Справочники.СохраненныеНастройкиОтчетов.ПолучитьФормуВыбора(, ФормаВладелец);
	ФормаВыбора.Отбор.НастраиваемыйОбъект.Установить(НастраиваемыйОбъект);
	//Если Найти(НастраиваемыйОбъект, "ОтчетОбъект") > 0 Тогда
	//	ФормаВыбора.Отбор.ТипНастройки.Установить(Перечисления.ТипыНастроек.НастройкиОтчета);
	//КонецЕсли;
	ФормаВыбора.Отбор.НастраиваемыйОбъект.Установить(НастраиваемыйОбъект);
	ФормаВыбора.Отбор.Предопределенная.Установить(Ложь);
	Попытка
		ФормаВыбора.ПараметрТекущаяСтрока    = СохраненнаяНастройка;
	Исключение КонецПопытки;
	ФормаВыбора.РежимСохраненияНастройки = РежимСохраненияНастройки;
	ФормаВыбора.ОткрытьМодально();
	ФормаВыбора.Активизировать();

КонецПроцедуры

// Заполняет отбор компоновщика по отбору построителя
Функция ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь, ТипНастройки = Неопределено, СписокДоступныхНастроек = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	//Если ТипНастройки = Неопределено тогда
	//	ТипНастройки = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СохраненныеНастройкиПользователи.Ссылка КАК Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование КАК Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СохраненныеНастройкиПользователи.ПравоИзменения
	|					ИЛИ &ПолныеПрава
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПравоИзменения,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание КАК Описание
	|ИЗ
	|	Справочник.СохраненныеНастройкиОтчетов.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройкиПользователи.Пользователь.Ссылка = &Пользователь
	|	И (&СПомеченнымиНаУдаление
	|			ИЛИ НЕ СохраненныеНастройкиПользователи.Ссылка.ПометкаУдаления)
	//|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|
	|СГРУППИРОВАТЬ ПО
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь",                       Пользователь);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект",                НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("СписокДоступныхНастроек",            СписокДоступныхНастроек);
	Запрос.УстановитьПараметр("СписокДоступныхНастроекНеопределен", СписокДоступныхНастроек = Неопределено);
	//Если Найти(НастраиваемыйОбъект, "ОтчетОбъект") > 0 
	//	//ИЛИ ТипЗнч(НастраиваемыйОбъект) = Тип("СправочникСсылка.ПроизвольныеОтчеты") 
	//	Тогда
	//	Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиОтчета);
	//Иначе
	//	Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
	//КонецЕсли;
	Запрос.УстановитьПараметр("ПолныеПрава", РольДоступна("ПолныеПрава"));
	Запрос.УстановитьПараметр("СПомеченнымиНаУдаление", СПомеченнымиНаУдаление);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь, ОтчетОбъект = Неопределено) Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	
	Если ОтчетОбъект <> Неопределено тогда
		ПараметрыИсполненияОтчета = Неопределено;
		Попытка
			ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
		Исключение
		КонецПопытки;
		
		СписокДоступныхНастроек = Неопределено;
		Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("СписокДоступныхПредопределенныхНастроек") тогда
			СписокДоступныхНастроек = ПараметрыИсполненияОтчета.СписокДоступныхПредопределенныхНастроек;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДоступныхНастроек = ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, Пользователь, СПомеченнымиНаУдаление,, СписокДоступныхНастроек);
	Для каждого Строка Из ТаблицаДоступныхНастроек Цикл
		СписокНастроек.Добавить(Строка.Ссылка, Строка.Наименование, Строка.ПравоИзменения);
	КонецЦикла;
	
	Возврат СписокНастроек;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект) Экспорт
	
	НеСохранятьПоля 	= Новый Структура("ИдентификаторТипаОтчета,КомпоновщикНастроек,ПериодОтчета,СохраненнаяНастройка,ЭтоРасшифровка");
	СтруктураПараметров = Новый Структура;
	
	Если ТипЗнч(ОтчетОбъект) = Тип("Структура") Тогда
		
		Для каждого Реквизит Из ОтчетОбъект Цикл
			
			Если НеСохранятьПоля.Свойство(Реквизит.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить(Реквизит.Ключ, Реквизит.Значение);
			
		КонецЦикла;
		
	Иначе // Тип = ОтчетОбъект	
	
		Для каждого Реквизит Из ОтчетОбъект.Метаданные().Реквизиты Цикл
			
			Если НеСохранятьПоля.Свойство(Реквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.Настройки);//ПолучитьНастройки());
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура сохраняет настройки формы.
//
// Параметры:
//  СохраненнаяНастройка       - СправочникСсылка.СохраненныеНастройки - сохраняемая настройка.
//  СохраняемыеНастройки - параметры настройки формы.
//
Процедура СохранитьНастройкуОбъекта(СохраненнаяНастройка, СохраняемыеНастройки, Правило = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(СохраненнаяНастройка) Тогда
		ОбъектСохраненнаяНастройка = Справочники.СохраненныеНастройкиОтчетов.СоздатьЭлемент();
	Иначе
		ОбъектСохраненнаяНастройка = СохраненнаяНастройка.ПолучитьОбъект();
	КонецЕсли;
	
	Если СохраненнаяНастройка.Предопределенный тогда
		СохраняемыеНастройки.Вставить("Изменялась", истина);
	КонецЕсли;
	
	ОбъектСохраненнаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(СохраняемыеНастройки);
	
	//ОбъектСохраненнаяНастройка.Правило = Правило;
	
	Попытка
		ОбъектСохраненнаяНастройка.Записать();
	Исключение
		Сообщить("Настройка формы не записана:" + Символы.ПС + "- " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	СохраненнаяНастройка = ОбъектСохраненнаяНастройка.Ссылка;
КонецПроцедуры

// Функция сравнивает две пользовательские настройки и возвращает результат сравнение истина - 
// настройки одинаковые, ложь - разные
//
Функция НастройкиОдинаковые(ПользовательскаяНастройка1, ПользовательскаяНастройка2) Экспорт
	
	ОдинаковыеНастройки = истина;
	Если ПользовательскаяНастройка1.Элементы.Количество() = ПользовательскаяНастройка2.Элементы.Количество() тогда
		Сч = 0;
		Для сч = 0 по ПользовательскаяНастройка1.Элементы.Количество()-1 Цикл

			Элемент1 = ПользовательскаяНастройка1.Элементы[Сч];
			Элемент2 = ПользовательскаяНастройка2.Элементы[Сч];
			
			Если ТипЗнч(Элемент1) <> ТипЗнч(Элемент2) тогда
				ОдинаковыеНастройки = ложь;
				Прервать;
			КонецЕсли;
			
			Если Элемент1.ИдентификаторПользовательскойНастройки <> Элемент2.ИдентификаторПользовательскойНастройки тогда
				ОдинаковыеНастройки = ложь;
				Прервать;
			КонецЕсли;
			Если ТипЗнч(Элемент1) <> Тип("ВыбранныеПоляКомпоновкиДанных") 
			   и ТипЗнч(Элемент1) <> Тип("ОтборКомпоновкиДанных")  
			   //и ТипЗнч(Элемент1) <> Тип("ПорядокКомпоновкиДанных")  
			   и Найти(ТипЗнч(Элемент1),"Порядок") <> 0 // какая то лажа с этим типом
			   и ТипЗнч(Элемент1) <> Тип("УсловноеОформлениеКомпоновкиДанных")  
			   и ТипЗнч(Элемент1) <> Тип("СтруктураНастроекКомпоновкиДанных")  
			   тогда
			   
			   Попытка
				   
				   ИспользованияРавны = Элемент1.Использование <> Элемент2.Использование;
				   
			   Исключение
				   ИспользованияРавны = Ложь;
				   //Сообщить("Элемент1: " + ТипЗнч(Элемент1) + ", элемент2: " + ТипЗнч(Элемент2));
			   КонецПопытки;
			   
				Если ИспользованияРавны тогда
					ОдинаковыеНастройки = ложь;
					Прервать;
				КонецЕсли;
				           
				Если ТипЗнч(Элемент1) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
					Если Элемент1.ПравоеЗначение <> Элемент2.ПравоеЗначение
		 			   и Элемент1.ВидСравнения <> Элемент2.ВидСравнения
					  тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Элемент1) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") тогда
					Если Элемент1.Значение  <> Элемент2.Значение тогда
						ОдинаковыеНастройки = ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Иначе
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОдинаковыеНастройки = ложь;
	КонецЕсли;
	
	Возврат ОдинаковыеНастройки;
	
КонецФункции

Процедура ВывестиКнопкиУровней(ТабДокумент,КоманднаяПанельРезультат) Экспорт
	#Если Клиент Тогда
		
		НомерКнопки = 1;
		Пока НомерКнопки <= КоманднаяПанельРезультат.Кнопки.Количество() Цикл
			ТекКнопка = КоманднаяПанельРезультат.Кнопки.Получить(НомерКнопки - 1);
			Если Лев(ТекКнопка.Имя,7) = "Уровень" Тогда
				КоманднаяПанельРезультат.Кнопки.Удалить(ТекКнопка);
			Иначе
				НомерКнопки = НомерКнопки + 1;
			КонецЕсли;
		КонецЦикла;
		Если ТабДокумент.КоличествоУровнейГруппировокСтрок() > 1 Тогда
			Кол = ТабДокумент.КоличествоУровнейГруппировокСтрок();
			Для У = 1 По Кол Цикл
				Действие 		= Новый Действие("ДействияФормыПоказатьУровень");
				
				КнопкаУровни 	= КоманднаяПанельРезультат.Кнопки.Добавить("Уровень" + У,
				ТипКнопкиКоманднойПанели.Действие, "  " + У + "  ", Действие);
				
			КонецЦикла;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&Клиент
Процедура ПриЗакрытииСтандартногоОтчета(ЭтаФорма) Экспорт
	СохранитьЗначение("МоиНастройки",ЭтаФорма.ЭлементыФормы.кпСохраненныеНастройки.Кнопки.МоиНастройки.Пометка);
КонецПроцедуры

&Клиент
Процедура ДействияСтандартногоОтчета(ТекФорма,ЭлементИмя,Элемент = Неопределено) Экспорт
	Если Найти(ЭлементИмя,"Уровень") <> 0 Тогда
		ТекФорма.ЭлементыФормы.Результат.ПоказатьУровеньГруппировокСтрок(Число(СтрЗаменить(ЭлементИмя,"Уровень","")) - 1);
		
	ИначеЕсли ЭлементИмя = "СтандартнаяНастройка" Тогда
		УстановитьПредопределеннуюНастройку(ТекФорма.ОтчетОбъект,,,,,);
		
		Если ТекФорма.ОтчетОбъект.ОтображатьТаблицуСтруктурыНастроек И Не ТекФорма.ЭлементыФормы.Найти("ПанельСтруктураОтчета") = Неопределено Тогда
			ПреобразоватьНастройкиОтчетаКТабличномуВиду(ТекФорма.ОтчетОбъект);
			ТекФорма.НеВыполнятьОбработкуСобытияПриСменеСтраницыПанелиСтруктурыОтчета = Истина;
			ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Таблица;
		Иначе
			ТекФорма.НеВыполнятьОбработкуСобытияПриСменеСтраницыПанелиСтруктурыОтчета = Истина;
			ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Дерево;
		КонецЕсли;
		
	ИначеЕсли ЭлементИмя = "МоиНастройки" Тогда
		Элемент.Пометка = Не Элемент.Пометка;
		Если Элемент.Пометка ТОгда
			ТекФорма.СохраненныеНастройки.Отбор.Автор.Установить(ПараметрыСеанса.ТекущийПользователь);
		Иначе
			ТекФорма.СохраненныеНастройки.Отбор.Автор.Использование = Ложь;
		КонецЕсли;
		//УстановитьПредопределеннуюНастройку(ТекФорма.ОтчетОбъект);
		
	ИначеЕсли ЭлементИмя = "СохранитьНастройку" Тогда
		
		СохранитьТекущуюНастройкуКак(ТекФорма.ОтчетОбъект, ТекФорма);
		
	ИначеЕсли ЭлементИмя = "ПрименитьНастройку" Тогда
		ПолучитьИПрименитьСохраненнуюНастройку(ТекФорма.ОтчетОбъект,ТекФорма);
		ТекФорма.ЭлементыФормы.ОтборыКомпоновщика.ОбновитьСтроки();
		
	ИначеЕсли ЭлементИмя = "ОтключитьВсеОтборы" Тогда
		
		КомпоновщикНастроек = ТекФорма.ОтчетОбъект.КомпоновщикНастроек;
		ОтключитьОчиститьОтборыИерархически(КомпоновщикНастроек.Настройки.Отбор);
		
	ИначеЕсли ЭлементИмя = "ОчиститьВсеОтборы" Тогда
		
		КомпоновщикНастроек = ТекФорма.ОтчетОбъект.КомпоновщикНастроек;
		ОтключитьОчиститьОтборыИерархически(КомпоновщикНастроек.Настройки.Отбор, Истина);
		
	ИначеЕсли ЭлементИмя = "УстановитьПометкиВыбранныхПолей" Тогда
		
		КомпоновщикНастроек = ТекФорма.ОтчетОбъект.КомпоновщикНастроек;
		УстановитьИерархическиПометкиВыбранныеПоля(КомпоновщикНастроек.Настройки.Выбор, Истина);
		
	ИначеЕсли ЭлементИмя = "СнятьПометкиВыбранныхПолей" Тогда
		
		КомпоновщикНастроек = ТекФорма.ОтчетОбъект.КомпоновщикНастроек;
		УстановитьИерархическиПометкиВыбранныеПоля(КомпоновщикНастроек.Настройки.Выбор, Ложь);
		
	ИначеЕсли ЭлементИмя = "ВыбратьПериодОтчета" Тогда
		
		
		НастройкаПериода = Новый НастройкаПериода;
		НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
		НастройкаПериода.УстановитьПериод(ТекФорма.ДатаНачала, ?(ТекФорма.ДатаОкончания='0001-01-01', ТекФорма.ДатаОкончания, КонецДня(ТекФорма.ДатаОкончания)));
		НастройкаПериода.РедактироватьКакИнтервал = Истина;
		НастройкаПериода.РедактироватьКакПериод = Истина;
		Если НастройкаПериода.Редактировать() Тогда
			ТекФорма.ДатаНачала = НастройкаПериода.ПолучитьДатуНачала();
			ТекФорма.ДатаОкончания = НастройкаПериода.ПолучитьДатуОкончания();
		КонецЕсли;
	
		//ОбщегоНазначения.ВыбратьПериод(ТекФорма.ДатаНачала,ТекФорма.ДатаОкончания);
		
	ИначеЕсли ЭлементИмя = "ПериодОтчетаВлево" Тогда
		ИзменитьПериодОтчета(ТекФорма,ЭлементИмя);
		
	ИначеЕсли ЭлементИмя = "ПериодОтчетаВправо" Тогда
		ИзменитьПериодОтчета(ТекФорма,ЭлементИмя);
		
	ИначеЕсли ЭлементИмя = "НовоеОкно" Тогда
		ОткрытьНовоеОкноОтчета(ТекФорма);
		
	ИначеЕсли Найти(",Вчера,Сегодня,ПрошлыйМесяц,ПрошлаяНеделя,СНачалаЭтогоМесяца,СНачалаЭтойНедели,ЭтотМесяц,","," + ЭлементИмя + ",") <> 0 Тогда
		
		Если ЭлементИмя = "Вчера" Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Вчера;
		ИначеЕсли ЭлементИмя = "Сегодня" Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
		ИначеЕсли ЭлементИмя = "ЭтотМесяц" Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
		ИначеЕсли ЭлементИмя = "ПрошлыйМесяц" Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
		ИначеЕсли ЭлементИмя = "ПрошлаяНеделя" Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя;
		ИначеЕсли ЭлементИмя = "СНачалаЭтогоМесяца" Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца;
		ИначеЕсли ЭлементИмя = "СНачалаЭтойНедели" Тогда
			ТекФорма.ПериодОтчета.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели;
		КонецЕсли;
		ПоказатьПериодОтчета(ТекФорма);
		
	ИначеЕсли ЭлементИмя = "БезИерархии" Тогда
		
		БезИерархии = ТекФорма.ЭлементыФормы.БезИерархии.Значение;
		
		ТекОбъект = ТекФорма.ОтчетОбъект;
		
		КомпоновщикНастроек = ТекОбъект.КомпоновщикНастроек;
		
		УстановитьИерархиюПоСтруктуреОтчета(КомпоновщикНастроек.Настройки, БезИерархии);
		
		ПреобразоватьНастройкиОтчетаКТабличномуВиду(ТекОбъект);
		
	ИначеЕсли ЭлементИмя = "ДобавитьГруппировкуОтчета" Тогда
		
		ДобавитьГруппировкуОтчетаВНастройки(ТекФорма);
		
	ИначеЕсли ЭлементИмя = "ПереместитьНастройкуВверх" Тогда
		
		ПереместитьГруппировкуВверхПоИерархии(ТекФорма);
		
	ИначеЕсли ЭлементИмя = "ПереместитьНастройкуВниз" Тогда	
		
		ПереместитьГруппировкуВнизПоИерархии(ТекФорма);
		
	ИначеЕсли ЭлементИмя = "Подробно" Тогда
		
		СменитьСтраницуПанелиСтруктурыОтчета(ТекФорма);
		
	ИначеЕсли ЭлементИмя = "УдалитьГруппировкуОтчета" Тогда
		
		УдалитьГруппировкуОтчетаИзНастройки(ТекФорма);
		
	ИначеЕсли ЭлементИмя = "ОтметитьВсеГруппировки" Тогда
		
		УстановитьПометкиНаВсеГруппировкиНастройки(ТекФорма, Истина);
		
	ИначеЕсли ЭлементИмя = "СнятьПометкиСоВсехГруппировок" Тогда
		
		УстановитьПометкиНаВсеГруппировкиНастройки(ТекФорма, Ложь);
		
	ИначеЕсли ЭлементИмя = "Периодичность" Тогда
		
		СкорректироватьСтруктуруОтчета(ТекФорма);
		
	ИначеЕсли ЭлементИмя = "Ориентация" Тогда
		
	ИначеЕсли ЭлементИмя = "Портрет" Тогда
		ПереключениеОриентации(ТекФорма, ЭлементИмя);
	ИначеЕсли ЭлементИмя = "Ландшафт" Тогда
		ПереключениеОриентации(ТекФорма, ЭлементИмя);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьСтруктуруОтчета(ТекФорма)
	
	ТекПериодичность = ТекФорма.Отчет.Периодичность;
	Если ПустаяСтрока(ТекПериодичность) Тогда
		Возврат;
	КонецЕсли;
	Для каждого Стр Из ТекФорма.СтруктураОтчетаТаблица Цикл
		Если Не Найти(Стр.Поле, ТекПериодичность) = 0 И Стр.Использование Тогда
			Если Не Найти(Стр.Поле, ",") = 0 Тогда
				Стр.Поле = СтрЗаменить(Стр.Поле, ТекПериодичность + "%ТИ%П", ТекПериодичность + "%ТИ");
				Стр.Поле = СтрЗаменить(Стр.Поле, ТекПериодичность + "%И%П", ТекПериодичность + "%И");
				Стр.Поле = СтрЗаменить(Стр.Поле, ТекПериодичность + "%П", ТекПериодичность);
				
				ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Дерево;
				ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Таблица;
			Иначе
				Стр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьСтруктуруОтчетаУФ(ОтчетОбъект, ФормаОтчета, ТекПериодичность) Экспорт
	
	Если ПустаяСтрока(ТекПериодичность) Тогда
		Возврат;
	КонецЕсли;
	Для каждого Стр Из ОтчетОбъект.СтруктураОтчетаТаблица Цикл
		Если Не Найти(Стр.Поле, ТекПериодичность) = 0 И Стр.Использование Тогда
			Если Не Найти(Стр.Поле, ",") = 0 Тогда
				Стр.Поле = СтрЗаменить(Стр.Поле, ТекПериодичность + "%ТИ%П", ТекПериодичность + "%ТИ");
				Стр.Поле = СтрЗаменить(Стр.Поле, ТекПериодичность + "%И%П", ТекПериодичность + "%И");
				Стр.Поле = СтрЗаменить(Стр.Поле, ТекПериодичность + "%П", ТекПериодичность);
				
				ПолучитьНастройкиОтчетаПоТаблицеНастроек(ОтчетОбъект);
				ПреобразоватьНастройкиОтчетаКТабличномуВиду(ОтчетОбъект);//, ОтчетОбъект.КомпоновщикНастроек.Настройки, ОтчетОбъект.СтруктураОтчетаТаблица, ФормаОтчета.Периодичность, Истина, , Истина);
				
			Иначе
				Стр.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГруппировкуОтчетаВНастройки(ТекФорма)
	
	#Если Клиент Тогда
		ГруппировкаДобавитьЭлемент(ТекФорма.ОтчетОбъект, ТекФорма, , ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица, Истина);
	#КонецЕсли
	
КонецПроцедуры

Процедура УстановитьПометкиНаВсеГруппировкиНастройки(ТекФорма, Пометка)
	
	Для каждого Стр Из ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.Значение Цикл
		
		Стр.Использование = Пометка;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереместитьГруппировкуВверхПоИерархии(ТекФорма)
	
	ТекСтрокаГруппировки = ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока;
	Если ТекСтрокаГруппировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.Значение.Индекс(ТекСтрокаГруппировки) = 0 Тогда
		ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.Значение.Сдвинуть(ТекСтрокаГруппировки, -1);
	КонецЕсли;
	
	
	
	//ТекСтрокаГруппировки = ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока;
	//Если ТекСтрокаГруппировки = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекРодитель = ТекСтрокаГруппировки.Родитель;
	//Если (ТипЗнч(ТекРодитель) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ТекРодитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных")) И (ТипЗнч(ТекСтрокаГруппировки) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ТекСтрокаГруппировки) = Тип("ГруппировкаТаблицыКомпоновкиДанных"))  Тогда
	//	
	//	СписокПолейГруппировки = Новый Массив;
	//	Для каждого ПолеГруппировки Из ТекСтрокаГруппировки.ПоляГруппировки.Элементы Цикл
	//		СписокПолейГруппировки.Добавить(ПолеГруппировки);
	//	КонецЦикла;
	//	
	//	ТекСтрокаГруппировки.ПоляГруппировки.Элементы.Очистить();
	//	
	//	Для каждого ПолеГруппировки Из ТекРодитель.ПоляГруппировки.Элементы Цикл
	//		ТекПоле = ТекСтрокаГруппировки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//		ЗаполнитьЗначенияСвойств(ТекПоле, ПолеГруппировки);
	//	КонецЦикла;
	//	
	//	ТекРодитель.ПоляГруппировки.Элементы.Очистить();
	//	
	//	Для каждого ПолеГруппировки Из СписокПолейГруппировки Цикл
	//		ТекПоле = ТекРодитель.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//		ЗаполнитьЗначенияСвойств(ТекПоле, ПолеГруппировки);
	//	КонецЦикла;
	//	
	//	ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока = ТекРодитель;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьГруппировкуВнизПоИерархии(ТекФорма)
	
	
	ТекСтрокаГруппировки = ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока;
	Если ТекСтрокаГруппировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.Значение.Индекс(ТекСтрокаГруппировки) = ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.Значение.Количество() - 1 Тогда
		ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.Значение.Сдвинуть(ТекСтрокаГруппировки, 1);
	КонецЕсли;
	
	
	//ТекРодитель = ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока;
	//Если ТекРодитель = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ТипЗнч(ТекРодитель) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ТекРодитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
	//	
	//	Если ТекРодитель.Структура.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ТекСтрокаГруппировки = ТекРодитель.Структура.Получить(0);
	//	
	//	Если Не (ТипЗнч(ТекСтрокаГруппировки) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ТекСтрокаГруппировки) = Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	
	//	СписокПолейГруппировки = Новый Массив;
	//	Для каждого ПолеГруппировки Из ТекСтрокаГруппировки.ПоляГруппировки.Элементы Цикл
	//		СписокПолейГруппировки.Добавить(ПолеГруппировки);
	//	КонецЦикла;
	//	
	//	ТекСтрокаГруппировки.ПоляГруппировки.Элементы.Очистить();
	//	
	//	Для каждого ПолеГруппировки Из ТекРодитель.ПоляГруппировки.Элементы Цикл
	//		ТекПоле = ТекСтрокаГруппировки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//		ЗаполнитьЗначенияСвойств(ТекПоле, ПолеГруппировки);
	//	КонецЦикла;
	//	
	//	ТекРодитель.ПоляГруппировки.Элементы.Очистить();
	//	
	//	Для каждого ПолеГруппировки Из СписокПолейГруппировки Цикл
	//		ТекПоле = ТекРодитель.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//		ЗаполнитьЗначенияСвойств(ТекПоле, ПолеГруппировки);
	//	КонецЦикла;
	//	
	//	ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока = ТекСтрокаГруппировки;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьГруппировкуОтчетаИзНастройки(ТекФорма)
	
	
	ТекСтрокаГруппировки = ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока;
	Если ТекСтрокаГруппировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.Значение.Удалить(ТекСтрокаГруппировки);
	
	
	//ТекСтрокаГруппировки = ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.ТекущаяСтрока;
	//Если ТекСтрокаГруппировки = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если (ТипЗнч(ТекСтрокаГруппировки) = Тип("ГруппировкаКомпоновкиДанных") Или ТипЗнч(ТекСтрокаГруппировки) = Тип("ГруппировкаТаблицыКомпоновкиДанных")) Тогда
	//	
	//	ТекРодитель = ТекСтрокаГруппировки.Родитель;
	//	
	//	ПеренестиСтруктуруНастроекИерархически(ТекРодитель, ТекСтрокаГруппировки);
	//	
	//	//Для каждого ПодчЭлемент Из ТекСтрокаГруппировки.Структура Цикл
	//	//	ПодчЭлемент.Родитель = ТекРодитель;
	//	//КонецЦикла;
	//	
	//	Если ТипЗнч(ТекРодитель) = Тип("ТаблицаКомпоновкиДанных") Тогда
	//		ТекРодитель.Строки.Удалить(ТекСтрокаГруппировки);
	//	Иначе
	//		ТекРодитель.Структура.Удалить(ТекСтрокаГруппировки);
	//	КонецЕсли;
	//	
	//	ТекФорма.ЭлементыФормы.СтруктураОтчетаТаблица.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//	ТекФорма.ЭлементыФормы.СтруктураОтчета.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиСтруктуруНастроекИерархически(Приемник, Источник)
	
	Если ТипЗнч(Приемник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		КоллекцияПриемник = Приемник.Строки;
	Иначе
		КоллекцияПриемник = Приемник.Структура;
	КонецЕсли;
	
	Для каждого ПодчЭлемент Из Источник.Структура Цикл
		
		НоваяГруппировка = КоллекцияПриемник.Добавить(ТипЗнч(ПодчЭлемент));
		НоваяГруппировка.Использование = ПодчЭлемент.Использование;
		
		Для каждого ТекПолеГруппировки Из ПодчЭлемент.ПоляГруппировки.Элементы Цикл
			
			НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(ТипЗнч(ТекПолеГруппировки));
			
			НовоеПолеГруппировки.Поле = ТекПолеГруппировки.Поле;
			НовоеПолеГруппировки.Использование = ТекПолеГруппировки.Использование;
			
		КонецЦикла;
		
		ПеренестиСтруктуруНастроекИерархически(НоваяГруппировка, ПодчЭлемент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СменитьСтраницуПанелиСтруктурыОтчета(ТекФорма)
	
	Если ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Дерево Тогда
		ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Таблица;
		ТекФорма.ОтображатьТаблицуСтруктурыНастроек = Истина;
	Иначе
		ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ТекФорма.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Дерево;
		ТекФорма.ОтображатьТаблицуСтруктурыНастроек = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИерархиюПоСтруктуреОтчета(Настройки, БезИерархии) Экспорт
	
	ТипКоллекции = ТипЗнч(Настройки);
	
	Если ТипКоллекции = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для каждого Элемент Из Настройки.Строки Цикл
			УстановитьИерархиюПоСтруктуреОтчета(Элемент, БезИерархии);
		КонецЦикла;
		
		Для каждого Элемент Из Настройки.Колонки Цикл
			УстановитьИерархиюПоСтруктуреОтчета(Элемент, БезИерархии);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипКоллекции = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Если БезИерархии Тогда
			
			Для каждого ПолеГруппировки Из Настройки.ПоляГруппировки.Элементы Цикл
				
				Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					
					ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ПолеНоменклатура = Неопределено;
			Индекс = 0;
			Для каждого ПолеГруппировки Из Настройки.ПоляГруппировки.Элементы Цикл
				
				Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					
					ПредставлениеПоля = Строка(ПолеГруппировки.Поле);
					
					Если ПредставлениеПоля = "Номенклатура" Тогда
						ПолеНоменклатура = Индекс;
						Прервать;
					ИначеЕсли ПолеНоменклатура = Неопределено И Не Найти(ПредставлениеПоля, "Номенклатура") = 0 Тогда
						ПолеНоменклатура = Индекс;
					КонецЕсли;
					
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			Если Не ПолеНоменклатура = Неопределено Тогда
				
				ПолеНоменклатура = Настройки.ПоляГруппировки.Элементы.Получить(ПолеНоменклатура);
				ПолеНоменклатура.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		Для каждого Элемент Из Настройки.Структура Цикл
			УстановитьИерархиюПоСтруктуреОтчета(Элемент, БезИерархии);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции = Тип("НастройкиКомпоновкиДанных") Тогда
		
		Для каждого Элемент Из Настройки.Структура Цикл
			УстановитьИерархиюПоСтруктуреОтчета(Элемент, БезИерархии);
		КонецЦикла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереключениеОриентации(ТекФорма, ЭлементИмя)
	
	Если ЭлементИмя = "Портрет" Тогда
		
		НаборКнопок = ТекФорма.ЭлементыФормы.КоманднаяПанельРезультат.Кнопки;
		
		Если НаборКнопок.Портрет.Картинка = БиблиотекаКартинок.ПереключательВключен Тогда
			НаборКнопок.Портрет.Картинка = БиблиотекаКартинок.ПереключательВыключен;
			НаборКнопок.Ландшафт.Картинка = БиблиотекаКартинок.ПереключательВключен;
			ТекОриентация = ОриентацияСтраницы.Ландшафт;
		Иначе
			НаборКнопок.Портрет.Картинка = БиблиотекаКартинок.ПереключательВключен;
			НаборКнопок.Ландшафт.Картинка = БиблиотекаКартинок.ПереключательВыключен;
			ТекОриентация = ОриентацияСтраницы.Портрет;
		КонецЕсли;
		
	Иначе
		
		НаборКнопок = ТекФорма.ЭлементыФормы.КоманднаяПанельРезультат.Кнопки;
		
		Если НаборКнопок.Ландшафт.Картинка = БиблиотекаКартинок.ПереключательВключен Тогда
			НаборКнопок.Ландшафт.Картинка = БиблиотекаКартинок.ПереключательВыключен;
			НаборКнопок.Портрет.Картинка = БиблиотекаКартинок.ПереключательВключен;
			ТекОриентация = ОриентацияСтраницы.Портрет;
		Иначе
			НаборКнопок.Ландшафт.Картинка = БиблиотекаКартинок.ПереключательВключен;
			НаборКнопок.Портрет.Картинка = БиблиотекаКартинок.ПереключательВыключен;
			ТекОриентация = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекФорма.ЭлементыФормы.Результат.ОриентацияСтраницы = ТекОриентация;
	
КонецПроцедуры

Процедура УстановитьИерархическиПометкиВыбранныеПоля(КоллекцияЭлементов, Пометка)
	
	Для каждого ТекЭлемент Из КоллекцияЭлементов.Элементы Цикл
		
		ТекЭлемент.Использование = Пометка;
		
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			УстановитьИерархическиПометкиВыбранныеПоля(ТекЭлемент, Пометка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьОчиститьОтборыИерархически(КолллекцияЭлементов, РежимОчистки = Ложь) Экспорт
	
	Для каждого ТекЭлемент Из КолллекцияЭлементов.Элементы Цикл
		
		ТекЭлемент.Использование = Ложь;
		
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОтключитьОчиститьОтборыИерархически(ТекЭлемент, РежимОчистки);
		ИначеЕсли РежимОчистки Тогда
			ТекЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлемент.ПравоеЗначение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСуммыПоВыделеннымОбластям(ТекФорма, Знач Элемент) Экспорт
	
	Если Элемент = Неопределено Тогда
		Элемент = ТекФорма.ЭлементыФормы.Найти("Результат");
		Если Элемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СуммаВыделенныхОбластей = ТекФорма.ЭлементыФормы.Найти("СуммаВыделенныхОбластей");
	Если СуммаВыделенныхОбластей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//СуммаВсего = 0;
	//Для каждого ВыдОбласть Из Элемент.ВыделенныеОбласти Цикл
	//	Попытка
	//		ТекЧисло = Число(ВыдОбласть.Текст);
	//	Исключение
	//		ТекЧисло = 0;
	//	КонецПопытки;
	//	
	//	СуммаВсего = СуммаВсего + ТекЧисло;
	//	
	//КонецЦикла;
	
	СуммаВыделенныхОбластей.Значение = ВычислитьСуммуВыделенныхЯчеек(Элемент);
	
КонецПроцедуры

Функция СоздатьТаблицуОтборов() Экспорт
	
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	ТаблицаОтборов.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравненияКомпоновкиДанных"));
	ТаблицаОтборов.Колонки.Добавить("Значение");
	
	Возврат ТаблицаОтборов;
	
КонецФункции

Процедура ДобавитьСтрокуОтбора(ТаблицаОтборов,ИмяОтбора,ЗначениеОтбора) Экспорт
	НоваяСтрока 				= ТаблицаОтборов.Добавить();
	НоваяСтрока.ИмяПоля 		= ИмяОтбора;
	НоваяСтрока.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	НоваяСтрока.Значение 		= ЗначениеОтбора;
КонецПроцедуры

Процедура ЗагрузитьОтборыВНастройку(ТаблицаОтборов,ТекНастройки) Экспорт
	Если ТаблицаОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ТаблицаОтборов) = Тип("ОтборКомпоновкиДанных") Тогда
		ПеренестиСтруктуруОтборовМеждуНастройками(ТаблицаОтборов,ТекНастройки);
		
	ИначеЕсли ТипЗнч(ТаблицаОтборов) = Тип("ТаблицаЗначений") Тогда
		Для каждого Стр Из ТаблицаОтборов Цикл
			УстановитьЗначениеОтбора(ТекНастройки, Стр.ИмяПоля, Стр.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ТаблицаОтборов) = Тип("Структура") Тогда
		Для каждого Стр Из ТаблицаОтборов Цикл
			УстановитьЗначениеОтбора(ТекНастройки, Стр.Ключ, Стр.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПостроитьОтчетСУказаннымВариантом(МенеджерОтчета, ИмяВарианта, ДатаНач, ДатаКон, ТаблицаОтборов = Неопределено, ТабличныйДокумент = Неопределено, ВыделятьНовинкиАкцииНовыеПоступления = Истина, ПереноситьОтборы = Истина, ВозвращатьДанныеРасшифровки = Ложь,Знач ДанныеРасшифровки = Неопределено, ДопОтборы = Неопределено, ВыбранныеПоля = Неопределено, БезИерархии = Ложь, СортировкаНоменклатурыНеПоУмолчанию = Неопределено, Знач ТекОтчет = Неопределено,СохраненнаяНастройка = Неопределено) Экспорт
	
	Если ТипЗнч(МенеджерОтчета) = Тип("Строка") Тогда
		ТекОтчет = Отчеты[МенеджерОтчета].Создать();
	Иначе
		Попытка
			ТекОтчет = МенеджерОтчета.Создать();
		Исключение
			ТекОтчет = МенеджерОтчета;
		КонецПопытки;
	КонецЕсли;
	
	#Если Клиент Тогда
	//	ФормаОтчета = ТекОтчет.ПолучитьФорму();
	//	
	//	Пар = Новый Структура("Ключ,ВыполнитьЗадачу", Задача, Истина);
	//	Оповещение = Новый ОписаниеОповещения("ОбновитьОтчетПоЗадачам", ЭтаФорма, Пар);
	//	ОткрытьФорму("Документ.упЗадача.ФормаОбъекта",Пар,ЭтаФорма,,,,Оповещение);
	//
	//	Если ТабличныйДокумент = Неопределено Тогда
	//		ТекОтчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПереноситьОтбор", ПереноситьОтборы);
	//		ФормаОтчета.Открыть();
	//		Попытка
	//			ФормаОтчета.ЭлементыФормы.ПанельОтчета.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельОтчета.Страницы.Результат;
	//		Исключение КонецПопытки;
	//	КонецЕсли;
	#Иначе
		Если ТабличныйДокумент = Неопределено Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
		КонецЕсли;
	#КонецЕсли
	Если СохраненнаяНастройка = Неопределено Тогда
		УстановитьПредопределеннуюНастройку(ТекОтчет, ТекОтчет.СхемаКомпоновкиДанных, МенеджерОтчета, ИмяВарианта, , ПереноситьОтборы);
	Иначе              
		//#Если Клиент Тогда
		//	ПрименениеНастройки(ТекОтчет,ФормаОтчета,СохраненнаяНастройка);
		//#Иначе	
		ТекОтчет.СохраненнаяНастройка = СохраненнаяНастройка;
		ПрименитьСохраненнуюНастройку(ТекОтчет,ТекОтчет.Метаданные().Имя,СохраненнаяНастройка,Ложь);
		//#КонецЕсли
	КонецЕсли;
	//Если ТипЗнч(ИмяВарианта) = Тип("СправочникСсылка.СохраненныеНастройкиОтчетов") Тогда
	//	ПрименитьСохраненнуюНастройку(ТекОтчет, ТекОтчет.Метаданные().Имя, ИмяВарианта, Ложь);
	//Иначе
	//	УстановитьПредопределеннуюНастройку(ТекОтчет, ТекОтчет.СхемаКомпоновкиДанных, МенеджерОтчета, ИмяВарианта, , ПереноситьОтборы);
	//КонецЕсли;
	
	ТекОтчет.ДатаНачала = ?(ДатаНач = '00010101',ТекущаяДата(),ДатаНач);
	ТекОтчет.ДатаОкончания = ?(ДатаКон = '00010101',ТекущаяДата(),ДатаКон);
	
	ТекНастройки = ТекОтчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗагрузитьОтборыВНастройку(ТаблицаОтборов,ТекНастройки);
	ЗагрузитьОтборыВНастройку(ДопОтборы,ТекНастройки);
	Если ВыбранныеПоля <> Неопределено Тогда
		ПеренестиВыбранныеПоляМеждуНастройками(ВыбранныеПоля,ТекНастройки);
	КонецЕсли;
	
	//Попытка
	//	ТекОтчет.ВыделятьНовинкиАкцииНовыеПоступления = ВыделятьНовинкиАкцииНовыеПоступления;
	//Исключение КонецПопытки;
	
	Если БезИерархии Тогда
		УстановитьИерархиюПоСтруктуреОтчета(ТекНастройки, БезИерархии);
	КонецЕсли;
	
	ТекОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ТекНастройки);
	
	#Если Клиент Тогда
		
	#Иначе
		ТекОтчет.ПриКомпоновкеРезультата(ТабличныйДокумент, ДанныеРасшифровки, Ложь);
	#КонецЕсли
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура СохраненныеНастройкиВыбор(ЭтаФорма, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;

	ТекОбъект = ЭтаФорма.ОтчетОбъект;
	
	ПрименениеНастройки(ТекОбъект, ЭтаФорма, ВыбраннаяСтрока.Ссылка);
	
КонецПроцедуры

Процедура ИерархическийОбходСтрутурыОтчета(ТекСтруктура, МассивИспользуемыхПолей)
	
	Для каждого ТекЭлементСтруктуры Из ТекСтруктура.Структура Цикл
		Если Не ТекЭлементСтруктуры.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекГруппировка Из ТекЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если Не ТекГруппировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПолеПредставление = Строка(ТекГруппировка.Поле);
			ПозицияРазделителя = Найти(ТекПолеПредставление, ".");
			Если ПозицияРазделителя = 0 Тогда
				ТекПоле = ТекПолеПредставление;
			Иначе
				ТекПоле = Лев(ТекПолеПредставление, ПозицияРазделителя - 1);
			КонецЕсли;
			
			Если МассивИспользуемыхПолей.Найти(ТекПоле) = Неопределено Тогда
				МассивИспользуемыхПолей.Добавить(ТекПоле);
			КонецЕсли;
			
		КонецЦикла;
		
		ИерархическийОбходСтрутурыОтчета(ТекЭлементСтруктуры, МассивИспользуемыхПолей);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивИспользуемыхПолей(КомпоновщикНастроек) Экспорт
	
	ТекНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	МассивИспользуемыхПолей = Новый Массив;
	
	ИерархическийОбходСтрутурыОтчета(ТекНастройки, МассивИспользуемыхПолей);
	
	Возврат МассивИспользуемыхПолей;
	
КонецФункции

Процедура ПолучитьУсловиеЗапросаПоОтборуКомпоновки(Запрос, ТекстУсловия, ЭлементОтбора, ИмяПраметра, ТекстПоля = "", ПустоеЗначениеТипа = Неопределено) Экспорт
	
	Если ТекстПоля = "" Тогда
		ТекстПоля = "Таблица."+ Строка(ЭлементОтбора.ЛевоеЗначение);
	КонецЕсли;
	
	Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" > &" + ИмяПраметра;
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" >= &" + ИмяПраметра;
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" В ИЕРАРХИИ (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" В (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" В ИЕРАРХИИ (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	НЕ "+ ТекстПоля +" = &" + ИмяПраметра;
		Запрос.УстановитьПараметр(ИмяПраметра, ПустоеЗначениеТипа);
			
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" < &" + ИмяПраметра;
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" <= &" + ИмяПраметра;
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	НЕ "+ ТекстПоля +" В ИЕРАРХИИ (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	НЕ "+ ТекстПоля +" В (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	НЕ "+ ТекстПоля +" В ИЕРАРХИИ (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" = &" + ИмяПраметра;
		Запрос.УстановитьПараметр(ИмяПраметра, ПустоеЗначениеТипа);

	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	НЕ "+ ТекстПоля +" = (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	НЕ "+ ТекстПоля +" ПОДОБНО ""%"+ ЭлементОтбора.ПравоеЗначение +"%""";
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" = (&" + ИмяПраметра + ")";
		Запрос.УстановитьПараметр(ИмяПраметра, ЭлементОтбора.ПравоеЗначение);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		
		ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "ГДЕ", " И ") + "
							|	"+ ТекстПоля +" ПОДОБНО ""%"+ ЭлементОтбора.ПравоеЗначение +"%""";
		
	КонецЕсли;
КонецПроцедуры

Функция ПредставлениеДокументаДляОтчета(ТекДок, БезВидаДокумента = Ложь, Знач Дата = Неопределено, Знач Номер = Неопределено, Знач ВидОперации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекДок) Тогда
		Возврат ТекДок;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) или НЕ ЗначениеЗаполнено(Номер) или НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		
		СтруктураДанныхДокумента = Новый Структура("Дата,Номер" + ?(БезВидаДокумента, "", ",ВидОперации"));
		
		ЗаполнитьЗначенияСвойств(СтруктураДанныхДокумента, ТекДок);
		
		Дата 		= СтруктураДанныхДокумента.Дата;
		Номер 		= СтруктураДанныхДокумента.Номер;
		ВидОперации = СтруктураДанныхДокумента.ВидОперации;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперацииКратко = ВидОперации.НаименованиеКраткое;
		Если ЗначениеЗаполнено(ВидОперацииКратко) Тогда
			ВидОперации = ВидОперацииКратко;
		КонецЕсли;
	КонецЕсли;
	
	Если БезВидаДокумента Тогда
		Возврат СокрЛП(Номер) + " від " + Формат(Дата,"ДФ=dd.MM.yy");
	КонецЕсли;
	
	ПредставлениеДокумента = ?(ЗначениеЗаполнено(ВидОперации), СокрЛП(ВидОперации), ТекДок.Метаданные().Синоним) + " " + СокрЛП(Номер) + " від " + Формат(Дата,"ДФ=dd.MM.yy");
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

//Процедура ОткрытьФормуКонструктораСхемыКомпоновкиДанных(ЭтаФорма) Экспорт
//	КонструкторСхемыКомпоновкиДанных = Новый КонструкторСхемыКомпоновкиДанных(ЭтаФорма.ОтчетОбъект.СхемаКомпоновкиДанных);
//	КонструкторСхемыКомпоновкиДанных.Редактировать(ЭтаФорма);
//КонецПроцедуры

Процедура ОткрытьФормуНастройкиПолейГруппировки(ОтчетОбъект, ФормаОтчета, ТекСтрока) Экспорт
	
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастроекПолейГруппировки");
	ФормаНастройки.ОтчетОбъект = ОтчетОбъект;
	ФормаНастройки.ФормаОтчета = ФормаОтчета;
	                                        
	СтрокаСпискаПолей = ТекСтрока.Поле;
	Пока Не ПустаяСтрока(СтрокаСпискаПолей) Цикл
		
		ПозицияРазделителя = Найти(СтрокаСпискаПолей, ",");
		Если ПозицияРазделителя = 0 Тогда
			ТекПолеПолное = СтрокаСпискаПолей;
			СтрокаСпискаПолей = "";
		Иначе
			ТекПолеПолное = Лев(СтрокаСпискаПолей, ПозицияРазделителя - 1);
			СтрокаСпискаПолей = Сред(СтрокаСпискаПолей, ПозицияРазделителя + 1);
		КонецЕсли;
		
		НоваяСтрока = ФормаНастройки.ПоляГруппировки.Добавить();
		Если Не Найти(ТекПолеПолное, "%ТИ") = 0 Тогда
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия;
		ИначеЕсли Не Найти(ТекПолеПолное, "%И") = 0 Тогда
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия;
		Иначе
			НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		КонецЕсли;
		
		Если Не Найти(ТекПолеПолное, "%П") = 0 Тогда
			НоваяСтрока.Использование = Истина;
		КонецЕсли;
		
		ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%ТИ", "");
		ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%И", "");
		ТекПолеПолное = СтрЗаменить(ТекПолеПолное, "%П", "");
		
		НоваяСтрока.Поле = ТекПолеПолное;
		
		НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ТекПолеПолное));
		
	КонецЦикла;
	
	
	Результат = ФормаНастройки.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПолей = "";
	СтрокаПредставления = "";
	
	Для каждого Стр Из ФормаНастройки.ПоляГруппировки Цикл
		
		ТекПоле = Стр.Поле;
		ТекПредставление = Стр.Представление;
		
		Если Стр.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
			ТекПоле = ТекПоле + "%ТИ";
			ТекПредставление = ТекПредставление + " (Только группы)";
		ИначеЕсли Стр.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
			ТекПоле = ТекПоле + "%И";
			ТекПредставление = ТекПредставление + " (С группами)";
		КонецЕсли;
		Если Стр.Использование Тогда
			ТекПоле = ТекПоле + "%П";
		Иначе
			ТекПредставление = "";
		КонецЕсли;
		
		СтрокаПолей = СтрокаПолей + "," + ТекПоле;
		Если Не ПустаяСтрока(ТекПредставление) Тогда
			СтрокаПредставления = СтрокаПредставления + ", " + ТекПредставление;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПолей = Сред(СтрокаПолей, 2);
	СтрокаПредставления = Сред(СтрокаПредставления, 3);
	
	СтрокаПредставления = "  " + СтрокаПредставления;
	
	ТекСтрока.Поле = СтрокаПолей;
	ТекСтрока.Представление = СтрокаПредставления;
	
	
	КомпоновкаДанныхСервер.ПолучитьНастройкиОтчетаПоТаблицеНастроек(ОтчетОбъект);
КонецПроцедуры

Процедура ПроцедураОбработчикСДвумяПараметрами(ОтчетОбъект, ФормаОтчета, Параметр1, Параметр2) Экспорт
	ТипПараметр1 = ТипЗнч(Параметр1);
	ТипПараметр2 = ТипЗнч(Параметр2);
	
	Если ТипПараметр1 = Тип("ТабличноеПоле") И Параметр1.Имя = "ОтборыКомпоновщика" Тогда
		
		Если ТипПараметр2 = Тип("ОформленияСтрок") Тогда
			ВыделитьИспользуемыеОтборы(Параметр2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроцедураОбработчикСТремяПараметрами(ОтчетОбъект, ФормаОтчета, Параметр1, Параметр2, Параметр3) Экспорт
	ТипПараметр1 = ТипЗнч(Параметр1);
	ТипПараметр2 = ТипЗнч(Параметр2);
	ТипПараметр3 = ТипЗнч(Параметр3);
	
	Если ТипПараметр1 = Тип("ТабличноеПоле") И Параметр1.Имя = "СтруктураОтчетаТаблица" И ТипПараметр2 = Тип("Булево") И ТипПараметр3 = Тип("Булево") Тогда
		
		// отработаем событие "Перед началом добавления"
		Если Параметр3 = Истина Тогда
			Возврат; // значит добавлена копированием
		КонецЕсли;
		
		Параметр2 = Истина;
		ДобавитьГруппировкуОтчетаВНастройки(ФормаОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроцедураОбработчикСЧетырьмяПараметрами(ОтчетОбъект, ФормаОтчета, Параметр1, Параметр2, Параметр3, Параметр4) Экспорт
	ТипПараметр1 = ТипЗнч(Параметр1);
	ТипПараметр2 = ТипЗнч(Параметр2);
	ТипПараметр3 = ТипЗнч(Параметр3);
	ТипПараметр4 = ТипЗнч(Параметр4);
	
	//Если ТипПараметр1 = Тип("ТабличноеПоле") И Параметр1.Имя = "СтруктураОтчетаТаблица" И Параметр3.Имя = "Представление" Тогда
	//	ОткрытьФормуНастройкиПолейГруппировки(ОтчетОбъект, ФормаОтчета, Параметр2);
	//КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПериодОтчетаПоУмолчанию(ТекФорма) Экспорт
	ТекФорма.ДатаНачала 	= ТекущаяДата();
	ТекФорма.ДатаОкончания 	= ТекущаяДата();
	
	ТекФорма.ОтчетОбъект.ПериодОтчета.Вариант 			= ВариантСтандартногоПериода.ПроизвольныйПериод;
	ТекФорма.ОтчетОбъект.ПериодОтчета.ДатаНачала 		= ТекФорма.ДатаНачала;
	ТекФорма.ОтчетОбъект.ПериодОтчета.ДатаОкончания 	= ТекФорма.ДатаОкончания;
	
КонецПроцедуры

Процедура ПриОткрытииУпрощеннойФормыОтчета(ТекФорма,ИмяОтчета,ИмяНастройки) Экспорт
	
	КомпоновкаДанныхСервер.УстановитьПериодОтчетаПоУмолчанию(ТекФорма);
	КомпоновкаДанныхСервер.УстановитьПредопределеннуюНастройку(ТекФорма.ОтчетОбъект, ,ИмяОтчета,ИмяНастройки);
	КомпоновкаДанныхСервер.УстановитьПараметрыТаблицыОтборов(ТекФорма.ЭлементыФормы.ОтборыКомпоновщика);
	
	Попытка
		ТекФорма.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действие.Доступность = Ложь;
	Исключение КонецПопытки;
	ТекФорма.ТекущийЭлемент = ТекФорма.ЭлементыФормы.ОтборыКомпоновщика;
	
КонецПроцедуры

Процедура ОбновлениеОтображения(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если Не ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Найти("Настройки") = Неопределено Тогда
		
		Если ФормаОтчета.ЭлементыФормы.ПанельСтруктураОтчета.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельСтруктураОтчета.Страницы.Таблица Тогда
			
			Если ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Настройки.Доступность Тогда
				ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Настройки.Доступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			Если Не ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Настройки.Доступность Тогда
				ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Настройки.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеНедели(НачНедели, Знач НачМесяца = Неопределено) Экспорт
	КонНедели = НачНедели + 6 * 24 * 3600;
	Если НачМесяца = Неопределено Тогда
		Возврат "Неделя " + Формат(НачНедели,"ДФ=dd.MM.yy") + "-" + Формат(КонНедели,"ДФ=dd.MM.yy");
	Иначе // Подгоним под нужный месяц
		КонМесяца = НачалоДня(КонецМесяца(НачМесяца));
		Возврат "Неделя " + Формат(?(НачНедели < НачМесяца,НачМесяца,НачНедели),"ДФ=dd.MM.yy") + "-" + Формат(?(КонНедели > КонМесяца,КонМесяца,КонНедели),"ДФ=dd.MM.yy");
	КонецЕсли;
КонецФункции

Функция ВидДокументаПоСписку(ДокументСписок) Экспорт
	Возврат СтрЗаменить(Строка(ДокументСписок),"ДокументСписок.","");
КонецФункции

Процедура СформироватьРеестрДокументов(ВидДокумента,ИмяНастройки,ДокументСписок = Неопределено) Экспорт
	Если ДокументСписок = Неопределено Тогда
		#Если Клиент Тогда
			Предупреждение("ВНИМАНИЕ! Не передан список документов для формирования реестра. Обратитесь к разработчикам.",10);
		#КонецЕсли
		
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект = Отчеты.РеестрДокументов.Создать();
	ОтчетОбъект.ВидДокумента = ВидДокумента;
	ФормаОтчета = ОтчетОбъект.ПолучитьФорму();
	ФормаОтчета.Открыть();
		
	Если ИмяНастройки <> "Стандартный реестр" Тогда
		ОтчетОбъект.СохраненнаяНастройка = Справочники.СохраненныеНастройкиОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИмяНастройки));
		ОтчетОбъект.ПрименитьНастройку();
	КонецЕсли;
	
	ОтчетОбъект.ДатаНачала = ДокументСписок.Отбор.Дата.ЗначениеС;
	ОтчетОбъект.ДатаОкончания = ДокументСписок.Отбор.Дата.ЗначениеПо;
	Если ОтчетОбъект.ДатаОкончания = '00010101' Тогда
		ОтчетОбъект.ДатаОкончания = КонецГода(ТекущаяДата());
	КонецЕсли;
	
	КомпоновкаДанныхСервер.ПеренестиЗначенияОтборовМеждуНастройками(ДокументСписок.Отбор,ОтчетОбъект.КомпоновщикНастроек.Настройки);
	
	ОтчетОбъект.ВывестиОтчет(ФормаОтчета);
КонецПроцедуры

Процедура НачатьЗамерВремени(НачалоОтсчетаВремени, ТекстСообщения = "") Экспорт
	НачалоОтсчетаВремени = ТекущаяДата();
	Если ТекстСообщения <> "" Тогда
		Сообщить("[" + ТекущаяДата() +  "] " + ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Функция ПоказатьЗамерВремени(НачалоОтсчетаВремени, ТекстСообщения = "",Сообщать = Истина, сЧасами = Истина) Экспорт
	ЗатраченоСекунд 	= ТекущаяДата() - НачалоОтсчетаВремени;
	
	ЗатраченоЧасов 		= Цел(ЗатраченоСекунд/3600);
	ЗатраченоМинут  	= Цел((ЗатраченоСекунд - ЗатраченоЧасов*3600)/60);
	ЗатраченоСекунд  	= Цел(ЗатраченоСекунд - ЗатраченоЧасов*3600 - ЗатраченоМинут*60);
	
	
	СтрокаЗатрачено 	= "" + ?(сЧасами,Формат(ЗатраченоЧасов,"ЧН=00") + ":","") + Формат(ЗатраченоМинут,"ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(ЗатраченоСекунд,"ЧЦ=2; ЧН=00; ЧВН=");
	Если Сообщать Тогда
		Сообщить(?(ТекстСообщения = "","Затрачено: ",ТекстСообщения + ": ") + СтрокаЗатрачено,СтатусСообщения.Информация);
	КонецЕсли;
	Возврат СтрокаЗатрачено;
КонецФункции

Функция ВычислитьСуммуВыделенныхЯчеек(ПолеТабличногоДокумента) Экспорт
	
	Сумма = 0;
	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						Сумма = Сумма + Число(СтрЗаменить(ПолеТабличногоДокумента.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Процедура РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	Для Каждого Оформление Из ОформленияСтрок Цикл		
		Если Оформление.ДанныеСтроки.Использование = Ложь Тогда			
			Оформление.ЦветТекста = ПолучитьЦветНеИспользуемогоЭлемента();			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЦветНеИспользуемогоЭлемента() Экспорт 
	
	Возврат Новый Цвет(117, 117, 117);
	
КонецФункции

Процедура ГруппировкаПередНачаломИзменения(ОтчетОбъект, ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Представление" Тогда
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Группировка");
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "Группировка";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок, ТекущаяСтрока.Поле, "ДоступноеПоле");
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			НоваяСтрока = Элемент.ТекущаяСтрока;
			
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
			НоваяСтрока.Поле          = Строка(ТекущиеДанные.Поле);
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияОтчетаТонкийКлиент(ТекОбъект, ТекОтчетОбъект, ЭтаФорма, ИмяОтчета, НастраиватьКнопкиПериода = Истина) Экспорт
	
	ЭтоРасшифровка = ТекОбъект.ЭтоРасшифровка;
	
	ЭлементСтруктураОтчета = ЭтаФорма.Элементы.Найти("СтруктураОтчета");
	Если Не ЭлементСтруктураОтчета = Неопределено Тогда

		СписокПолейПоУмолчанию = ПолучитьСписокПолейГруппировокОтчетаПоУмолчанию(ТекОбъект);
		
		ТекПериодичность = ЭтаФорма.Элементы.Найти("Периодичность");
		Если Не ТекПериодичность = Неопределено Тогда
			СписокВыбора = ТекПериодичность.СписокВыбора;
			
			СписокВыбора.Добавить("", "За период отчета");
			ЭтаФорма.Отчет.Периодичность = "";
			
			СписокПолейПериод = Новый Структура("ПериодМесяц, ПериодДень, ПериодНеделя, ПериодКвартал, ПериодГод");
			ДоступныеПоля = ТекОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы;
			Для каждого ТекЗнач Из СписокПолейПериод Цикл
				НайдПоле = ДоступныеПоля.Найти(ТекЗнач.Ключ);
				Если Не НайдПоле = Неопределено Тогда
					СписокВыбора.Добавить(ТекЗнач.Ключ, НайдПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ТекПоле Из СписокПолейПоУмолчанию Цикл
				СписокВыбора.Добавить(ТекПоле.Значение, ТекПоле.Представление);
			КонецЦикла;
			
			Для каждого ТекПоле Из ДоступныеПоля Цикл
				Если Не ТекПоле.Ресурс И СписокВыбора.НайтиПоЗначению(Строка(ТекПоле.Поле)) = Неопределено Тогда
					СписокВыбора.Добавить(Строка(ТекПоле.Поле), ТекПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			
			СписокВыбора.СортироватьПоЗначению();
			
		КонецЕсли;
		
		Периодичность = Неопределено;
		
		ПреобразоватьНастройкиОтчетаКТабличномуВиду(ТекОбъект);
		
		ЭтаФорма.Отчет.Периодичность = Периодичность;
			
	КонецЕсли;
	
	НастройкаПоУмолчанию 	= Неопределено;
	СКД 					= СоздатьПредопределенныеНастройкиОтчета(ТекОбъект, ТекОтчетОбъект, ИмяОтчета, НастройкаПоУмолчанию);
	
	Если НЕ ЭтоРасшифровка Тогда
		
		//Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда
		//	
		//	ТекОбъект.СохраненнаяНастройка = НастройкаПоУмолчанию;
		//	//ПрименитьСохраненнуюНастройку(ЭтаФорма, ИмяОтчета, ТекОбъект.СохраненнаяНастройка, Ложь);
		//	
		//КонецЕсли;
			
		ПереноситьОтбор = Неопределено;
		ТекОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ПереноситьОтбор", ПереноситьОтбор);
		Если ПереноситьОтбор = Неопределено Тогда
			ПереноситьОтбор = Истина;
		КонецЕсли;
		
		УстановитьПредопределеннуюНастройку(ТекОбъект, СКД, ИмяОтчета, , , ПереноситьОтбор, НастройкаПоУмолчанию);
		
		ЗаполнитьЗначенияРеквизитовОтчетаПоУмолчанию(ТекОбъект);
		
		ПодробноНажатиеСервер(ЭтаФорма, ?(ТекОбъект.ОтображатьТаблицуСтруктурыНастроек,"ПодробноОтключить","ПодробноВключить"));
			
	КонецЕсли;
	
	Если НастраиватьКнопкиПериода Тогда
		
		ЕстьПериод = Истина;//ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодОтчета", ТекОбъект.Метаданные());
		Если НЕ ЗначениеЗаполнено(ТекОбъект.ДатаНачала) Тогда
			ТекОбъект.ДатаНачала 	= НачалоМесяца(ТекущаяДата());
			ТекОбъект.ДатаОкончания = ТекущаяДата();
			
			Если ЕстьПериод Тогда
				ТекОбъект.ПериодОтчета.Вариант 			= ВариантСтандартногоПериода.ПроизвольныйПериод;
				ТекОбъект.ПериодОтчета.ДатаНачала 		= ТекОбъект.ДатаНачала;
				ТекОбъект.ПериодОтчета.ДатаОкончания 	= ТекОбъект.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьПериод Тогда
			
			ДобавитьКнопкуСКомандойНаФорму(ЭтаФорма, "ЭтотМесяц", "ЭтотМесяц"	, "Текущий месяц"	, "ПериодОтчетаНажатие", ЭтаФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ЭтаФорма, "Сегодня"	, "Сегодня"		, "Сегодня"			, "ПериодОтчетаНажатие", ЭтаФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ЭтаФорма, "Вчера"	, "Вчера"		, "Вчера"			, "ПериодОтчетаНажатие", ЭтаФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ЭтаФорма, "СНачалаЭтогоМесяца", "СНачалаЭтогоМесяца", "С начала этого месяца", "ПериодОтчетаНажатие", ЭтаФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ЭтаФорма, "СНачалаЭтойНедели", "СНачалаЭтойНедели", "С начала этой недели", "ПериодОтчетаНажатие", ЭтаФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ЭтаФорма, "ПрошлыйМесяц", "ПрошлыйМесяц", "Прошлый месяц", "ПериодОтчетаНажатие", ЭтаФорма.Элементы.Период);
			ДобавитьКнопкуСКомандойНаФорму(ЭтаФорма, "ПрошлаяНеделя", "ПрошлаяНеделя", "Прошлая неделя", "ПериодОтчетаНажатие", ЭтаФорма.Элементы.Период);
			
			ТекОбъект.ДатаНачала 	= ТекОбъект.ПериодОтчета.ДатаНачала;
			ТекОбъект.ДатаОкончания = ТекОбъект.ПериодОтчета.ДатаОкончания;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКнопкуСКомандойНаФорму(ТекФорма, ИмяКнопки, ИмяКоманды, Заголовок, Действие, ЭлементРодитель) Экспорт
	
	Если ТекФорма.Команды.Найти(ИмяКоманды) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекКоманда 							= ТекФорма.Команды.Добавить(ИмяКоманды);
	ТекКоманда.Заголовок 				= Заголовок;
	ТекКоманда.Действие 				= Действие;
	
	ТекКнопка 							= ТекФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭлементРодитель);
	ТекКнопка.ИмяКоманды 				= ИмяКоманды;
	ТекКнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели .ВКоманднойПанели; 
	
КонецПроцедуры

// Добавляет в группировку автоэлемент порядка
Процедура ДобавитьАвтоЭлементПорядка(Строка) Экспорт
	
	ПолеПолеПорядок = Строка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	ЭлементСтруктуры = Неопределено;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
		//ли ЭлементСтруктуры = Неопределено ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено И Поле = Неопределено Тогда
		Если ЭлементСтруктуры = Неопределено ИЛИ Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
		тогда
		Если ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") тогда 
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Строки; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Колонки; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Серии; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Точки; 
			КонецЕсли;
		Иначе
			ЭлементСтруктуры = КомпоновщикНастроек; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Функция удаляет из компоновщика настроек указанную в параметре группировку, если параметр не указан, удаляет все группировки
Функция УдалитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Строки.Количество() > 0 Тогда
			Элемент = Элемент.Строки[0];
		ИначеЕсли Не Строки И Элемент.Колонки.Количество() > 0 Тогда
			Элемент = Элемент.Колонки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Серии.Количество() > 0 Тогда
			Элемент = Элемент.Серии[0];
		ИначеЕсли Не Строки И Элемент.Точки.Количество() > 0 Тогда
			Элемент = Элемент.Точки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Поле = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	Пока Истина Цикл
		Если Элемент.ПоляГруппировки.Элементы.Количество() > 0 
		   И Элемент.ПоляГруппировки.Элементы[0].Поле = Поле Тогда
			Элемент.Родитель.Структура.Очистить();
			Прервать;
			Возврат Истина;
		ИначеЕсли Элемент.Структура.Количество() > 0 Тогда
			Элемент = Элемент.Структура[0];
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает группировку - детальные записи компоновщика настроек
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
Функция ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки = Истина) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

Процедура ВыделитьИспользуемыеОтборы(ОформленияСтрок) Экспорт
	Для Каждого ТекОформление Из ОформленияСтрок Цикл
		Попытка
			Если ТекОформление.ДанныеСтроки.Использование Тогда
				ТекОформление.ЦветФона = WebЦвета.СветлоЗолотистый;
			КонецЕсли;
		Исключение КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура РезультатПриАктивизацииОбласти(ЭтаФорма,Элемент) Экспорт
	#Если Клиент Тогда
	ОбновитьСуммыПоВыделеннымОбластям(ЭтаФорма, Элемент);
	
	#КонецЕсли
КонецПроцедуры

Процедура ДобавитьКнопкиУровней(Элементы,Команды,ИмяОтчета,ТабличныйДокумент) Экспорт
	
	Для Ы = 1 По 20 Цикл
		Если Не Элементы.Найти("Отчет" + ИмяОтчета + "Уровень" + Ы) = Неопределено Тогда
			Элементы.Удалить(Элементы["Отчет" + ИмяОтчета + "Уровень" + Ы]);
		КонецЕсли;
		Если Не Команды.Найти("Отчет" + ИмяОтчета + "ПоказатьУровень" + Ы) = Неопределено Тогда
			Команды.Удалить(Команды["Отчет" + ИмяОтчета + "ПоказатьУровень" + Ы]);
		КонецЕсли;
	КонецЦикла;
	
	Если ТабличныйДокумент.КоличествоУровнейГруппировокСтрок() > 1 Тогда
		Кол = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
		Для У = 1 По Кол Цикл
			
			ТекКоманда = Команды.Добавить("Отчет" + ИмяОтчета + "ПоказатьУровень" + У);
			ТекКоманда.Действие = "ПоказатьУровень";
			
			
			ТекКнопка = Элементы.Добавить("Отчет" + ИмяОтчета + "Уровень" + У, Тип("КнопкаФормы"), Элементы["Отчет" + ИмяОтчета + "ПанельОтчета"]);
			ТекКнопка.ИмяКоманды = "Отчет" + ИмяОтчета + "ПоказатьУровень" + У;
			ТекКнопка.Заголовок = "  " + У + "  ";
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Работа через таблицу отчетов
Процедура ДобавитьОтчетВТаблицуОтчетов(Объект,ИмяОтчета,ИдентификаторОтчета,ИмяВарианта,ДатаНачала,ДатаОкончания) Экспорт
	НовСтрока 						= Объект.Отчеты.Добавить();
	НовСтрока.ИмяОтчета 			= ИмяОтчета;
	НовСтрока.ИдентификаторОтчета 	= ИдентификаторОтчета;
	НовСтрока.ИмяВарианта 			= ИмяВарианта;
	НовСтрока.ДатаНачала 			= ДатаНачала;
	НовСтрока.ДатаОкончания 		= ДатаОкончания;
КонецПроцедуры

Функция РассчитатьПараметр(Выражение) Экспорт
	Результат = Неопределено;
	
	Если ПустаяСтрока(Выражение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выполнить("Результат = " + Выражение + ";");
	
	Возврат Результат;
КонецФункции

Процедура ПостроитьОтчетПоТаблицеОтчетов(Этаформа, ИмяОтчета) Экспорт
	
	СтрокаТаблицы = Этаформа.Объект.Отчеты.НайтиСтроки(Новый Структура("ИмяОтчета",ИмяОтчета))[0];
	
	ДанныеРасшифровки 							= Неопределено;
	
	ЭтаФорма["Отчет" + ИмяОтчета + "Результат"] = ПостроитьОтчетСУказаннымВариантом(Этаформа, СтрокаТаблицы.ИдентификаторОтчета, СтрокаТаблицы.ИмяВарианта, 
		РассчитатьПараметр(СтрокаТаблицы.ДатаНачала), 
		РассчитатьПараметр(СтрокаТаблицы.ДатаОкончания),
		РассчитатьПараметр(СтрокаТаблицы.Отбор),
		,,,Истина,ДанныеРасшифровки);
	СтрокаТаблицы.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
	
	КомпоновкаДанныхСервер.ДобавитьКнопкиУровней(Этаформа.Элементы,Этаформа.Команды,ИмяОтчета,ЭтаФорма["Отчет" + ИмяОтчета + "Результат"]);

КонецПроцедуры

Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОтчетОбъект 						= ЭтаФорма.РеквизитФормыВЗначение("Отчет");
	
	Если ЗначениеЗаполнено(ОтчетОбъект.НастройкаСистемыОтчет) Тогда
		
		ЗаданныйЗаголовок 		= ОтчетОбъект.НастройкаСистемыОтчет.Заголовок;
		ЭтаФорма.Автозаголовок 	= Ложь;
		ЭтаФорма.Заголовок 		= ?(ПустаяСтрока(ЗаданныйЗаголовок), СокрЛП(ОтчетОбъект.НастройкаСистемыОтчет.Наименование), ЗаданныйЗаголовок);
		ЭтаФорма.Элементы.НастройкаСистемыОтчет.Доступность = РольДоступна("ПолныйДоступ");
	
		ОтчетОбъект.СхемаКомпоновкиДанных 	= ОтчетОбъект.НастройкаСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
		
		АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
	КонецЕсли;
	
	ЭтаФорма.ИмяОтчета 					= ОтчетОбъект.Метаданные().Имя;
	ЭтаФорма.ДополнительныеСвойства		= Новый Структура;
	
	ЭтаФорма.Элементы.Портрет.Картинка 	= БиблиотекаКартинок.ПереключательВключен;
	
	//Если НЕ ОтчетОбъект.НастройкаСистемыОтчет.Пустая() Тогда
	//	ЭтаФорма.ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");
	//КонецЕсли;
	
	ИнициализацияОтчетаТонкийКлиент(ЭтаФорма.Отчет, ОтчетОбъект,ЭтаФорма,ЭтаФорма.ИмяОтчета);
	
	Если ЗначениеЗаполнено(ОтчетОбъект.НастройкаСистемыОтчет) Тогда
		УстановитьЗначениеОтбора(ЭтаФорма.СохраненныеНастройки,"НастраиваемыйОбъект", ОтчетОбъект.НастройкаСистемыОтчет);
	Иначе
		УстановитьЗначениеОтбора(ЭтаФорма.СохраненныеНастройки,"НастраиваемыйОбъект", "ОтчетОбъект." + ЭтаФорма.ИмяОтчета);
	КонецЕсли;
	
	ЭтаФорма.Элементы.Редактировать.Пометка = ЭтаФорма.Элементы.Результат.Редактирование;
	ЭтаФорма.Элементы.Заголовки.Пометка 	= ЭтаФорма.Элементы.Результат.ОтображатьЗаголовки;
	ЭтаФорма.Элементы.Сетка.Пометка 		= ЭтаФорма.Элементы.Результат.ОтображатьСетку;
	
	Если ЭтаФорма.Отчет.ОтображатьТаблицуСтруктурыНастроек Тогда
		ЭтаФорма.Элементы.СтруктураОтчета.Видимость 		= Ложь;
		ЭтаФорма.Элементы.СтруктураОтчетаТаблица.Видимость 	= Истина;
		ЭтаФорма.Элементы.Периодичность.Видимость 			= Истина;
	Иначе
		ЭтаФорма.Элементы.СтруктураОтчета.Видимость 		= Истина;
		ЭтаФорма.Элементы.СтруктураОтчетаТаблица.Видимость 	= Ложь;
		ЭтаФорма.Элементы.Периодичность.Видимость 			= Ложь;
	КонецЕсли;
	
	ДобавитьКнопкиУровнейРезультата(ЭтаФорма);
	
	УстановитьТекущуюНастройкуДляВыделенияВСписке(ЭтаФорма);
	
	ЭтаФорма.Элементы.МоиНастройки.Пометка = ЭтаФорма.Отчет.МоиНастройки;
	
	ФормыСервер.ОформитьКнопкиКоманднойПанелиФормы(ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьТекущуюНастройкуДляВыделенияВСписке(ЭтаФорма)
	ЭтаФорма.СохраненныеНастройки.Параметры.УстановитьЗначениеПараметра("ТекущаяНастройка", ЭтаФорма.Отчет.СохраненнаяНастройка);
КонецПроцедуры

Процедура ДобавитьКнопкиУровнейРезультата(ЭтаФорма, ЭлементПанель = Неопределено, Префикс = "") Экспорт
	
	Для Н = 1 по 10 Цикл
		
		ИмяКоманды 				= Префикс + "ПоказатьУровень" + Н;
		Если ЭтаФорма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			ТекКоманда 				= ЭтаФорма.Команды.Добавить(ИмяКоманды);
			ТекКоманда.Действие 	= "ПоказатьУровень";
		КонецЕсли;
		
		ИмяКнопки 				= Префикс + "Уровень" + Н;
		Если ЭтаФорма.Элементы.Найти(ИмяКнопки) = Неопределено Тогда
			ТекКнопка 				= ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(ЭлементПанель = Неопределено, ЭтаФорма.Элементы.ПанельРезультат, ЭлементПанель));
			ТекКнопка.ИмяКоманды 	= "ПоказатьУровень" + Н;
			ТекКнопка.Заголовок 	= "  " + Н + "  ";
			ТекКнопка.Видимость 	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьНастройкуСервер(ЭтаФорма, НастройкаСсылка) Экспорт
	
    ОтчетОбъект 	= ЭтаФорма.РеквизитФормыВЗначение("Отчет");	
	Отчет			= ЭтаФорма.Отчет;
	ОтчетСтруктура 	= Новый Структура;
	Для Каждого Реквизит Из ОтчетОбъект.Метаданные().Реквизиты Цикл
		
		ОтчетСтруктура.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя]);	
		
	КонецЦикла;	
	
	ОтчетСтруктура.Вставить("КомпоновщикНастроек", Отчет["КомпоновщикНастроек"]);
	
	Отчет.СохраненнаяНастройка = НастройкаСсылка;
	
	СтруктураНастроек = КомпоновкаДанныхСервер.ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетСтруктура);
	КомпоновкаДанныхСервер.СохранитьНастройкуОбъекта(Отчет.СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПодробноНажатиеСервер(ЭтаФорма, ИмяКоманды) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	
	Если ИмяКоманды = "ПодробноОтключить" Тогда
		
		Отчет.ОтображатьТаблицуСтруктурыНастроек = Истина;
		
		КомпоновкаДанныхСервер.ПреобразоватьНастройкиОтчетаКТабличномуВиду(отчет);//, отчет.КомпоновщикНастроек.Настройки, Отчет.СтруктураОтчетаТаблица, ЭтаФорма.Периодичность);
		
	Иначе
		
		Отчет.ОтображатьТаблицуСтруктурыНастроек = Ложь;
		
		КомпоновкаДанныхСервер.ПолучитьНастройкиОтчетаПоТаблицеНастроек(Отчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеПоля(Представление)
	ТекПредставление = Представление;
	Пока Не Найти(ТекПредставление, ".") = 0 Цикл
		Поз = Найти(ТекПредставление, ".");
		ТекПредставление = Сред(ТекПредставление, Поз + 1);
	КонецЦикла;
	
	Возврат ТекПредставление;
КонецФункции

&НаСервере
Процедура ПолучитьДеревоДоступныхПолейГруппировок(ТекСтрокаДерева, ДоступныеПоля, ТекУровень = 1)
	
	Если ТекУровень > 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДерева = ТекСтрокаДерева.Строки;
	
	Для каждого ТекПоле Из ДоступныеПоля Цикл
		НоваяСтрока 				= СтрокиДерева.Добавить();
		НоваяСтрока.Поле 			= ТекПоле.Поле;
		НоваяСтрока.Представление 	= ПолучитьПредставлениеПоля(ТекПоле.Заголовок);
		
		ПолучитьДеревоДоступныхПолейГруппировок(НоваяСтрока, ТекПоле.Элементы, ТекУровень + 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДеревоДоступныхПолейСервер(ЭтаФорма) Экспорт
	
	ДеревоДоступныхПолей = Новый ДеревоЗначений;
	ДеревоДоступныхПолей.Колонки.Добавить("Поле", Новый ОписаниеТипов("ПолеКомпоновкиДанных"));
	ДеревоДоступныхПолей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	
	ПолучитьДеревоДоступныхПолейГруппировок(ДеревоДоступныхПолей, ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы);
	
	ЭтаФорма.АдресДереваДоступныхПолей = ПоместитьВоВременноеХранилище(ДеревоДоступныхПолей, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеГруппировкиСервер(Отчет, ПолеКомпоновки, ИдентификаторТекСтроки = Неопределено) Экспорт
	
	НоваяСтрока = Отчет.СтруктураОтчетаТаблица.Добавить();
	
	НоваяСтрока.Использование  = Истина;
	НоваяСтрока.Представление  = "  " + КомпоновкаДанныхСервер.ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек, ПолеКомпоновки);
	НоваяСтрока.Поле           = "" + ПолеКомпоновки + "%П";
	
	НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
	          
	ИдентификаторТекСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура ПериодичностьПриИзмененииСервер(ЭтаФорма) Экспорт
	Отчет 		= ЭтаФорма;
	
	ОтчетОбъект = ДанныеФормыВЗначение(ЭтаФорма.Отчет, Тип("ОтчетОбъект." + ЭтаФорма.ИмяОтчета));
	
	СкорректироватьСтруктуруОтчетаУФ(ОтчетОбъект, ЭтаФорма, ЭтаФорма.Отчет.Периодичность);
	
	ЗначениеВДанныеФормы(ОтчетОбъект, ЭтаФорма.Отчет);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуПоляСервер(ЭтаФорма, ТекСтрокаИдентификатор, ПоляГруппировки) Экспорт
	
	Отчет 				= ЭтаФорма.Отчет;
	ТекСтрока 			= Отчет.СтруктураОтчетаТаблица.НайтиПоИдентификатору(ТекСтрокаИдентификатор);
	
	СтрокаПолей 		= "";
	СтрокаПредставления = "";
	
	Для каждого Стр Из ПоляГруппировки Цикл
		
		ТекПоле = Стр.Поле;
		ТекПредставление = Стр.Представление;
		
		Если Стр.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия ИЛИ Стр.ТипГруппировки = "Только группы" Тогда
			ТекПоле = ТекПоле + "%ТИ";
			ТекПредставление = ТекПредставление + " (Только группы)";
		ИначеЕсли Стр.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия ИЛИ Стр.ТипГруппировки = "С группами" Тогда
			ТекПоле = ТекПоле + "%И";
			ТекПредставление = ТекПредставление + " (С группами)";
		КонецЕсли;
		Если Стр.Использование Тогда
			ТекПоле = ТекПоле + "%П";
		Иначе
			ТекПредставление = "";
		КонецЕсли;
		
		СтрокаПолей = СтрокаПолей + "," + ТекПоле;
		Если Не ПустаяСтрока(ТекПредставление) Тогда
			СтрокаПредставления = СтрокаПредставления + ", " + ТекПредставление;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПолей = Сред(СтрокаПолей, 2);
	СтрокаПредставления = Сред(СтрокаПредставления, 3);
	
	СтрокаПредставления = "  " + СтрокаПредставления;
	
	ТекСтрока.Поле = СтрокаПолей;
	ТекСтрока.Представление = СтрокаПредставления;
	
	ОтчетОбъект = ДанныеФормыВЗначение(Отчет, Тип("ОтчетОбъект." + ЭтаФорма.ИмяОтчета));
	
	ПолучитьНастройкиОтчетаПоТаблицеНастроек(ОтчетОбъект);
	
	ЗначениеВДанныеФормы(ОтчетОбъект, Отчет);
	
КонецПроцедуры

Функция ПрименитьНастройкиКомпоновкиДанных(Отчет, АдресДанныхРасшифровки, Расшифровка, ПрименяемыеНастройкиКомпоновкиДанных) Экспорт
    ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет);
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровки, ИсточникДоступныхНастроек);
	Возврат ОбработкаРасшифровки.ПрименитьНастройки(Расшифровка, ПрименяемыеНастройкиКомпоновкиДанных); 
КонецФункции	

Функция НайтиГруппировкуДляРегистратора(ТекущаяГруппировка, ПолеРегистратора)
	
	
	Если ТипЗнч(ТекущаяГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Или ТипЗнч(ТекущаяГруппировка) = Тип("ГруппировкаКомпоновкиДанных")Тогда
		
		Если НЕ ТекущаяГруппировка.Использование Тогда
			Для Каждого ПолеГруппировки Из ТекущаяГруппировка.ПоляГруппировки.Элементы Цикл
				
				Если ПолеГруппировки.Поле = ПолеРегистратора Тогда
					ПолеГруппировки.Использование = Истина;
					ЕстьГруппировкаРегистратора = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьИспользуемыеПоля = Ложь;
	
		Для Каждого ПолеГруппировки Из ТекущаяГруппировка.ПоляГруппировки.Элементы Цикл
			
			Если НЕ ПолеГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолеГруппировки.Поле = ПолеРегистратора Тогда
				ПолеГруппировки.Использование = Ложь;
				//ТекущаяГруппировка.Использование = Истина;
				ЕстьГруппировкаРегистратора = Истина;
				Прервать;
			Иначе
				ЕстьИспользуемыеПоля = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьИспользуемыеПоля Тогда
			Возврат ТекущаяГруппировка.Родитель;
		КонецЕсли;
		
		Если ТекущаяГруппировка.Структура.Количество() = 0 Тогда 
			Возврат ТекущаяГруппировка;
		КонецЕсли;			
		
		Для Н = 0 по ТекущаяГруппировка.Структура.Количество()-1 Цикл
			ПоследняяГруппировка = НайтиГруппировкуДляРегистратора(ТекущаяГруппировка.Структура[Н], ПолеРегистратора);
			Если ПоследняяГруппировка <> Неопределено Тогда
				Возврат ПоследняяГруппировка;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТекущаяГруппировка;
			
		//ПоследняяГруппировка =  ТекущаяГруппировка = ТекущаяГруппировка.Структура[0];
		
	ИначеЕсли ТипЗнч(ТекущаяГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Если НЕ ТекущаяГруппировка.Использование Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТекущаяГруппировка.Строки.Количество() = 0 Тогда
			НижняяГруппировка = ТекущаяГруппировка;
			Возврат Неопределено;
		КонецЕсли;
		
		Для Н = 1 по ТекущаяГруппировка.Строки.Количество() Цикл
			ПоследняяГруппировка = НайтиГруппировкуДляРегистратора(ТекущаяГруппировка.Строки[Н - 1], ПолеРегистратора);
			Если ПоследняяГруппировка <> Неопределено Тогда
				Возврат ПоследняяГруппировка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		//ТекущаяГруппировка = ТекущаяГруппировка.Строки[0];
		
	КонецЕсли;
		
КонецФункции

//Функция РасшифроватьПоРегистраторам(Знач КомпоновщикНастроек, ДанныеРасшифровки, Расшифровка, Отчет) Экспорт
Функция РасшифроватьПоРегистраторам(Знач КомпоновщикНастроек, Знач ДанныеРасшифровки, Расшифровка, ИсточникДоступныхНастроек, НастройкаСистемыОтчет = Неопределено) Экспорт
	
	Если ТипЗнч(ДанныеРасшифровки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ДанныеРасшифровкиОбъект = ДанныеРасшифровки;
		ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки);
	Иначе
		ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);	
	КонецЕсли;
	
	ВременныйКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("Строка") Тогда
		КомпоновщикНастроек = ПолучитьИзВременногоХранилища(КомпоновщикНастроек);
	КонецЕсли;
	
	ИсходныеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВременныйКомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровкиОбъект.Настройки);//ИсходныеНастройки);
	
	НастройкиДляИзменения = ВременныйКомпоновщикНастроек.Настройки;
	
	ПолеРегистратора 	= Новый ПолеКомпоновкиДанных("Регистратор");
	Для Ном = 0 по НастройкиДляИзменения.Структура.Количество() - 1 Цикл
	
		ПоследняяГруппировка = НайтиГруппировкуДляРегистратора(НастройкиДляИзменения.Структура[Ном], ПолеРегистратора);
		Если ПоследняяГруппировка <> Неопределено Тогда
			ДобавитьГруппировку(ПоследняяГруппировка, ПолеРегистратора);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущаяГруппировка 	= НастройкиДляИзменения.Структура[0];
	НижняяГруппировка 	= ТекущаяГруппировка;
	
	Если ИсточникДоступныхНастроек = Неопределено и ЗначениеЗаполнено(НастройкаСистемыОтчет) Тогда
		СКД = НастройкаСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КонецЕсли;
	//ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиОбъект, ИсточникДоступныхНастроек);
	
	// получаем правильные отборы: 
	НастройкиПоВыбранномуПолю = ОбработкаРасшифровки.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных("Регистратор"));
	                           
	НастройкиДляИзменения.Отбор.Элементы.Очистить();	
	// помещаем отборы в родительскую структуру
	Для Каждого ЭлементОтбора Из НастройкиПоВыбранномуПолю.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
		Иначе
			НовыйЭлемент = НастройкиДляИзменения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат НастройкиДляИзменения;
	
КонецФункции	

Функция ТекущаяРасшифровкаЭтоСправочник(АдресДанныхРасшифровки, Расшифровка, ВидДокумента = "") Экспорт
	
	Если ТипЗнч(АдресДанныхРасшифровки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ДанныеРасшифровки = АдресДанныхРасшифровки;
	Иначе
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	КонецЕсли;
	
	//ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	
	Попытка
		ТекРасшифровка = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Исключение 
		ТекРасшифровка = Неопределено;
	КонецПопытки;
	
	Возврат ЭтоДокумент(ТекРасшифровка, ВидДокумента);
	
КонецФункции

Функция ТекущаяРасшифровкаЭтоДокумент(АдресДанныхРасшифровки, Расшифровка, ВидДокумента = "") Экспорт
	
	Если ТипЗнч(АдресДанныхРасшифровки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ДанныеРасшифровки = АдресДанныхРасшифровки;
	Иначе
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	КонецЕсли;
	
	//ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	
	Попытка
		ТекРасшифровка = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Исключение 
		ТекРасшифровка = Неопределено;
	КонецПопытки;
	
	Возврат ЭтоДокумент(ТекРасшифровка, ВидДокумента);
	
КонецФункции



Функция ЭтоГруппировкаСРегистратором(АдресДанныхРасшифровки, Расшифровка) Экспорт
	
	Если ТипЗнч(АдресДанныхРасшифровки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ДанныеРасшифровки = АдресДанныхРасшифровки;
	Иначе
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	КонецЕсли;
	
	МассивПолейТекущейРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля();
	
	ЭтоГруппировкаСРегистратором = Ложь;
	Для Каждого Поле из МассивПолейТекущейРасшифровки Цикл
		Если Поле.Поле = "Регистратор" Тогда
			ЭтоГруппировкаСРегистратором = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЭтоГруппировкаСРегистратором;
	
КонецФункции

// Герасимов Александр 23.01.19 
Функция ВернутьМассивИменРеквизитовОтчета(ИмяОтчета) Экспорт
	
	МассивИменРеквизитов = Новый Массив;
	Для Каждого Реквизит Из Метаданные.Отчеты[ИмяОтчета].Реквизиты Цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;	
	
	Возврат МассивИменРеквизитов;
	
КонецФункции	

Функция ПолучитьЗначениеРасшифровкиОтчета(ДанныеРасшифровки,Расшифровка,ЭтоПроведенныйДокумент = Неопределено) Экспорт
	
	ТекРасшифровка 	= Неопределено;
	Данные 			= ПолучитьИзВременногоХранилища(ДанныеРасшифровки); 
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") или ТипЗнч(Расшифровка) = Тип("Число") тогда 
		ЭлементРасшифровки = Данные.Элементы[Расшифровка]; 
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда 
			Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
				ТекРасшифровка = Поле.Значение;
				Если ЭтоПроведенныйДокумент <> Неопределено Тогда
					Попытка
						ЭтоПроведенныйДокумент = ТекРасшифровка.Проведен;
					Исключение
						ЭтоПроведенныйДокумент = Ложь;
					КонецПопытки;
				КонецЕсли;
				Прервать; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ТекРасшифровка;
	
КонецФункции

Функция ВернутьМассивДокументовДляПерепроведения(КомпоновщикНастроек, ДанныеРасшифровки, Расшифровка, Отчет, ИмяОтчета, НастройкиСистемыОтчет = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(НастройкиСистемыОтчет) Тогда
		СхемаКомпоновкиДанных = НастройкиСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Иначе
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет);
		
		темпОтчет = Отчеты[ИмяОтчета].Создать();
		СхемаКомпоновкиДанных = темпОтчет.СхемаКомпоновкиДанных;
	
	КонецЕсли;
	
	ОбработкаРасшифровки 		= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	НастройкиПоВыбранномуПолю 	= ОбработкаРасшифровки.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных("Регистратор"));	
	
	Если НастройкиПоВыбранномуПолю.Структура.Количество() > 0 и ТипЗнч(НастройкиПоВыбранномуПолю.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		НастройкиПоВыбранномуПолю.Структура.Очистить();
		
		Группировка 				= НастройкиПоВыбранномуПолю.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		НовыйЭлемент 				= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовыйЭлемент.Использование 	= Истина;
		НовыйЭлемент.Поле 			= Новый ПолеКомпоновкиДанных("Регистратор");
		
		//НастройкиПоВыбранномуПолю.Структура.Удалить(НастройкиПоВыбранномуПолю.Структура[0]);
		
	КонецЕсли;
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки 			= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиПоВыбранномуПолю, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки 		= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
	ПроцессорВывода 			= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	тз 							= Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Регистратор");
	тз.Колонки.Добавить("Дата");
	тз.Колонки.Добавить("МоментВремени");
	
	ПроцессорВывода.УстановитьОбъект(тз);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого Строка Из тз Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Регистратор) Тогда
			
			МассивУдаляемыхСтрок.Добавить(Строка);
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			Строка.МоментВремени = Строка.Регистратор.МоментВремени();
		Исключение 
			МассивУдаляемыхСтрок.Добавить(Строка);	
		КонецПопытки;
		
	КонецЦикла;	
	
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		тз.Удалить(Строка);
	КонецЦикла;	
	
	тз.Сортировать("МоментВремени", Новый СравнениеЗначений);
	
	массивРегистраторов = тз.ВыгрузитьКолонку("Регистратор");
	
	Возврат массивРегистраторов;
	
КонецФункции	

Функция ПровестиДокумент(ТекущийДокумент, ПерепровестиБезусловно = Ложь, ИзОтчета = Ложь, ДетальныеКомментарии = Ложь) Экспорт
	
	СтруктураОтвета = Новый Структура("Проведен, Информация", Истина, "");
	
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.Операция") Тогда
		
		Информация = "[" + ТекущаяДата() + "] " + ТекущийДокумент + " не перепроводится, пропускаем";
		
		Если ДетальныеКомментарии Тогда
			Сообщить(Информация, СтатусСообщения.Информация);
		КонецЕсли;
		
		СтруктураОтвета.Проведен 	= Истина;
		СтруктураОтвета.Информация 	= Информация;
		
		Возврат СтруктураОтвета;
		
	КонецЕсли;
	
	ОбъектДок = ТекущийДокумент.ПолучитьОбъект();
	
	Если ИзОтчета Тогда
		
		ОбъектДок.ДополнительныеСвойства.Вставить("ПроведениеИзОтчета");
		
	КонецЕсли;
	
	Если НЕ ОбъектДок.ПроверитьЗаполнение() Тогда
		
		Информация = "[" + ТекущаяДата() + "] Ошибка проведения документа " + ТекущийДокумент + ": " + НСтр("ru='Поля документа не заполнены.';uk='Поля документа не заповнені.'");
		Сообщить(Информация, СтатусСообщения.ОченьВажное);
		
		СтруктураОтвета.Проведен 	= Ложь;
		СтруктураОтвета.Информация 	= Информация;
		
		Возврат СтруктураОтвета;
		
	КонецЕсли;
	
	Попытка
		
		ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
		
		Информация = "[" + ТекущаяДата() + "] Проведен " + ТекущийДокумент;
		
		СтруктураОтвета.Проведен 	= Истина;
		СтруктураОтвета.Информация 	= Информация;
		
		Если ДетальныеКомментарии Тогда
			Сообщить(Информация, СтатусСообщения.Информация);
		КонецЕсли;
		
	Исключение
		
		Информация = "[" + ТекущаяДата() + "] Ошибка проведения документа " + ТекущийДокумент + ":
		|" + ОписаниеОшибки();
		
		Сообщить(Информация,СтатусСообщения.ОченьВажное);
		
		СтруктураОтвета.Проведен 	= Истина;
		СтруктураОтвета.Информация 	= Информация;
		
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПредставлениеСчетаАкта(АктИлиСчет, Номер, Дата, Ссылка, ДокументОснование) Экспорт
	Результат = "" + ?(АктИлиСчет, "Акт вып. работ", "Счет покупателю") + " " + Номер + " от " + Формат(Дата,"ДФ=dd.MM.yy");
	Если АктИлиСчет Тогда
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			Результат = Результат + " (по счету " + ДокументОснование.Номер + " от " + Формат(ДокументОснование.Дата,"ДФ=dd.MM.yy") + ")";
		Иначе
			Результат = Результат + " (по счету " + Номер + " от " + Формат(Ссылка.Дата,"ДФ=dd.MM.yy") + ")";
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Падалка Л.И. 05.05.2020
// Отборы

Функция СериализоватьОтбор(пОтбор) экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отборы");
	Для Каждого цЭлементОтбора Из пОтбор.Элементы Цикл
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, цЭлементОтбора);
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьОтбор()

Процедура ДесериализоватьОтбор(пОтбор, пНастройки_Отбор) экспорт
	
	пОтбор.Элементы.Очистить();
	Если пНастройки_Отбор <> Неопределено Тогда
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(пНастройки_Отбор);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Отборы" Тогда
			ЧтениеXML.Прочитать();
			Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя <> "Отборы" Цикл
				ПолеОтбораXML = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
				ПолеОтбора = пОтбор.Элементы.Добавить(ТипЗнч(ПолеОтбораXML));
				СкопироватьЭлементыОтбораРекурсивно(ПолеОтбораXML, ПолеОтбора);
				//ПолеОтбора.Поле = ПолеОтбораXML.Поле;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДесериализоватьОтбор()

Процедура СкопироватьЭлементыОтбораРекурсивно(пОтборОткуда, пОтборКуда);
	
	ЗаполнитьЗначенияСвойств(пОтборКуда, пОтборОткуда);
	Если ТипЗнч(пОтборОткуда) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Для Каждого ЭлементОтбора Из пОтборОткуда.Элементы Цикл
			НовыйЭлементОтбора = пОтборКуда.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
			СкопироватьЭлементыОтбораРекурсивно(ЭлементОтбора, НовыйЭлементОтбора);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СкопироватьЭлементыОтбораРекурсивно()

Функция КраткоеПредставлениеДокумента(ТекДок, Знач Номер = Неопределено, Знач Дата = Неопределено, ВыводитьСкобкиДаты = Истина, ТрекНомер = "", НомерПоПриоритету = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекДок) Тогда
		Возврат "<...>";
	КонецЕсли;
	
	Номер 	= ?(Номер 	= Неопределено, ТекДок.Номер, Номер);
	Дата 	= ?(Дата 	= Неопределено, ТекДок.Дата	, Дата);
	
	Возврат СокрЛП(Номер) + ?(ВыводитьСкобкиДаты," ("," от ") + Формат(Дата,"ДФ=dd.MM.yy") + ?(ВыводитьСкобкиДаты,")","");
		
КонецФункции

Функция ВернутьGUIDОбъекта(Объект) Экспорт
	Возврат(XMLСтрока(Объект));
КонецФункции

Процедура УстановитьПараметровСеансаКостыль() Экспорт
	
	ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя());
	Если ТекущийПользователь.Пустая() Тогда
		НовЗапись = Справочники.Пользователи.СоздатьЭлемент();
		НовЗапись.Наименование = ИмяПользователя();
		НовЗапись.Записать();
		ТекущийПользователь = НовЗапись.Ссылка;
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	
КонецПроцедуры

Функция РезультатОбработкаРасшифровкиНаСервере(ИмяОтчета, АдресРасшифровки, АдресХранилищаСКД, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	ТекРасшифровка = КомпоновкаДанныхСервер.ПолучитьПолеРасшифровки(АдресРасшифровки, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);
	
	Если ВыполненноеДействие = "ПровестиДокумент" Тогда
		
		ТекОб = ТекРасшифровка.ПолучитьОбъект();
		ТекОб.ДополнительныеСвойства.Вставить("ПроведениеИзОтчета");
		Попытка
			ТекОб.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Проведен документ " + ТекРасшифровка);
		Исключение 
			Сообщить("Не проведен документ " + ТекРасшифровка + ": " + ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
		КонецПопытки;
		
	ИначеЕсли ВыполненноеДействие = "Перепровести" Или ВыполненноеДействие = "ПерепровестиБезусловно" Тогда
		
		ПроводитьБезусловно = ВыполненноеДействие = "ПерепровестиБезусловно";
		
		ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
		ОтчетОбъект.СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
		
		Настройки = КомпоновкаДанныхСервер.ПолучитьНастройкиРасшифровкиПоРегистратору(АдресРасшифровки, АдресХранилищаСКД, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		ОтчетОбъект.СкомпоноватьРезультат(Новый ТабличныйДокумент, ДанныеРасшифровки);
		
		ОписаниеТиповДокументы = Документы.ТипВсеСсылки();
		
		ТаблицаРегистраторов = Новый ТаблицаЗначений;
		//ТаблицаРегистраторов.Колонки.Добавить("Период", Новый ОписаниеТипов("МоментВремени"));
		ТаблицаРегистраторов.Колонки.Добавить("ДатаДокумента");
		ТаблицаРегистраторов.Колонки.Добавить("Регистратор", ОписаниеТиповДокументы);
		
		МассивДокументов = Новый Массив;
		
		Для каждого ТекЭлемент Из ДанныеРасшифровки.Элементы Цикл
			
			Попытка
				Группировка = ТекЭлемент.ПолучитьПоля().Получить(0);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Поле = Группировка.Поле;
			Значение = Группировка.Значение;
			
			Если Не Поле = "Регистратор" Или Не ЗначениеЗаполнено(Значение) Или Не ОписаниеТиповДокументы.СодержитТип(ТипЗнч(Значение)) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивДокументов.Добавить(Значение);
			//НоваяСтрока = ТаблицаРегистраторов.Добавить();
			//НоваяСтрока.Регистратор = Значение;
			//НоваяСтрока.Период = Значение.МоментВремени();
			
		КонецЦикла;
		
		
		Возврат МассивДокументов;
		
		//ТаблицаРегистраторов.Сортировать("Период");
		
		//ВсегоРегистраторов = ТаблицаРегистраторов.Количество();
		//Если ВсегоРегистраторов = 0 Тогда
		//	СообщитьСоВременем("Нет регистраторов для проведения!");
		//	Возврат;
		//КонецЕсли;
		
		//ИндикаторСервер.Инициализировать("Перепроведение документов",ВсегоРегистраторов);
		
		//Обработка = 
		
		//СоотвТиповДокументов = Новый Соответствие;
		//
		//МаксКвоПопыток = 1;//10;
		//
		//Всего = ТаблицаРегистраторов.Количество();
		//
		//Для Каждого Док из ТаблицаРегистраторов Цикл
		//	//ИндикаторСервер.Обновить();
		//	
		//	Ном = Ном + 1;
		//	ТекущийДокумент = Док.Регистратор;
		//	
		//	Если ТекущийДокумент = Null Или ТекущийДокумент = Неопределено Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	ТипДокумента = ТипЗнч(ТекущийДокумент);
		//	
		//	ЕстьКонтрагент = Ложь;
		//	ЕстьДоговор = Ложь;
		//	
		//	Если СоотвТиповДокументов.Получить(ТипДокумента) = Неопределено Тогда
		//		
		//		Попытка
		//			
		//			РеквизитыДокумента = ТекущийДокумент.Метаданные().Реквизиты;
		//			ПроверятьРеквизиты = Истина;
		//			
		//		Исключение
		//			ПроверятьРеквизиты = Ложь;
		//		КонецПопытки;
		//		
		//		Если ПроверятьРеквизиты Тогда
		//			
		//			Если Не РеквизитыДокумента.Найти("Контрагент") = Неопределено Тогда
		//				ЕстьКонтрагент = Истина;
		//			КонецЕсли;
		//			
		//			Если Не РеквизитыДокумента.Найти("Договор") = Неопределено Тогда
		//				ЕстьДоговор = Истина;
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//		
		//		СоотвТиповДокументов.Вставить(ТипДокумента, Новый Структура("ЕстьКонтрагент, ЕстьДоговор", ЕстьКонтрагент, ЕстьДоговор));
		//		
		//	Иначе
		//		
		//		СтруктураЗначений = СоотвТиповДокументов.Получить(ТипДокумента);
		//		
		//		ЕстьКонтрагент = СтруктураЗначений.ЕстьКонтрагент;
		//		ЕстьДоговор = СтруктураЗначений.ЕстьДоговор;
		//		
		//	КонецЕсли;
		//	
		//	ПредставлениеКонтрагент = "";
		//	ПредставлениеДоговор = "";
		//	
		//	Если ЕстьКонтрагент Тогда
		//		ПредставлениеКонтрагент = ", контр. " + ТекущийДокумент.Контрагент;
		//	ИначеЕсли ЕстьДоговор Тогда
		//		ПредставлениеКонтрагент = ", контр. " + ТекущийДокумент.Договор.Владелец;
		//	КонецЕсли;
		//	
		//	Если ЕстьДоговор Тогда
		//		ПредставлениеДоговор = ", договор " + ТекущийДокумент.Договор;
		//	КонецЕсли;
		//	
		//	
		//	СообщитьСоВременем("ДОКУМЕНТ " + ТекущийДокумент + ПредставлениеКонтрагент + ПредставлениеДоговор, СтатусСообщения.Информация);
		//	
		//	НомерПопытки = 1;
		//	ВремяОжидания = 5;
		//	
		//	#Если Клиент Тогда
		//		ОбработкаПрерыванияПользователя();
		//		Состояние("Проводится " + ТекущийДокумент, Окр(Ном/ВсегоРегистраторов * 100));
		//	#КонецЕсли
		//	
		//	Попытка
		//		
		//		ФоновоеЗаданиеМО = ФоновыеЗадания.ПолучитьФоновыеЗадания();
		//		ФоновыеЗадания.ОжидатьЗавершения(ФоновоеЗаданиеМО);
		//		
		//	Исключение
		//		//Сообщить("Не ВСЕ фоновые задания удалось завершить!", СтатусСообщения.ОченьВажное);
		//	КонецПопытки;
		//	
		//	ТекОб = ТекущийДокумент.ПолучитьОбъект();
		//	ТекОб.ДополнительныеСвойства.Вставить("ПроведениеИзОтчета");
		//	
		//	НужноПроводить = Истина;
		//	Пока НужноПроводить Цикл
		//		
		//		Попытка
		//			ТекОб.Записать(РежимЗаписиДокумента.Проведение);
		//			Сообщить("Проведен документ " + ТекущийДокумент);
		//			ДокументПроведен = Истина;
		//		Исключение 
		//			Сообщить("Не проведен документ " + ТекущийДокумент + ": " + ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
		//			ДокументПроведен = Ложь;
		//		КонецПопытки;
		//		
		//		Если НЕ ДокументПроведен Тогда
		//			СообщитьСоВременем("Ошибка проведения " + ТекущийДокумент + "[попытка " + НомерПопытки + "]",СтатусСообщения.ОченьВажное);
		//			НомерПопытки = НомерПопытки + 1;
		//			Если НомерПопытки > МаксКвоПопыток Тогда
		//				СообщитьСоВременем("ПРЕВЫШЕНО МАКСИМАЛЬНОЕ КОЛИЧЕСТВО ПОПЫТОК !!!", СтатусСообщения.ОченьВажное);
		//				
		//				Если ПроводитьБезусловно Тогда
		//					НужноПроводить = Ложь;
		//				Иначе
		//					//ИндикаторСервер.Закрыть();
		//					Возврат Неопределено;
		//				КонецЕсли;
		//			ИначеЕсли НомерПопытки > 5 Тогда
		//				ВремяОжидания = 15;
		//			КонецЕсли;
		//			
		//			ОбщегоНазначенияСервер.Пауза(ВремяОжидания);
		//			Продолжить;
		//			
		//		КонецЕсли;
		//		
		//		НужноПроводить = Ложь;
		//		
		//	КонецЦикла;
		//	
		//КонецЦикла;
		//ИндикаторСервер.Закрыть();
		
		
		////Для каждого ТекСтрока Из ТаблицаРегистраторов Цикл
		////	
		////	ТекОб = ТекСтрока.Регистратор.ПолучитьОбъект();
		////	ТекОб.ДополнительныеСвойства.Вставить("ПроведениеИзОтчета");
		////	Попытка
		////		ТекОб.Записать(РежимЗаписиДокумента.Проведение);
		////		Сообщить("Проведен документ " + ТекРасшифровка);
		////	Исключение 
		////		Сообщить("Не проведен документ " + ТекРасшифровка + ": " + ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
		////		Прервать;
		////	КонецПопытки;
		////	
		////КонецЦикла;
		
		//Настройки = КомпоновкаДанных.ПолучитьНастройкиРасшифровкиПоРегистратору(Отчет.АдресРасшифровки1, Отчет.АдресХранилищаСКД1, ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);
		//Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		//СформироватьСервер();
		
	КонецЕсли;	
	
	////Если ВыполненноеДействие = "ДвиженияДокумента" Тогда
	////	ПараметрыФормы = Новый Структура("ДокументДвижений", ТекРасшифровка);
	////	ОткрытьФорму("Обработка.ДвиженияДокумента.Форма", 
	////		ПараметрыФормы, 
	////		ПараметрыВыполненияКоманды.Источник, 
	////		ПараметрКоманды);
	////Иначе
	////
	////	
	////
	////КонецЕсли;
	
	
	//////Если Не ТекМетаданные = Неопределено И Метаданные.Документы.Содержит(ТекМетаданные) Тогда
	//////	ДополнительныеДействия.Добавить("ДвиженияДокумента","Движения документа");
	//////	ДополнительныеДействия.Добавить("ПровестиДокумент","Провести документ");
	//////	ДополнительныеДействия.Добавить("ОткрытьДокументВСписке","Открыть документ в списке");
	//////КонецЕсли;
	//////
	//////Если ТекПоле <> "Регистратор" Тогда
	//////	ДополнительныеДействия.Добавить("РасшифроватьПоРегистраторам", "Расшифровать по регистраторам");
	//////	ДополнительныеДействия.Добавить("Перепровести", "Провести регистраторы");
	//////	ДополнительныеДействия.Добавить("ПерепровестиБезусловно", "Провести регистраторы (пропускать непроведенные)");
	//////КонецЕсли;
	//////
	//////ДополнительныеДействия.Добавить("ОткрытьВНовомОкне", "Открыть в новом окне");
	//////
	//////Возврат ДополнительныеДействия;
	//////
	////////ОбъектОтчета = ДанныеФормыВЗначение(Отчет, Тип("ОтчетОбъект.казнаОборотноСальдоваяВедомость"));
	////////ОбъектОтчета.СкомпоноватьПоРасшифровке(Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(Отчет.АдресРасшифровки1, ДополнительныеПараметры, ПараметрВыполненногоДействия));
	
КонецФункции

Процедура УстановитьМакетОформления(МакетОформления)
	
	Если МакетОформления <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МакетОформления = ПолучитьОбщийМакет("МакетОформленияОтчетовНаСКД");
	
	Для Каждого ТекЭлемент Из МакетОформления.Элементы Цикл
		
		Для Н = 1 по ТекЭлемент.Значение.Количество() Цикл
			ТекЗначение = ТекЭлемент.Значение[Н-1];
			
			Для К = 1 по ТекЗначение.Оформление.Элементы.Количество() Цикл
				
				ТекОформление = ТекЗначение.Оформление.Элементы[К-1];
				
				Если ТипЗнч(ТекОформление.Значение) <> Тип("Шрифт") Тогда
					Продолжить;
				КонецЕсли;
				
				ПредставлениеШрифта = Строка(ТекОформление.Значение);
				
				Если СтрНайти(ПредставлениеШрифта, "Verdana") = 0 Тогда
					ТекОформление.Значение = Новый Шрифт(ТекОформление.Значение, "Verdana");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
			
КонецПроцедуры

Процедура УстановитьЗаголовкиРесурсов(НастройкиКомпоновщикаНастроек) Экспорт
	
	//СоответствиеЗаголовков = Новый Соответствие;
	//СоответствиеЗаголовков.Вставить("СуммаВалФакт", "Сумма в вал. операции Факт");
	//СоответствиеЗаголовков.Вставить("СуммаВВалютеБалансаФакт", "Экв. " + ВалютаБаланса() + " Факт");
	//СоответствиеЗаголовков.Вставить("СуммаВВалютеДубльФакт", "Экв. " + Константы.ВалютаДубль.Получить() + " Факт");
	//
	//СоответствиеЗаголовков.Вставить("СуммаВалПлан", "Сумма в вал. операции План");
	//СоответствиеЗаголовков.Вставить("СуммаВВалютеБалансаПлан", "Экв. " + ВалютаБаланса() + " План");
	//СоответствиеЗаголовков.Вставить("СуммаВВалютеДубльПлан", "Экв. " + Константы.ВалютаДубль.Получить() + " План");
	//
	//СоответствиеЗаголовков.Вставить("Сумма", "Сумма в вал. операции");
	//СоответствиеЗаголовков.Вставить("СуммаВВалютеБаланса", "Экв. " + ВалютаБаланса());
	//СоответствиеЗаголовков.Вставить("СуммаВВалютеДубль", "Экв. " + Константы.ВалютаДубль.Получить());
	//
	//Для Каждого ВыбранноеПоле Из НастройкиКомпоновщикаНастроек.Выбор.Элементы Цикл
	//	НовыйЗаголовок = СоответствиеЗаголовков.Получить(Строка(ВыбранноеПоле.Поле));
	//	Если НовыйЗаголовок = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ВыбранноеПоле.Заголовок = НовыйЗаголовок;
	//КонецЦикла;	
	
КонецПроцедуры

Функция СодержаниеПлатежаРегистратора(Регистратор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
		ТекСодержание = "";
	ИначеЕсли ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Содержание", Регистратор.Метаданные()) Тогда
		ТекСодержание = Регистратор.Содержание;
	Иначе
		ТекСодержание = "";
	КонецЕсли;
	
	Возврат ТекСодержание;
	
КонецФункции


Функция ВыполнитьСправочникСхемаКомпоновки(СправочникИлиСхема, КудаВывести = "ТабличныйДокумент", ВариантСхемыКомпоновки = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	НастройкиПоУмолчанию = Истина;
	
	Если ТипЗнч(СправочникИлиСхема) = Тип("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновки = СправочникИлиСхема;
	ИначеЕсли ТипЗнч(СправочникИлиСхема) = Тип("СправочникСсылка.НастройкиСистемыОтчеты") Тогда
		СхемаКомпоновки = СправочникИлиСхема.ХранилищеСхемыКомпоновки.Получить();
		
		//Если ВариантСхемыКомпоновки <> Неопределено И ВариантСхемыКомпоновки <> Справочники.флВариантыСхемКомпоновки.ПустаяСсылка() Тогда
		//	Настройки = ВариантСхемыКомпоновки.ХранилищеКомпоновщика.Получить();
		//КонецЕсли;
	Иначе
		Сообщить("В функцию выполнения СКД передан неверный параметр");
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	Если НастройкиПоУмолчанию Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		//Иначе
		//	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура") Тогда
		Для Каждого КЗ Из ПараметрыВыполнения Цикл
			Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(КЗ.Ключ);
			
			Если Параметр <> Неопределено Тогда
				КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(КЗ.Ключ, КЗ.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если КудаВывести = "ТабличныйДокумент" Тогда
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновки, 
		КомпоновщикНастроек.Настройки, , , 
		Тип("ГенераторМакетаКомпоновкиДанных"));
		
		//Подготовим процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
		
		ТабДокРезультат = Новый ТабличныйДокумент;
		
		//Получим данные отчета.
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.ОтображатьПроцентВывода = Ложь;
		ПроцессорВывода.УстановитьДокумент(ТабДокРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		Возврат ТабДокРезультат;
	ИначеЕсли КудаВывести = "ТаблицаЗначений" Тогда
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновки, 
		КомпоновщикНастроек.Настройки, , , 
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		//Подготовим процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		
		//Получим данные отчета.
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.ОтображатьПроцентВывода = Ложь;
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		Возврат ТаблицаРезультат;
	Иначе
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновки, 
		КомпоновщикНастроек.Настройки, , , 
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		//Подготовим процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
		
		ДеревоРезультат = Новый ДеревоЗначений;
		
		//Получим данные отчета.
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.ОтображатьПроцентВывода = Ложь;
		ПроцессорВывода.УстановитьОбъект(ДеревоРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		Возврат ДеревоРезультат;
	КонецЕсли;
КонецФункции

Процедура СформироватьОтчетИзСхемыКомпоновки(СправочникИлиСхема, КудаВывести, Расшифровка, УИД, ПараметрыОтчета = Неопределено) Экспорт
	Если ТипЗнч(СправочникИлиСхема) = Тип("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновки = СправочникИлиСхема;
	ИначеЕсли ТипЗнч(СправочникИлиСхема) = Тип("СправочникСсылка.НастройкиСистемыОтчеты") Тогда
		СхемаКомпоновки = СправочникИлиСхема.ХранилищеСхемыКомпоновки.Получить();
	Иначе
		Сообщить("В функцию выполнения СКД передан неверный параметр");
		Возврат;
	КонецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
		Для Каждого КЗ Из ПараметрыОтчета Цикл
			Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(КЗ.Ключ);
			
			Если Параметр <> Неопределено Тогда
				КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(КЗ.Ключ, КЗ.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(
	СхемаКомпоновки, 
	КомпоновщикНастроек.Настройки, ДанныеРасшифровки, ,
	Тип("ГенераторМакетаКомпоновкиДанных"));
	
	//Подготовим процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
	
	ТабДокРезультат = КудаВывести;
	
	//Получим данные отчета.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода = Ложь;
	ПроцессорВывода.УстановитьДокумент(ТабДокРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Расшифровка = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УИД);
КонецПроцедуры

Функция ПолучитьСхемуКомпоновкиДанныхИзНастройкиОтчета(НастройкаСистемыОтчет) Экспорт
	СКД = НастройкаСистемыОтчет.ХранилищеСхемыКомпоновки.Получить();
	СКД = ПоместитьВоВременноеХранилище(СКД);
	Возврат СКД;
КонецФункции

Процедура ОтправитьОтчетПользователю(Пользователи, НазваниеФайла, МенеджерОтчета, ИмяВарианта, ДатаНач, ДатаКон, ТаблицаОтборов = Неопределено, ВыделятьНовинкиАкцииНовыеПоступления = Истина, ПереноситьОтборы = Истина, ВозвращатьДанныеРасшифровки = Ложь, ДанныеРасшифровки = Неопределено, ДопОтборы = Неопределено, ВыбранныеПоля = Неопределено, БезИерархии = Ложь, СортировкаНоменклатурыНеПоУмолчанию = Неопределено, Интерактивно = Ложь, СохраненнаяНастройка = Неопределено, ТемаПисьма = "", ТекстПисьма = "", РежимПисьма = 0) Экспорт
	Перем ИмяФайла;
	
	ИмяФайлаHTML = "";
	Попытка
		ТекОтчет = МенеджерОтчета.Создать();
	Исключение
		ТекОтчет = МенеджерОтчета;
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПостроитьОтчетСУказаннымВариантом(ТекОтчет, СохраненнаяНастройка, ДатаНач, ДатаКон, ТаблицаОтборов, ТабличныйДокумент, ВыделятьНовинкиАкцииНовыеПоступления, ПереноситьОтборы, ВозвращатьДанныеРасшифровки, ДанныеРасшифровки, ДопОтборы, ВыбранныеПоля, БезИерархии, СортировкаНоменклатурыНеПоУмолчанию,,СохраненнаяНастройка);
	
	Если РежимПисьма = 0 Или РежимПисьма = 1 Тогда
		ИмяФайлаHTML	= КаталогВременныхФайлов() + НазваниеФайла + ".html";
		ТабличныйДокумент.Записать(ИмяФайлаHTML,ТипФайлаТабличногоДокумента.HTML); 
		
		ДокHTML			= Новый ТекстовыйДокумент;
		ДокHTML.Прочитать(ИмяФайлаHTML);
		
		ТекстСообщения	= "";
		Для Н = 1 По ДокHTML.КоличествоСтрок() Цикл
			ТекстСообщения = ТекстСообщения + ДокHTML.ПолучитьСтроку(Н) + Символы.пс;
		КонецЦикла;
	
		ТекстПисьма = ?(ПустаяСтрока(ТекстПисьма), "", СтрЗаменить(ТекстПисьма, Символы.ПС, "<br>") +  "<br>") + ТекстСообщения;
		
	КонецЕсли;
	
	Если РежимПисьма = 0 Или РежимПисьма = 2 Тогда
		ИмяФайла = КаталогВременныхФайлов() + НазваниеФайла + ".xlsx";
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТемаПисьма) Тогда
		ТемаПисьма = СохраненнаяНастройка.Наименование;	
	КонецЕсли;
	
	кд_ЭлектроннаяПочта.ОтправитьПисьмо(Пользователи, ТемаПисьма, ТекстПисьма, ИмяФайла, ИмяФайлаHTML,,, Истина,, Истина,);
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяФайлаHTML) Тогда
		УдалитьФайлы(ИмяФайлаHTML);
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьОтчетПоНастройкеРассылкиИнформации(НастройкаРассылки = Неопределено, Тест = Ложь) Экспорт
	Перем НачалоПериода, КонецПериода;//Переменные КодВычисленияПараметровОтчетаИПисьма 
	
	Если НЕ ЗначениеЗаполнено(НастройкаРассылки) Тогда
		Сообщить("Не передана настройка рассылки информации!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкаРассылки) <> Тип("СправочникСсылка.НастройкиСистемыРассылкиИнформации") Тогда
		Сообщить("Передана некорректная настройка рассылки информации: " + НастройкаРассылки + "!");
		Возврат;
	КонецЕсли;
	
	ТемаПисьма 		= "";
	ТекстПисьма 	= "";
	Отказ 			= Ложь;
	НачалоПериода 	= ТекущаяДата();
	КонецПериода	= ТекущаяДата();   
	НазваниеФайла   = НастройкаРассылки.ИмяВарианта;
	
	ЧтоОтправлять 	= НастройкаРассылки.ЧтоОтправлять; // вложение или в тексте или оба
	
	Если Тест Или НастройкаРассылки.Тестирование Тогда
		МассивПолучателей = НастройкаРассылки.ПолучателиТестирование.ВыгрузитьКолонку("EMail");
	Иначе
		МассивПолучателей = НастройкаРассылки.Получатели.ВыгрузитьКолонку("EMail");
	КонецЕсли;
	
	ТаблицаОтборов 	= Неопределено;
	НастройкаОтчета = НастройкаРассылки.СохраненнаяНастройка;
	
	КодВычисленияПараметровОтчетаИПисьма = НастройкаРассылки.КодВычисленияПараметровОтчетаИПисьма;
	Если НЕ ПустаяСтрока(КодВычисленияПараметровОтчетаИПисьма) Тогда
		Выполнить(КодВычисленияПараметровОтчетаИПисьма);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации	("Отправка отчетов по настройкам рассылки", УровеньЖурналаРегистрации.Информация, , , "Отправка отчета " + НастройкаРассылки);
	ОтправитьОтчетПользователю	(МассивПолучателей,НазваниеФайла, Отчеты[НастройкаРассылки.ИмяОтчета], НастройкаРассылки.СохраненнаяНастройка.Наименование, НачалоПериода, КонецПериода, ТаблицаОтборов,,,,,,,,, Истина, НастройкаОтчета, ТемаПисьма, ТекстПисьма, ЧтоОтправлять);
	ЗаписьЖурналаРегистрации	("Отправка отчетов по настройкам рассылки", УровеньЖурналаРегистрации.Информация, , , "Завершина отправка отчета " + НастройкаРассылки.ИмяОтчета + ".");
	
КонецПроцедуры

Функция КонтрагентРегистратора(Регистратор) Экспорт
	Попытка
		Возврат Регистратор.Контрагент;
	Исключение
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецПопытки;
КонецФункции

Функция КонтрагентРасходнойНакладной(Регистратор) Экспорт
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Возврат Регистратор.Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
КонецФункции