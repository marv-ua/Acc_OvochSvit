&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2023Кв3УФ";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы11 = "П1T1R";
	СтруктураРеквизитовФормы.мИдГруппы12 = "П2T1R";
	СтруктураРеквизитовФормы.мИдГруппы13 = "П3T1R";
	СтруктураРеквизитовФормы.мИдГруппы41 = "T41T1R";
	СтруктураРеквизитовФормы.мИдГруппы42 = "T42T1R";
	СтруктураРеквизитовФормы.мИдГруппы43 = "T43T1R";
	СтруктураРеквизитовФормы.мИдГруппы5  = "T5T1R";
	СтруктураРеквизитовФормы.мИдГруппы61 = "T61T1R";
	СтруктураРеквизитовФормы.мИдГруппы62 = "T62T1R";
	СтруктураРеквизитовФормы.мИдГруппы63 = "T63T1R";
		
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	
	СтруктураДанныхДекларация = Новый Структура;
	СтруктураДанныхТаблица11 = Новый Структура;
	СтруктураДанныхТаблица12 = Новый Структура;
	СтруктураДанныхТаблица13 = Новый Структура;
	СтруктураДанныхТаблица41 = Новый Структура;
	СтруктураДанныхТаблица42 = Новый Структура;
	СтруктураДанныхТаблица43 = Новый Структура;
	СтруктураДанныхТаблица5	 = Новый Структура;
	СтруктураДанныхТаблица61 = Новый Структура;
	СтруктураДанныхТаблица62 = Новый Структура;
	СтруктураДанныхТаблица63 = Новый Структура;
	//СтруктураДанныхСлужебныеДанные	= Новый Структура;
	
	//ИнициализацияМногостраничныхРазделов();
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, 	СтруктураРеквизитовФормы.мИдГруппы11);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, 	СтруктураРеквизитовФормы.мИдГруппы12);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, 	СтруктураРеквизитовФормы.мИдГруппы13);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы41, 	СтруктураРеквизитовФормы.мИдГруппы41);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы42, 	СтруктураРеквизитовФормы.мИдГруппы42);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы43, 	СтруктураРеквизитовФормы.мИдГруппы43);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 	СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы61, 	СтруктураРеквизитовФормы.мИдГруппы61);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62, 	СтруктураРеквизитовФормы.мИдГруппы62);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы63, 	СтруктураРеквизитовФормы.мИдГруппы63);
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	//мСтруктураМногостраничныхРазделов.Вставить("ПриложениеПН", "ТаблицаСтраницыРаздела1");
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы41, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы42, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы43, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы61, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы63, 	КолИсхСтрокИдГруппы1);
	
	ЗаполнитьСтруктурыКолонокМногострочныхЧастей();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/07/2023";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Декларация";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	//ДатаПодписи                                       = ТекущаяДатаСеанса();
	//
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
    СтруктураРеквизитовФормы.Вставить("ЧислоВыплатыЗП", 		СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
    СтруктураРеквизитовФормы.Вставить("НомерМесяца", 	0);

	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;	
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы13");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы41");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы42");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы43");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы61");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы62");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы63");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ОрганизацияЮридическоеФизическоеЛицо");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	//СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	//СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	//СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	//СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	// *Параметры, которые выводятся в форме настройки параметров
	ОпцияКадровыйПереводДвумяСтроками = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ОпцияКадровыйПереводДвумяСтроками", Ложь);	
	СтруктураРеквизитовФормы.Вставить("ОпцияКадровыйПереводДвумяСтроками", ОпцияКадровыйПереводДвумяСтроками);
	
	ВыплатыЗПНеРегулярны = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ВыплатыЗПНеРегулярны", Ложь);	
	СтруктураРеквизитовФормы.Вставить("ВыплатыЗПНеРегулярны", 	ВыплатыЗПНеРегулярны);
	
	ЧислоВыплатыЗП		 = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ЧислоВыплатыЗП", 10);	
	СтруктураРеквизитовФормы.Вставить("ЧислоВыплатыЗП", 		ЧислоВыплатыЗП);
	СтруктураРеквизитовФормы.Вставить("НомерМесяца");
	
	Подразделение		 = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_Подразделение");	
	СтруктураРеквизитовФормы.Вставить("Подразделение", Подразделение);
	ОбособленноеПодразделение = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ОбособленноеПодразделение");	
	СтруктураРеквизитовФормы.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	
	НеВключатьЧПников = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_НеВключатьЧПников",Ложь);	
	СтруктураРеквизитовФормы.Вставить("НеВключатьЧПников", НеВключатьЧПников);
	СтруктураРеквизитовФормы.Вставить("МесяцПриложения", Ложь);
	СтруктураРеквизитовФормы.Вставить("НомерМесяца");
	СтруктураРеквизитовФормы.Вставить("СортироватьПоИНН",  Ложь);
	СтруктураРеквизитовФормы.Вставить("НазначениеПенсии",  Ложь);
	СтруктураРеквизитовФормы.Вставить("НазначениеСоцВыплат",  Ложь);
	СтруктураРеквизитовФормы.Вставить("Сотрудники", Новый Массив);
	СтруктураРеквизитовФормы.Вставить("ОпцияПриемУвольнениеОтдельнымиСтроками",  Ложь);

	
КонецПроцедуры

//&НаСервере
//Процедура ИнициализацияМногостраничныхРазделов()
// 
//	Элементы.ДопСтроки.Видимость = Истина;
//	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела1.Добавить();
//	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стор. '") + 1;
//	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
//	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

//КонецПроцедуры // ИнициализацияМногостраничныхРазделов()

// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	СформироватьТаблицуНужныхСтатей();
	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ЗаполнитьНастраиваемыеПараметрыЗаполнения();

		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		//СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = НСтр("ru='Расчет';uk='Розрахунок'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица11";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1(1)';uk='Таблиця 1(1)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица12";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1(2)';uk='Таблиця 1(2)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица13";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1(3)';uk='Таблиця 1(3)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица41";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 4(1)';uk='Таблиця 4(1)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица42";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 4(2)';uk='Таблиця 4(2)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица43";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 4(3)';uk='Таблиця 4(3)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица5";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 5';uk='Додаток 5'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
 
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица61";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6(1)';uk='Таблиця 6(1)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица62";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6(2)';uk='Таблиця 6(2)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица63";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6(3)';uk='Таблиця 6(3)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица11";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы11;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица13";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы13;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица41";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы41;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица42";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы42;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица43";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы43;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица61";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы61;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица62";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы62;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица63";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы63;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = НайденноеЗначение[НомерСтраницы-1].Представление;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

&НаСервере
Процедура СформироватьТаблицуНужныхСтатей()
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;

	//Основные используемые статьи 
	НС_ФОТ = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТ.Статья = СтрокиДекларации.ЕСВ_ФОТ;
	НС_ФОТ.ПолеБазаОсновное = "R01021G";
	НС_ФОТ.ПолеВзносОсновное = "R01031G";
	НС_ФОТ.ПолеБазаДоначисление = "R01025G";
	НС_ФОТ.ПолеВзносДоначисление = "R01035G";
	НС_ФОТ.ПолеБазаТип24 = "";
	НС_ФОТ.ПолеВзносТип24 = "R01041G";
	НС_ФОТ.ПолеБазаТип35 = "";
	НС_ФОТ.ПолеВзносТип35 = "R01061G";
	
	Попытка
		Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.МобилизованныйРаботникБезОбеспечения;
		НС_ФОТ = ТаблицаНужныхСтатей.Добавить();
		НС_ФОТ.Статья = Категория;
		НС_ФОТ.ПолеБазаОсновное = "R010263G";
		НС_ФОТ.ПолеВзносОсновное = "R010373G";
		НС_ФОТ.ПолеБазаДоначисление = "R01025G";
		НС_ФОТ.ПолеВзносДоначисление = "R01035G";
		НС_ФОТ.ПолеБазаТип24 = "";
		НС_ФОТ.ПолеВзносТип24 = "R010443G";
		НС_ФОТ.ПолеБазаТип35 = "";
		НС_ФОТ.ПолеВзносТип35 = "R010643G";
		НС_ФОТ.ПолеБазаПлюс = "R010163G";
		НС_ФОТ.ПолеБазаМинус = "R01011G";
	Исключение	
	КонецПопытки;	

	НС_ФОТИнвалиды = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТИнвалиды.Статья = СтрокиДекларации.ЕСВ_ФОТИнвалиды;
	НС_ФОТИнвалиды.ПолеБазаОсновное = "R01022G";
	НС_ФОТИнвалиды.ПолеВзносОсновное = "R01032G";
	НС_ФОТИнвалиды.ПолеБазаДоначисление = "";
	НС_ФОТИнвалиды.ПолеВзносДоначисление = "";
	НС_ФОТИнвалиды.ПолеБазаТип24 = "";
	НС_ФОТИнвалиды.ПолеВзносТип24 = "R010411G";
	НС_ФОТИнвалиды.ПолеБазаТип35 = "";
	НС_ФОТИнвалиды.ПолеВзносТип35 = "R010611G";
	НС_ФОТИнвалиды.ПолеВзносПолная = "R010321G";
	
	НС_ФОТИнвалиды50 = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТИнвалиды50.Статья = СтрокиДекларации.ЕСВ_ФОТИнвалиды50;
	НС_ФОТИнвалиды50.ПолеБазаОсновное = "R01024G";
	НС_ФОТИнвалиды50.ПолеВзносОсновное = "R01034G";
	НС_ФОТИнвалиды50.ПолеБазаДоначисление = "";
	НС_ФОТИнвалиды50.ПолеВзносДоначисление = "";
	НС_ФОТИнвалиды50.ПолеБазаТип24 = "";
	НС_ФОТИнвалиды50.ПолеВзносТип24 = "R010413G";
	НС_ФОТИнвалиды50.ПолеБазаТип35 = "";
	НС_ФОТИнвалиды50.ПолеВзносТип35 = "R010613G";
	НС_ФОТИнвалиды50.ПолеВзносПолная = "R010341G";
	
	НС_ФОТУТОГ = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТУТОГ.Статья = СтрокиДекларации.ЕСВ_ФОТУТОГ;
	НС_ФОТУТОГ.ПолеБазаОсновное = "R01023G";
	НС_ФОТУТОГ.ПолеВзносОсновное = "R01033G";
	НС_ФОТУТОГ.ПолеБазаДоначисление = "";
	НС_ФОТУТОГ.ПолеВзносДоначисление = "";
	НС_ФОТУТОГ.ПолеБазаТип24 = "";
	НС_ФОТУТОГ.ПолеВзносТип24 = "R010412G";
	НС_ФОТУТОГ.ПолеБазаТип35 = "";
	НС_ФОТУТОГ.ПолеВзносТип35 = "R010612G";
	НС_ФОТУТОГ.ПолеВзносПолная = "R010331G";

	//Статьи устарели, но используются для совместимости и для отражения корректировок
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничные;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R01041G";
	НС.ПолеВзносТип35 = "R01061G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБюджетники;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R01041G";
	НС.ПолеВзносТип35 = "R01061G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R01041G";
	НС.ПолеВзносТип35 = "R01061G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТЛетчики;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R01041G";
	НС.ПолеВзносТип35 = "R01061G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТСудостр;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R01041G";
	НС.ПолеВзносТип35 = "R01061G";

	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХСудостр;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R01041G";
	НС.ПолеВзносТип35 = "R01061G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретные;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R01041G";
	НС.ПолеВзносТип35 = "R01061G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды50;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды50,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды50;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды50,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	//Статьи взносов больше в отчет не попадают, только для отражения корректировок
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Работники;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R01043G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R01063G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Больничные;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R01043G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R01063G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ГПХ;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R01043G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R01063G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ИнвалидыУТОГ;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R01043G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R01063G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_РаботникиСР;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R01043G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R01063G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Декретные;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R01043G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R01063G";

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначениеВСтруктуру(СтруктураДанных, Ключ, Значение)
	
	Если НЕ ЗначениеЗаполнено(Ключ) ИЛИ НЕ ЗначениеЗаполнено(Значение) ИЛИ СтрДлина(Ключ) = 1 Тогда
		Возврат;
	КонецЕсли;	
	
	НайденноеЗначение = 0;
	
	Если СтруктураДанных.Свойство(Ключ, НайденноеЗначение) Тогда
		СтруктураДанных.Вставить(Ключ, НайденноеЗначение + Значение);
	Иначе
		СтруктураДанных.Вставить(Ключ, Значение);
	КонецЕсли;	
	
Конецпроцедуры

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	//Если ИмяСтраницы = "ПриложениеПН" Тогда

	//	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппыPN);

	//	СтруктураДанныхДопСтрокРаздела = Новый Структура;
	//	
	//	ПромТаблицаДопСтрокРаздела = Неопределено;
	//	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ПромТаблицаДопСтрокРаздела);
	//	ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
	//	ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппыPN].Добавить().Таблица;
	//	КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
	//	СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ТаблицаДопСтрокГруппы);
	//	
	//КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если    НаимРаздела = "ПриложениеПН" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменитьПризнакАктивностиСтраницы;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ОпределитьПредставлениеДопСтраниц(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = ЭтаФорма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим её представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = НСтр("ru='Стр. ';uk='Стор. '") + Строка(НомерСтраницы);
					СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	Если НЕ ИмяТекРаздела = "ПриложениеПН" Тогда 
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		КонецЦикла;
						
//	 Многострочные и обычные разделы.
	Иначе
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;

		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;

		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;

		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "ПриложениеПН" Тогда
		//ЗаполнитьШапкуПодписиПриложенияПН(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
	                                                                                  
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт

	Перем ТекТабличноеПоле;
		
	Если   ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		ТекТабличноеПоле = "Таблица5";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы11 Тогда
		ТекТабличноеПоле = "Таблица11";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы12 Тогда
		ТекТабличноеПоле = "Таблица12";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы13 Тогда
		ТекТабличноеПоле = "Таблица13";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы41 Тогда
		ТекТабличноеПоле = "Таблица41";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы42 Тогда
		ТекТабличноеПоле = "Таблица42";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы43 Тогда
		ТекТабличноеПоле = "Таблица43";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы61 Тогда
		ТекТабличноеПоле = "Таблица61";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы62 Тогда
		ТекТабличноеПоле = "Таблица62";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы63 Тогда
		ТекТабличноеПоле = "Таблица63";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Таблица5" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы5);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица11" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы11);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица12" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы12);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица13" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы13);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица41" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы41);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица42" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы42);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица43" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы43);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица61" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы61);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица62" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы62);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица63" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы63);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

//&НаСервере
//Процедура ЗаполнитьДатуПодписиНаСервере()

//	ЗаполнитьДатуПодписи(ЭтаФорма);	

//КонецПроцедуры

//&НаСервереБезКонтекста
//Процедура ЗаполнитьДатуПодписи(Форма)

//	ДатаПодписиСтр = Формат(Форма.ДатаПодписи, "ДФ=ddMMyyyy");
//	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HFILL_", 8, ДатаПодписиСтр, Ложь);			
//	ЗаполнитьПоказательНаСервере("HFILL", Форма.ДатаПодписи, Форма, "СлужебныеДанные");	
//	
//КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина; Л="+РегламентированнаяОтчетностьКлиентСервер.ПолучитьКодЯзыкаИнтерфейса());
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()


// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	Организация = Форма.СтруктураРеквизитовФормы.Организация;	
	
	СписокПоказателей = Новый СписокЗначений;
	//СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	//СписокПоказателей.Добавить("","КодКОАТУУ");
	//СписокПоказателей.Добавить("","НалоговаяИнспекция");
	//СписокПоказателей.Добавить("","КодКВЕД");
	//СписокПоказателей.Добавить("","ЮридическийАдрес");
	//СписокПоказателей.Добавить("","Телефон");
	СписокПоказателей.Добавить("","КПР");

	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	КПР  		    = Сведения.КПР;	
	ЗаполнитьПоказательНаСервере("КПР", КПР, Форма, "Декларация");	
	//
	//КодЕДРПОУ          	= Сведения.КодПоЕДРПОУ;
	//КодКОАТУУ           = Сведения.КодКОАТУУ;
	//НалоговаяИнспекция  = Сведения.НалоговаяИнспекция;
	//КодКВЕД          	= Сведения.КодКВЕД;
	//HLOC			    = Сведения.ЮридическийАдрес;
	//Телефон  		    = Сведения.Телефон;	
	//
	//ЗаполнитьПоказательНаСервере("TIN",  КодЕДРПОУ, Форма, "СлужебныеДанные");
	//ЗаполнитьПоказательНаСервере("HTIN", КодЕДРПОУ, Форма, "СлужебныеДанные");
	//ЗаполнитьПоказательНаСервере("HKOATUU", КодКОАТУУ, Форма, "Декларация");
	//
	//ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "СлужебныеДанные");
	//ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "Декларация");
	//
	//ЗаполнитьПоказательНаСервере("HLOC", HLOC, Форма, "ПереченьТаблиц");
	//ЗаполнитьПоказательНаСервере("HLOC", HLOC, Форма, "Декларация");
	//
	//ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "ПереченьТаблиц");	
	//ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "Декларация");	

	//ЗаполнитьПоказательНаСервере("HKVED", 	КодКВЕД, 			Форма, "Декларация");	
	//Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда 
	//	ЗаполнитьПоказательНаСервере("HSTI", НалоговаяИнспекция.Код, Форма, "Декларация");	
	//	
	//	//ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, Форма, "СлужебныеДанные");	
	//	//ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, Форма, "СлужебныеДанные");	
	//	//ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, Форма, "СлужебныеДанные");	
	//	//ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, Форма, "СлужебныеДанные");	
	//	
	//КонецЕсли;
	//
	////ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные");	
	////ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");	
	////ЗаполнитьПоказательНаСервере("C_DOC_STAN",  1, Форма, "СлужебныеДанные");	
	//
	////дата подачи отчета в деларации и во всех приложниях 
	//
	//СписокПоказателей = Новый СписокЗначений;
	//СписокПоказателей.Добавить("","ФИОРук");
	//СписокПоказателей.Добавить("","ФИОБух");
	//СписокПоказателей.Добавить("","ИННРук");
	//СписокПоказателей.Добавить("","ИННБух");
	//СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	//
	//ФИОДиректора       = СведенияДатаПодписи.ФИОРук;
	//ФИОГлавБуха        = СведенияДатаПодписи.ФИОБух;
	//ИННДиректора       = СведенияДатаПодписи.ИННРук;
	//ИННГлавБуха        = СведенияДатаПодписи.ИННБух;
	//
	//ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "Таблица1");		
	//ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "Таблица1");		
	//
	//ЗаполнитьПоказательНаСервере("HKBUH", ИННГлавБуха, Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HKBOS", ИННДиректора,  Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HKBUH", ИННГлавБуха, Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HKBOS", ИННДиректора,  Форма, "ПереченьТаблиц");		
	//
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HKBOS_",  10, ИННДиректора, Ложь);				
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HKBUH_",  	10, ИННГлавБуха,  Ложь);			
	//
	//
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица5");		
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица6");		
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица7");		
	//
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица5");		
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица6");		
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица7");		
	//
	//ЗаполнитьПоказательНаСервере("HZD", "", Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HZD", "", Форма, "Таблица5");		
	//ЗаполнитьПоказательНаСервере("HZD", "", Форма, "Таблица7");		
	//
	//мес = Месяц(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	//мес = Формат(мес, "ЧЦ=2; ЧВН=");
	//год = Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	//год = Формат(Год, "ЧГ=0;");
	//
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПереченьТаблиц", "HZM_", 2, Мес, Истина,Истина);			
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПереченьТаблиц", "HZY_", 4, Год, Ложь);			
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HZM_", 2, Мес, Истина,Истина);			
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HZY_", 4, Год, Ложь);			
	//
	//ЗаполнитьДатуПодписи(Форма);
	//
	//Форма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("ОпцияКадровыйПереводДвумяСтроками", СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
	СписокСохранения.Свойство("Подразделение",  		СтруктураРеквизитовФормы.Подразделение);
	СписокСохранения.Свойство("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Свойство("ВыплатыЗПНеРегулярны",  	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	СписокСохранения.Свойство("НеВключатьЧПников",  	СтруктураРеквизитовФормы.НеВключатьЧПников);
	СписокСохранения.Свойство("МесяцПриложения",  		СтруктураРеквизитовФормы.МесяцПриложения);
	СписокСохранения.Свойство("ЧислоВыплатыЗП",  		СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
	СписокСохранения.Свойство("НазначениеПенсии",  		СтруктураРеквизитовФормы.НазначениеПенсии);
	СписокСохранения.Свойство("НазначениеСоцВыплат",  	СтруктураРеквизитовФормы.НазначениеСоцВыплат);
	СписокСохранения.Свойство("ОпцияПриемУвольнениеОтдельнымиСтроками",  	СтруктураРеквизитовФормы.ОпцияПриемУвольнениеОтдельнымиСтроками);
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("Сотрудники", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.Сотрудники = ТекДанные.Получить();
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "Декларация";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	СписокСохранения.Вставить("ОпцияКадровыйПереводДвумяСтроками",	СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
	СписокСохранения.Вставить("Подразделение",  		СтруктураРеквизитовФормы.Подразделение);
	СписокСохранения.Вставить("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Вставить("ВыплатыЗПНеРегулярны",  	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	СписокСохранения.Вставить("НеВключатьЧПников",  	СтруктураРеквизитовФормы.НеВключатьЧПников);
	СписокСохранения.Вставить("МесяцПриложения",  		СтруктураРеквизитовФормы.МесяцПриложения);
	СписокСохранения.Вставить("ЧислоВыплатыЗП",  		СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
	СписокСохранения.Вставить("Сотрудники",  			Новый ХранилищеЗначения(СтруктураРеквизитовФормы.Сотрудники));
	СписокСохранения.Вставить("НазначениеПенсии",  		СтруктураРеквизитовФормы.НазначениеПенсии);
	СписокСохранения.Вставить("НазначениеСоцВыплат",  	СтруктураРеквизитовФормы.НазначениеСоцВыплат);
	СписокСохранения.Вставить("ОпцияПриемУвольнениеОтдельнымиСтроками",  	СтруктураРеквизитовФормы.ОпцияПриемУвольнениеОтдельнымиСтроками);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
			
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;

		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вставляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		СписокСохранения.Вставить("СозданКакХранилищеПараметровДляЗвит1С", Истина);
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
		КонецЕсли;
		
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

		
КонецПроцедуры // ИзменитьЦветЯчеек()


// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;

	// обновим данные многострочных групп
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда

		ИдГрупп = Новый Структура;
		ИдГрупп.Вставить("мИдГруппы11", Форма.СтруктураРеквизитовФормы.мИдГруппы11);
		ИдГрупп.Вставить("мИдГруппы12", Форма.СтруктураРеквизитовФормы.мИдГруппы12);
		ИдГрупп.Вставить("мИдГруппы13", Форма.СтруктураРеквизитовФормы.мИдГруппы13);
		ИдГрупп.Вставить("мИдГруппы41", Форма.СтруктураРеквизитовФормы.мИдГруппы41);
		ИдГрупп.Вставить("мИдГруппы42", Форма.СтруктураРеквизитовФормы.мИдГруппы42);
		ИдГрупп.Вставить("мИдГруппы43", Форма.СтруктураРеквизитовФормы.мИдГруппы43);
		ИдГрупп.Вставить("мИдГруппы5", Форма.СтруктураРеквизитовФормы.мИдГруппы5);
		ИдГрупп.Вставить("мИдГруппы61", Форма.СтруктураРеквизитовФормы.мИдГруппы61);
		ИдГрупп.Вставить("мИдГруппы62", Форма.СтруктураРеквизитовФормы.мИдГруппы62);
		ИдГрупп.Вставить("мИдГруппы63", Форма.СтруктураРеквизитовФормы.мИдГруппы63);
		
		ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели, , ИдГрупп);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		КонецЦикла;
		
	КонецЕсли;

	
	R01016G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010163G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01016G3", R01016G3, Форма, "Декларация");	
	
	R01016G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010163G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01016G4", R01016G4, Форма, "Декларация");	
	
	R01016G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010163G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01016G5", R01016G5, Форма, "Декларация");	
	
	R0101G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01011G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01012G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01013G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01014G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01015G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01016G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0101G3", R0101G3, Форма, "Декларация");	
	
	R0101G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01011G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01012G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01013G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01014G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01015G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01016G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0101G4", R0101G4, Форма, "Декларация");	
	
	R0101G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01011G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01012G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01013G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01014G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01015G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01016G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0101G5", R0101G5, Форма, "Декларация");	

	R01026G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010263G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01026G3", R01026G3, Форма, "Декларация");	
	
	R01026G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010263G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01026G4", R01026G4, Форма, "Декларация");	
	
	R01026G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010263G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01026G5", R01026G5, Форма, "Декларация");	
	
	R0102G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01021G3", Форма, "Декларация")) 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01022G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01023G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01024G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01025G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01026G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0102G3", R0102G3, Форма, "Декларация");	
								  
	R0102G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01021G4", Форма, "Декларация")) 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01022G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01023G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01024G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01025G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01026G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0102G4", R0102G4, Форма, "Декларация");	
								  
	R0102G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01021G5", Форма, "Декларация")) 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01022G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01023G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01024G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01025G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01026G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0102G5", R0102G5, Форма, "Декларация");	

	R01037G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010373G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01037G3", R01037G3, Форма, "Декларация");	
	
	R01037G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010373G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01037G4", R01037G4, Форма, "Декларация");	
	
	R01037G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010373G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01037G5", R01037G5, Форма, "Декларация");	
	
	R0103G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G3", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01032G3", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01033G3", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01034G3", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01035G3", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01037G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0103G3", R0103G3, Форма, "Декларация");	
	
	R0103G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G4", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01032G4", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01033G4", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01034G4", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01035G4", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01037G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0103G4", R0103G4, Форма, "Декларация");	
	
	R0103G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G5", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01032G5", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01033G5", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01034G5", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01035G5", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01037G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0103G5", R0103G5, Форма, "Декларация");	
	
	R01044G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010443G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01044G3", R01044G3, Форма, "Декларация");	
	
	R01044G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010443G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01044G4", R01044G4, Форма, "Декларация");	
	
	R01044G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010443G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01044G5", R01044G5, Форма, "Декларация");	
	
	R0104G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G3", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01042G3", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01043G3", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01044G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0104G3", R0104G3, Форма, "Декларация");	
									  
	R0104G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G4", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01042G4", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01043G4", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01044G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0104G4", R0104G4, Форма, "Декларация");	
									  
	R0104G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G5", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01042G5", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01043G5", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01044G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0104G5", R0104G5, Форма, "Декларация");	

	R01064G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010643G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01064G3", R01064G3, Форма, "Декларация");	
	
	R01064G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010643G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01064G4", R01064G4, Форма, "Декларация");	
	
	R01064G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010643G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R01064G5", R01064G5, Форма, "Декларация");	
	
	R0106G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01061G3", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01062G3", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01063G3", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01064G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0106G3", R0106G3, Форма, "Декларация");	
									  
	R0106G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01061G4", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01062G4", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01063G4", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01064G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0106G4", R0106G4, Форма, "Декларация");	
									  
	R0106G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01061G5", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01062G5", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01063G5", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01064G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0106G5", R0106G5, Форма, "Декларация");	
									  
	
	R0107G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G3", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G3", Форма, "Декларация"))
								    - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0106G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0107G3", R0107G3, Форма, "Декларация");	
									
	R0107G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G4", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G4", Форма, "Декларация"))
								    - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0106G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0107G4", R0107G4, Форма, "Декларация");	
									
	R0107G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G5", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G5", Форма, "Декларация"))
								    - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0106G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0107G5", R0107G5, Форма, "Декларация");	
									
	R0108G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G3", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G4", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0108G3", R0108G3, Форма, "Декларация");	
									
	СтруктураГруппы11 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы11];
	СтруктураГруппы12 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы12];
	СтруктураГруппы13 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы13];
	СтруктураГруппы41 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы41];
	СтруктураГруппы42 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы42];
	СтруктураГруппы43 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы43];
	СтруктураГруппы5 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы5];
	СтруктураГруппы61 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы61];
	СтруктураГруппы62 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы62];
	СтруктураГруппы63 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы63];
	
	R061G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы11, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы11]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы12, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы12]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы13, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы13]), 0, 1);
			
	R064G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы41, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы41]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы42, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы42]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы43, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы43]), 0, 1);
			
	R065G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы5, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы5]), 0, 1);
	
	R066G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы61, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы61]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы62, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы62]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы63, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы63]), 0, 1);
	ЗаполнитьПоказательНаСервере("R061G3", R061G3, Форма, "Декларация");	
	ЗаполнитьПоказательНаСервере("R064G3", R064G3, Форма, "Декларация");	                                                                                              
	ЗаполнитьПоказательНаСервере("R065G3", R065G3, Форма, "Декларация");	
	ЗаполнитьПоказательНаСервере("R066G3", R066G3, Форма, "Декларация");	
	
	ЗаполнитьПоказательНаСервере("R01G16", СтруктураГруппы11.Итог("П1T1RXXXXG16"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G17", СтруктураГруппы11.Итог("П1T1RXXXXG17"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G18", СтруктураГруппы11.Итог("П1T1RXXXXG18"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G19", СтруктураГруппы11.Итог("П1T1RXXXXG19"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G20", СтруктураГруппы11.Итог("П1T1RXXXXG20"), Форма, "Таблица11");	
	
	ЗаполнитьПоказательНаСервере("R01G16", СтруктураГруппы12.Итог("П2T1RXXXXG16"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G17", СтруктураГруппы12.Итог("П2T1RXXXXG17"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G18", СтруктураГруппы12.Итог("П2T1RXXXXG18"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G19", СтруктураГруппы12.Итог("П2T1RXXXXG19"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G20", СтруктураГруппы12.Итог("П2T1RXXXXG20"), Форма, "Таблица12");	
	
	ЗаполнитьПоказательНаСервере("R01G16", СтруктураГруппы13.Итог("П3T1RXXXXG16"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G17", СтруктураГруппы13.Итог("П3T1RXXXXG17"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G18", СтруктураГруппы13.Итог("П3T1RXXXXG18"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G19", СтруктураГруппы13.Итог("П3T1RXXXXG19"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G20", СтруктураГруппы13.Итог("П3T1RXXXXG20"), Форма, "Таблица13");	
	
	ЗаполнитьПоказательНаСервере("R01G03A", СтруктураГруппы41.Итог("T41T1RXXXXG03A"), Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G03",  СтруктураГруппы41.Итог("T41T1RXXXXG03"),  Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G04A", СтруктураГруппы41.Итог("T41T1RXXXXG04A"), Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G04",  СтруктураГруппы41.Итог("T41T1RXXXXG04"),  Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G5A",  СтруктураГруппы41.Итог("T41T1RXXXXG5A"),  Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G5",   СтруктураГруппы41.Итог("T41T1RXXXXG5"),   Форма, "Таблица41");
	
	ЗаполнитьПоказательНаСервере("R02G01I", СтруктураГруппы41.Количество(), Форма, "Таблица41");
	
	ЗаполнитьПоказательНаСервере("R01G03A", СтруктураГруппы42.Итог("T42T1RXXXXG03A"), Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G03",  СтруктураГруппы42.Итог("T42T1RXXXXG03"),  Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G04A", СтруктураГруппы42.Итог("T42T1RXXXXG04A"), Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G04",  СтруктураГруппы42.Итог("T42T1RXXXXG04"),  Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G5A",  СтруктураГруппы42.Итог("T42T1RXXXXG5A"),  Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G5",   СтруктураГруппы42.Итог("T42T1RXXXXG5"),   Форма, "Таблица42");
	
	ЗаполнитьПоказательНаСервере("R02G01I", СтруктураГруппы42.Количество(), Форма, "Таблица42");
	
	ЗаполнитьПоказательНаСервере("R01G03A", СтруктураГруппы43.Итог("T43T1RXXXXG03A"), Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G03",  СтруктураГруппы43.Итог("T43T1RXXXXG03"),  Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G04A", СтруктураГруппы43.Итог("T43T1RXXXXG04A"), Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G04",  СтруктураГруппы43.Итог("T43T1RXXXXG04"),  Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G5A",  СтруктураГруппы43.Итог("T43T1RXXXXG5A"),  Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G5",   СтруктураГруппы43.Итог("T43T1RXXXXG5"),   Форма, "Таблица43");
	
	ЗаполнитьПоказательНаСервере("R02G01I", СтруктураГруппы43.Количество(), Форма, "Таблица43");
	
КонецПроцедуры // Расчет()

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, СтруктураКолонок)

	Если СтруктураГруппы.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаГруппы из СтруктураГруппы Цикл
		
		Для каждого Колонка Из СтруктураКолонок Цикл
			
			Если Найти(Колонка, "НомерСтроки") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы[Колонка]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;		
	
	КонецЦикла;

	Возврат Истина;

КонецФункции

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте		
Процедура ВводПоказателяВПолеТабличногоДокументЗавершение(Значение, ДополнительныеПараметры) Экспорт
			
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	
	ИмяОбласти = Область.Имя;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхДекларация.Очистить();
	
	СтруктураДанныхТаблица11.Очистить();
	СтруктураДанныхТаблица12.Очистить();
	СтруктураДанныхТаблица13.Очистить();
	СтруктураДанныхТаблица41.Очистить();
	СтруктураДанныхТаблица42.Очистить();
	СтруктураДанныхТаблица43.Очистить();
	СтруктураДанныхТаблица5.Очистить();
	СтруктураДанныхТаблица61.Очистить();
	СтруктураДанныхТаблица62.Очистить();
	СтруктураДанныхТаблица63.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()

     
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С)
	
	ОчиститьНаСервере();

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	перем ИсходноеКоличествоСтрокГруппы;
	
	ЗарплатаКадрыРасширенная = Ложь;
	Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
		ЗарплатаКадрыРасширенная = Истина;
	КонецЕсли;
	
	КолМесяцевВПериоде = 3;
	НомерМесяца = 0;
	Если СтруктураРеквизитовФормы.мПериодичность = ЭтаФорма.ПеречислениеПериодичностьМесяц Тогда
		КолМесяцевВПериоде = 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.НомерМесяца) Тогда 
		КолМесяцевВПериоде = 1;
		НомерМесяца = СтруктураРеквизитовФормы.НомерМесяца-1;
		СтруктураДанныхТаблица41["NMONTHKV"] = СтруктураРеквизитовФормы.НомерМесяца;
		СтруктураДанныхТаблица11["NMONTHKV"] = СтруктураРеквизитовФормы.НомерМесяца;
		СтруктураДанныхТаблица61["NMONTHKV"] = СтруктураРеквизитовФормы.НомерМесяца;
	КонецЕсли;	
	Если СтруктураРеквизитовФормы.НазначениеПенсии Тогда 
		СтруктураДанныхТаблица5["H01"] = Истина;
		СтруктураДанныхТаблица11["H01"] = Истина;
		СтруктураДанныхТаблица61["H01"] = Истина;
		СтруктураДанныхТаблица5["HZD"] = Истина;
		СтруктураДанныхТаблица11["HZD"] = Истина;
		СтруктураДанныхТаблица61["HZD"] = Истина;
	КонецЕсли;	
	Если СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда 
		СтруктураДанныхТаблица5["H02"] = Истина;
		СтруктураДанныхТаблица11["H02"] = Истина;
		СтруктураДанныхТаблица5["HZD"] = Истина;
		СтруктураДанныхТаблица11["HZD"] = Истина;
	КонецЕсли;	
	
	Для СчетчикМесяцев = 0 по КолМесяцевВПериоде-1 Цикл 
			
		НачалоВЦикле = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СчетчикМесяцев+НомерМесяца);
		КонецВЦикле = КонецМесяца(НачалоВЦикле);
	
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		
		ПараметрыПолученияСотрудников.Организация = СтруктураРеквизитовФормы.Организация;
		ПараметрыПолученияСотрудников.НачалоПериода = НачалоВЦикле;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецВЦикле;
		
		Если ЗарплатаКадрыРасширенная Тогда
			ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.НазначениеПенсии Или СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			ПараметрыПолученияСотрудников.СписокФизическихЛиц = СтруктураРеквизитовФормы.Сотрудники;
		КонецЕсли;
		
		ТаблицаСотрудниковОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		
		Если ЗарплатаКадрыРасширенная Тогда
			
			Попытка
				ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
					Истина, 
					ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
					"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости, ПринятНаНовоеРабочееМесто, ДатаСозданияРабочегоМеста, Должность, ПриказОбУвольненииНомер, ПриказОбУвольненииДата, ПриказОбУвольненииСтатьяКЗоТ, ПриказОбУвольненииСтатьяЗакона, ДоляНеполногоРабочегоВремени,РаботаСНефиксированнымРабочимВременем",
					КонецДня(КонецВЦикле));
            Исключение
				ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
					Истина, 
					ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
					"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости, ПринятНаНовоеРабочееМесто, ДатаСозданияРабочегоМеста, Должность, ПриказОбУвольненииНомер, ПриказОбУвольненииДата, ПриказОбУвольненииСтатьяКЗоТ, ПриказОбУвольненииСтатьяЗакона, ДоляНеполногоРабочегоВремени",
					КонецДня(КонецВЦикле));
					
				ТаблицаКадровыеДанныеСотрудников.Колонки.Добавить("РаботаСНефиксированнымРабочимВременем", Новый ОписаниеТипов("Булево"));
				ТаблицаКадровыеДанныеСотрудников.ЗаполнитьЗначения(Ложь,"РаботаСНефиксированнымРабочимВременем");
	
			КонецПопытки;	
		Иначе
			
			ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, 
				ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
				"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости, ПринятНаНовоеРабочееМесто, ДатаСозданияРабочегоМеста, Должность, ПриказОбУвольненииНомер, ПриказОбУвольненииДата, ПриказОбУвольненииСтатьяКЗоТ, ПриказОбУвольненииСтатьяЗакона",
				КонецДня(КонецВЦикле));
				
			МодульБП = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияБПКлиентСервер");	
			ТаблицаКадровыеДанныеСотрудников.Колонки.Добавить("ДоляНеполногоРабочегоВремени", МодульБП.ПолучитьОписаниеТиповЧисла(1, 0));
			ТаблицаКадровыеДанныеСотрудников.ЗаполнитьЗначения(1,"ДоляНеполногоРабочегоВремени");
			
			ТаблицаКадровыеДанныеСотрудников.Колонки.Добавить("РаботаСНефиксированнымРабочимВременем", Новый ОписаниеТипов("Булево"));
			ТаблицаКадровыеДанныеСотрудников.ЗаполнитьЗначения(Ложь,"РаботаСНефиксированнымРабочимВременем");
		КонецЕсли;		
			
		ТаблицаКадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, 
			ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("ФизическоеЛицо"), 
			"Фамилия, Имя, Отчество, Страна", 
			КонецДня(КонецВЦикле));


		Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			
			Если ЗарплатаКадрыРасширенная Тогда
				
				ТаблЧисленностиССЧ = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(СтруктураРеквизитовФормы.Организация, НачалоВЦикле,КонецВЦикле); 
				СтруктураДанныхДекларация["R101G"+Строка(3+СчетчикМесяцев)] = ТаблЧисленностиССЧ.ЧисленностьРаботников;
				СтруктураДанныхДекларация["R102G"+Строка(3+СчетчикМесяцев)] = ТаблЧисленностиССЧ.ЧисленностьИнвалидов;
				СтруктураДанныхДекларация["R103G"+Строка(3+СчетчикМесяцев)] = ТаблЧисленностиССЧ.ЧисленностьЛицСГарантиями;
				
			Иначе
				
				ПараметрыСредняяЧисленность = Новый Структура;
				ПараметрыСредняяЧисленность.Вставить("ВидПериода", "МЕСЯЦ") ;
				ПараметрыСредняяЧисленность.Вставить("НачалоПериода", НачалоВЦикле);
				ПараметрыСредняяЧисленность.Вставить("КонецПериода", КонецВЦикле);
				ПараметрыСредняяЧисленность.Вставить("ВидСредней", "ССЧ") ;
				ПараметрыСредняяЧисленность.Вставить("ОтборШтат", Истина);
				ПараметрыСредняяЧисленность.Вставить("ОтборПол", Неопределено);
				ПараметрыСредняяЧисленность.Вставить("ОтборИнвалиды", Ложь);
				ПараметрыСредняяЧисленность.Вставить("ОтборНеИнвалиды", Ложь);
				ПараметрыСредняяЧисленность.Вставить("ОтборПенсионеры", Ложь);
				ПараметрыСредняяЧисленность.Вставить("ОтборНеПенсионеры", Ложь);
				ПараметрыСредняяЧисленность.Вставить("ОтборИностранцы", Ложь);
				ПараметрыСредняяЧисленность.Вставить("ОтборДопГарантии", Ложь);
				ТаблСреднеспЧисленности = КадровыйУчет.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.Организация, ПараметрыСредняяЧисленность);
				
				СтруктураДанныхДекларация["R101G"+Строка(3+СчетчикМесяцев)] =  ТаблСреднеспЧисленности[0].Средняя;
				
				ПараметрыСредняяЧисленность.Вставить("ОтборИнвалиды", Истина);
				ТаблСреднеспЧисленности = КадровыйУчет.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.Организация, ПараметрыСредняяЧисленность); 
				СтруктураДанныхДекларация["R102G"+Строка(3+СчетчикМесяцев)] =  ТаблСреднеспЧисленности[0].Средняя;
				
				ПараметрыСредняяЧисленность.Вставить("ОтборИнвалиды", Ложь);
				ПараметрыСредняяЧисленность.Вставить("ОтборДопГарантии", Истина);
				ТаблСреднеспЧисленности = КадровыйУчет.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.Организация, ПараметрыСредняяЧисленность); 
				СтруктураДанныхДекларация["R103G"+Строка(3+СчетчикМесяцев)] =  ТаблСреднеспЧисленности[0].Средняя;

			КонецЕсли;
			
		КонецЕсли;
		
		СозданоНовыхРМ = 0;
		УчетнаяЧисленность = 0;
		
		Запрос = Новый Запрос;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоВЦикле);
		Запрос.УстановитьПараметр("ДатаКон", КонецВЦикле);
		Запрос.УстановитьПараметр("ДатаНачСлед", ДобавитьМесяц(НачалоВЦикле,1));
		Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		Запрос.Параметры.Вставить("ДнейВМесяце", День(КонецВЦикле));
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(СотрудникиОрганизации.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ВидЗанятости,
		|	&ДатаНач КАК ДатаНачала,
		|	&ДатаКон КАК ДатаОкончания,
		|	СотрудникиОрганизации.Должность КАК Должность,
		|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		|	СотрудникиОрганизации.ПриказОбУвольненииСтатьяКЗоТ КАК ПриказОбУвольненииСтатьяКЗоТ,
		|	СотрудникиОрганизации.ПриказОбУвольненииСтатьяЗакона КАК СтатьяЗакона,
		|	СотрудникиОрганизации.ПриказОбУвольненииДата КАК ПриказОбУвольненииДата,
		|	СотрудникиОрганизации.ПриказОбУвольненииНомер КАК ПриказОбУвольненииНомер,
		|	СотрудникиОрганизации.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	СотрудникиОрганизации.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	СотрудникиОрганизации.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
		|	СотрудникиОрганизации.РаботаСНефиксированнымРабочимВременем КАК РаботаСНефиксированнымРабочимВременем
		|ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ &ТаблицаКадровыеДанныеСотрудников КАК СотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ	
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости,
		|	СотрудникиОрганизации.ДатаНачала КАК ДатаНачала,
		|	СотрудникиОрганизации.ДатаОкончания КАК ДатаОкончания,
		|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		|	СотрудникиОрганизации.Должность КАК Должность,
		|	СотрудникиОрганизации.ПриказОбУвольненииСтатьяКЗоТ КАК ПриказОбУвольненииСтатьяКЗоТ,
		|	СотрудникиОрганизации.СтатьяЗакона КАК СтатьяЗакона,
		|	СотрудникиОрганизации.ПриказОбУвольненииДата КАК ПриказОбУвольненииДата,
		|	СотрудникиОрганизации.ПриказОбУвольненииНомер КАК ПриказОбУвольненииНомер,
		|	СотрудникиОрганизации.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	СотрудникиОрганизации.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	СотрудникиОрганизации.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
		|	СотрудникиОрганизации.РаботаСНефиксированнымРабочимВременем КАК РаботаСНефиксированнымРабочимВременем
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииТолькоОсновные
		|ИЗ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|ГДЕ
		|	СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|	ИЛИ СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)	
		|";
		Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеСотрудников",ТаблицаКадровыеДанныеСотрудников);
		
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ФизическиеЛица.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|			ИЛИ ЕСТЬNULL(ФизическиеЛица.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Гражданин,
		|	ФизическиеЛица.Фамилия КАК Фамилия,
		|	ФизическиеЛица.Имя КАК Имя,
		|	ФизическиеЛица.Отчество КАК Отчество
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ &ТаблицаКадровыеДанныеФизическихЛиц КАК ФизическиеЛица";
		Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеФизическихЛиц",ТаблицаКадровыеДанныеФизическихЛиц);
		Запрос.Выполнить();
		
		ТаблицаКадровыеДанныеСотрудниковДляУЧ = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, 
				ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
				"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости",
				КонецДня(НачалоВЦикле));
		Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеСотрудниковДляУЧ",ТаблицаКадровыеДанныеСотрудниковДляУЧ);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости,
		|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляУЧ
		|ИЗ &ТаблицаКадровыеДанныеСотрудниковДляУЧ КАК СотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ	
		|	КОЛИЧЕСТВО (СотрудникиОрганизации.Сотрудник) КАК Количество
		|ИЗ ВТСотрудникиОрганизацииДляУЧ КАК СотрудникиОрганизации
		|ГДЕ
		|	СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|	И СотрудникиОрганизации.ДатаПриема <> ДАТАВРЕМЯ(1,1,1)
		|	И СотрудникиОрганизации.ДатаПриема <= &ДатаНач
		|	И (СотрудникиОрганизации.ДатаУвольнения > &ДатаНач ИЛИ СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1)) 
		|";
			
		ВыборкаУЧ = Запрос.Выполнить().Выбрать();
		Пока ВыборкаУЧ.Следующий() Цикл
			УчетнаяЧисленность = ВыборкаУЧ.Количество;
		КонецЦикла;

		Если ЗарплатаКадрыРасширенная Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ПозицииШтатногоРасписания.СозданоНовыхРабочихМест) КАК СозданоНовыхРабочихМест
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ПозицииШтатногоРасписания
			|ГДЕ
			|   ПозицииШтатногоРасписания.ПозицияШтатногоРасписания.Владелец = &Организация
			|  	И ПозицииШтатногоРасписания.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|";
			
			ВыборкаНовыеМеста = Запрос.Выполнить().Выбрать();
			Пока ВыборкаНовыеМеста.Следующий() Цикл
				СозданоНовыхРМ = ВыборкаНовыеМеста.СозданоНовыхРабочихМест;
			КонецЦикла;
		
		КонецЕсли;	
		
		Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			СтруктураДанныхДекларация["R104G"+Строка(3+СчетчикМесяцев)] = УчетнаяЧисленность;
			СтруктураДанныхДекларация["R110G"+Строка(3+СчетчикМесяцев)] = СозданоНовыхРМ;
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСВПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСВПоСотрудникам.ФизическоеЛицо.Пол КАК Пол,
		|	ЕСВПоСотрудникам.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
		|	ВЫБОР
		|   	КОГДА ЕСВПоСотрудникам.КатегорияЕСВ <> &МобилизованныйБезОбеспечения 
		|			ТОГДА ЕСВПоСотрудникам.СтатьяНалоговойДекларации 
		|			ИНАЧЕ ЕСВПоСотрудникам.КатегорияЕСВ 
		|	КОНЕЦ КАК СтатьяНалоговойДекларации,	
		|	ЕСВПоСотрудникам.ТипНачисления КАК ТипНачисления,
		|	СУММА(ЕСВПоСотрудникам.БазаОборот) КАК База,
		|	СУММА(ЕСВПоСотрудникам.БазаВзносаОборот) КАК БазаВзноса,
		|	СУММА(ЕСВПоСотрудникам.БазаДоначислениеОборот) КАК БазаДоначисление,
		|	СУММА(ЕСВПоСотрудникам.РезультатДоначислениеОборот) КАК СуммаВзносаДоначисление,
		|	СУММА(ЕСВПоСотрудникам.БазаОтпускныеОборот) КАК БазаОтпускные,
		|	СУММА(ЕСВПоСотрудникам.СуммаОборот) КАК СуммаВзноса,
		|	СУММА(ЕСВПоСотрудникам.РезультатПолнаяОборот) КАК СуммаВзносаПолная,
		|	ЕСВПоСотрудникам.ВидЕСВ КАК ВидЕСВ,
		|	ЕСВПоСотрудникам.КатегорияЕСВ КАК КатегорияЕСВ,
		|	ЕСВПоСотрудникам.НалоговыйПериод КАК Период,
		|	ЕСВПоСотрудникам.СпособРасчета КАК СпособРасчета
		|ПОМЕСТИТЬ ВТЕСВПоСотрудникам
		|ИЗ
		|	РегистрНакопления.ЕСВПоСотрудникам.Обороты(
		|			НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ),
		|			КОНЕЦПЕРИОДА(&ДатаКон, МЕСЯЦ),
		|			,
		|			Организация = &Организация
		|				И ФизическоеЛицо В
		|					(ВЫБРАТЬ
		|						ВТСотрудникиОрганизации.ФизическоеЛицо
		|					ИЗ
		|						ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
		|					ГДЕ
		|						ВТСотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство))) КАК ЕСВПоСотрудникам
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСВПоСотрудникам.ФизическоеЛицо,
		|	ЕСВПоСотрудникам.КатегорияЕСВ,
		|	ЕСВПоСотрудникам.ТипНачисления,
		|	ВЫБОР
		|   	КОГДА ЕСВПоСотрудникам.КатегорияЕСВ <> &МобилизованныйБезОбеспечения 
		|			ТОГДА ЕСВПоСотрудникам.СтатьяНалоговойДекларации 
		|			ИНАЧЕ ЕСВПоСотрудникам.КатегорияЕСВ 
		|	КОНЕЦ,	
		|	ЕСВПоСотрудникам.ФизическоеЛицо.Пол,
		|	ЕСВПоСотрудникам.ФизическоеЛицо.КодПоДРФО,
		|	ЕСВПоСотрудникам.ВидЕСВ,
		|	ЕСВПоСотрудникам.НалоговыйПериод,
		|	ЕСВПоСотрудникам.СпособРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период,
		|	КатегорияЕСВ,
		|	ТипНачисления,
		|	СпособРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСВПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСВПоСотрудникам.Пол КАК Пол,
		|	ЕСВПоСотрудникам.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
		|	ЕСВПоСотрудникам.ТипНачисления КАК ТипНачисления,
		|	ЕСВПоСотрудникам.База КАК База,
		|	ЕСВПоСотрудникам.БазаВзноса КАК БазаВзноса,
		|	ЕСВПоСотрудникам.СуммаВзноса КАК СуммаВзноса,
		|	ЕСВПоСотрудникам.СуммаВзносаПолная КАК СуммаВзносаПолная,
		|	ЕСВПоСотрудникам.БазаДоначисление КАК БазаДоначисление,
		|	ЕСВПоСотрудникам.СуммаВзносаДоначисление КАК СуммаВзносаДоначисление,
		|	ЕСВПоСотрудникам.БазаОтпускные КАК БазаОтпускные,
		|	ЕСВПоСотрудникам.ВидЕСВ КАК ВидЕСВ,
		|	ЕСВПоСотрудникам.КатегорияЕСВ КАК КатегорияЕСВ,
		|	ЕСВПоСотрудникам.Период КАК Период
		|ИЗ
		|	ВТЕСВПоСотрудникам КАК ЕСВПоСотрудникам
		|";
		
		Если ЗарплатаКадрыРасширенная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.ЕСВПоСотрудникам", "РегистрНакопления.ИсчисленныеСтраховыеВзносы"); 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)",
							"ВТСотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
							| ИЛИ ЕСТЬNULL(ВТСотрудникиОрганизации.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))=ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)");
			Если Метаданные.РегистрыНакопления.ИсчисленныеСтраховыеВзносы.Ресурсы.Найти("РезультатПолная") = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(ЕСВПоСотрудникам.РезультатПолнаяОборот)", "СУММА(0)"); 	
			КонецЕсли;		
		Иначе
			Если Метаданные.РегистрыНакопления.ЕСВПоСотрудникам.Ресурсы.Найти("РезультатПолная") = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(ЕСВПоСотрудникам.РезультатПолнаяОборот)", "СУММА(0)"); 	
			КонецЕсли;	
		КонецЕсли;
		Попытка 
			Запрос.УстановитьПараметр("МобилизованныйБезОбеспечения", Справочники.КатегорииЗастрахованныхЛицЕСВ.МобилизованныйРаботникБезОбеспечения);
		Исключение
			Запрос.УстановитьПараметр("МобилизованныйБезОбеспечения", Справочники.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка());
		КонецПопытки;	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			ТаблицаБазВзносов = РезультатЗапроса.Выгрузить();
			ТаблицаБазВзносов.Свернуть("СтатьяНалоговойДекларации, ТипНачисления", "База, БазаВзноса, СуммаВзноса, БазаДоначисление, СуммаВзносаДоначисление, БазаОтпускные, СуммаВзносаПолная");
			ТаблицаНужныхСтатей_ = ТаблицаНужныхСтатей.Выгрузить();
			Для Каждого СтрокаБаз Из ТаблицаБазВзносов Цикл
				СтрокаТаблицы = ТаблицаНужныхСтатей_.Найти(СтрокаБаз.СтатьяНалоговойДекларации, "Статья");
				Если СтрокаТаблицы <> Неопределено Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						База = СтрокаБаз.БазаВзноса - СтрокаБаз.БазаДоначисление;
						БазаДоначисление = СтрокаБаз.БазаДоначисление;
						СуммаВзноса = СтрокаБаз.СуммаВзноса - СтрокаБаз.СуммаВзносаДоначисление;
						СуммаВзносаДоначисление = СтрокаБаз.СуммаВзносаДоначисление;
						СуммаВзносаПолная = СтрокаБаз.СуммаВзносаПолная;
						Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
							ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаОсновное+Строка(3+СчетчикМесяцев), База);
							ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносОсновное+Строка(3+СчетчикМесяцев), СуммаВзноса);
							ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаДоначисление+Строка(3+СчетчикМесяцев), БазаДоначисление);
							ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносДоначисление+Строка(3+СчетчикМесяцев), СуммаВзносаДоначисление);
							ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносПолная+Строка(3+СчетчикМесяцев), СуммаВзносаПолная);
							Если ЗначениеЗаполнено(СтрокаТаблицы.ПолеБазаПлюс) Тогда
								ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаПлюс+Строка(3+СчетчикМесяцев), СтрокаБаз.База);
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаТаблицы.ПолеБазаМинус) Тогда
								ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаМинус+Строка(3+СчетчикМесяцев), -СтрокаБаз.База);
							КонецЕсли;
	
						КонецЕсли
					ИначеЕсли (СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4) И (Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат) Тогда
						ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаТип24+Строка(3+СчетчикМесяцев), СтрокаБаз.БазаВзноса);
						ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносТип24+Строка(3+СчетчикМесяцев), СтрокаБаз.СуммаВзноса);
					ИначеЕсли (СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5) И (Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат) Тогда
						ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаТип35+Строка(3+СчетчикМесяцев), -СтрокаБаз.БазаВзноса);
						ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносТип35+Строка(3+СчетчикМесяцев), -СтрокаБаз.СуммаВзноса);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		БольничныеПредприятие 	= 0;
		БольничныеФСС 			= 0;
		БольничныеФССНесчСлучай = 0;
		ГПХ						= 0;
		Зарплата				= 0;
		ОтпускБеременностьИРоды = 0;
		
		Если ЗарплатаКадрыРасширенная Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	МИНИМУМ(ЕСВПоСотрудникам.Период) КАК ПериодМинимум,
			|	МАКСИМУМ(ЕСВПоСотрудникам.Период) КАК ПериодМаксимум
			|ИЗ
			|	ВТЕСВПоСотрудникам КАК ЕСВПоСотрудникам
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
		
			Если Выборка.Следующий() Тогда
				Если ЗначениеЗаполнено(Выборка.ПериодМинимум) Тогда
					ПериодМинимум = НачалоМесяца(Выборка.ПериодМинимум);
				Иначе
					ПериодМинимум = НачалоМесяца(НачалоВЦикле);
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка.ПериодМаксимум) Тогда
					ПериодМаксимум = КонецМесяца(Выборка.ПериодМаксимум);
				Иначе
					ПериодМаксимум = КонецМесяца(НачалоВЦикле);
				КонецЕсли;	
			Иначе
				ПериодМинимум = НачалоМесяца(НачалоВЦикле);
				ПериодМаксимум = КонецМесяца(НачалоВЦикле);
			КонецЕсли;	
				
			
			МодульУчетРабочегоВремени = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремени");
			
			ПараметрыЗаполнения = МодульУчетРабочегоВремени.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
		
			ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудникиОрганизацииТолькоОсновные";
			ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремениИСостоянийСотрудников";
			ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Ложь;
			ПараметрыЗаполнения.Организация  = СтруктураРеквизитовФормы.Организация;
			ПараметрыЗаполнения.ДатаАктуальности  = КонецВЦикле;
			ПараметрыЗаполнения.ДатаНачала = ПериодМинимум;
			ПараметрыЗаполнения.ДатаОкончания = ПериодМаксимум;
			
			ПараметрыЗаполнения.МесяцДатаНачала = ПериодМинимум;
			ПараметрыЗаполнения.МесяцДатаОкончания = ПериодМаксимум;
			
			ПараметрыЗаполнения.ПолучатьУжеРассчитанныеДанные = Ложь;
			ПараметрыЗаполнения.ПолучатьУсловияТрудаИТерритории = Ложь;
			
			МодульУчетРабочегоВремени.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
			
			МассивВидыВремениБолезнь = Новый Массив();
			МассивВидыВремениБолезнь.Добавить(Справочники.ВидыИспользованияРабочегоВремени.Болезнь);
			МассивВидыВремениБолезнь.Добавить(Справочники.ВидыИспользованияРабочегоВремени.БолезньБезОплаты);
			Запрос.УстановитьПараметр("ВидыВремениБолезнь", МассивВидыВремениБолезнь);
			МассивВидыВремениДекретные = Новый Массив();
			МассивВидыВремениДекретные.Добавить(Справочники.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам);
			Запрос.УстановитьПараметр("ВидыВремениДекретные", МассивВидыВремениДекретные);
			МассивВидыВремениБезоплаты = Новый Массив();
			МассивВидыВремениБезоплаты.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск);
			МассивВидыВремениБезоплаты.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству);
			МассивВидыВремениБезоплаты.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
			МассивВидыВремениБезоплаты.Добавить(Справочники.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый);
			Запрос.УстановитьПараметр("ВидыВремениБезоплаты", МассивВидыВремениБезоплаты);
			МассивВидыВремениМоблизизованные = Новый Массив();
			МассивВидыВремениМоблизизованные.Добавить(Справочники.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности);
			Запрос.УстановитьПараметр("ВидыВремениМоблизизованные", МассивВидыВремениМоблизизованные);
			МассивВидыВремениПриостановка = Новый Массив();
			МассивВидыВремениПриостановка.Добавить(Справочники.ВидыИспользованияРабочегоВремени.ДругиеНеявки);
			Запрос.УстановитьПараметр("ВидыВремениПриостановка", МассивВидыВремениПриостановка);
			
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеУчетаВремениПоСостояниям.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|   ДанныеУчетаВремениПоСостояниям.Дата КАК Дата,
			|	ДанныеУчетаВремениПоСостояниям.Дни КАК Дни,
			|	ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени КАК ВидУчетаВремени
			|ПОМЕСТИТЬ ВТДанныеУчетаВремениПоСостояниямСводно
			|ИЗ
			|  	ВТДанныеУчетаВремениПоСостояниям КАК ДанныеУчетаВремениПоСостояниям
			|;
			|
			|ВЫБРАТЬ
			|	ДанныеУчетаВремениПоСостояниям.ФизическоеЛицо КАК ФизическоеЛицо,
			|   НАЧАЛОПЕРИОДА(ДанныеУчетаВремениПоСостояниям.Дата, МЕСЯЦ) КАК Период
			|ПОМЕСТИТЬ ВТДанныеУчетаВремениПоСостояниямБезСодержания
			|ИЗ
			|  	ВТДанныеУчетаВремениПоСостояниямСводно КАК ДанныеУчетаВремениПоСостояниям
			|ГДЕ ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ВидыВремениБезоплаты)
			|	ИЛИ ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ВидыВремениМоблизизованные)
			|	ИЛИ ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ВидыВремениПриостановка)
			|СГРУППИРОВАТЬ ПО
			|   НАЧАЛОПЕРИОДА(ДанныеУчетаВремениПоСостояниям.Дата, МЕСЯЦ),
			|	ДанныеУчетаВремениПоСостояниям.ФизическоеЛицо
			|ИНДЕКСИРОВАТЬ ПО
			|   ФизическоеЛицо
			|;
			|ВЫБРАТЬ
			|   НАЧАЛОПЕРИОДА(ДанныеУчетаВремениПоСостояниям.Дата, МЕСЯЦ) КАК Период,
			|	ДанныеУчетаВремениПоСостояниям.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(ВЫБОР
			|		КОГДА ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ВидыВремениБолезнь)
			|			ТОГДА ДанныеУчетаВремениПоСостояниям.Дни 
			|       ИНАЧЕ 0
			|	КОНЕЦ) КАК КалендарныеДниБольничные,
			|	СУММА(ВЫБОР
			|		КОГДА ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ВидыВремениДекретные)
			|			ТОГДА ДанныеУчетаВремениПоСостояниям.Дни 
			|       ИНАЧЕ 0
			|	КОНЕЦ) КАК КалендарныеДниОтпускПоБеременностиИРодам,
			|	СУММА(ВЫБОР
			|		КОГДА ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ВидыВремениБезоплаты)
			|			ТОГДА ДанныеУчетаВремениПоСостояниям.Дни 
			|       ИНАЧЕ 0
			|	КОНЕЦ) КАК КалендарныеДниОтпускаБезСохраненияЗП
			|ИЗ
			|  	ВТДанныеУчетаВремениПоСостояниямСводно КАК ДанныеУчетаВремениПоСостояниям
			|
			|СГРУППИРОВАТЬ ПО
			|   НАЧАЛОПЕРИОДА(ДанныеУчетаВремениПоСостояниям.Дата, МЕСЯЦ),
			|	ДанныеУчетаВремениПоСостояниям.ФизическоеЛицо
			|";
			ДанныеУчетаВремениПоСостояниям = Запрос.Выполнить().Выгрузить();
			
			Попытка
				Запрос.УстановитьПараметр("ГруппаУчетаГигКонтракты", Справочники.ГруппыУчетаНачисленийИУдержаний.ВыплатыПоГигКонтрактам);
			Исключение
				Запрос.УстановитьПараметр("ГруппаУчетаГигКонтракты", Справочники.ГруппыУчетаНачисленийИУдержаний.ПустаяСсылка());
			КонецПопытки;	
			
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(НачисленияУдержанияПоСотрудникам.СуммаОборот) КАК Результат,
			|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
			|   ВЫБОР
			|   	КОГДА ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
			|           ТОГДА
			|		        ВЫБОР
			|		         КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ГруппаУчета =  &ГруппаУчетаГигКонтракты
			|	              ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
			|       		  ИНАЧЕ	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени
			|               КОНЕЦ
			|       ИНАЧЕ  НачисленияУдержанияПоСотрудникам.НачислениеУдержание
			|	КОНЕЦ КАК КатегорияНачисленияИлиНеоплаченногоВремени,
			|	НачисленияУдержанияПоСотрудникам.Период КАК Период,
			|	СУММА(0) КАК КалендарныеДниБольничные,
			|	СУММА(0) КАК КалендарныеДниОтпускаБезСохраненияЗП,
			|	СУММА(0) КАК КалендарныеДниОтпускПоБеременностиИРодам,
			|	0 КАК КодКатегорииНачисления
			|ПОМЕСТИТЬ ВТНачисленияУдержанияПоРаботникам
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			Месяц,
			|			Организация = &Организация
			|				И (ТИПЗНАЧЕНИЯ(НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
			|                  ИЛИ ТИПЗНАЧЕНИЯ(НачислениеУдержание) = ТИП(Перечисление.ВидыОсобыхНачисленийИУдержаний))
			|				И Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТСотрудникиОрганизации.Сотрудник
			|					ИЗ
			|						ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации)) КАК НачисленияУдержанияПоСотрудникам
			|
			| ГДЕ
			|   ВЫБОР
			|   	КОГДА ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
			|       	ТОГДА	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ВидЕСВ
			|       КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
			|           ИЛИ	НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
			|       	ТОГДА	ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
			|       ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НеУчитывается)
			|	КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НеУчитывается) 
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
			|  ВЫБОР
			|   	КОГДА ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
			|           ТОГДА
			|		        ВЫБОР
			|		         КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ГруппаУчета =  &ГруппаУчетаГигКонтракты
			|	              ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
			|       		  ИНАЧЕ	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени
			|               КОНЕЦ
			|       ИНАЧЕ  НачисленияУдержанияПоСотрудникам.НачислениеУдержание
			|	КОНЕЦ,
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
			|	НачисленияУдержанияПоСотрудникам.Сотрудник,
			|	НачисленияУдержанияПоСотрудникам.Период,
			|	0 
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизическоеЛицо
			|;
			|
			|ВЫБРАТЬ
			|	НачисленияУдержанияПоРаботникам.Результат КАК Результат,
			|	НачисленияУдержанияПоРаботникам.ФизическоеЛицо,	
			|   НачисленияУдержанияПоРаботникам.Начисление КАК Начисление,
			|   НачисленияУдержанияПоРаботникам.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
			|   НачисленияУдержанияПоРаботникам.Период КАК Период,
			|   НачисленияУдержанияПоРаботникам.Период КАК ПериодДействия,
			|	НачисленияУдержанияПоРаботникам.КалендарныеДниБольничные КАК КалендарныеДниБольничные,
			|	НачисленияУдержанияПоРаботникам.КалендарныеДниОтпускаБезСохраненияЗП КАК КалендарныеДниОтпускаБезСохраненияЗП,
			|	НачисленияУдержанияПоРаботникам.КалендарныеДниОтпускПоБеременностиИРодам КАК КалендарныеДниОтпускПоБеременностиИРодам,
			|	НачисленияУдержанияПоРаботникам.КодКатегорииНачисления КАК КодКатегорииНачисления
			|ПОМЕСТИТЬ ВТНачисленияУдержания
			|ИЗ ВТНачисленияУдержанияПоРаботникам КАК НачисленияУдержанияПоРаботникам
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(НачисленияУдержания.Результат) КАК Результат,
			|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени
			|ИЗ
			|	ВТНачисленияУдержания КАК НачисленияУдержания
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени
			|";

			
			
		Иначе	
			
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(НачисленияУдержанияПоСотрудникам.СуммаОборот) КАК Результат,
			|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
			|   НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
			|	НачисленияУдержанияПоСотрудникам.Период КАК Период,
			|	НачисленияУдержанияПоСотрудникам.ПериодДействия КАК ПериодДействия,
			|	СУММА(ВЫБОР
			|			КОГДА СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
			|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве))
			|				ТОГДА НачисленияУдержанияПоСотрудникам.КалендарныеДниОборот
			|		КОНЕЦ) КАК КалендарныеДниБольничные,
			|	СУММА(ВЫБОР
			|			КОГДА СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
			|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
			|				ТОГДА НачисленияУдержанияПоСотрудникам.КалендарныеДниОборот
			|		КОНЕЦ) КАК КалендарныеДниОтпускаБезСохраненияЗП,
			|	СУММА(ВЫБОР
			|			КОГДА СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
			|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
			|				ТОГДА НачисленияУдержанияПоСотрудникам.КалендарныеДниОборот
			|		КОНЕЦ) КАК КалендарныеДниОтпускПоБеременностиИРодам,
			|	ВЫБОР
			|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ)
			|			ТОГДА 3
			|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо6Лет)
			|			ТОГДА 4
			|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
			|			ТОГДА 5
			|	КОНЕЦ КАК КодКатегорииНачисления
			|ПОМЕСТИТЬ ВТНачисленияУдержанияПоРаботникам
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			Месяц,
			|			Организация = &Организация
			|				И ТИПЗНАЧЕНИЯ(НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
			|				И Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТСотрудникиОрганизации.Сотрудник
			|					ИЗ
			|						ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации)) КАК НачисленияУдержанияПоСотрудникам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник = СотрудникиОрганизации.Сотрудник
			|
			| ГДЕ
			|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НеУчитывается)
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
			|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени,
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
			|	НачисленияУдержанияПоСотрудникам.Сотрудник,
			|	НачисленияУдержанияПоСотрудникам.Период,
			|	НачисленияУдержанияПоСотрудникам.ПериодДействия,
			|
			|	ВЫБОР
			|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ)
			|			ТОГДА 3
			|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо6Лет)
			|			ТОГДА 4
			|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
			|			ТОГДА 5
			|	КОНЕЦ 
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизическоеЛицо
			|;
			|
			|ВЫБРАТЬ
			|	НачисленияУдержанияПоРаботникам.Результат КАК Результат,
			|	НачисленияУдержанияПоРаботникам.ФизическоеЛицо,	
			|   НачисленияУдержанияПоРаботникам.Начисление КАК Начисление,
			|   НачисленияУдержанияПоРаботникам.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
			|   НачисленияУдержанияПоРаботникам.Период КАК Период,
			|   НачисленияУдержанияПоРаботникам.ПериодДействия КАК ПериодДействия,
			|	НачисленияУдержанияПоРаботникам.КалендарныеДниБольничные КАК КалендарныеДниБольничные,
			|	НачисленияУдержанияПоРаботникам.КалендарныеДниОтпускаБезСохраненияЗП КАК КалендарныеДниОтпускаБезСохраненияЗП,
			|	НачисленияУдержанияПоРаботникам.КалендарныеДниОтпускПоБеременностиИРодам КАК КалендарныеДниОтпускПоБеременностиИРодам,
			|	НачисленияУдержанияПоРаботникам.КодКатегорииНачисления КАК КодКатегорииНачисления
			|ПОМЕСТИТЬ ВТНачисленияУдержания 
			|ИЗ ВТНачисленияУдержанияПоРаботникам КАК НачисленияУдержанияПоРаботникам
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(НачисленияУдержания.Результат) КАК Результат,
			|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени
			|ИЗ
			|	ВТНачисленияУдержания КАК НачисленияУдержания
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени
			|";
			
		КонецЕсли;	
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗарплатаКадрыРасширенная Тогда
				
				Если Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа
					ИЛИ	Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги Тогда	
				
					ГПХ = ГПХ + Выборка.Результат;
					Продолжить;
					
				ИначеЕсли Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание Тогда
				
					БольничныеФССНесчСлучай = БольничныеФССНесчСлучай + Выборка.Результат;
		            Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ Тогда	
				
					ГПХ = ГПХ + Выборка.Результат;
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;	
				
			Если Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя Тогда
				
				БольничныеПредприятие = БольничныеПредприятие + Выборка.Результат;
				
			ИначеЕсли Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста Тогда
				
				БольничныеФСС = БольничныеФСС + Выборка.Результат;
				
			ИначеЕсли Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве Тогда
				
				БольничныеФССНесчСлучай = БольничныеФССНесчСлучай + Выборка.Результат;
				
			ИначеЕсли Выборка.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам Тогда	
				
				ОтпускБеременностьИРоды = ОтпускБеременностьИРоды + Выборка.Результат; 
			Иначе
				// все остальное попадает в п. 1.1.
				Зарплата = Зарплата + Выборка.Результат;
				
			КонецЕсли;
			
		КонецЦикла; 

		Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			СтруктураДанныхДекларация["R01011G"+Строка(3+СчетчикМесяцев)] = СтруктураДанныхДекларация["R01011G"+Строка(3+СчетчикМесяцев)] + Зарплата;
			СтруктураДанныхДекларация["R01012G"+Строка(3+СчетчикМесяцев)] = СтруктураДанныхДекларация["R01012G"+Строка(3+СчетчикМесяцев)] + ГПХ;
			СтруктураДанныхДекларация["R01013G"+Строка(3+СчетчикМесяцев)] = СтруктураДанныхДекларация["R01013G"+Строка(3+СчетчикМесяцев)] + БольничныеПредприятие;
			СтруктураДанныхДекларация["R01014G"+Строка(3+СчетчикМесяцев)] = СтруктураДанныхДекларация["R01014G"+Строка(3+СчетчикМесяцев)] + БольничныеФСС + БольничныеФССНесчСлучай;
			СтруктураДанныхДекларация["R01015G"+Строка(3+СчетчикМесяцев)] = СтруктураДанныхДекларация["R01015G"+Строка(3+СчетчикМесяцев)] + ОтпускБеременностьИРоды;

		КонецЕсли;

		//////////////////////////////////////////////////////////////////	
		
		// ТАБЛИЦА 6
		ИмяГруппы = "T6"+Строка(СчетчикМесяцев+1)+"T1R";
		ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
		СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		Если ЗарплатаКадрыРасширенная Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	СпецстажСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			               |	СправочникОснования.КодОтчености КАК ОснованияСпециальногоСтажа,
			               |	СпецстажСотрудников.ДатаНачала,
			               |	СпецстажСотрудников.ДатаОкончания,
			               |	СпецстажСотрудников.Результат,
			               |	СпецстажСотрудников.Норма,
			               |	СпецстажСотрудников.ЕдиницаВремени,
			               |	СпецстажСотрудников.Сезонность,
			               |	СпецстажСотрудников.Приказ.Дата КАК ДатаПриказа,
						   |	СпецстажСотрудников.Приказ.Номер КАК НомерПриказа
						   |ПОМЕСТИТЬ ВТТаблицаСпецстажа
						   |ИЗ
			               |	РегистрСведений.СпецстажСотрудников КАК СпецстажСотрудников
						   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
						   |    ВТСотрудникиОрганизации КАК СотрудникиОрганизации
						   |    ПО СпецстажСотрудников.Сотрудник = СотрудникиОрганизации.Сотрудник
						   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
						   |    Справочник.ОснованияСпециальногоСтажа КАК СправочникОснования
						   |    ПО СпецстажСотрудников.ОснованияСпециальногоСтажа = СправочникОснования.Ссылка
						   |ГДЕ
						   |    СпецстажСотрудников.ПериодРегистрации = &ДатаНач
						   |";
			Запрос.Выполнить();
			
		Иначе	
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	NULL КАК ФизическоеЛицо,
			               |	NULL КАК ОснованияСпециальногоСтажа,
			               |	NULL КАК ДатаНачала,
			               |	NULL КАК ДатаОкончания,
			               |	NULL КАК Результат,
			               |	NULL КАК Норма,
			               |	NULL КАК ЕдиницаВремени,
			               |	NULL КАК Сезонность,
			               |	NULL КАК ДатаПриказа,
						   |	NULL КАК НомерПриказа
						   |ПОМЕСТИТЬ ВТТаблицаСпецстажа
						   |";
			Запрос.Выполнить();
			
		КонецЕсли;	

		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпецстажСотрудников.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСпецстажФизическихЛиц
		|ИЗ
		|	ВТТаблицаСпецстажа КАК СпецстажСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпецстажСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТФизическиеЛица.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
		|	ВТФизическиеЛица.Гражданин,
		|	ВТФизическиеЛица.Фамилия КАК Фамилия,
		|	ВТФизическиеЛица.Имя КАК Имя,
		|	ВТФизическиеЛица.Отчество КАК Отчество,
		|	СпецстажСотрудников.ОснованияСпециальногоСтажа,
		|	СпецстажСотрудников.ДатаНачала,
		|	СпецстажСотрудников.ДатаОкончания,
		|	СпецстажСотрудников.Результат,
		|	СпецстажСотрудников.Норма,
		|	СпецстажСотрудников.ЕдиницаВремени,
		|	СпецстажСотрудников.Сезонность,
		|	СпецстажСотрудников.ДатаПриказа,
		|	СпецстажСотрудников.НомерПриказа
		|ИЗ
		|	ВТТаблицаСпецстажа КАК СпецстажСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ВТФизическиеЛица
		|		ПО СпецстажСотрудников.ФизическоеЛицо = ВТФизическиеЛица.ФизическоеЛицо
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Номер = 0;
		
		ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
		
		Пока Выборка.Следующий() Цикл
			Если Номер > 0 Тогда
				Строка = СтруктураГруппы.Добавить();
			Иначе
				Строка = СтруктураГруппы[0];
			КонецЕсли;
			
			Строка[ПрефиксИмениКолонки+"G6S"]  = ОбработатьДРФО(Выборка.КодПоДРФО);
			Строка[ПрефиксИмениКолонки+"G5"]  	= Выборка.Гражданин;
			Строка[ПрефиксИмениКолонки+"G7S"] = Выборка.ОснованияСпециальногоСтажа;
			Строка[ПрефиксИмениКолонки+"G81S"] = Выборка.Фамилия;
			Строка[ПрефиксИмениКолонки+"G82S"] = Выборка.Имя;
			Строка[ПрефиксИмениКолонки+"G83S"] = Выборка.Отчество;
			
			Если ЗначениеЗаполнено(Выборка.ДатаНачала) Тогда
				Строка[ПрефиксИмениКолонки+"G9"] = День(Выборка.ДатаНачала);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Строка[ПрефиксИмениКолонки+"G10"] = День(Выборка.ДатаОкончания);
			КонецЕсли;	
			
			Если ЗарплатаКадрыРасширенная Тогда
				
				Если Выборка.ЕдиницаВремени = Перечисления.ЕдиницыВремениУчетаСпецстажа.Часы Тогда
					
					Строка[ПрефиксИмениКолонки+"G11"]  = 0;
					Строка[ПрефиксИмениКолонки+"G121"] = Цел(Выборка.Результат);
					Строка[ПрефиксИмениКолонки+"G122"] = Окр((Выборка.Результат - Цел(Выборка.Результат)) * 60, 0, РежимОкругления.Окр15как20);
					
					Строка[ПрефиксИмениКолонки+"G131"] = 0;
					Строка[ПрефиксИмениКолонки+"G132"] = Цел(Выборка.Норма);
					Строка[ПрефиксИмениКолонки+"G133"] = Окр((Выборка.Норма - Цел(Выборка.Норма)) * 60, 0, РежимОкругления.Окр15как20);
					
				Иначе
					
					Строка[ПрефиксИмениКолонки+"G11"]  = Выборка.Результат;
					Строка[ПрефиксИмениКолонки+"G121"] = 0;
					Строка[ПрефиксИмениКолонки+"G122"] = 0;
					
					Строка[ПрефиксИмениКолонки+"G131"] = Выборка.Норма;
					Строка[ПрефиксИмениКолонки+"G132"] = 0;
					Строка[ПрефиксИмениКолонки+"G133"] = 0;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			Строка[ПрефиксИмениКолонки+"G15D"] = Выборка.ДатаПриказа;
			Строка[ПрефиксИмениКолонки+"G14S"] = РегламентированнаяОтчетностьКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерПриказа, Истина, Истина);
			
			Строка[ПрефиксИмениКолонки+"G16"] = Выборка.Сезонность;
			
			Строка[ПрефиксИмениКолонки+"G17"] = 0; //признак (вкл/выкл)
			
			Номер = Номер + 1;
			
		КонецЦикла;
		ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
		
			
		//ТАБЛИЦА 1

		ИмяГруппы = "П"+Строка(СчетчикМесяцев+1)+"T1R";
		ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
		СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Если ЗарплатаКадрыРасширенная Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала КАК ДатаНачала,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТПериодыГПХ
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|
			|ГДЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация
			|	И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон
			|	 ИЛИ ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон
			|	 ИЛИ (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала < &ДатаНач И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания > &ДатаКон))
			|";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|   ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|   ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТПериодыГПХ
			|";
		КонецЕсли;	
		Запрос.Выполнить();	
			
		Запрос.Текст = "ВЫБРАТЬ
		|   СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|   СотрудникиОрганизации.ДатаПриема КАК ДатаНачала,
		|   СотрудникиОрганизации.ДатаУвольнения КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыТО
		|ИЗ
		|ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|ГДЕ СотрудникиОрганизации.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы),ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
		|;
		|
		|ВЫБРАТЬ
		|   ПериодыТО.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ПериодыТО.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ПериодыТО.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВЫБОР
		|					КОГДА ПериодыТО.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА &ДнейВМесяце
		|					КОГДА ПериодыТО.ДатаОкончания > КОНЕЦПЕРИОДА(&ДатаНач, МЕСЯЦ)
		|						ТОГДА &ДнейВМесяце
		|				ИНАЧЕ ДЕНЬ(ПериодыТО.ДатаОкончания)
		|				КОНЕЦ - ВЫБОР
		|					КОГДА ПериодыТО.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1) ИЛИ ПериодыТО.ДатаНачала < &ДатаНач 
		|						ТОГДА 1
		|					ИНАЧЕ ДЕНЬ(ПериодыТО.ДатаНачала)
		|				КОНЕЦ + 1
		|		ИНАЧЕ &ДнейВМесяце
		|	КОНЕЦ КАК РаботаДни,
		|	0 КАК ПоДоговоруДни
		|ПОМЕСТИТЬ ВТДлительностьТО
		|ИЗ
		|ВТПериодыТО КАК ПериодыТО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|   ПериодыТО.ФизическоеЛицо КАК ФизическоеЛицо,
		|	0 КАК РаботаДни,
		|	ВЫБОР
		|		КОГДА ПериодыТО.ДатаОкончания > КОНЕЦПЕРИОДА(&ДатаНач, МЕСЯЦ)
		|			ТОГДА &ДнейВМесяце
		|			ИНАЧЕ ДЕНЬ(ПериодыТО.ДатаОкончания)
		|	КОНЕЦ - ВЫБОР
		|				КОГДА ПериодыТО.ДатаНачала < &ДатаНач 
		|					ТОГДА 1
		|					ИНАЧЕ ДЕНЬ(ПериодыТО.ДатаНачала)
		|				КОНЕЦ + 1  КАК ПоДоговоруДни
		|ИЗ
		|ВТПериодыГПХ КАК ПериодыТО
		|;
		|
		|ВЫБРАТЬ
		|   ДлительностьТО.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА( ДлительностьТО.РаботаДни) КАК РаботаДни,
		|	СУММА( ДлительностьТО.ПоДоговоруДни) КАК ПоДоговоруДни
		|ПОМЕСТИТЬ ВТДлительностьТОСводная
		|ИЗ
		|ВТДлительностьТО КАК ДлительностьТО
		|СГРУППИРОВАТЬ ПО
		|   ДлительностьТО.ФизическоеЛицо 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|   СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТОсновноеМестоРаботы
		|ИЗ
		|ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|ГДЕ СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|   МАКСИМУМ(СотрудникиОрганизации.ДатаСозданияРабочегоМеста)КАК ДатаСозданияРабочегоМеста
		|ПОМЕСТИТЬ ВТПринятыхНаНовоеРабочееМесто
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|ГДЕ СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		| И СотрудникиОрганизации.ПринятНаНовоеРабочееМесто
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиОрганизации.ФизическоеЛицо
		|			
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ	
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТНеполноеРабочееВремя
		|ИЗ
		|	ВТСотрудникиОрганизацииТолькоОсновные КАК СотрудникиОрганизации
		|ГДЕ СотрудникиОрганизации.ДоляНеполногоРабочегоВремени < 1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ	
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТРаботаСНефиксированнымРабочимВременем
		|ИЗ
		|	ВТСотрудникиОрганизацииТолькоОсновные КАК СотрудникиОрганизации
		|ГДЕ СотрудникиОрганизации.РаботаСНефиксированнымРабочимВременем
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
		Запрос.Выполнить();
		
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПараметрыКатегорийЕСВСрезПоследних.Категория,
		|	ПараметрыКатегорийЕСВСрезПоследних.Код КАК КодКатегорииЗЛ,
		|	ПараметрыКатегорийЕСВСрезПоследних.Вид
		|ПОМЕСТИТЬ ВТКодыКатегорийЗЛ
		|ИЗ
		|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(&ДатаКон, ) КАК ПараметрыКатегорийЕСВСрезПоследних";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	КодыКатегорийЗЛ.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
		|	ЕСВСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСВСотрудники.ФизическоеЛицо.Пол КАК ФизическоеЛицоПол,
		|	ЕСВСотрудники.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
		|	ЕСВСотрудники.ТипНачисления КАК ТипНачисления,
		|	ЕСВСотрудники.Период КАК Период,
		|	ЕСВСотрудники.База КАК База,
		|	ЕСВСотрудники.БазаОтпускные КАК БазаОтпускные,
		|	ЕСВСотрудники.БазаВзноса КАК БазаВзноса,
		|	ЕСВСотрудники.БазаДоначисление КАК ДоначислениеФОТ,
		|	ЕСВСотрудники.СуммаВзноса КАК НалогФОТ,
		|	ЕСВСотрудники.СуммаВзносаДоначисление КАК ДоначислениеНалогФОТ,
		|	ЕСВСотрудники.ВидЕСВ КАК ВидЕСВ
		|ПОМЕСТИТЬ ВТЕСВФОТ
		|ИЗ
		|	ВТЕСВПоСотрудникам КАК ЕСВСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорийЗЛ КАК КодыКатегорийЗЛ
		|		ПО ЕСВСотрудники.КатегорияЕСВ = КодыКатегорийЗЛ.Категория
		|			И ЕСВСотрудники.ВидЕСВ = КодыКатегорийЗЛ.Вид
		|ГДЕ
		|	ЕСВСотрудники.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаВзносов.ВзносыФОТ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период,
		|	КодКатегорииЗЛ,
		|	ТипНачисления
		|";
		Запрос.Выполнить();
		
		Если ЗарплатаКадрыРасширенная Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ  
			|	ДанныеУчетаВремениПоСостояниям.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеУчетаВремениПоСостояниям.Период КАК Период
			|ПОМЕСТИТЬ ВТНачисленияУдержанияБезСодержания
			|ИЗ
			|	ВТДанныеУчетаВремениПоСостояниямБезСодержания КАК ДанныеУчетаВремениПоСостояниям
			|ГДЕ
			|	НЕ ДанныеУчетаВремениПоСостояниям.ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ВТЕСВФОТ.ФизическоеЛицо
			|				ИЗ
			|					ВТЕСВФОТ КАК ВТЕСВФОТ
			|               ГДЕ
			|					ВТЕСВФОТ.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
			|	И НАЧАЛОПЕРИОДА(ДанныеУчетаВремениПоСостояниям.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ)
			|";
			Запрос.Выполнить();
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
			|	НачисленияУдержания.Период КАК Период
			|ПОМЕСТИТЬ ВТНачисленияУдержанияБезСодержания
			|ИЗ
			|	ВТНачисленияУдержания КАК НачисленияУдержания
			|ГДЕ
			|	(НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
			|	 ИЛИ НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НачисленияМобилизованным))
			|	И НЕ НачисленияУдержания.ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ВТЕСВФОТ.ФизическоеЛицо
			|				ИЗ
			|					ВТЕСВФОТ КАК ВТЕСВФОТ
			|               ГДЕ
			|					ВТЕСВФОТ.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
			
			|	И НАЧАЛОПЕРИОДА(НачисленияУдержания.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НачисленияУдержания.ФизическоеЛицо,
			|	Период
			|";
			Запрос.Выполнить();
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ТекущаяТарифнаяСтавкаСотрудников.ТекущаяКатегорияЕСВ КАК КатегорияЕСВ
				|ПОМЕСТИТЬ ВТТекущиеКатегорииЕСВ
				|ИЗ
				|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
				|ГДЕ
				|   ТекущаяТарифнаяСтавкаСотрудников.ТекущаяОрганизация = &Организация
				|	И ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо В
				|				(ВЫБРАТЬ
				|					ВТНачисленияУдержанияБезСодержания.ФизическоеЛицо
				|				ИЗ
				|					ВТНачисленияУдержанияБезСодержания КАК ВТНачисленияУдержанияБезСодержания)
				|
				|ИНДЕКСИРОВАТЬ ПО    
				|	ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо
				|	";
				Запрос.Выполнить();
			КонецЕсли	
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
			|	НачисленияУдержанияБезСодержания.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	ВТНачисленияУдержанияБезСодержания КАК НачисленияУдержанияБезСодержания";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьПолныйМесяцОтпускаБезОплаты = Ложь;
		
		Если Выборка.Следующий() Тогда
			ЕстьПолныйМесяцОтпускаБезОплаты = Истина
		КонецЕсли;
		
		ТекстЗапросаОтпускБезОплаты = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(КодыКатегорийЗЛ.КодКатегорииЗЛ) КАК КодКатегорииЗЛ,
		|	НачисленияУдержанияБезСодержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияУдержанияБезСодержания.ФизическоеЛицо.Пол КАК ФизическоеЛицоПол,
		|	НачисленияУдержанияБезСодержания.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
		|	0 КАК ТипНачисления,
		|	НачисленияУдержанияБезСодержания.Период КАК Период,
		|	0 КАК База,
		|	0 КАК БазаОтпускные,
		|	0 КАК БазаВзноса,
		|	0 КАК ДоначислениеФОТ,
		|	0 КАК НалогФОТ,
		|	0 КАК ДоначислениеНалогФОТ,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата) КАК ВидЕСВ
		|ПОМЕСТИТЬ ВТЕСВФОТОтпускаБезОплаты
		|ИЗ
		|	ВТНачисленияУдержанияБезСодержания КАК НачисленияУдержанияБезСодержания";
		Если Не ЗарплатаКадрыРасширенная И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			ТекстЗапросаОтпускБезОплаты = ТекстЗапросаОтпускБезОплаты + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеКатегорииЕСВ КАК ЕСВСотрудников";
		Иначе
			ТекстЗапросаОтпускБезОплаты = ТекстЗапросаОтпускБезОплаты + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕСВСотрудников.СрезПоследних(
			|				КОНЕЦПЕРИОДА(&ДатаКон, МЕСЯЦ),
			|				ФизическоеЛицо В
			|					(ВЫБРАТЬ
			|						ВТНачисленияУдержанияБезСодержания.ФизическоеЛицо
			|					ИЗ
			|						ВТНачисленияУдержанияБезСодержания КАК ВТНачисленияУдержанияБезСодержания)
			|				И Сотрудник.ГоловнаяОрганизация = &Организация) КАК ЕСВСотрудников";

		КонецЕсли;
		ТекстЗапросаОтпускБезОплаты = ТекстЗапросаОтпускБезОплаты + "
		|		ПО НачисленияУдержанияБезСодержания.ФизическоеЛицо = ЕСВСотрудников.ФизическоеЛицо
		|		И ЕСВСотрудников.КатегорияЕСВ <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорийЗЛ КАК КодыКатегорийЗЛ
		|		ПО (ЕСВСотрудников.КатегорияЕСВ = КодыКатегорийЗЛ.Категория)
		|       И КодыКатегорийЗЛ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияБезСодержания.ФизическоеЛицо,
		|	НачисленияУдержанияБезСодержания.ФизическоеЛицо.Пол,
		|	НачисленияУдержанияБезСодержания.ФизическоеЛицо.КодПоДРФО,
		|	НачисленияУдержанияБезСодержания.Период,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период,
		|	КодКатегорииЗЛ,
		|	ТипНачисления";
		
		ТекстЗапросаЕСВОтпускБезОплаты = "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСВФОТОтпускаБезОплаты.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
		|	ЕСВФОТОтпускаБезОплаты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСВФОТОтпускаБезОплаты.ФизическоеЛицоПол КАК ФизическоеЛицоПол,
		|	ЕСВФОТОтпускаБезОплаты.КодПоДРФО КАК КодПоДРФО,
		|	ЕСВФОТОтпускаБезОплаты.ТипНачисления КАК ТипНачисления,
		|	ЕСВФОТОтпускаБезОплаты.Период КАК Период,
		|	ЕСВФОТОтпускаБезОплаты.База КАК База,
		|	ЕСВФОТОтпускаБезОплаты.БазаОтпускные КАК БазаОтпускные,
		|	ЕСВФОТОтпускаБезОплаты.БазаВзноса КАК БазаВзноса,
		|	ЕСВФОТОтпускаБезОплаты.ДоначислениеФОТ КАК ДоначислениеФОТ,
		|	ЕСВФОТОтпускаБезОплаты.НалогФОТ КАК НалогФОТ,
		|	ЕСВФОТОтпускаБезОплаты.ДоначислениеНалогФОТ КАК ДоначислениеНалогФОТ,
		|	ЕСВФОТОтпускаБезОплаты.ВидЕСВ КАК ВидЕСВ
		|ИЗ ВТЕСВФОТОтпускаБезОплаты КАК ЕСВФОТОтпускаБезОплаты
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период,
		|	КодКатегорииЗЛ,
		|	ТипНачисления
		|";

		Запрос.Текст = "
		|//ТекстЗапросаОтпускБезОплаты
		|//;
		|ВЫБРАТЬ 
		|	ЕСВФОТ.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
		|	ЕСВФОТ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСВФОТ.ФизическоеЛицоПол КАК ФизическоеЛицоПол,
		|	ЕСВФОТ.КодПоДРФО КАК КодПоДРФО,
		|	ЕСВФОТ.ТипНачисления КАК ТипНачисления,
		|	ЕСВФОТ.Период КАК Период,
		|	ЕСВФОТ.База КАК База,
		|	ЕСВФОТ.БазаОтпускные КАК БазаОтпускные,
		|	ЕСВФОТ.БазаВзноса КАК БазаВзноса,
		|	ЕСВФОТ.ДоначислениеФОТ КАК ДоначислениеФОТ,
		|	ЕСВФОТ.НалогФОТ КАК НалогФОТ,
		|	ЕСВФОТ.ДоначислениеНалогФОТ КАК ДоначислениеНалогФОТ,
		|	ЕСВФОТ.ВидЕСВ КАК ВидЕСВ
		|ПОМЕСТИТЬ ВТЕСВФОТОбщая
		|ИЗ ВТЕСВФОТ КАК ЕСВФОТ
		|
		|//ТекстЗапросаЕСВОтпускБезОплаты
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыКатегорийЗЛ.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
		|	ЕСВСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСВСотрудники.Период КАК Период,
		|	СУММА(ЕСВСотрудники.СуммаВзноса) КАК Налог
		|ПОМЕСТИТЬ ВТЕСВСотрудников
		|ИЗ
		|	ВТЕСВПоСотрудникам КАК ЕСВСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорийЗЛ КАК КодыКатегорийЗЛ
		|		ПО ЕСВСотрудники.КатегорияЕСВ = КодыКатегорийЗЛ.Категория
		|			И ЕСВСотрудники.ВидЕСВ = КодыКатегорийЗЛ.Вид
		|ГДЕ
		|	ЕСВСотрудники.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаВзносов.Взносы)
		|	И ЕСВСотрудники.СуммаВзноса <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	КодыКатегорийЗЛ.КодКатегорииЗЛ,
		|	ЕСВСотрудники.ФизическоеЛицо,
		|	ЕСВСотрудники.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСВФОТ.ФизическоеЛицо,
		|	ЕСВФОТ.КодПоДРФО КАК КодПоДРФО,
		|	ЕСВФОТ.ТипНачисления,
		|	ЕСВФОТ.Период,
		|	ЕСВФОТ.КодКатегорииЗЛ,
		|	ВТФизическиеЛица.Гражданин,
		|	ВТФизическиеЛица.Фамилия КАК Фамилия,
		|	ВТФизическиеЛица.Имя КАК Имя,
		|	ВТФизическиеЛица.Отчество КАК Отчество,
		|	ЕСВФОТ.ВидЕСВ КАК ВидЕСВ,
		|	ЕСВФОТ.НалогФОТ КАК НалогФОТ,
		|	ЕСВФОТ.БазаОтпускные КАК РезультатОтпускные,
		|	ЕСВФОТ.БазаВзноса КАК РезультатСПределом,
		|	ЕСВФОТ.База КАК Результат,
		|	ЕСТЬNULL(ЕСВСотрудников.Налог, 0) КАК Налог,
		|	ЕСВФОТ.ДоначислениеФОТ КАК ДоначислениеФОТ,
		|	ЕСВФОТ.ДоначислениеНалогФОТ КАК ДоначислениеНалогФОТ,
		|	СУММА(НачисленияУдержания.КалендарныеДниБольничные) КАК КалендарныеДниБольничные,
		|	СУММА(НачисленияУдержания.КалендарныеДниОтпускаБезСохраненияЗП) КАК КалендарныеДниОтпускаБезСохраненияЗП,
		|	СУММА(ВЫБОР КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.Декретные)) ТОГДА НачисленияУдержания.КалендарныеДниОтпускПоБеременностиИРодам ИНАЧЕ 0 КОНЕЦ) КАК КалендарныеДниОтпускПоБеременностиИРодам,
		|	ВЫБОР
		|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(ОсновноеМестоРаботы.ФизическоеЛицо, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|	КОНЕЦ КАК ПризнакНаличияТрудовойКнижки,
		|	ВЫБОР
		|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(ПринятыхНаНовоеРабочееМесто.ФизическоеЛицо, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|	КОНЕЦ КАК ПринятНаНовоеРабочееМесто,
		|	ПринятыхНаНовоеРабочееМесто.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|   ВЫБОР
		|   	КОГДА НЕ (НеполноеРабочееВремя.ФизическоеЛицо ЕСТЬ NULL)
		|           И ЕСВФОТ.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|   КОНЕЦ КАК НеполноеРабочееВремя,
		|   ВЫБОР
		|   	КОГДА НЕ (РаботаСНефиксированнымРабочимВременем.ФизическоеЛицо ЕСТЬ NULL)
		|           И ЕСВФОТ.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|   КОНЕЦ КАК СНефиксированнымРабочимВременем,
		|	ДлительностьТО.РаботаДни КАК РаботаДни,
		|	ДлительностьТО.ПоДоговоруДни КАК ПоДоговоруДни,
		|   ВЫБОР
		|   	КОГДА СпецстажФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|           ИЛИ ЕСВФОТ.ВидЕСВ = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|   КОНЕЦ КАК Спецстаж
		|ИЗ
		|	ВТЕСВФОТОбщая КАК ЕСВФОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияУдержания КАК НачисленияУдержания
		|		ПО ЕСВФОТ.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо
		|		И ЕСВФОТ.Период = НачисленияУдержания.ПериодДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДлительностьТОСводная КАК ДлительностьТО
		|		ПО ЕСВФОТ.ФизическоеЛицо = ДлительностьТО.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ВТФизическиеЛица
		|		ПО ЕСВФОТ.ФизическоеЛицо = ВТФизическиеЛица.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕСВСотрудников КАК ЕСВСотрудников
		|		ПО ЕСВФОТ.ФизическоеЛицо = ЕСВСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновноеМестоРаботы КАК ОсновноеМестоРаботы
		|		ПО ЕСВФОТ.ФизическоеЛицо = ОсновноеМестоРаботы.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятыхНаНовоеРабочееМесто КАК ПринятыхНаНовоеРабочееМесто
		|		ПО ЕСВФОТ.ФизическоеЛицо = ПринятыхНаНовоеРабочееМесто.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеполноеРабочееВремя КАК НеполноеРабочееВремя
		|		ПО ЕСВФОТ.ФизическоеЛицо = НеполноеРабочееВремя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботаСНефиксированнымРабочимВременем КАК РаботаСНефиксированнымРабочимВременем
		|		ПО ЕСВФОТ.ФизическоеЛицо = РаботаСНефиксированнымРабочимВременем.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецстажФизическихЛиц КАК СпецстажФизическихЛиц
		|		ПО ЕСВФОТ.ФизическоеЛицо = СпецстажФизическихЛиц.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСВФОТ.ФизическоеЛицо,
		|	ЕСВФОТ.КодПоДРФО,
		|	ЕСВФОТ.ТипНачисления,
		|	ЕСВФОТ.Период,
		|	ЕСВФОТ.КодКатегорииЗЛ,
		|	ВТФизическиеЛица.Гражданин,
		|	ВТФизическиеЛица.Фамилия,
		|	ВТФизическиеЛица.Имя,
		|	ВТФизическиеЛица.Отчество,
		|	ЕСВФОТ.ВидЕСВ,
		|	ЕСВФОТ.НалогФОТ,
		|	ЕСВФОТ.БазаОтпускные,
		|	ЕСВФОТ.БазаВзноса,
		|	ЕСВФОТ.База,
		|	ЕСТЬNULL(ЕСВСотрудников.Налог, 0),
		|	ЕСВФОТ.ДоначислениеФОТ,
		|	ЕСВФОТ.ДоначислениеНалогФОТ,
		|	ВЫБОР
		|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(ОсновноеМестоРаботы.ФизическоеЛицо, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(ПринятыхНаНовоеРабочееМесто.ФизическоеЛицо, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ПринятыхНаНовоеРабочееМесто.ДатаСозданияРабочегоМеста, 
		|   ВЫБОР
		|   	КОГДА НЕ (НеполноеРабочееВремя.ФизическоеЛицо ЕСТЬ NULL)
		|           И ЕСВФОТ.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|   КОНЕЦ,
		|   ВЫБОР
		|   	КОГДА НЕ (РаботаСНефиксированнымРабочимВременем.ФизическоеЛицо ЕСТЬ NULL)
		|           И ЕСВФОТ.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|   КОНЕЦ,
		|	ДлительностьТО.РаботаДни,
		|	ДлительностьТО.ПоДоговоруДни,
		|  ВЫБОР
		|   	КОГДА СпецстажФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|           ИЛИ ЕСВФОТ.ВидЕСВ = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|  КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество,
		|	КодПоДРФО";
		Если ЕстьПолныйМесяцОтпускаБезОплаты Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстЗапросаОтпускБезОплаты", ТекстЗапросаОтпускБезОплаты);	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//;", ";");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстЗапросаЕСВОтпускБезОплаты", ТекстЗапросаЕСВОтпускБезОплаты);
		КонецЕсли;	
		Выборка = Запрос.Выполнить().Выбрать();	
		
		Номер = 0;
		ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
		
		Пока Выборка.Следующий() Цикл
			Результат = Выборка.Результат - Выборка.РезультатОтпускные;
			РезультатОтпускные = Выборка.РезультатОтпускные;
			РезультатСПределом = МИН(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ,Результат);
			РезультатСПределомОтпускные = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ - РезультатСПределом;
			КоэффициентДеления = ?(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ = 0 ИЛИ РезультатСПределом = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ, 1, РезультатСПределом/(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ));
			Налог 		   = Окр(Выборка.Налог*КоэффициентДеления, 2);
			НалогОтпускные = Выборка.Налог - Налог;
			ДоначислениеФОТ = Выборка.ДоначислениеФОТ;
			ДоначислениеНалогФОТ = Выборка.ДоначислениеНалогФОТ;
			
			НалогФОТ        = Окр((Выборка.НалогФОТ-ДоначислениеНалогФОТ)*КоэффициентДеления, 2);
			НалогФОТОтпускные = Окр((Выборка.НалогФОТ-ДоначислениеНалогФОТ) - НалогФОТ,2);

			Если Номер > 0 Тогда
				Строка = СтруктураГруппы.Добавить();
			Иначе
				Строка = СтруктураГруппы[0];
			КонецЕсли;
			
			Строка[ПрефиксИмениКолонки+"G5"] = Выборка.Гражданин;
			Строка[ПрефиксИмениКолонки+"G6"] = КодПолаФизическогоЛица(Выборка.ФизическоеЛицо.Пол);
			
			Строка[ПрефиксИмениКолонки+"G7S"] = ОбработатьДРФО(Выборка.КодПоДРФО);
			Строка[ПрефиксИмениКолонки+"G8"]  = Выборка.КодКатегорииЗЛ;
			
			Если Выборка.Результат = Выборка.РезультатОтпускные И Выборка.РезультатОтпускные > 0 Тогда
				//Начислен только отпуск
				Строка[ПрефиксИмениКолонки+"G9"] = 10;
			Иначе	
				Строка[ПрефиксИмениКолонки+"G9"] = Выборка.ТипНачисления;
			КонецЕсли;	
			Строка[ПрефиксИмениКолонки+"G101"] = Месяц(Выборка.Период);
			Строка[ПрефиксИмениКолонки+"G102"] = Год(Выборка.Период);
			
			Строка[ПрефиксИмениКолонки+"G111S"] = Выборка.Фамилия;
			Строка[ПрефиксИмениКолонки+"G112S"] = Выборка.Имя;
			Строка[ПрефиксИмениКолонки+"G113S"] = Выборка.Отчество;
			
			Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные Тогда
				
				Если ЗарплатаКадрыРасширенная Тогда
					
					НайденныеСтроки = ДанныеУчетаВремениПоСостояниям.НайтиСтроки(Новый Структура("ФизическоеЛицо, Период", Выборка.ФизическоеЛицо, НачалоМесяца(Выборка.Период)));
					Если НайденныеСтроки.Количество() > 0 Тогда
						Строка[ПрефиксИмениКолонки+"G12"] = НайденныеСтроки[0].КалендарныеДниБольничные;
					КонецЕсли;	
				Иначе
					Строка[ПрефиксИмениКолонки+"G12"] = Выборка.КалендарныеДниБольничные;
				КонецЕсли;	
			Иначе
				Строка[ПрефиксИмениКолонки+"G12"] = 0;
			КонецЕсли;	
			Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата И Выборка.Период = НачалоВЦикле Тогда
				
				Если ЗарплатаКадрыРасширенная Тогда
					
					НайденныеСтроки = ДанныеУчетаВремениПоСостояниям.НайтиСтроки(Новый Структура("ФизическоеЛицо, Период", Выборка.ФизическоеЛицо, НачалоМесяца(Выборка.Период)));
					Если НайденныеСтроки.Количество() > 0 Тогда
						Строка[ПрефиксИмениКолонки+"G13"] = НайденныеСтроки[0].КалендарныеДниОтпускаБезСохраненияЗП;
					КонецЕсли;	
				Иначе
					Строка[ПрефиксИмениКолонки+"G13"] = Выборка.КалендарныеДниОтпускаБезСохраненияЗП;
				КонецЕсли;
			Иначе
				Строка[ПрефиксИмениКолонки+"G13"] = 0;
			КонецЕсли;
			Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата И Выборка.Период = НачалоВЦикле Тогда
				Строка[ПрефиксИмениКолонки+"G14"] = Выборка.РаботаДни;
			ИначеЕсли Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.ПоГигКонтрактам И Выборка.Период = НачалоВЦикле Тогда
				Строка[ПрефиксИмениКолонки+"G14"] = Выборка.РаботаДни;
			ИначеЕсли Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.ПоДоговорамГПХ Тогда	
				Если НЕ ЗарплатаКадрыРасширенная Тогда
					Строка[ПрефиксИмениКолонки+"G14"] = Выборка.РаботаДни;
				Иначе	
					Строка[ПрефиксИмениКолонки+"G14"] = Выборка.ПоДоговоруДни;
				КонецЕсли;	
			Иначе
				Строка[ПрефиксИмениКолонки+"G14"] = 0;
			Конецесли;	
			Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.Декретные Тогда
				
				Если ЗарплатаКадрыРасширенная Тогда
					
					НайденныеСтроки = ДанныеУчетаВремениПоСостояниям.НайтиСтроки(Новый Структура("ФизическоеЛицо, Период", Выборка.ФизическоеЛицо, НачалоМесяца(Выборка.Период)));
					Если НайденныеСтроки.Количество() > 0 Тогда
						Строка[ПрефиксИмениКолонки+"G15"] = НайденныеСтроки[0].КалендарныеДниОтпускПоБеременностиИРодам;
					КонецЕсли;	
				Иначе
					Строка[ПрефиксИмениКолонки+"G15"] = Выборка.КалендарныеДниОтпускПоБеременностиИРодам;
				КонецЕсли;
			Иначе
				Строка[ПрефиксИмениКолонки+"G15"] = Выборка.КалендарныеДниОтпускПоБеременностиИРодам;
			КонецЕсли;	
			Строка[ПрефиксИмениКолонки+"G21"] = Выборка.ПризнакНаличияТрудовойКнижки;
			//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
			Если Результат <> 0 И РезультатОтпускные <> 0 И Выборка.Период = НачалоМесяца(КонецВЦикле) Тогда
	        	Строка[ПрефиксИмениКолонки+"G16"] = Результат;
				Строка[ПрефиксИмениКолонки+"G17"] = РезультатСПределом;
				Строка[ПрефиксИмениКолонки+"G19"] = Налог;
				Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТ;
			Иначе
				Строка[ПрефиксИмениКолонки+"G16"] = Выборка.Результат;
				Строка[ПрефиксИмениКолонки+"G17"] = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ;
				Строка[ПрефиксИмениКолонки+"G19"] = Выборка.Налог;
				Если Результат = 0 И РезультатОтпускные <> 0 Тогда 
					//Это отпускные за следующий период
					Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТОтпускные;
				Иначе	
					Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТ;
				КонецЕсли;	
			КонецЕсли;	
			Строка[ПрефиксИмениКолонки+"G24"]  	= Выборка.ПринятНаНовоеРабочееМесто;
			Если  ЗначениеЗаполнено(Выборка.ДатаСозданияРабочегоМеста) 
				И (    Год(Выборка.ДатаСозданияРабочегоМеста) + 2 < Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
				   ИЛИ Год(Выборка.ДатаСозданияРабочегоМеста) + 2 = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) 
				   И Месяц(Выборка.ДатаСозданияРабочегоМеста) <= Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) Тогда
				Строка[ПрефиксИмениКолонки+"G24"] = 0;
			КонецЕсли;
			Строка[ПрефиксИмениКолонки+"G23"] = Выборка.НеполноеРабочееВремя;
			Строка[ПрефиксИмениКолонки+"G26"] = Выборка.СНефиксированнымРабочимВременем;
			Строка[ПрефиксИмениКолонки+"G22"] = Выборка.СпецСтаж;
			Строка[ПрефиксИмениКолонки+"G25"] = 0;  //признак
			
			//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
			Если Результат <> 0 И РезультатОтпускные <> 0 И Выборка.Период = НачалоМесяца(КонецВЦикле) Тогда
				Строка = СтруктураГруппы.Добавить();
		        Номер = Номер + 1;
				
				Строка[ПрефиксИмениКолонки+"G5"]   = Выборка.Гражданин;
				Строка[ПрефиксИмениКолонки+"G6"]   = КодПолаФизическогоЛица(Выборка.ФизическоеЛицо.Пол);
				Строка[ПрефиксИмениКолонки+"G7S"]  = ОбработатьДРФО(Выборка.КодПоДРФО);
				Строка[ПрефиксИмениКолонки+"G8"]   = Выборка.КодКатегорииЗЛ;
				Строка[ПрефиксИмениКолонки+"G9"]   = 10;
				Строка[ПрефиксИмениКолонки+"G101"] = Месяц(Выборка.Период);
				Строка[ПрефиксИмениКолонки+"G102"] = Год(Выборка.Период);
				
				Строка[ПрефиксИмениКолонки+"G111S"] = Выборка.Фамилия;
				Строка[ПрефиксИмениКолонки+"G112S"] = Выборка.Имя;
				Строка[ПрефиксИмениКолонки+"G113S"] = Выборка.Отчество;
				
				Строка[ПрефиксИмениКолонки+"G12"] = 0;
				Строка[ПрефиксИмениКолонки+"G13"] = 0;
				Строка[ПрефиксИмениКолонки+"G14"] = 0;
				Строка[ПрефиксИмениКолонки+"G15"] = 0;
				
				Строка[ПрефиксИмениКолонки+"G16"] = РезультатОтпускные;
				Строка[ПрефиксИмениКолонки+"G17"] = РезультатСПределомОтпускные;
				
				Строка[ПрефиксИмениКолонки+"G19"] = НалогОтпускные;
				Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТОтпускные;
				
				Строка[ПрефиксИмениКолонки+"G21"] = Выборка.ПризнакНаличияТрудовойКнижки;
				Строка[ПрефиксИмениКолонки+"G24"] = Выборка.ПринятНаНовоеРабочееМесто;
				Если  ЗначениеЗаполнено(Выборка.ДатаСозданияРабочегоМеста) 
					И (    Год(Выборка.ДатаСозданияРабочегоМеста) + 2 < Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
					   ИЛИ Год(Выборка.ДатаСозданияРабочегоМеста) + 2 = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) 
					   И Месяц(Выборка.ДатаСозданияРабочегоМеста) <= Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) Тогда
					Строка[ПрефиксИмениКолонки+"G24"] = 0;
				КонецЕсли;
				Строка[ПрефиксИмениКолонки+"G23"] = Выборка.НеполноеРабочееВремя;
				Строка[ПрефиксИмениКолонки+"G26"] = Выборка.СНефиксированнымРабочимВременем;
				Строка[ПрефиксИмениКолонки+"G22"] = Выборка.СпецСтаж;
				Строка[ПрефиксИмениКолонки+"G25"] = 0;  //признак
			
			КонецЕсли;	
			
			//Если есть доначисления - показываем их отдельной строкой с типом 13
			Если ДоначислениеФОТ <> 0 ИЛИ ДоначислениеНалогФОТ <> 0 Тогда
				Если Строка[ПрефиксИмениКолонки+"G16"] = 0 И Строка[ПрефиксИмениКолонки+"G17"] = 0 И Строка[ПрефиксИмениКолонки+"G19"] = 0 
					И Выборка.РаботаДни = 0 И Выборка.КалендарныеДниОтпускаБезСохраненияЗП = 0 Тогда
					//В этой строке ничего нет, используем ту же строку
					Номер = Номер - 1;
				Иначе
					Строка = СтруктураГруппы.Добавить();
				КонецЕсли;	
		        Номер = Номер + 1;
				
				Строка[ПрефиксИмениКолонки+"G5"]  = Выборка.Гражданин;
				Строка[ПрефиксИмениКолонки+"G6"]  = КодПолаФизическогоЛица(Выборка.ФизическоеЛицо.Пол);
				Строка[ПрефиксИмениКолонки+"G7S"] = ОбработатьДРФО(Выборка.КодПоДРФО);
				
				Строка[ПрефиксИмениКолонки+"G8"]   = Выборка.КодКатегорииЗЛ;
				Строка[ПрефиксИмениКолонки+"G9"]   = 13;
				Строка[ПрефиксИмениКолонки+"G101"] = Месяц(Выборка.Период);
				Строка[ПрефиксИмениКолонки+"G102"] = Год(Выборка.Период);
				
				Строка[ПрефиксИмениКолонки+"G111S"] = Выборка.Фамилия;
				Строка[ПрефиксИмениКолонки+"G112S"] = Выборка.Имя;
				Строка[ПрефиксИмениКолонки+"G113S"] = Выборка.Отчество;
				
				Строка[ПрефиксИмениКолонки+"G12"] = 0;
				Строка[ПрефиксИмениКолонки+"G13"] = 0;
				Строка[ПрефиксИмениКолонки+"G14"] = 0;
				Строка[ПрефиксИмениКолонки+"G15"] = 0;
				
				Строка[ПрефиксИмениКолонки+"G16"] = 0;
				Строка[ПрефиксИмениКолонки+"G17"] = 0;
				
				Строка[ПрефиксИмениКолонки+"G18"] = ДоначислениеФОТ;
				Строка[ПрефиксИмениКолонки+"G19"] = 0;
				Строка[ПрефиксИмениКолонки+"G20"] = ДоначислениеНалогФОТ;
				
				Строка[ПрефиксИмениКолонки+"G21"] = Выборка.ПризнакНаличияТрудовойКнижки;
				Строка[ПрефиксИмениКолонки+"G24"] = Выборка.ПринятНаНовоеРабочееМесто;
				Если  ЗначениеЗаполнено(Выборка.ДатаСозданияРабочегоМеста) 
					И (    Год(Выборка.ДатаСозданияРабочегоМеста) + 2 < Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
					   ИЛИ Год(Выборка.ДатаСозданияРабочегоМеста) + 2 = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) 
					   И Месяц(Выборка.ДатаСозданияРабочегоМеста) <= Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) Тогда
					Строка[ПрефиксИмениКолонки+"G24"] = 0;
				КонецЕсли;
				Строка[ПрефиксИмениКолонки+"G23"] = Выборка.НеполноеРабочееВремя;
				Строка[ПрефиксИмениКолонки+"G26"] = Выборка.СНефиксированнымРабочимВременем;
				Строка[ПрефиксИмениКолонки+"G22"] = Выборка.СпецСтаж;
				Строка[ПрефиксИмениКолонки+"G25"] = 0;  //признак

			КонецЕсли;	

			Номер = Номер + 1;
			
		КонецЦикла;
		ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
		Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда

			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|    ЕСВФОТ.ФизическоеЛицо,
			|    ЕСВФОТ.ФизическоеЛицоПол
			|ИЗ
			|    ВТЕСВФОТ КАК ЕСВФОТ";
			ТаблицаКоличестваЗастрахованныхЛиц = Запрос.Выполнить().Выгрузить();
			
			СтруктураДанныхДекларация["R105G"+Строка(СчетчикМесяцев+3)] = ТаблицаКоличестваЗастрахованныхЛиц.Количество();
			
			НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицоПол",Перечисления.ПолФизическогоЛица.Женский));
			СтруктураДанныхДекларация["R108G"+Строка(СчетчикМесяцев+3)] = НайденныеСтроки.Количество();	
			
			НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицоПол",Перечисления.ПолФизическогоЛица.Мужской));
			СтруктураДанныхДекларация["R109G"+Строка(СчетчикМесяцев+3)] = НайденныеСтроки.Количество();	
			
		КонецЕсли;	
	КонецЦикла;	
		
	//////////////////////////////////////////////////////////////////	
	
	// ТАБЛИЦА 5
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы5];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	СтруктураРеквизитовФормы.мИдГруппы5 = "T5T1R";

    	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		
		ПараметрыПолученияСотрудников.Организация = СтруктураРеквизитовФормы.Организация;
		ПараметрыПолученияСотрудников.НачалоПериода = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		
		Если ЗарплатаКадрыРасширенная Тогда
			ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.НазначениеПенсии Или СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			ПараметрыПолученияСотрудников.СписокФизическихЛиц = СтруктураРеквизитовФормы.Сотрудники;
		КонецЕсли;
		
		ТаблицаСотрудниковОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		
		Если ЗарплатаКадрыРасширенная Тогда
			ВидДоговора = ", ВидДоговора";
		Иначе
			ВидДоговора = "";
		КонецЕсли;
		
		ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, 
				ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
				"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости, Должность, ПриказОбУвольненииНомер, ПриказОбУвольненииДата, ПриказОбУвольненииСтатьяКЗоТ, ПриказОбУвольненииСтатьяЗакона" + ВидДоговора,
				КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
				
		Запрос = Новый Запрос;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		Запрос.УстановитьПараметр("Сотрудники", СтруктураРеквизитовФормы.Сотрудники);

		Если ЗарплатаКадрыРасширенная Тогда
			Попытка
				Запрос.УстановитьПараметр("ВидДоговораГигКонтракт", Перечисления.ВидыДоговоровССотрудниками.ГигКонтракт);
			Исключение
				Запрос.УстановитьПараметр("ВидДоговораГигКонтракт", Перечисления.ВидыДоговоровССотрудниками.ПустаяСсылка());
			КонецПопытки;	
		Иначе	
			ТаблицаКадровыеДанныеСотрудников.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1)));	
			Запрос.УстановитьПараметр("ВидДоговораГигКонтракт", "ГигКонтракт");
		КонецЕсли;
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		    |	ТаблицаКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
			|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
			|	ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
			|	ТаблицаКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
			|	ТаблицаКадровыеДанныеСотрудников.ВидДоговора КАК ВидДоговора,
			|	ТаблицаКадровыеДанныеСотрудников.Должность КАК Должность,
			|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииНомер КАК ПриказОбУвольненииНомер,
			|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииДата КАК ПриказОбУвольненииДата,
			|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяЗакона КАК ПриказОбУвольненииСтатьяЗакона
			|ПОМЕСТИТЬ ВТТаблицаКадровыеДанныеСотрудников
			|ИЗ &ТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников";
		Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеСотрудников",ТаблицаКадровыеДанныеСотрудников);
		Запрос.Выполнить();
		
		Если ЗарплатаКадрыРасширенная Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			    |	КадроваяИсторияСотрудников.Период,
			    |	КадроваяИсторияСотрудников.ДействуетДо,
			    |	КадроваяИсторияСотрудников.Регистратор,
			    |	КадроваяИсторияСотрудников.ФизическоеЛицо,
			    |	КадроваяИсторияСотрудников.Должность,
			    |	КадроваяИсторияСотрудников.ВидЗанятости,
				|	КадроваяИсторияСотрудников.ВидДоговора,
			    |	КадроваяИсторияСотрудников.ВидСобытия,
			    |	КадроваяИсторияСотрудников.ДатаСозданияРабочегоМеста
				|ПОМЕСТИТЬ ВТПриемыПереводы
				|ИЗ
			    |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			    |ГДЕ
			    |	КадроваяИсторияСотрудников.Период МЕЖДУ &ДатаНач И &ДатаКон
			    |	И КадроваяИсторияСотрудников.Организация = &Организация
			    |    И (КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
			    |       ИЛИ (КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) И КадроваяИсторияСотрудников.ИзменениеДолжности) )
				|	И КадроваяИсторияСотрудников.ФизическоеЛицо В (&Сотрудники)
			    |;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала КАК ДатаНачала,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.ОснованиеПрекращения КАК СтатьяЗакона,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Дата КАК ОснованиеДата,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Номер КАК ОснованиеНомер
				|ПОМЕСТИТЬ ВТДоговораГПХ
				|ИЗ
				|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
				|
				|ГДЕ
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация
				|	И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон
				|	 ИЛИ ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
			    |	КадроваяИсторияСотрудников.Период КАК ДатаНачала,
			    |	КадроваяИсторияСотрудников.ДействуетДо КАК ДатаОкончания,
			    |	КадроваяИсторияСотрудников.Регистратор.Номер КАК НомерПриказа,
				|	КадроваяИсторияСотрудников.Регистратор.Дата КАК ДатаПриказа,
			    |	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
				|   ВЫБОР
				|   	КОГДА КадроваяИсторияСотрудников.ВидДоговора = &ВидДоговораГигКонтракт
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|			ИНАЧЕ КадроваяИсторияСотрудников.Должность 
				|	КОНЕЦ КАК Должность,
				|   ВЫБОР
				|   	КОГДА КадроваяИсторияСотрудников.ВидДоговора = &ВидДоговораГигКонтракт
				|			ТОГДА 3
				|			ИНАЧЕ КадроваяИсторияСотрудников.ВидЗанятости 
				|	КОНЕЦ КАК ВидЗанятости,
			    |	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			    |	КадроваяИсторияСотрудников.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
				|	"""" КАК СтатьяЗакона,
				|   0 КАК ДоговорГПХПоМестуРаботы
				|ПОМЕСТИТЬ ВТКадровыеСобытия
				|ИЗ
			    |	ВТПриемыПереводы КАК КадроваяИсторияСотрудников
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
			    |ВЫБРАТЬ
				|   ДАТАВРЕМЯ(1,1,1),
				|	ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения,
				|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииНомер,
				|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииДата,
				|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо,
				|   ВЫБОР
				|   	КОГДА ТаблицаКадровыеДанныеСотрудников.ВидДоговора = &ВидДоговораГигКонтракт
				|			ТОГДА НЕОПРЕДЕЛЕНО
				|			ИНАЧЕ ТаблицаКадровыеДанныеСотрудников.Должность 
				|	КОНЕЦ КАК Должность,
				|   ВЫБОР
				|   	КОГДА ТаблицаКадровыеДанныеСотрудников.ВидДоговора = &ВидДоговораГигКонтракт
				|			ТОГДА 3
				|			ИНАЧЕ ТаблицаКадровыеДанныеСотрудников.ВидЗанятости 
				|	КОНЕЦ КАК ВидЗанятости,
				|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение),
				|   НЕОПРЕДЕЛЕНО,
				|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяЗакона,
				|	0
				|ИЗ ВТТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
				|ГДЕ
				|   ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения  МЕЖДУ &ДатаНач И &ДатаКон 
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|   ВЫБОР 
				|    КОГДА ДоговораГПХ.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон 
				|     ТОГДА ДоговораГПХ.ДатаНачала 
				|     ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
				|   КОНЕЦ,
				|   ВЫБОР 
				|    КОГДА ДоговораГПХ.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон 
				|     ТОГДА ДоговораГПХ.ДатаОкончания 
				|     ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
				|   КОНЕЦ,
				|	ДоговораГПХ.ОснованиеНомер,
				|	ДоговораГПХ.ОснованиеДата,
				|	ДоговораГПХ.ФизическоеЛицо,
				|   НЕОПРЕДЕЛЕНО,
				|   3,
				|   НЕОПРЕДЕЛЕНО,
				|   НЕОПРЕДЕЛЕНО,
				|	ДоговораГПХ.СтатьяЗакона,
				|   ВЫБОР
				|    КОГДА ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо ЕСТЬ NULL
				|		ТОГДА 0
				|		ИНАЧЕ 1
				|   КОНЕЦ
				|ИЗ
				|	ВТДоговораГПХ КАК ДоговораГПХ
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|   ВТТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
				|   ПО ДоговораГПХ.ФизическоеЛицо = ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо
				|    И (ДоговораГПХ.ДатаНачала < ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения 
				|      ИЛИ ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1))
				|    И ДоговораГПХ.ДатаНачала >= ТаблицаКадровыеДанныеСотрудников.ДатаПриема 
				|
				|";
		Иначе
			Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") = Истина Тогда
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			    |	КадроваяИсторияСотрудников.Период,
			    |	КадроваяИсторияСотрудников.Регистратор,
			    |	КадроваяИсторияСотрудников.ФизическоеЛицо,
				|	КадроваяИсторияСотрудников.Сотрудник,
			    |	КадроваяИсторияСотрудников.Должность,
			    |	КадроваяИсторияСотрудников.ВидЗанятости,
			    |	КадроваяИсторияСотрудников.ВидСобытия,
			    |	КадроваяИсторияСотрудников.ДатаСозданияРабочегоМеста
				|ПОМЕСТИТЬ ВТПриемыПереводы
				|ИЗ
			    |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			    |ГДЕ
			    |	КадроваяИсторияСотрудников.Период МЕЖДУ &ДатаНач И &ДатаКон
			    |	И КадроваяИсторияСотрудников.Организация = &Организация
			    |    И (КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
			    |       ИЛИ (КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) И КадроваяИсторияСотрудников.ИзменениеДолжности) )
				|	И КадроваяИсторияСотрудников.ФизическоеЛицо В (&Сотрудники)
			    |;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
				|	ЕСВСотрудников.Сотрудник КАК Сотрудник
				|ПОМЕСТИТЬ ВТДоговораГПХ
				|ИЗ
				|	РегистрСведений.ЕСВСотрудников КАК ЕСВСотрудников
				|
				|ГДЕ
				|	ЕСВСотрудников.Сотрудник.ГоловнаяОрганизация = &Организация
				|	И ЕСВСотрудников.КатегорияЕСВ.ВидЕСВ = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
			    |	КадроваяИсторияСотрудников.Период КАК ДатаНачала,
			    |	ДАТАВРЕМЯ(1,1,1) КАК ДатаОкончания,
			    |	КадроваяИсторияСотрудников.Регистратор.Номер КАК НомерПриказа,
				|	КадроваяИсторияСотрудников.Регистратор.Дата КАК ДатаПриказа,
			    |	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			    |	ВЫБОР
				|		КОГДА ДоговораГПХ.Сотрудник ЕСТЬ NULL
				|		 ТОГДА КадроваяИсторияСотрудников.Должность
				|		 ИНАЧЕ НЕОПРЕДЕЛЕНО
				|   КОНЕЦ  КАК Должность,
				|	ВЫБОР
				|		КОГДА ДоговораГПХ.Сотрудник ЕСТЬ NULL
				|		 ТОГДА КадроваяИсторияСотрудников.ВидЗанятости
				|		 ИНАЧЕ 3
				|   КОНЕЦ  КАК ВидЗанятости, 
			    |	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			    |	КадроваяИсторияСотрудников.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
				|	"""" КАК СтатьяЗакона,
				|   ВЫБОР
				|		КОГДА ДоговораГПХ.Сотрудник ЕСТЬ NULL ИЛИ КадроваяИсторияСотрудников.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство) 
				|		 ТОГДА 0
				|		 ИНАЧЕ 1
				|   КОНЕЦ КАК ДоговорГПХПоМестуРаботы
				|ПОМЕСТИТЬ ВТКадровыеСобытия
				|ИЗ
			    |	ВТПриемыПереводы КАК КадроваяИсторияСотрудников
				|   ЛЕВОЕ СОЕДИНЕНИЕ
				|	ВТДоговораГПХ КАК ДоговораГПХ
				|   ПО КадроваяИсторияСотрудников.Сотрудник = ДоговораГПХ.Сотрудник
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
			    |ВЫБРАТЬ
				|   ДАТАВРЕМЯ(1,1,1),
				|	ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения,
				|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииНомер,
				|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииДата,
				|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо,
				|	ВЫБОР
				|		КОГДА ДоговораГПХ.Сотрудник ЕСТЬ NULL
				|		 ТОГДА ТаблицаКадровыеДанныеСотрудников.Должность
				|		 ИНАЧЕ НЕОПРЕДЕЛЕНО
				|   КОНЕЦ,
				|	ВЫБОР
				|		КОГДА ДоговораГПХ.Сотрудник ЕСТЬ NULL
				|		 ТОГДА ТаблицаКадровыеДанныеСотрудников.ВидЗанятости
				|		 ИНАЧЕ 3
				|   КОНЕЦ,
				|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение),
				|   НЕОПРЕДЕЛЕНО,
				|	ТаблицаКадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяЗакона,
				|	ВЫБОР
				|		КОГДА ДоговораГПХ.Сотрудник ЕСТЬ NULL ИЛИ ТаблицаКадровыеДанныеСотрудников.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство) 
				|		 ТОГДА 0
				|		 ИНАЧЕ 1
				|   КОНЕЦ
				|ИЗ ВТТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
				|   ЛЕВОЕ СОЕДИНЕНИЕ
				|	ВТДоговораГПХ КАК ДоговораГПХ
				|   ПО ТаблицаКадровыеДанныеСотрудников.Сотрудник = ДоговораГПХ.Сотрудник
                |
				|ГДЕ
				|   ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения  МЕЖДУ &ДатаНач И &ДатаКон
				|";
			Иначе
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|   ВЫБОР 
				|		КОГДА КадроваяИсторияСотрудников.ДатаПриема МЕЖДУ &ДатаНач И &ДатаКон 
				|			ТОГДА КадроваяИсторияСотрудников.ДатаПриема 
				|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
				|	КОНЕЦ КАК ДатаНачала,
				|   ВЫБОР 
				|		КОГДА КадроваяИсторияСотрудников.ДатаУвольнения МЕЖДУ &ДатаНач И &ДатаКон 
				|			ТОГДА КадроваяИсторияСотрудников.ДатаУвольнения 
				|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
				|	КОНЕЦ КАК ДатаОкончания,
				|	"""" КАК НомерПриказа,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриказа,
				|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
				|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
				|	КадроваяИсторияСотрудников.ТекущаяДолжность КАК Должность,
				|	КадроваяИсторияСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
				|	НЕОПРЕДЕЛЕНО КАК ВидСобытия,
			    |	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСозданияРабочегоМеста
				|ПОМЕСТИТЬ ВТПриемыПереводы
				|ИЗ
				|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК КадроваяИсторияСотрудников
				|ГДЕ
				|	КадроваяИсторияСотрудников.ТекущаяОрганизация = &Организация
				|	И (КадроваяИсторияСотрудников.ДатаПриема МЕЖДУ &ДатаНач И &ДатаКон
				|			ИЛИ КадроваяИсторияСотрудников.ДатаУвольнения МЕЖДУ &ДатаНач И &ДатаКон)
				|				И КадроваяИсторияСотрудников.ФизическоеЛицо В (&Сотрудники)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТекущиеКадровыеДанныеСотрудников.ДатаНачала КАК ДатаНачала,
				|	ТекущиеКадровыеДанныеСотрудников.ДатаОкончания КАК ДатаОкончания,
				|	"""" КАК НомерПриказа,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриказа,
				|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
				|   ТекущиеКадровыеДанныеСотрудников.Должность КАК Должность,
				|   ТекущиеКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости, 
				|	"""" КАК ВидСобытия,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСозданияРабочегоМеста,
				|	"""" КАК СтатьяЗакона,
				|	0 КАК ДоговорГПХПоМестуРаботы 
				|ПОМЕСТИТЬ ВТКадровыеСобытия
				|ИЗ
				|	ВТПриемыПереводы КАК ТекущиеКадровыеДанныеСотрудников
				|";
			КонецЕсли	
		КонецЕсли;	
		
		Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудников.ФизическоеЛицо В (&Сотрудники)", ""); 
		КонецЕсли;
	
		Запрос.Выполнить();
		
		//Таблица социальных отпусков по состояниям
		Если ЗарплатаКадрыРасширенная Тогда
			
			Запрос.Текст = "ВЫБРАТЬ	
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	&ДатаНач КАК ДатаНачала,
			|	&ДатаКон КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТСотрудникиОрганизацииТолькоОсновные
			|ИЗ ВТТаблицаКадровыеДанныеСотрудников КАК СотрудникиОрганизации
			|ГДЕ
			|	СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
			|	ИЛИ СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)	
			|";
			
			Запрос.Выполнить();
			
			МодульСостоянияСотрудников = ОбщегоНазначения.ОбщийМодуль("СостоянияСотрудников");
			МодульСостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиОрганизацииТолькоОсновные");
			
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СостоянияСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|   ВЫБОР 
			|   	КОГДА СостоянияСотрудников.Начало МЕЖДУ &ДатаНач И &ДатаКон
			|			ТОГДА СостоянияСотрудников.Начало
			|       ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
			|   КОНЕЦ КАК ДатаНачала,
			|   ВЫБОР 
			|   	КОГДА СостоянияСотрудников.Окончание МЕЖДУ &ДатаНач И &ДатаКон
			|			ТОГДА СостоянияСотрудников.Окончание
			|       ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
			|   КОНЕЦ КАК ДатаОкончания,
			|   ВЫБОР
			|   	КОГДА СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком6лет)
			|			ТОГДА 4
			|   	КОГДА СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам)
			|			ТОГДА 5
			|		ИНАЧЕ 6
			|	КОНЕЦ КАК Категория,
			|	СостоянияСотрудников.ОснованиеДата КАК ОснованиеДата,
			|	СостоянияСотрудников.ОснованиеНомер КАК ОснованиеНомер
			|ПОМЕСТИТЬ ВТСоциальныеОтпуска
			|ИЗ
			|	ВТПериодыСостоянийСотрудников КАК СостоянияСотрудников
			|ГДЕ
			|	СостоянияСотрудников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком6лет),ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком),ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам))
			|   И (СостоянияСотрудников.Начало МЕЖДУ &ДатаНач И &ДатаКон
			|       ИЛИ СостоянияСотрудников.Окончание МЕЖДУ &ДатаНач И &ДатаКон)
			|";
			Если Метаданные.РегистрыСведений.СостоянияСотрудников.Ресурсы.Найти("ДокументОснование") = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостоянияСотрудников.ОснованиеДата", """""");	
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостоянияСотрудников.ОснованиеНомер", """""");	
			КонецЕсли;
			
		Иначе	
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|   NULL КАК ДатаНачала,
			|   NULL КАК ДатаОкончания,
			|   NULL КАК ОснованиеДата,
			|   NULL КАК ОснованиеНомер,
			|   0 КАК Категория
			|ПОМЕСТИТЬ ВТСоциальныеОтпуска
			|";

		КонецЕсли;	

		Запрос.Выполнить();		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		    |	КадровыеСобытия.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
		    |	ВТКадровыеСобытия КАК КадровыеСобытия
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
		    |	СоциальныеОтпуска.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
		    |	ВТСоциальныеОтпуска КАК СоциальныеОтпуска";
		СписокФизЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		ТаблицаКадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, 
			СписокФизЛиц, 
			"Фамилия, Имя, Отчество, КодПоДРФО, Страна", 
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));

		Запрос.Текст = "ВЫБРАТЬ
			|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ФизическиеЛица.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
			|			ИЛИ ЕСТЬNULL(ФизическиеЛица.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК Гражданин,
			|	ФизическиеЛица.Фамилия КАК Фамилия,
			|	ФизическиеЛица.Имя КАК Имя,
			|	ФизическиеЛица.Отчество КАК Отчество,
			|	ФизическиеЛица.КодПоДРФО КАК КодПоДРФО
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ &ТаблицаКадровыеДанныеФизическихЛиц КАК ФизическиеЛица
			|
			|ИНДЕКСИРОВАТЬ ПО 
			|	ФизическоеЛицо";
		Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеФизическихЛиц",ТаблицаКадровыеДанныеФизическихЛиц);
		Запрос.Выполнить();
		
		
		Запрос.Текст = "ВЫБРАТЬ
		    |	КадровыеСобытия.ФизическоеЛицо КАК ФизическоеЛицо,
			|   ФизическиеЛица.Гражданин КАК Гражданин,
			|	КадровыеСобытия.ДоговорГПХПоМестуРаботы КАК ГПХПоОснМестуРаботы,
			|   ВЫБОР
			|    КОГДА КадровыеСобытия.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) ИЛИ КадровыеСобытия.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство) 
			|     ТОГДА 1
			|    КОГДА КадровыеСобытия.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство) 
			|     ТОГДА 2
            |    КОГДА КадровыеСобытия.ВидЗанятости = 3 
			|     ТОГДА 3
			|     ИНАЧЕ 0
			|   КОНЕЦ КАК Категория,
			|   ФизическиеЛица.КодПоДРФО КАК КодПоДРФО,
			|   ФизическиеЛица.Фамилия КАК Фамилия,
			|   ФизическиеЛица.Имя КАК Имя,
			|   ФизическиеЛица.Отчество КАК Отчество,
			|	КадровыеСобытия.ДатаНачала КАК ДатаНачала,
		    |	КадровыеСобытия.ДатаОкончания КАК ДатаОкончания,
			|   ВЫБОР 
			|   	КОГДА КадровыеСобытия.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
			|   	 ТОГДА КадровыеСобытия.ДатаОкончания
			|   	 ИНАЧЕ КадровыеСобытия.ДатаНачала
			|   КОНЕЦ КАК ДатаСортировки,
			|   ВЫБОР
			|    КОГДА КадровыеСобытия.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство) 
			|     ТОГДА 1
			|     ИНАЧЕ 0
			|   КОНЕЦ КАК ВнутреннееСовместительство,
			|   ВЫБОР
			|    КОГДА КадровыеСобытия.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) 
			|     ТОГДА 1
			|     ИНАЧЕ 0
			|   КОНЕЦ КАК Перемещение,
			|   Должности.НаименованиеПоКП КАК НаименованиеПоКП,
			|   Должности.КодКП КАК КодКП,
			|   Должности.Наименование КАК Должность,
		    |	КадровыеСобытия.НомерПриказа КАК НомерПриказа,
			|	КадровыеСобытия.ДатаПриказа КАК ДатаПриказа,
		    |	КадровыеСобытия.СтатьяЗакона КАК СтатьяЗакона,
			|   КадровыеСобытия.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста
			|ИЗ
		    |	ВТКадровыеСобытия КАК КадровыеСобытия
			|   ЛЕВОЕ СОЕДИНЕНИЕ
			|   ВТФизическиеЛица КАК ФизическиеЛица
			|   ПО КадровыеСобытия.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо 
			|   ЛЕВОЕ СОЕДИНЕНИЕ
			|   Справочник.Должности КАК Должности
			|   ПО КадровыеСобытия.Должность = Должности.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СоциальныеОтпуска.ФизическоеЛицо,
			|   ФизическиеЛица.Гражданин,
			|	0,
			|	СоциальныеОтпуска.Категория,
			|   ФизическиеЛица.КодПоДРФО,
			|   ФизическиеЛица.Фамилия,
			|   ФизическиеЛица.Имя,
			|   ФизическиеЛица.Отчество,
			|	СоциальныеОтпуска.ДатаНачала,
			|	СоциальныеОтпуска.ДатаОкончания,
			|   ВЫБОР 
			|   	КОГДА СоциальныеОтпуска.ДатаНачала = ДАТАВРЕМЯ(1,1,1)
			|   	 ТОГДА СоциальныеОтпуска.ДатаОкончания
			|   	 ИНАЧЕ СоциальныеОтпуска.ДатаНачала
			|   КОНЕЦ,
			|   0,
			|   0,
			|   """",
			|   """",
			|   """",
			|	СоциальныеОтпуска.ОснованиеНомер,
			|	СоциальныеОтпуска.ОснованиеДата,
			|	"""",
			|	ДАТАВРЕМЯ(1,1,1)
			|ИЗ
			|	ВТСоциальныеОтпуска КАК СоциальныеОтпуска
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
			|		ПО СоциальныеОтпуска.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	Фамилия,
			|	Имя,
			|	Отчество,
			|	ДатаСортировки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Номер = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Номер > 0 Тогда
			Строка = СтруктураГруппы.Добавить();
		Иначе
			Строка = СтруктураГруппы[0];
		КонецЕсли;
		
		ПриемУвольнениеОтдельнымиСтроками = Ложь;
		Если СтруктураРеквизитовФормы.ОпцияПриемУвольнениеОтдельнымиСтроками И ЗначениеЗаполнено(Выборка.ДатаНачала) И ЗначениеЗаполнено(Выборка.ДатаОкончания)
			И Месяц(Выборка.ДатаНачала) < Месяц(Выборка.ДатаОкончания) Тогда
			ПриемУвольнениеОтдельнымиСтроками = Истина
		КонецЕсли;	
		
		Строка["T5T1RXXXXG5"]  = Выборка.Гражданин;
		Строка["T5T1RXXXXG6"]  = Выборка.ГПХПоОснМестуРаботы;
		Строка["T5T1RXXXXG7"]  = Выборка.Категория;
		Строка["T5T1RXXXXG8S"] = ОбработатьДРФО(Выборка.КодПоДРФО);
		
		Строка["T5T1RXXXXG91S"] = Выборка.Фамилия;
		Строка["T5T1RXXXXG92S"] = Выборка.Имя;
		Строка["T5T1RXXXXG93S"] = Выборка.Отчество;
		Если ЗначениеЗаполнено(Выборка.ДатаНачала) Тогда
			Строка["T5T1RXXXXG101D"] = Выборка.ДатаНачала;
			Если ЗначениеЗаполнено(Выборка.ДатаСозданияРабочегоМеста) Тогда
				Строка["T5T1RXXXXG18D"] = Выборка.ДатаСозданияРабочегоМеста;;
			КонецЕсли;		
		КонецЕсли;	
		Если Не ПриемУвольнениеОтдельнымиСтроками Тогда
			Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Строка["T5T1RXXXXG102D"] = Выборка.ДатаОкончания;
				Строка["T5T1RXXXXG17S"] = Выборка.СтатьяЗакона;
			КонецЕсли;
		КонецЕсли;
		
		Строка["T5T1RXXXXG11"]  = Выборка.ВнутреннееСовместительство;
		Строка["T5T1RXXXXG12"]  = Выборка.Перемещение;
		Строка["T5T1RXXXXG13S"] = СокрЛП(Выборка.НаименованиеПоКП);
		Строка["T5T1RXXXXG14S"] = СокрЛП(Выборка.КодКП);
		Строка["T5T1RXXXXG15S"] = СокрЛП(Выборка.Должность);
		
		НомерПриказаДляПечати = "";
		Если ЗначениеЗаполнено(Выборка.НомерПриказа) И ЗначениеЗаполнено(Выборка.ДатаПриказа) Тогда
			Строка["T5T1RXXXXG16S"] = "№ " + РегламентированнаяОтчетностьКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерПриказа, Истина, Истина) + " від " + Формат(Выборка.ДатаПриказа, "Л=uk; ДФ='dd.MM.yyyy р.'"); 
			НомерПриказаДляПечати = Строка["T5T1RXXXXG16S"]; 
		КонецЕсли;	
	
		Номер = Номер + 1;
		
		Если ПриемУвольнениеОтдельнымиСтроками Тогда
			Строка = СтруктураГруппы.Добавить();
			Строка["T5T1RXXXXG5"]  = Выборка.Гражданин;
			Строка["T5T1RXXXXG6"]  = Выборка.ГПХПоОснМестуРаботы;
			Строка["T5T1RXXXXG7"]  = Выборка.Категория;
			Строка["T5T1RXXXXG8S"] = ОбработатьДРФО(Выборка.КодПоДРФО);
			
			Строка["T5T1RXXXXG91S"] = Выборка.Фамилия;
			Строка["T5T1RXXXXG92S"] = Выборка.Имя;
			Строка["T5T1RXXXXG93S"] = Выборка.Отчество;
			
			Строка["T5T1RXXXXG102D"] = Выборка.ДатаОкончания;
			Строка["T5T1RXXXXG17S"] = Выборка.СтатьяЗакона;
			Строка["T5T1RXXXXG11"]  = Выборка.ВнутреннееСовместительство;
			Строка["T5T1RXXXXG12"]  = Выборка.Перемещение;
			
			Строка["T5T1RXXXXG13S"] = СокрЛП(Выборка.НаименованиеПоКП);
			Строка["T5T1RXXXXG14S"] = СокрЛП(Выборка.КодКП);
			Строка["T5T1RXXXXG15S"] = СокрЛП(Выборка.Должность);
			Если ЗначениеЗаполнено(Выборка.НомерПриказа) И ЗначениеЗаполнено(Выборка.ДатаПриказа) Тогда
				Строка["T5T1RXXXXG16S"] = НомерПриказаДляПечати;
			КонецЕсли;	
			Номер = Номер + 1;
		КонецЕсли
		
	КонецЦикла;
	ЗначениеВРеквизитФормы(СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы5);
	
	Заполнить4ДФ(ПараметрыЗаполненияЗвит1С, ТаблицаКадровыеДанныеСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура Заполнить4ДФ(ПараметрыЗаполненияЗвит1С, ТаблицаКадровыеДанныеСотрудников)
	перем ИсходноеКоличествоСтрокГруппы;
	
	Если СтруктураРеквизитовФормы.НазначениеПенсии Или СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
		Возврат
	КонецЕсли;
	
	КолМесяцевВПериоде = 3;
	Если СтруктураРеквизитовФормы.мПериодичность = ЭтаФорма.ПеречислениеПериодичностьМесяц Тогда
		КолМесяцевВПериоде = 1;
	КонецЕсли;
	
	НомерМесяца = 0;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.НомерМесяца) Тогда 
		КолМесяцевВПериоде = 1;
		НомерМесяца = СтруктураРеквизитовФормы.НомерМесяца-1;
	КонецЕсли;	
	
	Для СчетчикМесяцев = 0 по КолМесяцевВПериоде-1 Цикл 
			
		НачалоВЦикле = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СчетчикМесяцев+НомерМесяца);
		КонецВЦикле = КонецМесяца(НачалоВЦикле);

		ИмяГруппы = "T4"+Строка(СчетчикМесяцев+1)+"T1R";
		ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
		СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		УсловиеНаПодразделение = "";
		Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Подразделение) Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") = Истина Тогда

					УсловиеНаПодразделение	= "И 
											   |(ВЫБОР КОГДА Контрагент ССЫЛКА Справочник.ФизическиеЛица
											   |	ТОГДА
											   |		Контрагент В (ВЫБРАТЬ
											   |						РаботникиОрганизацийСрезПоследних.ФизическоеЛицо
					                      	   |					 ИЗ
					                      	   |						РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ДатаКонцаКвартала, ГоловнаяОрганизация = &Организация) КАК РаботникиОрганизацийСрезПоследних
					                      	   |					 ГДЕ
											   |						НЕ ВидЗанятости = Значение(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
											   |
											   |						И (РаботникиОрганизацийСрезПоследних.Подразделение В ИЕРАРХИИ (&Подразделение)
					                      	   |						ИЛИ РаботникиОрганизацийСрезПоследних.Подразделение = &Подразделение))
											   |	ИНАЧЕ НЕ &НеВключатьЧПников
											   |КОНЕЦ)";
				Иначе
					
					УсловиеНаПодразделение	= "И 
											   |(ВЫБОР КОГДА Контрагент ССЫЛКА Справочник.ФизическиеЛица
											   |	ТОГДА
											   |		Контрагент В (ВЫБРАТЬ
											   |						РаботникиОрганизацийСрезПоследних.ФизическоеЛицо
					                      	   |					 ИЗ
					                      	   |						РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РаботникиОрганизацийСрезПоследних
					                      	   |					 ГДЕ
											   |						РаботникиОрганизацийСрезПоследних.ГоловнаяОрганизация = &Организация
											   |						И (    РаботникиОрганизацийСрезПоследних.ТекущееПодразделение В ИЕРАРХИИ (&Подразделение)
											   |						   ИЛИ РаботникиОрганизацийСрезПоследних.ТекущееПодразделение = &Подразделение))
											   |	ИНАЧЕ НЕ &НеВключатьЧПников
											   |КОНЕЦ)";
					
				КонецЕсли;									   
											   
			КонецЕсли;
		Иначе
			УсловиеНаПодразделение	= "И 
									  |ОбособленноеПодразделение  В ИЕРАРХИИ (&ОбособленноеПодразделение)";	

		КонецЕсли;

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			Запрос.УстановитьПараметр("Подразделение", СтруктураРеквизитовФормы.Подразделение)
		Иначе	
			Если СтруктураРеквизитовФормы.ОбособленноеПодразделение = Неопределено Тогда
				Запрос.УстановитьПараметр("ОбособленноеПодразделение", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
			Иначе	
				Запрос.УстановитьПараметр("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
			КонецЕсли;
		КонецЕсли;	
		Запрос.УстановитьПараметр("НеВключатьЧПников", СтруктураРеквизитовФормы.НеВключатьЧПников);
		Запрос.УстановитьПараметр("ДатаКонцаКвартала", КонецВЦикле);
		Запрос.УстановитьПараметр("ДатаНач", НачалоВЦикле);
		Запрос.УстановитьПараметр("ДатаКон", КонецВЦикле);
		Запрос.УстановитьПараметр("ПрошлыйМесяц", ДобавитьМесяц(НачалоВЦикле,-1));
		
		Запрос.Текст = "ВЫБРАТЬ
		             |	МИНИМУМ(ВидыДоходовНДФЛ.Код) КодНДФЛ,
		             |	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021.Код КАК КодВС
					 |ПОМЕСТИТЬ ВТСоответствиеВС
					 |ИЗ
		             |	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
					 |ГДЕ ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021 <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
					 |СГРУППИРОВАТЬ ПО
					 |	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021.Код";
		Запрос.Выполнить();
		
		// получим данные по начислениям/перечислениям в разрезе налоговых периодов, но без учета льгот
		// Далее мы определеям по последней записи в регистре (по сотруднику в разрезе налоговых периодов) какая же льгота применялась на самом деле
		// далее добавим в таблицу по начислениям/перечислениям информацию по применявшимся льготам
		// далее свернем таблицу в разрезе льгот (так как налоговый период нам в отчете не нужен).
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
			|	ВЫБОР КОГДА ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЭтоВоенныйСбор,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходПриход,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходРасход,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПриход,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогРасход
			|ПОМЕСТИТЬ ТаблицаНДФЛБезЛьготПредварительная
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
			|	ГДЕ 
			|		 Период МЕЖДУ &ДатаНач И &ДатаКон
			|  	   И Организация = &Организация
			|	   " + УсловиеНаПодразделение + "
			|
			|   СГРУППИРОВАТЬ ПО
			|		ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
			|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
			|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ,
			|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ОблагаетсяВоеннымСбором2021,
			|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
			|		ВЫБОР КОГДА ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ 
			|";
		
			Если НЕ СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны Тогда
			
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ //добавим выплаты дохода вида 01 в следующем месяце за последний месяц квартала
				|
				|ВЫБРАТЬ
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
				|	0,
				|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
				|	0,
				|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
				|ИЗ
				|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
				|	ГДЕ 
				|		 Период МЕЖДУ &ДатаКонМесяца И &ДатаВыплатыКон
				|  	   И Организация = &Организация
				|      И ДоходНДФЛ В (&ЗП) 
				|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ДатаНач
				|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
				|СГРУППИРОВАТЬ ПО 
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ОблагаетсяВоеннымСбором2021,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ
				|
				|ОБЪЕДИНИТЬ ВСЕ //удалим выплаты дохода вида 01 в первом месяце квартала за последний месяц прошлого квартала
				|
				|ВЫБРАТЬ
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
				|	0,
				|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
				|	0,
				|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
				|ИЗ
				|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
				|	ГДЕ 
				|		 Период МЕЖДУ &ДатаНачМесяца И &ДатаВыплатыНач
				|  	   И Организация = &Организация
				|      И ДоходНДФЛ В (&ЗП) 
				|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПрошлыйМесяц
				|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
				|СГРУППИРОВАТЬ ПО 
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ОблагаетсяВоеннымСбором2021,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|   ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ
				| 
				|";
				
			КонецЕсли;
		Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ",
			"ВзаиморасчетыПоНДФЛОбороты.ФизическоеЛицо");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрНакопления.ВзаиморасчетыПоНДФЛ","РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ");	
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)",
			"ВзаиморасчетыПоНДФЛОбороты.ГруппаУчетаУдержаний = ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ВоенныйСбор)");	
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)",
			"ВзаиморасчетыПоНДФЛОбороты.ГруппаУчетаУдержаний = ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ВоенныйСбор)");	
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код","ВзаиморасчетыПоНДФЛОбороты.КодДохода.Код");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ","ВзаиморасчетыПоНДФЛОбороты.КодДохода");		
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ДоходНДФЛ В (&ЗП)", "И КодДохода В (&ЗП)");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачМесяца", НачалоВЦикле);
		Запрос.УстановитьПараметр("ДатаКонМесяца", КонецВЦикле + 1);
		
		Запрос.УстановитьПараметр("ДатаВыплатыНач", КонецДня(НачалоВЦикле+СтруктураРеквизитовФормы.ЧислоВыплатыЗП*86400-1));
		Запрос.УстановитьПараметр("ДатаВыплатыКон", КонецДня(КонецВЦикле+СтруктураРеквизитовФормы.ЧислоВыплатыЗП*86400));
		
		ЗП = Новый Массив();
		Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01ГПХ);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор102);
			Попытка
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.КодГиг);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСборГиг);
			Исключение
			КонецПопытки;	
		Иначе
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код101);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код101ФСС);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код102);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСборФСС);
			ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор102);
			Попытка
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.КодГиг);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСборГиг);
			Исключение
			КонецПопытки;	
		КонецЕсли;	
		Запрос.УстановитьПараметр("ЗП", ЗП);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаНДФЛБезЛьгот.Контрагент КАК Контрагент,
		|   ВЫБОР
		|	 КОГДА НЕ ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
		|	  ТОГДА ТаблицаНДФЛБезЛьгот.ДоходНДФЛ
		|     ИНАЧЕ ЕСТЬNULL(СоответствиеВС.КодНДФЛ,""101"")
		|   КОНЕЦ КАК ДоходНДФЛ,
		|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод КАК НалоговыйПериод,
		|	ВЫБОР
		|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
		|	  ТОГДА 0
		|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.ДоходПриход
		|	КОНЕЦ КАК ДоходПриход,
		|	ВЫБОР
		|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
		|	  ТОГДА 0
		|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.ДоходРасход
		|	КОНЕЦ КАК ДоходРасход,
		|	ВЫБОР
		|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
		|	  ТОГДА 0
		|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогПриход
		|	КОНЕЦ КАК НалогПриход,
		|	ВЫБОР
		|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
		|	  ТОГДА 0
		|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогРасход
		|	КОНЕЦ КАК НалогРасход,
		|	ВЫБОР
		|	 КОГДА НЕ ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
		|	  ТОГДА 0
		|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогРасход
		|	КОНЕЦ КАК ВСРасход,
		|	ВЫБОР
		|	 КОГДА НЕ ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
		|	  ТОГДА 0
		|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогПриход
		|	КОНЕЦ КАК ВСПриход
		|ПОМЕСТИТЬ ТаблицаНДФЛВСБезЛьгот
		|ИЗ
		|	ТаблицаНДФЛБезЛьготПредварительная КАК ТаблицаНДФЛБезЛьгот
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеВС КАК СоответствиеВС
		|		ПО ТаблицаНДФЛБезЛьгот.ДоходНДФЛ = СоответствиеВС.КодВС
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаНДФЛБезЛьгот.Контрагент КАК Контрагент,
		|   ТаблицаНДФЛБезЛьгот.ДоходНДФЛ КАК ДоходНДФЛ,
		|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод КАК НалоговыйПериод,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход) КАК ДоходПриход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходРасход) КАК ДоходРасход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход) КАК НалогПриход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.НалогРасход) КАК НалогРасход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ВСРасход) КАК ВСРасход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ВСПриход) КАК ВСПриход
		|ПОМЕСТИТЬ ТаблицаНДФЛБезЛьгот
		|ИЗ
		|	ТаблицаНДФЛВСБезЛьгот КАК ТаблицаНДФЛБезЛьгот
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНДФЛБезЛьгот.Контрагент,
		|   ТаблицаНДФЛБезЛьгот.ДоходНДФЛ,
		|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод
		|";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		// получим информацию по льготам
		Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			Запрос.Текст = "
			|		ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|				ВзаиморасчетыПоНДФЛ.Контрагент КАК Контрагент,
			|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
			|			    ВзаиморасчетыПоНДФЛ.НалоговыйПериод  КАК НалоговыйПериод,
			|				ВзаиморасчетыПоНДФЛ.Период КАК ПериодАктуальнойЛьготы,
			|				ВзаиморасчетыПоНДФЛ.Льгота КАК Льгота
			| 		ПОМЕСТИТЬ ВзаиморасчетыПоНДФЛВСПолная
			|		ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
			|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНДФЛБезЛьгот КАК НДФЛБезЛьгот
			|       	ПО ВзаиморасчетыПоНДФЛ.Контрагент = НДФЛБезЛьгот.Контрагент
			|           	И  ВзаиморасчетыПоНДФЛ.НалоговыйПериод = НДФЛБезЛьгот.НалоговыйПериод 
			|		ГДЕ	
			|			ВзаиморасчетыПоНДФЛ.Период <= &ДатаКон
			|			И	ВзаиморасчетыПоНДФЛ.Организация = &Организация
			|				И ВзаиморасчетыПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|  	   			И   ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента <> ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
			|       ИНДЕКСИРОВАТЬ ПО
			|			Контрагент,
			|           НалоговыйПериод
			|
			|;
			|		ВЫБРАТЬ
			|			ВЫБОР КОГДА НДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА НДФЛ.Контрагент.ФизическоеЛицо ИНАЧЕ НДФЛ.Контрагент КОНЕЦ КАК Контрагент,
			|			НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
			|			НДФЛ.ДоходНДФЛ.Код КАК ДоходНДФЛ,
			|			МАКСИМУМ(ЕСТЬNULL(НДФЛЛьготы.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))) КАК Льгота,
			|           НДФЛЛьготы.Льгота.ГруппаЛьгот   КАК ГруппаЛьгот,
			|           НДФЛЛьготы.Льгота.Льгота1 		КАК Льгота1,
			|           НДФЛЛьготы.Льгота.Льгота2 		КАК Льгота2
			|		ПОМЕСТИТЬ  ТаблицаЛьгот
			|		ИЗ (
			|			ВЫБРАТЬ
			|				ВзаиморасчетыПоНДФЛ.Контрагент КАК Контрагент,
			|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
			|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
			|				МАКСИМУМ(ВзаиморасчетыПоНДФЛ.ПериодАктуальнойЛьготы) КАК ПериодАктуальнойЛьготы
			|			ИЗ ВзаиморасчетыПоНДФЛВСПолная КАК ВзаиморасчетыПоНДФЛ 
			|			СГРУППИРОВАТЬ ПО
			|				ВзаиморасчетыПоНДФЛ.Контрагент,
			|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ,
			|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ)
			|   		)КАК НДФЛ
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВзаиморасчетыПоНДФЛВСПолная КАК НДФЛЛьготы
			|		ПО		
			|			НЕ НДФЛ.НалоговыйПериод ЕСТЬ NULL 
			|			И	НДФЛЛьготы.Контрагент = НДФЛ.Контрагент
			|			И	НДФЛЛьготы.ДоходНДФЛ = НДФЛ.ДоходНДФЛ
			|		И	НАЧАЛОПЕРИОДА(НДФЛЛьготы.НалоговыйПериод, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НДФЛ.НалоговыйПериод, МЕСЯЦ)
			|			И	НДФЛЛьготы.ПериодАктуальнойЛьготы = НДФЛ.ПериодАктуальнойЛьготы
			|		СГРУППИРОВАТЬ ПО 
			|			ВЫБОР КОГДА НДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА НДФЛ.Контрагент.ФизическоеЛицо ИНАЧЕ НДФЛ.Контрагент КОНЕЦ,
			|			НДФЛ.НалоговыйПериод,
			|			НДФЛ.ДоходНДФЛ.Код,
			|           НДФЛЛьготы.Льгота.ГруппаЛьгот,
			|           НДФЛЛьготы.Льгота.Льгота1,
			|           НДФЛЛьготы.Льгота.Льгота2
			|       ИНДЕКСИРОВАТЬ ПО
			|			Контрагент,
			|           НалоговыйПериод
			|";
				
		Иначе
			Запрос.Текст = "
			|		ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|				ИсчисленныйНДФЛ.ФизическоеЛицо КАК Контрагент,
			|				ИсчисленныйНДФЛ.КодДохода.Код КАК ДоходНДФЛ,
			|			    ИсчисленныйНДФЛ.НалоговыйПериод  КАК НалоговыйПериод,
			|				ИсчисленныйНДФЛ.Период КАК ПериодАктуальнойЛьготы,
			|				ИсчисленныйНДФЛ.Льгота КАК Льгота
			| 		ПОМЕСТИТЬ ИсчисленныйНДФЛВСПолная
			|		ИЗ РегистрНакопления.ИсчисленныйНДФЛ КАК ИсчисленныйНДФЛ
			|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНДФЛБезЛьгот КАК НДФЛБезЛьгот
			|       	ПО ИсчисленныйНДФЛ.ФизическоеЛицо = НДФЛБезЛьгот.Контрагент
			|           	И  ИсчисленныйНДФЛ.НалоговыйПериод = НДФЛБезЛьгот.НалоговыйПериод 
			|		ГДЕ	
			|			ИсчисленныйНДФЛ.Период <= &ДатаКон
			|			И	ИсчисленныйНДФЛ.Организация = &Организация
			|       ИНДЕКСИРОВАТЬ ПО
			|			Контрагент,
			|           НалоговыйПериод
			|
			| ;			
			|		ВЫБРАТЬ
			|			НДФЛ.Контрагент КАК Контрагент,
			|	        НДФЛ.Контрагент.КодПоДРФО КАК ИННСотрудника,	
			|			НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
			|			НДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
			|			МАКСИМУМ(ЕСТЬNULL(НДФЛЛьготы.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))) КАК Льгота,
			|           НДФЛЛьготы.Льгота.ГруппаЛьгот   КАК ГруппаЛьгот,
			|           НДФЛЛьготы.Льгота.Льгота1 		КАК Льгота1,
			|           НДФЛЛьготы.Льгота.Льгота2 		КАК Льгота2
			|		ПОМЕСТИТЬ  ТаблицаЛьгот
			|		ИЗ (
			|			ВЫБРАТЬ
			|				ИсчисленныйНДФЛ.Контрагент КАК Контрагент,
			|				ИсчисленныйНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
			|			    НАЧАЛОПЕРИОДА(ИсчисленныйНДФЛ.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
			|				МАКСИМУМ(ИсчисленныйНДФЛ.ПериодАктуальнойЛьготы) КАК ПериодАктуальнойЛьготы
			|           ИЗ ИсчисленныйНДФЛВСПолная КАК ИсчисленныйНДФЛ
			|			СГРУППИРОВАТЬ ПО
			|				ИсчисленныйНДФЛ.Контрагент,
			|				ИсчисленныйНДФЛ.ДоходНДФЛ,
			|				НАЧАЛОПЕРИОДА(ИсчисленныйНДФЛ.НалоговыйПериод, МЕСЯЦ)
			|   		)КАК НДФЛ
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ИсчисленныйНДФЛВСПолная КАК НДФЛЛьготы
			|		ПО		
			|			НЕ НДФЛ.НалоговыйПериод ЕСТЬ NULL 
			|			И	НДФЛЛьготы.Контрагент = НДФЛ.Контрагент
			|			И	НДФЛЛьготы.ДоходНДФЛ = НДФЛ.ДоходНДФЛ
			|		И	НАЧАЛОПЕРИОДА(НДФЛЛьготы.НалоговыйПериод, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НДФЛ.НалоговыйПериод, МЕСЯЦ)
			|			И	НДФЛЛьготы.ПериодАктуальнойЛьготы = НДФЛ.ПериодАктуальнойЛьготы
			|		СГРУППИРОВАТЬ ПО 
			|			НДФЛ.Контрагент,
			|			НДФЛ.Контрагент.КодПоДРФО,
			|			НДФЛ.НалоговыйПериод,
			|			НДФЛ.ДоходНДФЛ,
			|           НДФЛЛьготы.Льгота.ГруппаЛьгот,
			|           НДФЛЛьготы.Льгота.Льгота1,
			|           НДФЛЛьготы.Льгота.Льгота2
			|       ИНДЕКСИРОВАТЬ ПО
			|       	Контрагент,
			|           НалоговыйПериод
			|";		
		КонецЕсли;

		Запрос.Выполнить();
		
		// соединим данные по ндфл со льготами + свернем
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаНДФЛБезЛьгот.Контрагент КАК Контрагент,
		|	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица 
		|		ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО 
		|		ИНАЧЕ ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ 
		|	КОНЕЦ КАК ИННСотрудника,
		|	ТаблицаНДФЛБезЛьгот.ДоходНДФЛ КАК ДоходНДФЛ,
		|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод КАК НалоговыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
		|			ТОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))
		|		ИНАЧЕ ВидыЛьготПоНДФЛ.Ссылка
		|	КОНЕЦ КАК Льгота,
		|	ВЫБОР
		|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
		|			ТОГДА 0
		|		КОГДА ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота1
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход) КАК ДоходПриход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходРасход) КАК ДоходРасход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход) КАК НалогПриход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.НалогРасход) КАК НалогРасход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ВСПриход) КАК ВСПриход,
		|	СУММА(ТаблицаНДФЛБезЛьгот.ВСРасход) КАК ВСРасход
		|ПОМЕСТИТЬ ВТТаблицаНДФЛ
		|ИЗ
		|	ТаблицаНДФЛБезЛьгот КАК ТаблицаНДФЛБезЛьгот
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЛьгот КАК ТаблицаЛьгот
		|		ПО ТаблицаНДФЛБезЛьгот.Контрагент = ТаблицаЛьгот.Контрагент
		|			И ТаблицаНДФЛБезЛьгот.ДоходНДФЛ = ТаблицаЛьгот.ДоходНДФЛ
		|			И ТаблицаНДФЛБезЛьгот.НалоговыйПериод = ТаблицаЛьгот.НалоговыйПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЛьготПоНДФЛ КАК ВидыЛьготПоНДФЛ
		|		ПО (ТаблицаЛьгот.ГруппаЛьгот = ИСТИНА)
		|			И (ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота1
		|				ИЛИ ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота2)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНДФЛБезЛьгот.Контрагент,
		|	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица 
		|		ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО 
		|		ИНАЧЕ ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ 
		|	КОНЕЦ,
		|	ТаблицаНДФЛБезЛьгот.ДоходНДФЛ,
		|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод,
		|	ВЫБОР
		|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
		|			ТОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))
		|		ИНАЧЕ ВидыЛьготПоНДФЛ.Ссылка
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
		|			ТОГДА 0
		|		КОГДА ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота1
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНДФЛ.Контрагент КАК Контрагент,
		|	ТаблицаНДФЛ.ИННСотрудника КАК ИННСотрудника,
		|	ТаблицаНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
		|	ТаблицаНДФЛ.Льгота КАК Льгота,
		|	ТаблицаНДФЛ.Приоритет КАК Приоритет,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаНДФЛ.Приоритет = 1
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаНДФЛ.ДоходПриход
		|		КОНЕЦ) КАК ДоходПриход,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаНДФЛ.Приоритет = 1
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаНДФЛ.ДоходРасход
		|		КОНЕЦ) КАК ДоходРасход,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаНДФЛ.Приоритет = 1
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаНДФЛ.НалогПриход
		|		КОНЕЦ) КАК НалогПриход,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаНДФЛ.Приоритет = 1
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаНДФЛ.НалогРасход
		|		КОНЕЦ) КАК НалогРасход,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаНДФЛ.Приоритет = 1
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаНДФЛ.ВСПриход
		|		КОНЕЦ) КАК ВСПриход,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаНДФЛ.Приоритет = 1
		|				ТОГДА 0
		|			ИНАЧЕ ТаблицаНДФЛ.ВСРасход
		|		КОНЕЦ) КАК ВСРасход
		|ПОМЕСТИТЬ ВТТаблицаНДФЛИтоговая
		|ИЗ
		|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
		|ГДЕ
		|	(ТаблицаНДФЛ.ДоходПриход <> 0
		|			ИЛИ ТаблицаНДФЛ.ДоходРасход <> 0
		|			ИЛИ ТаблицаНДФЛ.НалогПриход <> 0
		|			ИЛИ ТаблицаНДФЛ.НалогРасход <> 0
		|			ИЛИ ТаблицаНДФЛ.ВСРасход <> 0
		|			ИЛИ ТаблицаНДФЛ.ВСПриход <> 0
		|			ИЛИ ТаблицаНДФЛ.Приоритет = 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНДФЛ.ИННСотрудника,
		|	ТаблицаНДФЛ.ДоходНДФЛ,
		|	ТаблицаНДФЛ.Льгота,
		|	ТаблицаНДФЛ.Контрагент,
		|	ТаблицаНДФЛ.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНДФЛ.Контрагент,
		|	ТаблицаНДФЛ.ИННСотрудника,
		|	ТаблицаНДФЛ.ДоходНДФЛ,
		|	ТаблицаНДФЛ.Льгота,
		|	ТаблицаНДФЛ.Приоритет,
		|	ТаблицаНДФЛ.ДоходПриход,
		|	ТаблицаНДФЛ.ДоходРасход,
		|	ТаблицаНДФЛ.НалогПриход,
		|	ТаблицаНДФЛ.НалогРасход,
		|	ТаблицаНДФЛ.ВСПриход,
		|	ТаблицаНДФЛ.ВСРасход
		|ИЗ
		|	ВТТаблицаНДФЛИтоговая КАК ТаблицаНДФЛ";
		Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица 
			|		ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО 
			|		ИНАЧЕ ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ 
			|	КОНЕЦ",
			"ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО");
		КонецЕсли;	
		Запрос.Текст = ТекстЗапроса;
		ТаблицаНДФЛ = Запрос.Выполнить().Выгрузить();
		Если СтруктураРеквизитовФормы.СортироватьПоИНН Тогда
			ТаблицаНДФЛ.Сортировать("ИННСотрудника,Контрагент,ДоходНДФЛ,Приоритет");
		Иначе	
			ТаблицаНДФЛ.Сортировать("Контрагент,ИННСотрудника,ДоходНДФЛ,Приоритет");
		КонецЕсли;
		
       Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНДФЛ.Контрагент
		|ИЗ
		|	ВТТаблицаНДФЛИтоговая КАК ТаблицаНДФЛ
		|ГДЕ
		|	ТаблицаНДФЛ.ДоходНДФЛ = ""101"" ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		R00G01I = Выборка.Количество();

		Если СчетчикМесяцев = 0 Тогда
			СтруктураДанныхТаблица41.R00G01I = R00G01I;
		ИначеЕсли СчетчикМесяцев = 1 Тогда
			СтруктураДанныхТаблица42.R00G01I = R00G01I;
		Иначе
			СтруктураДанныхТаблица43.R00G01I = R00G01I;
		Конецесли;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
			|	ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения
			|ПОМЕСТИТЬ ВТТаблицаКадровыеДанныеСотрудников
			|ИЗ &ТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
			|ГДЕ ТаблицаКадровыеДанныеСотрудников.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы),ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
			|;
			|
			|ВЫБРАТЬ
			|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
			|	ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения
			|ИЗ ВТТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
			|ГДЕ (ТаблицаКадровыеДанныеСотрудников.ДатаПриема МЕЖДУ &ДатаНач И &ДатаКон 
			|      ИЛИ ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &ДатаНач И &ДатаКон)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо,
			|	ДатаПриема
			|";
		Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеСотрудников",ТаблицаКадровыеДанныеСотрудников);
		ТаблицаПриемыУвольнения = Запрос.Выполнить().Выгрузить();

		Запрос.Текст = "ВЫБРАТЬ
			|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения) КАК ДатаУвольненияМинимум,
			|	МАКСИМУМ(ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения) КАК ДатаУвольненияМаксимум
			|ИЗ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
			|ГДЕ ТаблицаКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
			|   И ТаблицаКадровыеДанныеСотрудников.ДатаПриема < &ДатаНач
			|   И ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения < &ДатаНач
			|
			|СГРУППИРОВАТЬ ПО
			|	ФизическоеЛицо
			|";
		ТаблицаВсеУвольнения = Запрос.Выполнить().Выгрузить(); 
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТаблицаКадровыеДанныеСотрудников.ДатаПриема) КАК ДатаПриемаМинимум,
			|	МАКСИМУМ(ТаблицаКадровыеДанныеСотрудников.ДатаПриема) КАК ДатаПриемаМаксимум
			|ИЗ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
			|ГДЕ ТаблицаКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
			|   И ТаблицаКадровыеДанныеСотрудников.ДатаПриема < &ДатаНач
			|
			|СГРУППИРОВАТЬ ПО
			|	ФизическоеЛицо
			|";
		ТаблицаВсеПриемы = Запрос.Выполнить().Выгрузить();		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНДФЛ.Контрагент
		|ИЗ
		|	ВТТаблицаНДФЛИтоговая КАК ТаблицаНДФЛ
		|ГДЕ
		|	ТаблицаНДФЛ.ДоходНДФЛ = ""102"" ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		R00G02I = Выборка.Количество();
		Если СчетчикМесяцев = 0 Тогда
			СтруктураДанныхТаблица41.R00G02I = R00G02I;
		ИначеЕсли СчетчикМесяцев = 1 Тогда
			СтруктураДанныхТаблица42.R00G02I = R00G02I;
		Иначе
			СтруктураДанныхТаблица43.R00G02I = R00G02I;
		Конецесли;
		
		R02G02I = 0;
		R02G01I = 1;
		Номер = 0;
		СотрудникПредыдущий = Неопределено;
		
		ТекстСообщенияОшибкаКолСтрок = НСтр("ru='Превышен лимит строк! Согласно схеме XSD - в отчете может быть только 999999 строк. При превышении, рекомендуем заполнять по подразделениям';uk='Перевищено ліміт рядків! Згідно зі схемою XSD - у звіті може бути тільки 999999 рядків. У разі більшої кількості, рекомендуємо заповнювати по підрозділах '");
		
		ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
		
		Для Каждого стр ИЗ ТаблицаНДФЛ Цикл
			
			Если Номер > 0 Тогда
				
				Если Номер > 999999 Тогда
					Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
						Сообщить(ТекстСообщенияОшибкаКолСтрок);
					Иначе
						ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
					КонецЕсли;		
					Прервать;
				КонецЕсли;
				
				Строка = СтруктураГруппы.Добавить();
				R02G01I = R02G01I + 1;
			Иначе
				Строка = СтруктураГруппы[0];
			КонецЕсли;
			
			КолСтрок = СтруктураГруппы.Количество();
			
			СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" отчета"": ';uk='У рядку номер ""%1"" звіту"": '"), СокрЛП(КолСтрок));
			
			Если НЕ ЗначениеЗаполнено(стр.ИННСотрудника) Тогда
				Сообщить(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' у контрагента (сотрудника) не заполнен идентификационный код!';uk=' у контрагента (співробітника) не заповнений ідентифікаційний код!'"), СтатусСообщения.Важное);
			КонецЕсли;
			Строка[ПрефиксИмениКолонки+"G02"]  = стр.ИННСотрудника;
			Строка[ПрефиксИмениКолонки+"GFIO"] = стр.Контрагент;
			Строка[ПрефиксИмениКолонки+"G03A"] = стр.ДоходПриход;
			Строка[ПрефиксИмениКолонки+"G03"]  = стр.ДоходРасход;
			Строка[ПрефиксИмениКолонки+"G04A"] = стр.НалогПриход;
			Строка[ПрефиксИмениКолонки+"G04"]  = стр.НалогРасход;
			Строка[ПрефиксИмениКолонки+"G5A"]  = стр.ВСПриход;
			Строка[ПрефиксИмениКолонки+"G5"]   = стр.ВСРасход;
			Строка[ПрефиксИмениКолонки+"G05"]  = стр.ДоходНДФЛ;
			
			Льгота = "";
			Если (СтрДлина(стр.Льгота) > 0)  Тогда
				Льгота = стр.Льгота.КодОтчетностиНДФЛ;
			КонецЕсли;	
			Строка[ПрефиксИмениКолонки+"G08"]  = Льгота;
			
			// даты увольнения/приема
			Если (стр.Контрагент <> СотрудникПредыдущий)  Тогда
				//количество физ.лиз
				R02G02I = R02G02I + 1;
				
				Если НЕ (ТипЗнч(стр.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
					
					ПараметрыОтбора = Новый Структура("ФизическоеЛицо");
					ПараметрыОтбора.Вставить("ФизическоеЛицо", стр.Контрагент);  
					
					ПриемыУвольнения  = ТаблицаПриемыУвольнения.НайтиСтроки(ПараметрыОтбора);
					
					Если ПриемыУвольнения.Количество() = 0 Тогда
						//Мог быть уволен ранее
						Увольнения  = ТаблицаВсеУвольнения.НайтиСтроки(ПараметрыОтбора);
						Если Увольнения.Количество() <> 0 И ЗначениеЗаполнено(Увольнения[0].ДатаУвольненияМинимум)  И ЗначениеЗаполнено(Увольнения[0].ДатаУвольненияМаксимум) Тогда
                            Приемы  = ТаблицаВсеПриемы.НайтиСтроки(ПараметрыОтбора);
							Если Приемы.Количество() <> 0 Тогда
								Если Приемы[0].ДатаПриемаМаксимум < Увольнения[0].ДатаУвольненияМаксимум Тогда
									Строка[ПрефиксИмениКолонки+"G07D"] = Увольнения[0].ДатаУвольненияМаксимум;	
								КонецЕсли;
							Иначе
								Строка[ПрефиксИмениКолонки+"G07D"] = Увольнения[0].ДатаУвольненияМаксимум;
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
					
					ПервыйПриемУвольнение = Истина;
					Для Каждого ПриемУвольнение ИЗ ПриемыУвольнения Цикл
						Если ПервыйПриемУвольнение Тогда
							ПервыйПриемУвольнение = Ложь;
							Если ПриемУвольнение.ДатаПриема >= НачалоВЦикле И ПриемУвольнение.ДатаПриема <= КонецВЦикле Тогда 
								Строка[ПрефиксИмениКолонки+"G06D"] = ПриемУвольнение.ДатаПриема;
							КонецЕсли;
							Если ПриемУвольнение.ДатаУвольнения >= НачалоВЦикле И ПриемУвольнение.ДатаУвольнения <= КонецВЦикле Тогда 
								Строка[ПрефиксИмениКолонки+"G07D"] = ПриемУвольнение.ДатаУвольнения;
							КонецЕсли;	
														
						Иначе
							
							Номер = Номер + 1;
							
							Если Номер > 999999 Тогда
								Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
									Сообщить(ТекстСообщенияОшибкаКолСтрок);
								Иначе
									ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
								КонецЕсли;		
								Прервать;
							КонецЕсли;
							
							Строка = СтруктураГруппы.Добавить();
							R02G01I = R02G01I + 1;
							
							КолСтрок = СтруктураГруппы.Количество();
							
							Строка[ПрефиксИмениКолонки+"G02"]  = стр.ИННСотрудника;
							Строка[ПрефиксИмениКолонки+"GFIO"] = стр.Контрагент;
				            Строка[ПрефиксИмениКолонки+"G05"]  = стр.ДоходНДФЛ;
							
							Если ПриемУвольнение.ДатаПриема >= НачалоВЦикле И ПриемУвольнение.ДатаПриема <= КонецВЦикле Тогда 
								Строка[ПрефиксИмениКолонки+"G06D"] = ПриемУвольнение.ДатаПриема;
							КонецЕсли;
							Если ПриемУвольнение.ДатаУвольнения >= НачалоВЦикле И ПриемУвольнение.ДатаУвольнения <= КонецВЦикле Тогда 
								Строка[ПрефиксИмениКолонки+"G07D"] = ПриемУвольнение.ДатаУвольнения;
							КонецЕсли;
							
							
						КонецЕсли;	
					КонецЦикла;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			СотрудникПредыдущий = стр.Контрагент;
			Номер = Номер + 1;
			
		КонецЦикла;
		
		Если СчетчикМесяцев = 0 Тогда
			СтруктураДанныхТаблица41.R02G02I = R02G02I;
			СтруктураДанныхТаблица41.R02G01I = R02G01I;
		ИначеЕсли СчетчикМесяцев = 1 Тогда
			СтруктураДанныхТаблица42.R02G02I = R02G02I;
			СтруктураДанныхТаблица42.R02G01I = R02G01I;
		Иначе
			СтруктураДанныхТаблица43.R02G02I = R02G02I;
			СтруктураДанныхТаблица43.R02G01I = R02G01I;
		Конецесли;
		
		ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаСервереБезКонтекста
Функция КодПолаФизическогоЛица(Пол)
	
	КодПола = "";
	
	Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		КодПола = "Ж";
	ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		КодПола = "Ч";
	КонецЕсли;
	
	Возврат КодПола;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	//Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
	//	И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
	//	И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
	//	
	//	ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
	//								  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
	//	
	//КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				
				ЗначениеПоказателя = Строка[Колонка.Имя];
				
				Если  ИдМногострочногоРаздела.Значение = СтруктураРеквизитовФормы.мИдГруппы5
					И Колонка.Имя = "T5T1RXXXXG14S" Тогда
					
					ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
					
				КонецЕсли;

				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), ЗначениеПоказателя);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста	
Функция ОбработатьДРФО(Знач ДРФО)
	
	ДРФО = СОКРЛП(ДРФО);
	ДРФО = ВРЕГ(ДРФО);
	
	Если СтрДлина(ДРФО) = 8 Тогда
		
		Симв1 = Сред(ДРФО, 1, 1);
		Симв2 = Сред(ДРФО, 2, 1);
		Симв3 = Сред(ДРФО, 3);
		Если  Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв1) > 0
			И Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв2) > 0 Тогда
		
			Для Сч = 3 по 8 Цикл
				Если Найти("0123456789", Сред(ДРФО, Сч, 1)) = 0 Тогда
					// не соответствует формату паспорта
					Возврат ДРФО;
				КонецЕсли;
			КонецЦикла;	
			
			// к номеру паспорта добавляем "БК"
			Возврат "БК" + ДРФО;
			
		Иначе
			
			// не соответствует формату паспорта
			Возврат ДРФО;
			
		КонецЕсли;
	ИначеЕсли СтрДлина(ДРФО) = 9 Тогда	
		
		Для Сч = 1 по 9 Цикл
			Если Найти("0123456789", Сред(ДРФО, Сч, 1)) = 0 Тогда
				// не соответствует формату пластикового паспорта
				Возврат ДРФО;
			КонецЕсли;
		КонецЦикла;	
		
		// к номеру пластикового паспорта добавляем "П"
		Возврат "П" + ДРФО;
		
	Иначе
		
		// не соответствует формату паспорта
		Возврат ДРФО;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получение данных для Звита
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;

	Модифицированность = Ложь;
	Комментарий = "Звіт створений для збереження параметрів заповнення ""FREDO Звіт""";
	мСохраненныйДок = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ХранилищеПараметровДляЗвит1С", мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = мСохраненныйДок;
	КонецЕсли;
	Сохранить(Ложь, "Декларация");
		
	НомерМесяца = 0;	
	Если СтруктураРеквизитовФормы.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") и 
		НЕ (Сред(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 2,5) = "05001" ИЛИ Сред(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 2,5) = "05105") Тогда
		//это приложение 1, 4 или 6 (помесячно)
		СтруктураРеквизитовФормы.НомерМесяца = СтруктураРеквизитовФормы.МесяцПриложения+1;
	КонецЕсли;
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
		
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметров(Команда)

	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	
	мПараметрыФормы.Вставить("ОпцияКадровыйПереводДвумяСтроками", СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
	мПараметрыФормы.Вставить("ВыплатыЗПНеРегулярны", 	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	мПараметрыФормы.Вставить("Подразделение", 			СтруктураРеквизитовФормы.Подразделение);
	мПараметрыФормы.Вставить("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение); 
	мПараметрыФормы.Вставить("НеВключатьЧПников", 		СтруктураРеквизитовФормы.НеВключатьЧПников);
	мПараметрыФормы.Вставить("МесяцПриложения", 		СтруктураРеквизитовФормы.МесяцПриложения);
	мПараметрыФормы.Вставить("СортироватьПоИНН", 		СтруктураРеквизитовФормы.СортироватьПоИНН);
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	мПараметрыФормы.Вставить("ЧислоВыплатыЗП", 			СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
	мПараметрыФормы.Вставить("НазначениеПенсии", 		СтруктураРеквизитовФормы.НазначениеПенсии);
	мПараметрыФормы.Вставить("НазначениеСоцВыплат", 	СтруктураРеквизитовФормы.НазначениеСоцВыплат);
	мПараметрыФормы.Вставить("Сотрудники", 				СтруктураРеквизитовФормы.Сотрудники);
	мПараметрыФормы.Вставить("ОпцияПриемУвольнениеОтдельнымиСтроками", СтруктураРеквизитовФормы.ОпцияПриемУвольнениеОтдельнымиСтроками);
	
	ИмяФормыПараметровНастройки = СтрЗаменить(ЭтаФорма.ИмяФормы, "ФормаОтчета", "ПараметрыОтчета");
	
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыПараметровНастройки, мПараметрыФормы, ЭтаФорма);
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПараметровЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНастраиваемыеПараметрыЗаполнения()
	
	ЗапросДеклПрошл = Новый Запрос ("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	| РегламентированныйОтчет.ДанныеОтчета,
	| РегламентированныйОтчет.Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета И
	|	РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания
	|УПОРЯДОЧИТЬ ПО ДатаОкончания УБЫВ"
	);
	
	ЗапросДеклПрошл.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросДеклПрошл.УстановитьПараметр ("ДатаОкончания",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросДеклПрошл.УстановитьПараметр ("Организация",	СтруктураРеквизитовФормы.Организация);
	ЗапросДеклПрошл.УстановитьПараметр ("ИсточникОтчета","РегламентированныйОтчетРасчетДоходовИЕСВФизЛиц");						   
	
	Выборка = ЗапросДеклПрошл.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();
		
		ДанныеОтчета.Свойство("ОпцияКадровыйПереводДвумяСтроками", СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
		Если  СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками = Неопределено Тогда
			СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками = 0;
		КонецЕсли;
		
		Если ДанныеОтчета.Свойство("СозданКакХранилищеПараметровДляЗвит1С") Тогда
			// чтобы не плодить отчеты при повторном заполнении из Звита
			// будем записывать параметры в один и тот же отчет
			СтруктураРеквизитовФормы.Вставить("ХранилищеПараметровДляЗвит1С", Выборка.Ссылка);
		КонецЕсли;
		ТекДанные = Неопределено;
		ДанныеОтчета.Свойство("Сотрудники", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.Сотрудники = ТекДанные.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

