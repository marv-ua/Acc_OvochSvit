
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ОбновитьОрганизациюНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериодНаСервере();
	
КонецПроцедуры


#Область СобытияЭлементовФормы
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьПериодНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиПриИзменении(Элемент)
	ОбновитьЗаголовкиЭлементовФормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	//Результат.Область(Область.Имя).Значение
	//Результат.Область(Область.Имя).Расшифровка
	ПриИзмененииСодержимогоОбластиНаСервере(Результат.Область(Область.Имя).Значение, Результат.Область(Область.Имя).Расшифровка);
	
КонецПроцедуры
#КонецОбласти

#Область КомандыФормы
&НаКлиенте
Процедура Заполнить(Команда)
	
	ОбновитьОтчетНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтаФорма, "ПодборЗаявок");

	ОткрытьФорму("Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОбработкаВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПриИзмененииСодержимогоОбластиНаСервере(Значение, ДопДанные)

	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДатаВывоза", ДопДанные.ДатаВывоза);
	Запрос.Параметры.Вставить("ПунктРазгрузки", ДопДанные.ПунктРазгрузки);
	Запрос.Параметры.Вставить("Идентификатор", ДопДанные.Идентификатор);
	Запрос.Параметры.Вставить("Авто", ДопДанные.Авто);
	Запрос.Параметры.Вставить("Водитель", ДопДанные.Водитель);
	Запрос.Параметры.Вставить("Регион", ДопДанные.Регион);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ПунктыРазгрузки КАК Т
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ДатаВывозаФакт КАК Д
	               |		ПО Т.Ссылка = Д.Объект
	               |			И Т.Идентификатор = Д.Идентификатор
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА Д.ДатаВывозаФакт ЕСТЬ NULL
	               |				ТОГДА Т.ДатаОтгрузки
	               |			ИНАЧЕ Д.ДатаВывозаФакт
	               |		КОНЕЦ = &ДатаВывоза
	               |	И Т.ПунктРазгрузки = &ПунктРазгрузки
	               |	И Т.Идентификатор = &Идентификатор
	               |	И Т.Авто = &Авто
	               |	И Т.Водитель = &Водитель
	               |	И Т.Регион = &Регион";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.а_ДатаВывозаФакт.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Выборка.Ссылка);
		Набор.Отбор.Идентификатор.Установить(ДопДанные.Идентификатор);
		Запись = Набор.Добавить();
		Запись.Объект = Выборка.Ссылка;
		Запись.Идентификатор = ДопДанные.Идентификатор;
		Запись.ДатаВывозаФакт = Значение;
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

#Область ОбновлениеОтчета

&НаСервере
Процедура ОбновитьОтчетНаСервере()
	
	#Если _ Тогда
		Данные = Новый ТаблицаЗначений;
	#КонецЕсли
	
	Результат.Очистить();
	
	Макет = Обработки.а_УправлениеМаршрутами.ПолучитьМакет("Макет");
	Область_День = Макет.ПолучитьОбласть("День");
	Область_Водитель = Макет.ПолучитьОбласть("Водитель");
	Область_ПунктРазгрузки = Макет.ПолучитьОбласть("ПунктРазгрузки");
	
	Данные = ПолучитьТаблицуДанных();
	Данные.Сортировать("ДатаВывоза Возр");
	Данные.Индексы.Добавить("ДатаВывоза");
	Данные.Индексы.Добавить("ДатаВывоза,Водитель");
	Данные.Индексы.Добавить("ДатаВывоза,Водитель,Авто,ПериодОтгрузки,Регион");
	
 	Результат.НачатьАвтогруппировкуСтрок();	
	
	Т_День = Данные.Скопировать();
	Т_День.Свернуть("ДатаВывоза", "Количество");
	Для Каждого Стр_День Из Т_День Цикл
		Область_День.Параметры.Заполнить(Стр_День);
		Результат.Вывести(Область_День, 1, "Группа", Истина);

	
		
		Т_Водитель = Данные.Скопировать(
			Новый Структура("ДатаВывоза", Стр_День.ДатаВывоза)
		);
		Т_Водитель.Свернуть("ДатаВывоза,Водитель,Авто,ПериодОтгрузки,Регион", "Количество");
		Для Каждого Стр_Водитель Из Т_Водитель Цикл
			Область_Водитель.Параметры.Заполнить(Стр_Водитель);
			Результат.Вывести(Область_Водитель, 2, "Группа 1", Истина);
			
			Т_ПунктРазгрузки = Данные.Скопировать(
				Новый Структура("ДатаВывоза,Водитель,Авто,ПериодОтгрузки,Регион,", Стр_День.ДатаВывоза,
					Стр_Водитель.Водитель, Стр_Водитель.Авто, Стр_Водитель.ПериодОтгрузки, Стр_Водитель.Регион
				)
			);
			Т_ПунктРазгрузки.Свернуть("ДатаВывоза,Водитель,Авто,ПериодОтгрузки,Регион,ПунктРазгрузки,Идентификатор", "Количество");
			Для Каждого Стр_ПунктРазгрузки Из Т_ПунктРазгрузки Цикл
				Область_ПунктРазгрузки.Параметры.Заполнить(Стр_ПунктРазгрузки);
				Область_ПунктРазгрузки.Области.ДатаФакт.Расшифровка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Стр_ПунктРазгрузки);
				Результат.Вывести(Область_ПунктРазгрузки, 3, "Группа 2", Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Область_Итого = Макет.ПолучитьОбласть("ОбщийИтог");
	Область_Итого.Параметры.Количество = Данные.Итог("Количество"); 
	
	Результат.Вывести(Область_Итого);
	Результат.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДанных()
	
	СхемаКомпоновкиДанных = Отчеты.ОтчетПоЗаякам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек["ДетальныеЗаписи"].Настройки;	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", Период);
	Если Объект.Заявки.Количество() Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Заявка", Объект.Заявки.Выгрузить().ВыгрузитьКолонку("Заявка"));
	КонецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
  	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки, Истина);
		
	Т = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Т);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат Т;

КонецФункции

Процедура УстановитьПараметрСКД(КомпоновщикНастроек, ИмяПараметра, Значение)
	
	Перем ПараметрДанных;
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	ПараметрДанных.Использование = Истина;
	ПараметрДанных.Значение = Значение;
	
КонецПроцедуры  //  УстановитьПараметрСКД

Процедура УстановитьОтборСКД(КомпоновщикНастроек, ИмяОтбора, Значение, ВидСравнения = Неопределено)
	
	Перем Настройки, ПолеКД, Элем, ЭлементОтбора;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяОтбора);
	
	Для Каждого Элем Из Настройки.Отбор.Элементы Цикл
		
		Если Элем.ЛевоеЗначение = ПолеКД Тогда
			ЭлементОтбора = Элем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		
		ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеКД;
	КонецЕсли;		
	
	ЭлементОтбора.Использование = (Значение <> Неопределено);
	ЭлементОтбора.ВидСравнения = ?(ВидСравнения <> Неопределено, ВидСравнения, ВидСравненияКомпоновкиДанных.Равно); 
	ЭлементОтбора.ПравоеЗначение  = Значение;

КонецПроцедуры //  УстановитьОтборСКД
#КонецОбласти

&НаСервере
Процедура ОбновитьПериодНаСервере()
	
	Объект.ПериодНачало = Период.ДатаНачала;
	Объект.ПериодКонец = Период.ДатаОкончания;
	
	ЗаполнитьДокументыВывозаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОрганизациюНаСервере()
	
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыВывозаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПериодНачало) И ЗначениеЗаполнено(Объект.ПериодКонец) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата1", Объект.ПериодНачало);
		Запрос.УстановитьПараметр("Дата2", Объект.ПериодКонец);
		Запрос.Текст = "ВЫБРАТЬ
		               |	а_ЗаявкиКВывозу.Объект КАК Заявка
		               |ИЗ
		               |	РегистрСведений.а_ЗаявкиКВывозу КАК а_ЗаявкиКВывозу
		               |ГДЕ
		               |	а_ЗаявкиКВывозу.Объект.Дата МЕЖДУ &Дата1 И &Дата2";
		Объект.Заявки.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;                                                  
	ОбновитьЗаголовкиЭлементовФормыНаСервере();
	
КонецПроцедуры

&НаСервере  
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт

    Если Значение = Неопределено Тогда  ///Если ничего не выбрать - вернется пустое значение (Неопределено)
        Возврат;
    КонецЕсли;
     
    //МассивДокументов = Значение ///Если Множественный Выбор - то вернется массив 

	Для Каждого Эл Из Значение Цикл
		НоваяСтрока = Объект.Заявки.Добавить();
		
		НоваяСтрока.Заявка = Эл;
	КонецЦикла;
	
	ОбновитьЗаголовкиЭлементовФормыНаСервере();	

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиЭлементовФормыНаСервере()
	Элементы.ГруппаЗаявки.Заголовок = СтрШаблон("Заявки (%1)", Объект.Заявки.Количество());
КонецПроцедуры


#КонецОбласти
