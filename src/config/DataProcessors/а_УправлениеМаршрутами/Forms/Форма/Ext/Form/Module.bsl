
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ОбновитьОрганизациюНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериодНаСервере();
	
КонецПроцедуры


#Область СобытияЭлементовФормы
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьПериодНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры
#КонецОбласти

#Область КомандыФормы
&НаКлиенте
Процедура Заполнить(Команда)
	
	ОбновитьОтчетНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#Область ОбновлениеОтчета

&НаСервере
Процедура ОбновитьОтчетНаСервере()
	
	#Если _ Тогда
		Данные = Новый ТаблицаЗначений;
	#КонецЕсли
	
	Результат.Очистить();
	
	Макет = Обработки.а_УправлениеМаршрутами.ПолучитьМакет("Макет");
	Область_День = Макет.ПолучитьОбласть("День");
	Область_Водитель = Макет.ПолучитьОбласть("Водитель");
	Область_ПунктРазгрузки = Макет.ПолучитьОбласть("ПунктРазгрузки");
	
	Данные = ПолучитьТаблицуДанных();
	Данные.Индексы.Добавить("ДатаОтгрузки");
	Данные.Индексы.Добавить("ДатаОтгрузки,Водитель");
	Данные.Индексы.Добавить("ДатаОтгрузки,Водитель,Авто,ПериодОтгрузки,Регион");
	
	Т_День = Данные.Скопировать();
	Т_День.Свернуть("ДатаОтгрузки", "Количество");
	Для Каждого Стр_День Из Т_День Цикл
		Область_День.Параметры.Заполнить(Стр_День);
		Результат.Вывести(Область_День);
		
		Т_Водитель = Данные.Скопировать(
			Новый Структура("ДатаОтгрузки", Стр_День.ДатаОтгрузки)
		);
		Т_Водитель.Свернуть("ДатаОтгрузки,Водитель,Авто,ПериодОтгрузки,Регион", "Количество");
		Для Каждого Стр_Водитель Из Т_Водитель Цикл
			Область_Водитель.Параметры.Заполнить(Стр_Водитель);
			Результат.Вывести(Область_Водитель);
			
			Т_ПунктРазгрузки = Данные.Скопировать(
				Новый Структура("ДатаОтгрузки,Водитель,Авто,ПериодОтгрузки,Регион", Стр_День.ДатаОтгрузки,
					Стр_Водитель.Водитель, Стр_Водитель.Авто, Стр_Водитель.ПериодОтгрузки, Стр_Водитель.Регион
				)
			);
			Т_ПунктРазгрузки.Свернуть("ДатаОтгрузки,Водитель,Авто,ПериодОтгрузки,Регион", "Количество");
			Для Каждого Стр_ПунктРазгрузки Из Т_ПунктРазгрузки Цикл
				Область_ПунктРазгрузки.Параметры.Заполнить(Стр_ПунктРазгрузки);
				Результат.Вывести(Область_ПунктРазгрузки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Область_Итого = Макет.ПолучитьОбласть("ОбщийИтог");
	Область_Итого.Параметры.Количество = Данные.Итог("Количество"); 
	Результат.Вывести(Область_Итого);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДанных()
	
	СхемаКомпоновкиДанных = Отчеты.ОтчетПоЗаякам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек["ДетальныеЗаписи"].Настройки;	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодОтчета", Период);
	Если Объект.Заявки.Количество() Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Заявка", Объект.Заявки.Выгрузить().ВыгрузитьКолонку("Заявка"));
	КонецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
  	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки, Истина);
		
	Т = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Т);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат Т;

КонецФункции

Процедура УстановитьПараметрСКД(КомпоновщикНастроек, ИмяПараметра, Значение)
	
	Перем ПараметрДанных;
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	ПараметрДанных.Использование = Истина;
	ПараметрДанных.Значение = Значение;
	
КонецПроцедуры  //  УстановитьПараметрСКД

Процедура УстановитьОтборСКД(КомпоновщикНастроек, ИмяОтбора, Значение, ВидСравнения = Неопределено)
	
	Перем Настройки, ПолеКД, Элем, ЭлементОтбора;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ПолеКД = Новый ПолеКомпоновкиДанных(ИмяОтбора);
	
	Для Каждого Элем Из Настройки.Отбор.Элементы Цикл
		
		Если Элем.ЛевоеЗначение = ПолеКД Тогда
			ЭлементОтбора = Элем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		
		ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеКД;
	КонецЕсли;		
	
	ЭлементОтбора.Использование = (Значение <> Неопределено);
	ЭлементОтбора.ВидСравнения = ?(ВидСравнения <> Неопределено, ВидСравнения, ВидСравненияКомпоновкиДанных.Равно); 
	ЭлементОтбора.ПравоеЗначение  = Значение;

КонецПроцедуры //  УстановитьОтборСКД
#КонецОбласти

&НаСервере
Процедура ОбновитьПериодНаСервере()
	
	Объект.ПериодНачало = Период.ДатаНачала;
	Объект.ПериодКонец = Период.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОрганизациюНаСервере()
	
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ОрганизацияПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	

КонецПроцедуры

#КонецОбласти
