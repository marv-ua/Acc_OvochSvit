
&НаСервере
Процедура УпорядочитьДокументыНаСервере()
	
	тмп 		= Объект.СписокДокументовДляПроведения.Выгрузить();
	тмп.Колонки.Добавить("Период", Новый ОписаниеТипов("МоментВремени"));
	
	ПропускатьВидыДокументов = Новый Структура("ОперацияУпр, КорректировкаЗаписейРегистров, общОперацияБух");
	
	
	Для Каждого ТекСтрока Из тмп Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			
			ТекСтрока.Документ = Неопределено;
			ТекСтрока.Проводить = Ложь;
			
		Иначе
			
			ТекСтрока.Период = ТекСтрока.Документ.МоментВремени();
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ДатаДокумента) Тогда
				
				ТекСтрока.ДатаДокумента = ТекСтрока.Документ.Дата;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТипЗнчДокумента = ТекСтрока.Документ.Метаданные().Имя;
		
		Если ПропускатьВидыДокументов.Свойство(ТипЗнчДокумента) Тогда
			ТекСтрока.Проводить = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	тмп.Сортировать("Период", Новый СравнениеЗначений);
	
	Объект.СписокДокументовДляПроведения.Загрузить(тмп);
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьДокументы(Команда)
	УпорядочитьДокументыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументыОтложенный() Экспорт
	ПровестиДокументы(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуОтложенный() Экспорт
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ЭтоОшибкаБлокировки(ТекстОшибки) Экспорт
	Возврат СтрНайти(ТекстОшибки, "конфлікт блокувань") > 0 или СтрНайти(ТекстОшибки, "конфликт блокировок") > 0;
КонецФункции

&НаКлиенте
Процедура ПровестиДокументы(Команда) Экспорт
	
	ПровестиДокументыКлиент();
	
КонецПроцедуры   

&НаСервереБезКонтекста
Функция ПередПроведениемДокумента(ТекДокумент, ТекстОшибки, ПродолжатьПриБлокировке, ВосстановлениеПоследовательности , ГраницаУстановлена)
	
	//ТекСтрока = ОбработкаОбъект.СписокДокументовДляПроведения[НомерСтроки-1];
	
	ДокументПроведен = МодульДокументаСервер.ПередПроведениемДокумента(ТекДокумент, ТекстОшибки, ПродолжатьПриБлокировке, ВосстановлениеПоследовательности, ГраницаУстановлена);
	
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//
	//ДокументПроведен = ОбработкаОбъект.ПередПроведениемДокумента(НомерСтроки, ТекстОшибки , ВосстановлениеПоследовательности , ГраницаУстановлена);
	//
	//ЗначениеВРеквизитФормы(ОбработкаОбъект,"Объект");
	
	Возврат ДокументПроведен;
	
КонецФункции // ()


&НаКлиенте
Процедура ПровестиДокументыКлиент(ВосстановлениеПоследовательности = Ложь)
	
	СтрокиПроводить = Объект.СписокДокументовДляПроведения.НайтиСтроки(Новый Структура("Проводить", Истина));
	ВсегоПроводить 	= СтрокиПроводить.Количество();
	
	Если ВсегоПроводить = Объект.СписокДокументовДляПроведения.Количество() Тогда 
		УпорядочитьДокументыНаСервере();
	КонецЕсли;
	
	ДатаНач 		= ТекущаяДата();
	
	Ном 			= 0;
	БылиОшибки 		= Ложь;
	ТекстОшибки		= "";            
	
	Для Каждого ТекСтрока Из Объект.СписокДокументовДляПроведения Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если НЕ ТекСтрока.Проводить Тогда
			Продолжить;
		КонецЕсли;
		
		Затрачено 	= ТекущаяДата() - ДатаНач;
		Осталось 	= ?(Затрачено = 0 или Ном = 0, 0, Окр((ВсегоПроводить - Ном)/(Ном / Затрачено)));
		Осталось 	= Формат('00010101' + Осталось, "ДФ=HH:mm:ss");
		
		Состояние("" + Формат(ТекСтрока.ДатаДокумента,"ДФ='dd.MM.yy HH:mm'") + " " + Ном + " з " + ВсегоПроводить, Окр(Ном/ВсегоПроводить*100,1), "" + Формат(Окр(?(Затрачено = 0, 0, Ном/Затрачено),1), "ЧДЦ=1") + "д/с. Ще " + Осталось);
		
		Ном = Ном + 1;
		
		Элементы.СписокДокументовДляПроведения.ТекущаяСтрока = ТекСтрока;//.НомерСтроки;
		
		ГраницаУстановлена = Ложь;
		
		//ДокументПроведен = МодульДокументаСервер.ПередПроведениемДокумента(ТекСтрока.Документ, ТекстОшибки  ВосстановлениеПоследовательности, ГраницаУстановлена);
		
		ТекСтрока.ДатаПроведения 	= ТекущаяДата();
		
		ДокументПроведен = ПередПроведениемДокумента(ТекСтрока.Документ, ТекстОшибки, Объект.ПродолжатьПриБлокировке, ВосстановлениеПоследовательности, ГраницаУстановлена); 
		ТекДокумент = ТекСтрока.Документ;
		
		Если Не ДокументПроведен Тогда
			Сообщить("" + ТекущаяДата() + ": Не проведено документ " + ТекДокумент + ": " + ТекстОшибки);
			
			БылиОшибки = Истина;
			
			Если НЕ Объект.ПропускатьНепроведенные Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекСтрока.Проводить = Ложь;
	
		ТекСтрока.ЗатраченоВремени = ТекущаяДата() - ТекСтрока.ДатаПроведения;
		
		Если ВосстановлениеПоследовательности И Не ГраницаУстановлена Тогда
		    Если Объект.ПерезаполнятьАвтоматическиПриСдвигеПоследовательностиНазад Тогда
				ЗаполнитьПоследовательность(Неопределено);	
			КонецЕсли;
			Прервать;	
		КонецЕсли;    	              	
	КонецЦикла;
	
	ДатаКон 		= ТекущаяДата();
	
	Затрачено = ДатаКон - ДатаНач;
	
	//Сообщить("" + Формат(ТекСтрока.ДатаДокумента,"ДФ='dd.MM.yy HH:mm'") + " пров " + Ном + " з " + ВсегоПроводить, Окр(Ном/ВсегоПроводить*100,1), "Шв. " + Формат(Окр(?(Затрачено = 0, 0, Ном/Затрачено),1), "ЧДЦ=1") + " док/с (" + Окр(?(Ном = 0, 0, Затрачено/Ном), 1) + " с/док)" );
	
	Сообщить("" + ТекущаяДата() + ": Проведено " + Ном + " документів. Витрачено " + (ДатаКон - ДатаНач) + " с. (" + ДатаНач +"-" + ДатаКон + "),  швидкість " + Формат(Окр(?(Затрачено = 0, 0, Ном/Затрачено),1), "ЧДЦ=1") + " док/с (" + Окр(?(Ном = 0, 0, Затрачено/Ном), 1) + " с/док)");
	
	Если НЕ БылиОшибки и НЕ ВосстановлениеПоследовательности Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФормуОтложенный", 20, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("МассивДокументовДляПерепроведения") Тогда
		
		Объект.СписокДокументовДляПроведения.Очистить();
		
		Для Каждого ТекДокумент Из Параметры.МассивДокументовДляПерепроведения Цикл
			
			НовСтрока 			= Объект.СписокДокументовДляПроведения.Добавить();
			НовСтрока.Документ 	= ТекДокумент;
			НовСтрока.Проводить = Истина;
			
		КонецЦикла;
		
		УпорядочитьДокументыНаСервере();
		
	КонецЕсли;
	
	Параметры.Свойство("АвтостартПроведенияПриОткрытии"	, Объект.АвтостартПроведенияПриОткрытии);
	Параметры.Свойство("ПропускатьНепроведенные"		, Объект.ПропускатьНепроведенные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.АвтостартПроведенияПриОткрытии Тогда
		ПодключитьОбработчикОжидания("ПровестиДокументыОтложенный", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследовательностьНаСервере()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ЗаполнитьПоследовательностьНаСервере();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект,"Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоследовательность(Команда)
	ЗаполнитьПоследовательностьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПоследовательность(Команда)
	Если Объект.СписокДокументовДляПроведения.Количество() = 0 Тогда
		ЗаполнитьПоследовательностьНаСервере();
	КонецЕсли;
	ПровестиДокументыКлиент(Истина);
КонецПроцедуры

&НаСервере
Процедура КорректировкаПриходныхНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.СкорректироватьПриходныеНакладные();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПриходных(Команда)
	КорректировкаПриходныхНаСервере();
	ПровестиДокументыКлиент();
КонецПроцедуры

&НаСервере
Функция УдалитьЛишниеПартииНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Удалено = ОбработкаОбъект.УдалитьЛишниеПартии();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект,"Объект");
	
	Возврат Удалено;
	
КонецФункции

&НаКлиенте
Процедура УдалитьЛишниеПартии(Команда)
	Удалено = УдалитьЛишниеПартииНаСервере();
	Сообщить("Удалено " + Удалено + " лишних партий.");
КонецПроцедуры