#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Функция ЕстьЗаказнаСборку(Заявка, Идентификатор) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	а_ЗаказНаСборку.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.а_ЗаказНаСборку КАК а_ЗаказНаСборку
	               |ГДЕ
	               |	НЕ а_ЗаказНаСборку.ПометкаУдаления
	               |	И а_ЗаказНаСборку.ДокументОснование = &Заявка
	               |	И а_ЗаказНаСборку.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("заявка", Заявка);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти  

Функция ПользовательКладовщик() Экспорт
	
	Возврат Не РольДоступна("ерпсИспользованиеАктаПриемкиПередачи") И РольДоступна("Кладовщик") И НЕ РольДоступна("ПолныеПрава");
	
КонецФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьЗаказНаСборку";
	КомандаПечати.Представление = НСтр("ru = 'Заказ на сборку'; uk = 'Замовлення на збірку'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЗаказНаСборку") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ИмяМакета = "";
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПечатьЗаказНаСборку",
			НСтр("ru = 'Заказ на сборку'; uk = 'Замовлення на збірку'"),
			ПолучитьТабличныйДокумент(МассивОбъектов, ОбъектыПечати, ИмяМакета),
			,
			ИмяМакета);
	КонецЕсли;		
		
КонецПроцедуры

Функция ПолучитьТабличныйДокумент(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаСборку";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;	
	
	ТабличныйДокумент = Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Печать_ОтчетПоЗаявкам(
		МассивОбъектов,
		Неопределено,
		Новый Структура("Заявка", МассивОбъектов),
		"СхемаКомпоновкиДанныхЗаказНаСборку"
	);

	
	
	Возврат ТабличныйДокумент;	
	
КонецФункции

#КонецОбласти 

Функция ПолучитьКонтрагента(ДокументОснование, Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиПунктыРазгрузки.Контрагент КАК Контрагент
	               |ИЗ
	               |	Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ПунктыРазгрузки КАК ерпсЗаявкаНаСозданиеАктовПриемкиПередачиПунктыРазгрузки
	               |ГДЕ
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиПунктыРазгрузки.Ссылка = &Ссылка
	               |	И ерпсЗаявкаНаСозданиеАктовПриемкиПередачиПунктыРазгрузки.Идентификатор = &Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент.НаименованиеПолное;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецЕсли