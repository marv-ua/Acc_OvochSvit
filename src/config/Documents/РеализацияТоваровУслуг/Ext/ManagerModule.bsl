#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПечатьДокументаДляЭДО(ДокументСсылка) Экспорт
	
	СтруктураПоказателей = Новый Структура();
	СтруктураПоказателей.Вставить("ПервичныйДокумент",	 Новый Структура());	   // данные шапки
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("R", Новый ТаблицаЗначений()); // данные табличной части
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Наименование");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("КодАртикул");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Количество");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("ЕдиницаИзмерения");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("ЕдиницаИзмеренияКод");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Цена");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СуммаБезСкидки");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СуммаСкидки");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("Сумма");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СуммаНДС");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("ТипНоменклатуры");
	СтруктураПоказателей.ПервичныйДокумент.R.Колонки.Добавить("СтавкаНДС");
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка.Ссылка);
	Запрос.УстановитьПараметр("НДС20", Перечисления.СтавкиНДС.НДС20);
	Запрос.УстановитьПараметр("НДС7",  Перечисления.СтавкиНДС.НДС7);
	
	Запрос.Текст ="
	|ВЫБРАТЬ 
	|	СУММА(ТЧ.СуммаНДС)    КАК СуммаНДСТовары,
	|	КОЛИЧЕСТВО(*) 		  КАК КоличествоТовары,
	|	СУММА(ТЧ.СуммаБезСкидки) КАК СуммаБезСкидкиТовары,
	|	СУММА(ТЧ.СуммаСкидки) КАК СуммаСкидкиТовары
	|ПОМЕСТИТЬ ТОВАРЫ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТЧ
	|
	|ГДЕ
	|	ТЧ.Ссылка = &ТекущийДокумент
	|;
	|ВЫБРАТЬ 
	|	СУММА(ТЧ.СуммаНДС) 		КАК СуммаНДСУслуги,
	|	КОЛИЧЕСТВО(*) 			КАК КоличествоУслуги,
	|	СУММА(ТЧ.СуммаБезСкидки) КАК СуммаБезСкидкиУслуги,
	|	СУММА(ТЧ.СуммаСкидки) 	КАК СуммаСкидкиУслуги
	|ПОМЕСТИТЬ Услуги
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ТЧ
	|
	|ГДЕ
	|	ТЧ.Ссылка = &ТекущийДокумент
	|;
	|ВЫБРАТЬ 
	|	СУММА(Сумма) КАК СуммаВозвратнойТары
	|ПОМЕСТИТЬ Тара
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ТЧ
	|
	|ГДЕ
	|	ТЧ.Ссылка = &ТекущийДокумент
	|;
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	
	|	Организация КАК Организация,
	|	Организация КАК Поставщик,
	
	|	Контрагент  КАК Покупатель,
	|	Контрагент.КодФилиала  КАК ПокупательКодФилиала,
	
	|	Сделка,
	|	Сделка.Номер КАК СделкаНомер,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	Получил КАК ПредставительПокупателя,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Контрагент.ЮридическоеФизическоеЛицо КАК ПокупательЮрФизЛицо,
	
	|	ДоговорКонтрагента.ВидДоговора  		 КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.Дата  				 КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 				 КАК ДоговорНомер,
	
	|   БанковскийСчетОрганизации	   КАК СтруктурнаяЕдиница, 
	|   БанковскийСчетОрганизации.Банк КАК СтруктурнаяЕдиницаБанк, 
	|   БанковскийСчетОрганизации.Банк.Код КАК СтруктурнаяЕдиницаБанкКод, 
	|   БанковскийСчетОрганизации.НомерСчета КАК СтруктурнаяЕдиницаНомерСчета, 
	
	|	Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
	
	|	СуммаДокумента,
	
	|	ЕстьNULL(СуммаНДСТовары, 0) КАК СуммаНДСТовары,
	|	ЕстьNULL(СуммаНДСУслуги, 0) КАК СуммаНДСУслуги,
	
	|	ЕстьNULL(КоличествоТовары, 0) 	  КАК КоличествоТовары,
	|	ЕстьNULL(КоличествоУслуги, 0) 	  КАК КоличествоУслуги,
	|	ЕстьNULL(СуммаБезСкидкиТовары, 0) КАК СуммаБезСкидкиТовары,
	|	ЕстьNULL(СуммаБезСкидкиУслуги, 0) КАК СуммаБезСкидкиУслуги,
	|	ЕстьNULL(СуммаСкидкиТовары, 0) 	  КАК СуммаСкидкиТовары,
	|	ЕстьNULL(СуммаСкидкиУслуги, 0) 	  КАК СуммаСкидкиУслуги,
	|	ЕстьNULL(СуммаВозвратнойТары, 0)  КАК СуммаВозвратнойТары,
	
	|	ВалютаДокумента,
	
	//|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ПервичныйДокумент
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары ПО Истина
	|ЛЕВОЕ СОЕДИНЕНИЕ Услуги КАК Услуги ПО Истина
	|ЛЕВОЕ СОЕДИНЕНИЕ Тара   КАК Тара   ПО Истина 
	|
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	КодЯзыкаПечать = "uk";	
	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,Шапка.СтруктурнаяЕдиница,КодЯзыкаПечать);
	СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	НазваниеОрганизации = СведенияОПоставщике.ПолноеНаименование;
	
	
	Если Шапка.КоличествоТовары = 0 И Шапка.КоличествоУслуги > 0 Тогда
		СтруктураПоказателей.ПервичныйДокумент.Вставить("НазваниеДокумента", "Акт надання послуг");
	ИначеЕсли Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		СтруктураПоказателей.ПервичныйДокумент.Вставить("НазваниеДокумента", "Видаткова накладна (на комісію)");
	Иначе	
		СтруктураПоказателей.ПервичныйДокумент.Вставить("НазваниеДокумента", "Видаткова накладна");
	КонецЕсли; 
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("НомерДок", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер,Истина,Истина));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДатаДок",  Шапка.Дата);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикНаименование",  СведенияОПоставщике.ПолноеНаименование);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикКод",   	  	  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикКодЧисло",	  "" + СведенияОПоставщике.КодПоЕДРПОУ + СведенияОПоставщике.КодПоДРФО);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикИНН",   	  	  СведенияОПоставщике.ИНН);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикНомерСвидетельства", СведенияОПоставщике.НомерСвидетельства);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикБанк",  		СведенияОПоставщике.Банк);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикМФО",  		СведенияОПоставщике.МФО);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикНомерСчета",  СведенияОПоставщике.НомерСчета);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикЮридическийАдрес", СведенияОПоставщике.ЮридическийАдрес);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикТелефоны",   		СведенияОПоставщике.Телефоны);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПоставщикСистемаНалогообложения", СведенияОПоставщике.ИнформацияОСтатусеПлательщикаНалогов);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательНаименование", СведенияОПокупателе.ПолноеНаименование);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательТелефоны", 	  СведенияОПокупателе.Телефоны);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательКод", 		  ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "КодПоЕДРПОУ,КодПоДРФО,",,КодЯзыкаПечать));
	ПокупательКодФилиала = СокрЛП(Шапка.ПокупательКодФилиала); 
	Если Найти(ПокупательКодФилиала, "@") > 0 Тогда
		ПокупательКодФилиала = Лев(ПокупательКодФилиала, Найти(ПокупательКодФилиала, "@") - 1);
	КонецЕсли;
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательКодФилиала",     ПокупательКодФилиала);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПокупательЮридическийАдрес",     СведенияОПокупателе.ЮридическийАдрес);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДоговорНомер",  Шапка.ДоговорНомер);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДоговорДата",   Шапка.ДоговорДата);
	
	Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
		Сделка = Шапка.Сделка;
		МетаданныеДокумента = Сделка.Метаданные();
		ЗначениеПараметра = Локализация.ПолучитьЛокализованныйСинонимОбъекта(Сделка, КодЯзыкаПечать);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.СделкаНомер,Истина,Истина);
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("НомерВходящегоДокумента", МетаданныеДокумента) И ЗначениеЗаполнено(Сделка.НомерВходящегоДокумента) Тогда
			НомерДокумента = Сделка.НомерВходящегоДокумента;
		КонецЕсли;
		//ДатаДокумента = Формат(Сделка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		ДатаДокумента = Сделка.Дата;
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДатаВходящегоДокумента", МетаданныеДокумента) И ЗначениеЗаполнено(Сделка.ДатаВходящегоДокумента) Тогда
			//ДатаДокумента = Формат(Сделка.ДатаВходящегоДокумента, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
			ДатаДокумента = Сделка.ДатаВходящегоДокумента;
		КонецЕсли;
		СтруктураПоказателей.ПервичныйДокумент.Вставить("ТипДокумента", ЗначениеПараметра);
		СтруктураПоказателей.ПервичныйДокумент.Вставить("СчетНомер", 	НомерДокумента);
		СтруктураПоказателей.ПервичныйДокумент.Вставить("СчетДата", 	ДатаДокумента);
	КонецЕсли;
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаДокБезНДС", Шапка.СуммаДокумента - Шапка.СуммаНДСТовары - Шапка.СуммаНДСУслуги);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаДок", Шапка.СуммаДокумента);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаДокПрописью", ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаНДСДок", Шапка.СуммаНДСТовары + Шапка.СуммаНДСУслуги);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаНДСДокПрописью", ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Шапка.СуммаНДСТовары + Шапка.СуммаНДСУслуги, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаВозвратнойТары", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.СуммаВозвратнойТары));
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("КоличествоНаименований", Шапка.КоличествоТовары + Шапка.КоличествоУслуги);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаБезСкидки", Шапка.СуммаБезСкидкиТовары + Шапка.СуммаБезСкидкиУслуги);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("СуммаСкидки", Шапка.СуммаСкидкиТовары + Шапка.СуммаСкидкиУслуги);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ВыписалДок", Шапка.Отпустил);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ВыписалДок", Шапка.Отпустил);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("МестоСоставления", Шапка.МестоСоставленияДокумента);
	
	РуководителиОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
	РуководителиКонтрагента = ОтветственныеЛицаБП.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДолжностьРуководителяПоставщика", 	РуководителиОрганизации.РуководительДолжность);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПредставлениеПоставщика",			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("РуководительПоставщика",			РуководителиОрганизации.РуководительПредставление);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ДолжностьРуководителяПокупателя",	?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПредставлениеПокупателя",			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("РуководительПокупателя",			РуководителиКонтрагента.РуководительПредставление);
	
	ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПредставительПоставщика", ДолжностьФИОПредставителя);
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПредставительПокупателя", Шапка.ПредставительПокупателя);
	
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПредставлениеПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ПредставлениеПокупателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	
	//даты подписей
	СтруктураПоказателей.ПервичныйДокумент.Вставить("Дата",  Шапка.Дата); 
	СтруктураПоказателей.ПервичныйДокумент.Вставить("Дата1",  Шапка.Дата);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ПервичныйДокумент");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Наименование,
	
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Код КАК Код,
	
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	
	|	Цена 			КАК Цена,
	|	СуммаБезСкидки 	КАК СуммаБезСкидки,
	|	СуммаСкидки 	КАК СуммаСкидки,
	|	Сумма 			КАК Сумма,
	|	СуммаНДС 		КАК СуммаНДС,
	
	|	СтавкаНДС КАК СтавкаНДС,
	|	""Т"" КАК ТипНоменклатуры,
	|	НомерСтроки КАК НомерСтроки,
	|    1 КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ПервичныйДокумент
	|
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Код КАК Код,
	|	Количество,
	
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	
	|	Цена 			КАК Цена,
	|	СуммаБезСкидки 	КАК СуммаБезСкидки,
	|	СуммаСкидки 	КАК СуммаСкидки,
	|	Сумма 			КАК Сумма,
	|	СуммаНДС 		КАК СуммаНДС,
	|	СтавкаНДС КАК СтавкаНДС,
	|	""П"" КАК ТипНоменклатуры,
	|	НомерСтроки КАК НомерСтроки,
	|    2 КАК ID
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ПервичныйДокумент
	|
	|ГДЕ
	|	ПервичныйДокумент.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|    ID,
	|	НомерСтроки";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ДопКолонка = "Артикул";
	Иначе
		ДопКолонка = "Код";
	КонецЕсли;
	СтруктураПоказателей.ПервичныйДокумент.Вставить("ТипКода", ДопКолонка);
	
	Пока ВыборкаТовары.Следующий() Цикл
		СтрокаДок = СтруктураПоказателей.ПервичныйДокумент.R.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДок, ВыборкаТовары);
		
		СтрокаДок.СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ВыборкаТовары.СтавкаНДС);
		Если ВыборкаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаДок.СтавкаНДС = "Б";
		ИначеЕсли ВыборкаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС Тогда	
			СтрокаДок.СтавкаНДС = "Н";
		КонецЕсли;
		
		СтрокаДок.КодАртикул = ВыборкаТовары[ДопКолонка];
	КонецЦикла;
	
	Возврат СтруктураПоказателей;
	
	
КонецФункции	

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, СчетаУчета = Неопределено) Экспорт
	
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора, ВалютаВзаиморасчетов, СложныйНалоговыйУчет");
	
	ЭтоКомиссия          = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭтоБартер            = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный;
	Внешнеэкономический  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И (РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
	СложныйНалоговыйУчет = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И (РеквизитыДоговора.СложныйНалоговыйУчет);

	Если ЭтоКомиссия Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Объект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	ИначеЕсли ЭтоБартер Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	Если Внешнеэкономический Тогда
		Объект.СчетУчетаРасчетовПоТаре = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Объект.СчетУчетаРасчетовПоТареПоАвансам	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе	
		Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТарыПокупателя;
		Объект.СчетУчетаРасчетовПоТареПоАвансам	= СчетаУчета.СчетАвансовПоТареПокупателя;
	КонецЕсли;
	
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДС(ПлательщикНДС, ЭтоКомиссия, Объект.Дата) Тогда		
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		Объект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДСПродаж;		
	КонецЕсли;
	Если Не РеализацияТоваровУслугФормыКлиентСервер.ИспользуетсяСчетУчетаНДСПодтвержденный(ПлательщикНДС, ЭтоКомиссия, Объект.Дата, СложныйНалоговыйУчет) Тогда
		Объект.СчетУчетаНДСПодтвержденный = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		Объект.СчетУчетаНДСПодтвержденный = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация	= Истина;
	ДанныеОбъекта.ЭтоКомиссия	= (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора")
		= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчетаБУ") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаБУ) Тогда
			СтрокаТабличнойЧасти.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетПередачиБУ) Тогда
			СтрокаТабличнойЧасти.ПереданныеСчетУчетаБУ = СчетаУчета.СчетПередачиБУ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеОбъекта.ЭтоКомиссия Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СхемаРеализации) Тогда
			СтрокаТабличнойЧасти.СхемаРеализации = СчетаУчета.СхемаРеализации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначение) Тогда
		СтрокаТабличнойЧасти.НалоговоеНазначение = СчетаУчета.НалоговоеНазначение;
	КонецЕсли;
	Если ЗначениеЗаполнено(СчетаУчета.НалоговоеНазначениеДоходовИЗатрат) Тогда
		СтрокаТабличнойЧасти.НалоговоеНазначениеДоходовИЗатрат = СчетаУчета.НалоговоеНазначениеДоходовИЗатрат;
	КонецЕсли;

КонецПроцедуры

// Перечень табличных частей, данные которых не используются 
// в контексте документа, скрыты от пользователя
Функция НеИспользуемыеТабличныеЧасти(ВидОперации, Комиссия, Внешнеэкономический) Экспорт
	
	ТабличныеЧасти = Новый Массив;
	
		// Услуги не доступны при комиссии
		Если Комиссия Тогда
			ТабличныеЧасти.Добавить("Услуги");
		КонецЕсли;
		
		// Возвратная тара доступна только, если включена соответствующая опция
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") ИЛИ Внешнеэкономический Тогда
			ТабличныеЧасти.Добавить("ВозвратнаяТара");
		КонецЕсли;
	
	
	Возврат ТабличныеЧасти;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации	= Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается основная форма. Вид операции определяется по документу-основанию.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыРеализацииТоваровУслуг = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыРеализацииТоваровУслуг[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки.
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Накладная";
	КомандаОтправки.Представление = НСтр("ru='Расходная накладная';uk='Видаткова накладна'");
	КомандаОтправки.Порядок       = 10;
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Акт";
	КомандаОтправки.Представление = НСтр("ru='Акт об оказании услуг';uk='Акт про надання послуг'");
	КомандаОтправки.Порядок       = 20;
	
КонецПроцедуры

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыРеализацияТоваровУслуг = Новый Соответствие;
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, 						"ФормаДокументаОбщая");
	ФормыРеализацияТоваровУслуг.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, 							"ФормаДокументаОбщая");
	
	Возврат ФормыРеализацияТоваровУслуг;

КонецФункции 

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Расходная накладная';uk='Видаткова накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	//ерпс
	// Расходная накладная без цен
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная без цен";
	КомандаПечати.Представление = НСтр("ru='Расходная накладная без цен';uk='Видаткова накладна без цін'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	// СчетФактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru='Счёт-фактура';uk='Рахунок-фактура'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	//...ерпс

	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru='Акт об оказании услуг';uk='Акт про надання послуг'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";
	
	// Товарно-транспортная накладная (1-Т)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru='Товарно-транспортная накладная (1-ТН)';uk='Товарно-транспортна накладна (1-ТН)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ОткрытьФормуПечатиТТН";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";	

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДляВыгрузкиВ1СЗвит";
	КомандаПечати.Представление = НСтр("ru='Акт/Накладная (для обмена через ""FREDO ДокМен"")';uk= 'Акт/Накладна (для обміну через ""FREDO ДокМен"")'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ОткрытьПечатнуюФормуПредварительногоПросмотраЭДО";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Реализация товаров и услуг""';uk='Реєстр документів ""Реалізація товарів і послуг""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	// Товарно-транспортная накладная (1-Т) упрощенная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТТН";
	КомандаПечати.Идентификатор = "ТТН_Упрощенная";
	КомандаПечати.Представление = НСтр("ru='Товарно-транспортная накладная (1-ТН) упрощенная';uk='Товарно-транспортна накладна (1-ТН) спрощена'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ОткрытьФормуПечатиТТН";
	КомандаПечати.СписокФорм    = "ФормаСписка,ФормаВыбора,ФормаДокументаОбщая";	
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Расходная накладная';uk='Видаткова накладна'"), 
			ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная", , Истина);
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", НСтр("ru='Акт об оказании услуг';uk='Акт про надання послуг'"), 
			ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт", , Истина);
	КонецЕсли;
	//ерпс	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура", НСтр("ru='Счёт-фактур';uk='Рахунок-фактура'"), 
			ПечатьДокументаСчетФактура(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.РеализацияТоваровУслуг.ПФ_MXL_Счёт", , Ложь);
	КонецЕсли;	
	//...ерпс
	//ерпс
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная без цен") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная без цен", НСтр("ru='Расходная накладная без цен';uk='Видаткова накладна без цін'"), 
			ПечатьДокументаБезЦен(МассивОбъектов, ОбъектыПечати, ПараметрыВывода),,"Документ.РеализацияТоваровУслуг.ПФ_MXL_НакладнаяБезЦен", , Истина);
	КонецЕсли;
	//...ерпс

	
КонецПроцедуры
//...ерпс


// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
//	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Организация,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия,
	// Test{20231123
	//|	АдресДоставки,
	|	ПунктРазгрузки.Наименование КАК АдресДоставки,
	// Test}
	|	Контрагент  КАК Покупатель,
	|	Организация КАК Поставщик,
	|	Сделка,
	|	Склад,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	БанковскийСчетОрганизации,
	|	СуммаВключаетНДС
	//ек++
	|	,а_Периоды КАК Период
	//ек
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ЗапросТЧТовары = Новый Запрос;
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросТЧТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул  КАК Артикул,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	СуммаБезСкидки,
	|	СуммаСкидки,
	|	Сумма,
	|	СуммаНДС,
	|   НомерСтроки,
	|	1 КАК ID
	//#8624
	|	,ДополнительныйАртикул КАК ДополнительныйАртикул
	//...#8624
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаБезСкидки)КАК СуммаБезСкидки,
	|		СУММА(СуммаСкидки)   КАК СуммаСкидки,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	//#8624
	|		,ДополнительныйАртикул КАК ДополнительныйАртикул
	//...#8624
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	//#8624
	|		,ДополнительныйАртикул
	//...#8624
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Цена,
	|	СуммаБезСкидки,
	|	СуммаСкидки,
	|	Сумма,
	|	СуммаНДС,
	|	НомерСтроки,
	|	2
	//#8624
	|	,""""
	//...#8624
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";

	ЗапросТЧТара = Новый Запрос;
	ЗапросТЧТара.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
				   |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
				   |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
				   |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
				   |	ВложенныйЗапрос.Количество,
				   |	ВложенныйЗапрос.ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Цена,
	               |	ВложенныйЗапрос.Сумма,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Реализация.Номенклатура КАК Номенклатура,
	               |		Реализация.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	               |		Реализация.Цена КАК Цена,
	               |		СУММА(Реализация.Количество) КАК Количество,
	               |		СУММА(Реализация.Сумма) КАК Сумма,
	               |		МИНИМУМ(Реализация.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК Реализация
	               |	
	               |	ГДЕ
	               |		Реализация.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Реализация.Номенклатура,
	               |		Реализация.Цена) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная2");
	
	// печать производится на языке, указанном в настройках
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар = Макет.Область("Товар");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
											
		ОбластьКолонкаТоварБезСкидок = Макет.Область("ТоварБезСкидок");
		ОбластьКолонкаТоварБезСкидок.ШиринаКолонки = ОбластьКолонкаТоварБезСкидок.ШиринаКолонки + 
											Макет.Область("КолонкаКодовБезСкидок").ШиринаКолонки;
	КонецЕсли;

	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();

		ЗапросТЧТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТовары = ЗапросТЧТовары.Выполнить().Выгрузить();
		
		ЗапросТЧТара.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТара = ЗапросТЧТара.Выполнить().Выгрузить();	
		
		УчитыватьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, Шапка.Дата);

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 
		
		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,Шапка.БанковскийСчетОрганизации,КодЯзыкаПечать);
		
//

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	    ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,"ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,Склад,АдресДоставки,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		//ек++
		Если ЗначениеЗаполнено(Шапка.Период) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("а_Период");
			ОбластьМакета.Параметры.Период = СокрЛП(СтрШаблон("%1 (%2)", Шапка.Период.ПредставлениеПериода, Шапка.Период));//?(ЗначениеЗаполнено(Шапка.Период.ПредставлениеПериода), Шапка.Период.ПредставлениеПериода, Шапка.Период));
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		//ек
		

		ЕстьСкидки = (ЗапросТовары.Итог("СуммаСкидки") <> 0);
		
		СуффиксОбластиТаблицы = ?(ЕстьСкидки, "", "БезСкидок");
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидка = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		Суффикс = "";
		Если УчитыватьНДС Тогда
			Если Шапка.СуммаВключаетНДС Тогда
				Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
			Иначе	
				Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
			КонецЕсли;
			Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		КонецЕсли;
	    ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидка);
		КонецЕсли;
		ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		Сумма    		= 0;
		СуммаБезСкидки  = 0;
		СуммаСкидки 	= 0;
		СуммаНДС 		= 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			//#8624
			ОбластьДанных.Параметры.ДопАртикул = ВыборкаСтрокТовары.ДополнительныйАртикул;
			//...#8624
			ТабДокумент.Присоединить(ОбластьДанных);

			Если ЕстьСкидки Тогда
				ОбластьСкидки.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьСкидки);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			СуммаБезСкидки = СуммаБезСкидки + ВыборкаСтрокТовары.СуммаБезСкидки;
			СуммаСкидки    = СуммаСкидки    + ВыборкаСтрокТовары.СуммаСкидки;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Итого|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			ОбластьСкидки.Параметры.ВсегоСуммаБезСкидки = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаБезСкидки);		
			ОбластьСкидки.Параметры.ВсегоСуммаСкидки    = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСкидки);
			ТабДокумент.Присоединить(ОбластьСкидки);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС,,"""");
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;

		// выведем таблицу с возвратной тарой
		Если ЗапросТара.Количество() > 0 Тогда
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьКолонкаТара = Макет.Область("Тара");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТара.ШиринаКолонки = ОбластьКолонкаТара.ШиринаКолонки + 
				Макет.Область("КолонкаКодовТара").ШиринаКолонки;
			КонецЕсли;
			
	        ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
			
			СуммаТара    = 0;
			
			Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение тары - строка при печати пропущена.';uk='В одному з рядків не заповнене значення тари - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				
				ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТара.Товар);
				ТабДокумент.Присоединить(ОбластьДанных);
			
				СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
				
				
			КонецЦикла;
			
			// Вывести Итого
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// сделаем отступ 
			ТабДокумент.Вывести(ОбластьПробел);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		////ерпс
		//ОбластьМакета.Параметры.ЗагВаг = ЗапросТовары.Итог("Количество");
		////...ерпс
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
												 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
												 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
												 
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		 										 + ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));

		////ерпс
		ОбластьМакета.Параметры.ЗагВага = ЗапросТовары.Итог("Количество");
		////...ерпс										 
		ТабДокумент.Вывести(ОбластьМакета);

		Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
			ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 

		// Вывести подписи
		ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
		ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
		
		ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
									?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
									?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
									?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
		ТабДокумент.Вывести(ОбластьМакета);
		Если Шапка.ПолучилПоДругомуДокументу Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
		Иначе			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
		КонецЕсли; 
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
 
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;
	Возврат ТабДокумент;

КонецФункции

//ерпс
// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокументаБезЦен(МассивОбъектов, ОбъектыПечати, ПараметрыВывода) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
//	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Организация,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия, 
	|	АдресДоставки,
	|	Контрагент  КАК Покупатель,
	|	Организация КАК Поставщик,
	|	Сделка,
	|	Склад,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	БанковскийСчетОрганизации,
	|	СуммаВключаетНДС
	//ек++
	|	,а_Периоды КАК Период
	//ек
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ЗапросТЧТовары = Новый Запрос;
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросТЧТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул  КАК Артикул,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	СуммаБезСкидки,
	|	СуммаСкидки,
	|	Сумма,
	|	СуммаНДС,
	|   НомерСтроки,
	|	1 КАК ID
	//#8624
	|	,ДополнительныйАртикул КАК ДополнительныйАртикул
	//...#8624
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаБезСкидки)КАК СуммаБезСкидки,
	|		СУММА(СуммаСкидки)   КАК СуммаСкидки,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	//#8624
	|		,ДополнительныйАртикул КАК ДополнительныйАртикул
	//...#8624
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	//#8624
	|		,ДополнительныйАртикул
	//...#8624
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Цена,
	|	СуммаБезСкидки,
	|	СуммаСкидки,
	|	Сумма,
	|	СуммаНДС,
	|	НомерСтроки,
	|	2
	//#8624
	|	,""""
	//...#8624
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";

	ЗапросТЧТара = Новый Запрос;
	ЗапросТЧТара.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
				   |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
				   |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
				   |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
				   |	ВложенныйЗапрос.Количество,
				   |	ВложенныйЗапрос.ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Цена,
	               |	ВложенныйЗапрос.Сумма,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Реализация.Номенклатура КАК Номенклатура,
	               |		Реализация.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	               |		Реализация.Цена КАК Цена,
	               |		СУММА(Реализация.Количество) КАК Количество,
	               |		СУММА(Реализация.Сумма) КАК Сумма,
	               |		МИНИМУМ(Реализация.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК Реализация
	               |	
	               |	ГДЕ
	               |		Реализация.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Реализация.Номенклатура,
	               |		Реализация.Цена) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная1";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Накладная1");
	
	// печать производится на языке, указанном в настройках
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар = Макет.Область("Товар");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
											
		ОбластьКолонкаТоварБезСкидок = Макет.Область("ТоварБезСкидок");
		ОбластьКолонкаТоварБезСкидок.ШиринаКолонки = ОбластьКолонкаТоварБезСкидок.ШиринаКолонки + 
											Макет.Область("КолонкаКодовБезСкидок").ШиринаКолонки;
	КонецЕсли;

	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();

		ЗапросТЧТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТовары = ЗапросТЧТовары.Выполнить().Выгрузить();
		
		ЗапросТЧТара.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТара = ЗапросТЧТара.Выполнить().Выгрузить();	
		
		УчитыватьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, Шапка.Дата);

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 
		
		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,Шапка.БанковскийСчетОрганизации,КодЯзыкаПечать);
		
//

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	    ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,"ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,Склад,АдресДоставки,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		//ек++
		Если ЗначениеЗаполнено(Шапка.Период) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("а_Период");
			ОбластьМакета.Параметры.Период = СокрЛП(СтрШаблон("%1 (%2)", Шапка.Период.ПредставлениеПериода, Шапка.Период));
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		//ек

		

		ЕстьСкидки = (ЗапросТовары.Итог("СуммаСкидки") <> 0);
		
		СуффиксОбластиТаблицы = ?(ЕстьСкидки, "", "БезСкидок");
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		//Если ЕстьСкидки Тогда
		//	ОбластьСкидка = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		//КонецЕсли;
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		//Суффикс = "";
		//Если УчитыватьНДС Тогда
		//	Если Шапка.СуммаВключаетНДС Тогда
		//		Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		//	Иначе	
		//		Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		//	КонецЕсли;
		//	Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		//КонецЕсли;
		//ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ТабДокумент.Присоединить(ОбластьДанных);
		//Если ЕстьСкидки Тогда
		//	ТабДокумент.Присоединить(ОбластьСкидка);
		//КонецЕсли;
		//ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		//ТабДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		//Если ЕстьСкидки Тогда
		//	ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
		//КонецЕсли;
		//ОбластьСуммы  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		Сумма    		= 0;
		СуммаБезСкидки  = 0;
		СуммаСкидки 	= 0;
		СуммаНДС 		= 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			//#8624
			ОбластьДанных.Параметры.ДопАртикул = ВыборкаСтрокТовары.ДополнительныйАртикул;
			//...#8624
			ТабДокумент.Присоединить(ОбластьДанных);

			//Если ЕстьСкидки Тогда
			//	ОбластьСкидки.Параметры.Заполнить(ВыборкаСтрокТовары);
			//	ТабДокумент.Присоединить(ОбластьСкидки);
			//КонецЕсли;

			//ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			//ТабДокумент.Присоединить(ОбластьСуммы);
			
			//Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			//СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
			//СуммаБезСкидки = СуммаБезСкидки + ВыборкаСтрокТовары.СуммаБезСкидки;
			//СуммаСкидки    = СуммаСкидки    + ВыборкаСтрокТовары.СуммаСкидки;

		КонецЦикла;

		// Вывести Итого
		//ОбластьНомера = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		//ОбластьКодов  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		//ОбластьДанных = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		//Если ЕстьСкидки Тогда
		//	ОбластьСкидки = Макет.ПолучитьОбласть("Итого|Скидка");
		//КонецЕсли;
		//ОбластьСуммы  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		//
		//ТабДокумент.Вывести(ОбластьНомера);
		//Если ВыводитьКоды Тогда
		//	ТабДокумент.Присоединить(ОбластьКодов);
		//КонецЕсли;
		//ТабДокумент.Присоединить(ОбластьДанных);
		
		//Если ЕстьСкидки Тогда
		//	ОбластьСкидки.Параметры.ВсегоСуммаБезСкидки = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаБезСкидки);		
		//	ОбластьСкидки.Параметры.ВсегоСуммаСкидки    = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСкидки);
		//	ТабДокумент.Присоединить(ОбластьСкидки);
		//КонецЕсли;
		
		//ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		//ТабДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		//Если УчитыватьНДС Тогда
		//	// НДС
		//	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		//	ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС,,"""");
		//	ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		//	ТабДокумент.Вывести(ОбластьМакета);
		//	
		//	// всего с НДС (если сумма не включает НДС)
		//	Если НЕ Шапка.СуммаВключаетНДС Тогда
		//		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		//		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
		//		ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
		//		ТабДокумент.Вывести(ОбластьМакета);
		//	КонецЕсли;
		//КонецЕсли;

		// выведем таблицу с возвратной тарой
		Если ЗапросТара.Количество() > 0 Тогда
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьКолонкаТара = Макет.Область("Тара");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТара.ШиринаКолонки = ОбластьКолонкаТара.ШиринаКолонки + 
				Макет.Область("КолонкаКодовТара").ШиринаКолонки;
			КонецЕсли;
			
	        ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
			
			//СуммаТара    = 0;
			
			Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение тары - строка при печати пропущена.';uk='В одному з рядків не заповнене значення тари - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				
				ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТара.Товар);
				ТабДокумент.Присоединить(ОбластьДанных);
			
				//СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
				
				
			КонецЦикла;
			
			// Вывести Итого
			//ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
			//ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара);
			//ТабДокумент.Вывести(ОбластьМакета);
			
			// сделаем отступ 
			ТабДокумент.Вывести(ОбластьПробел);
		КонецЕсли;
		
		// Вывести Сумму прописью
		//ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		//СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		//ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
		//										 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
		//										 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
		//										 
		//ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		// 										 + ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));

		//ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗагВаг");
		ОбластьМакета.Параметры.ЗагальнаВага = ЗапросТовары.Итог("Количество");
		ТабДокумент.Вывести(ОбластьМакета);
		
		
		Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
			ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 

		// Вывести подписи
		ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
		ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
		
		ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
									?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
									?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
									?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
		ТабДокумент.Вывести(ОбластьМакета);
		Если Шапка.ПолучилПоДругомуДокументу Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
		Иначе			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
		КонецЕсли; 
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
 
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;
		
	Область = Макет.ПОлучитьОбласть("ФИОВодителя");
	ТабДокумент.Вывести(Область);
	Возврат ТабДокумент;

КонецФункции
//ерпс

// Функция формирует табличный документ с печатной формой акта об обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	Получил КАК ПредставительПокупателя,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	Контрагент  КАК Покупатель,
	|	Контрагент.ЮридическоеФизическоеЛицо КАК ПокупательЮрФизЛицо,
	|	Организация КАК Поставщик,
	|	Организация,
	|	Сделка,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	БанковскийСчетОрганизации,
	|	СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки  КАК НомерСтрокиТЧ,
	|	Номенклатура КАК Номенклатура,
	|	Содержание КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаСкидки,
	|	СуммаБезСкидки,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Акт");
	
	// печать производится на языке, указанном в настройках
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар = Макет.Область("Товар");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
							Макет.Область("КолонкаКодов").ШиринаКолонки;
							
		ОбластьКолонкаТоварБезСкидок = Макет.Область("ТоварБезСкидок");
		ОбластьКолонкаТоварБезСкидок.ШиринаКолонки = ОбластьКолонкаТоварБезСкидок.ШиринаКолонки + 
							Макет.Область("КолонкаКодовБезСкидок").ШиринаКолонки;
	КонецЕсли;

	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();

		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
		
		УчитыватьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, Шапка.Дата);
	
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,Шапка.БанковскийСчетОрганизации,КодЯзыкаПечать);
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		
//

		
		РуководителиОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
		РуководителиКонтрагента = ОтветственныеЛицаБП.ОтветственныеЛицаКонтрагента(Шапка.Покупатель, Шапка.Дата);
		
		// шапка акта "УТВЕРЖДАЮ"
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
		ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РуководительПоставщика 			= РуководителиОрганизации.РуководительПредставление;
		
		ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(ПустаяСтрока(РуководителиКонтрагента.РуководительДолжность) И Шапка.ПокупательЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "Директор", РуководителиКонтрагента.РуководительДолжность);
		ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РуководительПокупателя 			= РуководителиКонтрагента.РуководительПредставление;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='АКТ оказания услуг';uk='АКТ надання послуг'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		ДанныеПредставителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация,Шапка.ПредставительПоставщика, Шапка.Дата);
		ДолжностьПредставителя = СокрЛП(ДанныеПредставителя.Должность);
		
		ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
									?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
									?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
									?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
									
		// Начинаем формировать собственно текст акта
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
		ОбластьМакета.Параметры.Заполнить(Шапка);
									
		ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
		ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;

		ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ТабДокумент.Вывести(ОбластьМакета);

		// выводим сведения о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,";	
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
		Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;		

	 	// Заканчиваем формировать текст акта
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
		ТабДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = (ТаблицаУслуги.Итог("СуммаСкидки") <> 0);
		
		СуффиксОбластиТаблицы = ?(ЕстьСкидки, "", "БезСкидок");
		
		// Вывести табличную часть
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидка = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
	    
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		// Вывести табличную часть
		Суффикс = "";
		Если УчитыватьНДС Тогда
			Если Шапка.СуммаВключаетНДС Тогда
				Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
			Иначе	
				Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
			КонецЕсли;
			Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидка);
		КонецЕсли;
		ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");
			
	    	
		ОбластьНомера = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);

		НомерСтроки = 0;

		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = СтрокаТабличнойЧасти.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = СтрокаТабличнойЧасти.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьДанных.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки Тогда
				ОбластьСкидки.Параметры.Заполнить(СтрокаТабличнойЧасти);
				ТабДокумент.Присоединить(ОбластьСкидки);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ТабДокумент.Присоединить(ОбластьСуммы);

		КонецЦикла;

		Если ТаблицаУслуги <> Неопределено Тогда

			СуммаВсего  = ТаблицаУслуги.Итог("Сумма");
			ВсегоНДС 	= ТаблицаУслуги.Итог("СуммаНДС");
			СуммаБезСкидки = ТаблицаУслуги.Итог("СуммаБезСкидки");
			СуммаСкидки    = ТаблицаУслуги.Итог("СуммаСкидки");

		Иначе

			СуммаВсего  = 0;
			ВсегоНДС 	= 0;
			СуммаБезСкидки = 0;
			СуммаСкидки    = 0;

		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Итого|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
			
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			ОбластьСкидки.Параметры.ВсегоСуммаБезСкидки = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаБезСкидки);		
			ОбластьСкидки.Параметры.ВсегоСуммаСкидки    = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСкидки);
			ТабДокумент.Присоединить(ОбластьСкидки);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаВсего);

	    ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ВсегоНДС,,"""");
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаВсего + ВсегоНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;

		// Выводим Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
		СуммаКПрописиСНДС 	= СуммаВсего + ?(Шапка.СуммаВключаетНДС, 	    0, ВсегоНДС);
		СуммаКПрописиБезНДС = СуммаВсего - ?(Шапка.СуммаВключаетНДС, ВсегоНДС, 		  0);
		Если УчитыватьНДС Тогда
			ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) склала без ПДВ '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
													 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ВсегоНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
													 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) із ПДВ '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
													 ".";
	 	Иначе
			ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
			ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 

		// выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
		ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
		
		ОбластьМакета.Параметры.РеквизитыПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
		
		ТабДокумент.Вывести(ОбластьМакета);

		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;
	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	ПолеТовары = "Таб.Товары.Ссылка";
	Результат.Вставить("ЕстьТовары",          ПолеТовары);
	Результат.Вставить("ЕстьУслуги",          СтрЗаменить(ПолеТовары, "Товары", "Услуги"));
	
	Возврат Результат;
	
КонецФункции

///ерпс
Процедура ВывестиЗаголовокПредупреждение(Организация, ТабличныйДокумент, Макет)
	
	Если Не ЗначениеЗаполнено(Макет.Области.Найти("ЗаголовокПредупреждениеСЛоготипом")) Тогда 
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеКартинки = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Организация, "ФайлЛоготип");
	
	Если ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПредупреждениеСЛоготипом");
		Попытка
			ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
		Исключение
		КонецПопытки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПредупреждение");
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

КонецПроцедуры


Функция ПечатьДокументаСчетФактура(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, СПечатью = Ложь)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
	|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
//	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|	Организация,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	Получил,
	|	ПолучилПоДругомуДокументу,
	|	ДокументПодтверждающийПолномочия, 
	|	АдресДоставки,
	|	Контрагент  КАК Покупатель,
	|	Организация КАК Поставщик,
	|	Сделка,
	|	Склад,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	БанковскийСчетОрганизации,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ЗапросТЧТовары = Новый Запрос;
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросТЧТовары.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул  КАК Артикул,
	|	Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	СуммаБезСкидки,
	|	СуммаСкидки,
	|	Сумма,
	|	СуммаНДС,
	|   НомерСтроки,
	|	1 КАК ID
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаБезСкидки)КАК СуммаБезСкидки,
	|		СУММА(СуммаСкидки)   КАК СуммаСкидки,
	|		СУММА(СуммаНДС)      КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		Цена,
	|		СтавкаНДС
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	Цена,
	|	СуммаБезСкидки,
	|	СуммаСкидки,
	|	Сумма,
	|	СуммаНДС,
	|	НомерСтроки,
	|	2
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";

	ЗапросТЧТара = Новый Запрос;
	ЗапросТЧТара.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
				   |	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Товар,
				   |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
				   |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
				   |	ВложенныйЗапрос.Количество,
				   |	ВложенныйЗапрос.ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Цена,
	               |	ВложенныйЗапрос.Сумма,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Реализация.Номенклатура КАК Номенклатура,
	               |		Реализация.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	               |		Реализация.Цена КАК Цена,
	               |		СУММА(Реализация.Количество) КАК Количество,
	               |		СУММА(Реализация.Сумма) КАК Сумма,
	               |		МИНИМУМ(Реализация.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК Реализация
	               |	
	               |	ГДЕ
	               |		Реализация.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Реализация.Номенклатура,
	               |		Реализация.Цена) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_СчетФактура";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_Счёт");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	Тип = "Счет"; 
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар = Макет.Область("Товар");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
											
		ОбластьКолонкаТоварБезСкидок = Макет.Область("ТоварБезСкидок");
		ОбластьКолонкаТоварБезСкидок.ШиринаКолонки = ОбластьКолонкаТоварБезСкидок.ШиринаКолонки + 
											Макет.Область("КолонкаКодовБезСкидок").ШиринаКолонки;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();

		ЗапросТЧТовары.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТовары = ЗапросТЧТовары.Выполнить().Выгрузить();
		
		ЗапросТЧТара.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросТара = ЗапросТЧТара.Выполнить().Выгрузить();	
		

		УчитыватьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, Шапка.Дата);

		// Выводим шапку счета c логотипом
		ВывестиЗаголовокПредупреждение(Шапка.Поставщик, ТабДокумент, Макет);
		
		// Выводим шапку накладной
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		
		Если Тип = "Счет" Тогда

			Если Шапка.ВидДоговораКонтрагента <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  
				И Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				
				СтруктураПараметров = Новый Структура;
				
				Если НачалоДня(Шапка.Дата) > ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьДатуОкончанияПереходаНаСтандартIBAN() Тогда
					ОбластьМакета       						= Макет.ПолучитьОбласть("ЗаголовокСчета2020");
					СтруктураПараметров.Вставить("НомерРасчетногоСчетаОрганизации", СведенияОПоставщике.НомерСчета); 
				Иначе
					ОбластьМакета       						= Макет.ПолучитьОбласть("ЗаголовокСчета");
					СтруктураПараметров.Вставить("НомерРасчетногоСчетаОрганизации", СведенияОПоставщике.НомерСчетаСПереносом); 
				КонецЕсли;
				
				СтруктураПараметров.Вставить("НазваниеОрганизации", СведенияОПоставщике.ПолноеНаименование);
				СтруктураПараметров.Вставить("ЕДРПОУОрганизации", БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОПоставщике));
				СтруктураПараметров.Вставить("БанкОрганизации", СведенияОПоставщике.Банк);
				СтруктураПараметров.Вставить("МФОБанкаОрганизации", СведенияОПоставщике.МФО_Платеж);
				
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;

		КонецЕсли; 

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Список товаров на комиссию';uk='Список товарів на комісію'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Счет на оплату';uk='Рахунок на оплату'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 

		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		Если Тип = "Счет" Тогда
			ОбластьМакета.Параметры.РеквизитыПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,Телефоны,Факс,Email,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);	
		КонецЕсли;
	    ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,"Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести табличную часть
		ОбластьИтого = "Итого";
		
		ЕстьСкидки = (ЗапросТовары.Итог("СуммаСкидки") <> 0);
		
		
		СуффиксОбластиТаблицы = ?(ЕстьСкидки, "", "БезСкидок");
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидка = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
	    
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Суффикс = "";
		Если УчитыватьНДС Тогда
			Если Шапка.СуммаВключаетНДС Тогда
				Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
			Иначе	
				Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
			КонецЕсли;
			Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		КонецЕсли;
		ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидка);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		
		СуммаБезСкидки	= 0;
		СуммаСкидки 	= 0;
		Сумма    		= 0;
		СуммаНДС 		= 0;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Строка|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);

		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;

			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			ТабДокумент.Присоединить(ОбластьДанных);

			Если ЕстьСкидки Тогда
				ОбластьСкидки.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьСкидки);
			КонецЕсли;

			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			СуммаБезСкидки = СуммаБезСкидки + ВыборкаСтрокТовары.СуммаБезСкидки;
			СуммаСкидки    = СуммаСкидки    + ВыборкаСтрокТовары.СуммаСкидки;
			Сумма          = Сумма       	+ ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    	+ ВыборкаСтрокТовары.СуммаНДС;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|НомерСтроки"+СуффиксОбластиТаблицы);
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|КолонкаКодов"+СуффиксОбластиТаблицы);
		ОбластьДанных = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Данные"+СуффиксОбластиТаблицы);
		Если ЕстьСкидки Тогда
			ОбластьСкидки = Макет.ПолучитьОбласть("Итого|Скидка");
		КонецЕсли;
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого"+СуффиксОбластиТаблицы+"|Сумма"+СуффиксОбластиТаблицы);
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьСкидки Тогда
			ОбластьСкидки.Параметры.ВсегоСуммаБезСкидки = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаБезСкидки);
			ОбластьСкидки.Параметры.ВсегоСуммаСкидки    = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаСкидки);
			ТабДокумент.Присоединить(ОбластьСкидки);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС,,"""");
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;

		// выведем таблицу с возвратной тарой
		Если ЗапросТара.Количество() > 0 Тогда
			// сделаем отступ от основной таблицы
			ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
			ТабДокумент.Вывести(ОбластьПробел);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьДанных);
			
			ОбластьКолонкаТара = Макет.Область("Тара");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТара.ШиринаКолонки = ОбластьКолонкаТара.ШиринаКолонки + 
				Макет.Область("КолонкаКодовТара").ШиринаКолонки;
			КонецЕсли;
			
	        ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
			
			СуммаТара    = 0;
			
			Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
					Сообщить(НСтр("ru='В одной из строк не заполнено значение тары - строка при печати пропущена.';uk='В одному з рядків не заповнене значення тари - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
				ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТара.Товар);
				ТабДокумент.Присоединить(ОбластьДанных);
			
				СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
				
			КонецЦикла;
			
			// Вывести Итого
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
			ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// сделаем отступ 
			ТабДокумент.Вывести(ОбластьПробел);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
												 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
												 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
												 
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		 										 + ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));

		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		Если СПечатью Тогда
			ДанныеКартинкиПечать  = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Поставщик, "ФайлФаксимильнаяПечать");
			ДанныеКартинкиПодпись = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Поставщик, "ФайлФаксимильнаяПодпись");
		Иначе
			ДанныеКартинкиПечать  = Неопределено;
			ДанныеКартинкиПодпись = Неопределено;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ДанныеКартинкиПечать) И ЗначениеЗаполнено(ДанныеКартинкиПодпись) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПодписью");
			ОбластьМакета.Рисунки.ФаксимильнаяПодписьБезПечати.Картинка = Новый Картинка(ДанныеКартинкиПодпись);
		ИначеЕсли ЗначениеЗаполнено(ДанныеКартинкиПечать) Или ЗначениеЗаполнено(ДанныеКартинкиПодпись) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатьюИПодписью");
			ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка  = Новый Картинка(ДанныеКартинкиПечать);
			ОбластьМакета.Рисунки.ФаксимильнаяПодпись.Картинка = Новый Картинка(ДанныеКартинкиПодпись);
		Иначе 
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;	
	

	Возврат ТабДокумент;

КонецФункции

#КонецОбласти

#КонецЕсли