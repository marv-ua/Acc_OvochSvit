Перем мВалютаРегламентированногоУчета Экспорт;

// Функция осуществляет запуск обработки формирующей печатную форму 1-ТН - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
//Функция ПечатьТТН()

//	Документ = Ссылка;
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ДатаСреза",          Документ.Дата);
//	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Документ.Склад);
//	Запрос.УстановитьПараметр("ТекущийДокумент",  Документ);
//	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Номер,
//	|	Дата         КАК ДатаДокумента,
//	|	Организация,
//	|	Организация  КАК ЮрФизЛицо,
//	|	Организация  КАК Поставщик,
//	|	Организация  КАК Контрагент,
//	|	Организация  КАК Руководители,
//	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
//	|	      ТОГДА Контрагент
//	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
//	| 	Организация  КАК Грузоотправитель,
//	|	БанковскийСчетОрганизации КАК БанковскийСчет,
//	|	Контрагент   КАК Покупатель,
//	|	Контрагент   КАК Плательщик,
//	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
//	|	ВалютаДокумента,
//	|	КурсВзаиморасчетов       КАК Курс,
//	|	КратностьВзаиморасчетов  КАК Кратность,
//	|	УчитыватьНДС,
//	|	СуммаВключаетНДС,
//	|	Получил,
//	|	ДоверенностьСерия,
//	|	ДоверенностьНомер,
//	|	ДоверенностьДата
//	|ИЗ
//	|	Документ.ТТН КАК РеализацияТоваровУслуг
//	|
//	|ЛЕВОЕ СОЕДИНЕНИЕ
//	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
//	|ПО
//	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
//	|
//	|ГДЕ
//	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

//	Шапка = Запрос.Выполнить().Выбрать();
//	Шапка.Следующий();

//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);

//	Если Документ.ВалютаДокумента = Документ.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
//		// Документ оформлен в валюте взаиморасчетов
//		Запрос.УстановитьПараметр("Курс", Документ.КурсВзаиморасчетов);
//		Запрос.УстановитьПараметр("Кратность", Документ.КратностьВзаиморасчетов);
//	Иначе
//		// Документ оформлен в валюте регламентированного учета
//		Запрос.УстановитьПараметр("Курс", 1);
//		Запрос.УстановитьПараметр("Кратность", 1);
//	КонецЕсли;

//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
//	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
//	|	ВложенныйЗапрос.Номенклатура.Код			                 КАК Артикул,
//	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
//	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код 						 КАК БазоваяЕдиницаКодПоОКЕИ,
//	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
//	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление   	         КАК ВидУпаковки,
//	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
//	|	ВложенныйЗапрос.Цена                КАК Цена,
//	|	ВложенныйЗапрос.Количество          КАК Количество,
//	|	ВложенныйЗапрос.Сумма               КАК Сумма,
//	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
//	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
//	|	ВложенныйЗапрос.Метка               КАК Метка
//	|ИЗ
//	|
//	|	(
//	|	ВЫБРАТЬ
//	|		РеализацияТоваровУслуг.Номенклатура,
//	|		РеализацияТоваровУслуг.Коэффициент,
//	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
//	|		РеализацияТоваровУслуг.ЕдиницаИзмерения 					 КАК ЕдиницаИзмеренияМест,
//	|		РеализацияТоваровУслуг.СтавкаНДС,
//	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность             КАК Цена,
//	|		СУММА(РеализацияТоваровУслуг.Количество)                     КАК Количество,
//	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность)  КАК Сумма,
//	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность)  КАК СуммаНДС,
//	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                  КАК НомерСтроки,
//	|		0                                                            КАК Метка
//	|	ИЗ
//	|		Документ.ТТН.Товары КАК РеализацияТоваровУслуг
//	|	ГДЕ
//	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
//	|
//	|СГРУППИРОВАТЬ ПО
//	|		РеализацияТоваровУслуг.Номенклатура,
//	|		РеализацияТоваровУслуг.Коэффициент,
//	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
//	|		РеализацияТоваровУслуг.СтавкаНДС,
//	|		РеализацияТоваровУслуг.Цена
//	|
//	|	) КАК ВложенныйЗапрос
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
//	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
//	|	РеализацияТоваровУслуг.Номенклатура.Код   			   КАК Артикул,
//	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
//	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код 						КАК БазоваяЕдиницаКодПоОКЕИ,
//	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
//	|	NULL                                                  КАК ВидУпаковки,
//	|	""Без НДС""                                           КАК СтавкаНДС,
//	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
//	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
//	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность     КАК Сумма,
//	|	0                                                     КАК СуммаНДС,
//	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
//	|	2                                                     КАК Метка
//	|ИЗ
//	|	Документ.ТТН.ВозвратнаяТара КАК РеализацияТоваровУслуг
//	|
//	|ГДЕ
//	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
//	|
//	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
//	|
//	|";

//	ЗапросТовары = Запрос.Выполнить().Выгрузить();

//	ТабДокумент = Новый ТабличныйДокумент;

//	
//	ЗаполнитьТТН2014 (Шапка, ЗапросТовары, ТабДокумент);
//	
//	

//	Возврат ТабДокумент;


//КонецФункции // ПечатьТТН()


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
//Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
//	
//	// Получить экземпляр документа на печать
//	Если   ИмяМакета = "_1Т" Тогда
//		ТабДокумент = ПечатьТТН();
//	
//	КонецЕсли;
//	
//	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), НепосредственнаяПечать);
//	
//КонецПроцедуры // Печать


// Возвращает доступные варианты печати документа.
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
//Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
//	
//	Возврат Новый Структура("_1Т",НСтр("ru='1-ТН (Товарно-транспортная накладная)';uk='1-ТН (Товарно-транспортна накладна)'"));

//КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

    ДанныеЗаполнения = Основание;	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		// Заполнение шапки
		
		реализация = Основание;
	//	ДокументОснование = Основание;
		Дата = Основание.Дата;
		АвторасчетНДС = ДанныеЗаполнения.АвторасчетНДС;
		АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		БанковскийСчетОрганизации = ДанныеЗаполнения.БанковскийСчетОрганизации;
		ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		ВидОперации = ДанныеЗаполнения.ВидОперации;
//		Водитель = ДанныеЗаполнения.Водитель;
	//	Выгружать = ДанныеЗаполнения.Выгружать;
		Грузополучатель = ДанныеЗаполнения.Контрагент;
		ДоверенностьДата = ДанныеЗаполнения.ДоверенностьДата;
		ДоверенностьНомер = ДанныеЗаполнения.ДоверенностьНомер;
		ДоверенностьСерия = ДанныеЗаполнения.ДоверенностьСерия;
		ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		ДокументПодтверждающийПолномочия = ДанныеЗаполнения.ДокументПодтверждающийПолномочия;
		ЕстьАвансДо01042011 = ДанныеЗаполнения.ЕстьАвансДо01042011;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Контрагент = ДанныеЗаполнения.Контрагент;
		КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
		КурсВзаиморасчетов = ДанныеЗаполнения.КурсВзаиморасчетов;
		МестоСоставленияДокумента = ДанныеЗаполнения.МестоСоставленияДокумента;
		НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ = ДанныеЗаполнения.НеОтноситьСебестоимостьЗапасовНаРасходыПоНУ;
		Организация = ДанныеЗаполнения.Организация;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Получил = ДанныеЗаполнения.Получил;
		ПолучилПоДругомуДокументу = ДанныеЗаполнения.ПолучилПоДругомуДокументу;
		ПредставительОрганизации = ДанныеЗаполнения.ПредставительОрганизации;
		РучнаяКорректировка = ДанныеЗаполнения.РучнаяКорректировка;
		Склад = ДанныеЗаполнения.Склад;
		СуммаВДВРПоАвансуДо01042011 = ДанныеЗаполнения.СуммаВДВРПоАвансуДо01042011;
		СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		СчетУчетаНДС = ДанныеЗаполнения.СчетУчетаНДС;
		СчетУчетаНДСПодтвержденный = ДанныеЗаполнения.СчетУчетаНДСПодтвержденный;
		СчетУчетаРасчетовПоАвансам = ДанныеЗаполнения.СчетУчетаРасчетовПоАвансам;
		СчетУчетаРасчетовПоТаре = ДанныеЗаполнения.СчетУчетаРасчетовПоТаре;
		СчетУчетаРасчетовПоТареПоАвансам = ДанныеЗаполнения.СчетУчетаРасчетовПоТареПоАвансам;
		СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом;
		ТипЦен = ДанныеЗаполнения.ТипЦен;
		УДАЛИТЬОтражатьВНалоговомУчете = ДанныеЗаполнения.УДАЛИТЬОтражатьВНалоговомУчете;
		УДАЛИТЬСтатьяВаловыхДоходов = ДанныеЗаполнения.УДАЛИТЬСтатьяВаловыхДоходов;
		УчитыватьНДС = ДанныеЗаполнения.УчитыватьНДС;
		
		
			
//		НайденныйАвто =Справочники.Машины.НайтиПоРеквизиту("Организация", ДанныеЗаполнения.Организация);
//		Если  ЗначениеЗаполнено(НайденныйАвто) Тогда 
//		    МаркаИГосНомерАвтомобиля = НайденныйАвто;		
//	

//			Водитель=МаркаИГосНомерАвтомобиля.Водитель;
//			ГосНомерПрицепа=МаркаИГосНомерАвтомобиля.Прицеп;
//		КонецЕсли;
//ГосНомерПрицепа=МаркаИГосНомерАвтомобиля.Прицеп;
		
		ПунктПогрузки= "";
	    ВидПеревозки= "Перевезення товару";
	    //Перевозчик =  Перевозчик;;//ДанныеЗаполнения.Организация.НаименованиеПолное;
		
//		ПунктРазгрузки = ДанныеЗаполнения.ДоговорКонтрагента.АдресДоставки;
		
		
		
		Для Каждого ТекСтрокаВозвратнаяТара Из ДанныеЗаполнения.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.НалоговоеНазначение = ТекСтрокаВозвратнаяТара.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = ТекСтрокаВозвратнаяТара.НалоговоеНазначениеДоходовИЗатрат;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.СхемаРеализации = ТекСтрокаВозвратнаяТара.СхемаРеализации;
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаВозвратнаяТара.СчетУчетаБУ;
			НоваяСтрока.УДАЛИТЬСтатьяПриростаУбылиЗапасов = ТекСтрокаВозвратнаяТара.УДАЛИТЬСтатьяПриростаУбылиЗапасов;
			НоваяСтрока.Цена = ТекСтрокаВозвратнаяТара.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ДокументОприходования = ТекСтрокаТовары.ДокументОприходования;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.НалоговоеНазначение = ТекСтрокаТовары.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = ТекСтрокаТовары.НалоговоеНазначениеДоходовИЗатрат;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПереданныеСчетУчетаБУ = ТекСтрокаТовары.ПереданныеСчетУчетаБУ;
			НоваяСтрока.Себестоимость = ТекСтрокаТовары.Себестоимость;
			НоваяСтрока.СебестоимостьНУ = ТекСтрокаТовары.СебестоимостьНУ;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаБезСкидки = ТекСтрокаТовары.СуммаБезСкидки;
			НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.СуммаСкидки = ТекСтрокаТовары.СуммаСкидки;
			НоваяСтрока.СхемаРеализации = ТекСтрокаТовары.СхемаРеализации;
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаТовары.СчетУчетаБУ;
			НоваяСтрока.УДАЛИТЬСтатьяПриростаУбылиЗапасов = ТекСтрокаТовары.УДАЛИТЬСтатьяПриростаУбылиЗапасов;
			НоваяСтрока.УДАЛИТЬСчетУчетаНДС = ТекСтрокаТовары.УДАЛИТЬСчетУчетаНДС;
			НоваяСтрока.УДАЛИТЬУчитываетсяКакЗапасНУ = ТекСтрокаТовары.УДАЛИТЬУчитываетсяКакЗапасНУ;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
			НоваяСтрока.НалоговоеНазначение = ТекСтрокаУслуги.НалоговоеНазначение;
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = ТекСтрокаУслуги.НалоговоеНазначениеДоходовИЗатрат;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаБезСкидки = ТекСтрокаУслуги.СуммаБезСкидки;
			НоваяСтрока.СуммаНДС = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.СуммаСкидки = ТекСтрокаУслуги.СуммаСкидки;
			НоваяСтрока.СхемаРеализации = ТекСтрокаУслуги.СхемаРеализации;
			НоваяСтрока.УДАЛИТЬСчетУчетаНДС = ТекСтрокаУслуги.УДАЛИТЬСчетУчетаНДС;
			НоваяСтрока.Цена = ТекСтрокаУслуги.Цена;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()


//Процедура ЗаполнитьТТН2014 (Шапка, ЗапросТовары, ТабДокумент)
//Документ = Ссылка;	
//	// Зададим параметры макета
//	ТабДокумент.ПолеСверху              = 0;
//	ТабДокумент.ПолеСлева               = 5;
//	ТабДокумент.ПолеСнизу               = 0;
//	ТабДокумент.ПолеСправа              = 5;
//	ТабДокумент.АвтоМасштаб             = Истина;
//	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

//	Макет       = ПолучитьМакет("ТТН2014");
//	
//	КодЯзыкаПечать = "uk";
//	
//	// Выводим общие реквизиты шапки
//	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
//	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
//	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

//	Если ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации) Тогда
//		НомерСчета = Документ.БанковскийСчетОрганизации.НомерСчета;
//		Банк       = Документ.БанковскийСчетОрганизации.Банк;
//		МФО		   = Документ.БанковскийСчетОрганизации.Банк.Код;
//		
//		СведенияОГрузоотправитель.Вставить("НомерСчета",       НомерСчета);
//		СведенияОГрузоотправитель.Вставить("Банк",             Банк);
//		СведенияОГрузоотправитель.Вставить("МФО",              МФО);
//	КонецЕсли;
//НомерТТН = Ссылка.Номер;	
//	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
//	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
//	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
//	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
//	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
//	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
//	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
//	ОбластьМакета.Параметры.ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ФактическийАдрес,",, КодЯзыкаПечать);
//	ОбластьМакета.Параметры.ПлательщикПредставление       = Шапка.Грузоотправитель.Наименование + " " + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель,  "КодПоЕДРПОУ,ФактическийАдрес,",, КодЯзыкаПечать);
//	
//	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
//	ОбластьМакета.Параметры.ФИОВодителя = Водитель.Наименование +  ?(ЗначениеЗаполнено(реализация.Авто),реализация.Авто.Права,"");
//	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
//	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
//	
//	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
//	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
//	
//	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Шапка.Грузоотправитель.Наименование + " код за ЄДРПОУ " +СведенияОГрузоотправитель.КодПоЕДРПОУ;
//	
//	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
//	
//	// Отпуск товара разрешил
//	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
//	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
//	
//	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
//	
//	ФИОБухгалтер       = Руководители.ГлавныйБухгалтерПредставление;
//		
//	ОбластьМакета.Параметры.Бухгалтер = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
//    ПредставлениеВОдит ="";
//	Если ЗначениеЗаполнено(реализация.Авто) Тогда 
//		ЗапросПоЛицам = Новый Запрос();
//		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   Шапка.ДатаДокумента);
//		ЗапросПоЛицам.УстановитьПараметр("ФизЛицо",   Шапка.Ссылка.Авто.Водитель.физЛицо);
//		
//		ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		                      |	ФИОФизЛицСрезПоследних.Фамилия,
//		                      |	ФИОФизЛицСрезПоследних.Имя,
//		                      |	ФИОФизЛицСрезПоследних.Отчество,
//		                      |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизическоеЛицо
//		                      |ИЗ
//		                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
//		
//		РезВодит = ЗапросПоЛицам.Выполнить().Выбрать();
//		Если РезВодит.Следующий() Тогда 
//			ПредставлениеВОдит = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(РезВодит.Фамилия, РезВодит.Имя, РезВодит.Отчество);
//		КонецЕсли;
//	КонецЕсли;
//		
//	ОбластьМакета.Параметры.ФиоВодительДолжность =  ?(ЗначениеЗаполнено(реализация.Авто),ПредставлениеВОдит + ", водій","");
//	
//	ОбластьМакета.Параметры.СерияДоверенности = Шапка.ДоверенностьСерия;
//	ОбластьМакета.Параметры.НомерДоверенности = Шапка.ДоверенностьНомер;
//	ОбластьМакета.Параметры.ДатаДоверенности  = Формат(Шапка.ДоверенностьДата, "ДФ = ""дд.ММ.гггг""");
//	
//	СуммаСНДС   = Окр((ЗапросТовары.Итог("Сумма") + ?(Шапка.СуммаВключаетНДС, 0, ЗапросТовары.Итог("СуммаНДС"))), 2);
//	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
//	ОбластьМакета.Параметры.СуммаНДС                = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"), Константы.ВалютаРегламентированногоУчета.Получить());
//	
//	Количество = 0;
//	
//	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
//		Количество = Количество+ ?(ВыборкаСтрок.Номенклатура.ВидУпаковки.Вес =0,0,Окр(ВыборкаСтрок.Количество /ВыборкаСтрок.Номенклатура.ВидУпаковки.Вес,0));  
//		
//	КонецЦикла;

//	КоличествоТОв = Окр(ЗапросТовары.Итог("Количество"),0)/1000;
//	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
//	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
//	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
//	
//	З = ЧислоПрописью( КоличествоТОв,"Л=uk_UK; FS=ИСТИНА;",   "ціла, цілих, цілих, ж, тисячна, тисячних, тисячних, ж, 3");
//	
//	ОбластьМакета.Параметры.МассаСловами = "     " +  З;
//	   	
//	
//	
//	//а
//	Доки =  ОбщегоНазначения.СформироватьЗаголовокДокумента(реализация, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
//	ОбластьМакета.Параметры.Доки = Доки;
//	//а
//	
//	ТабДокумент.Вывести(ОбластьМакета);
//    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
//	
//	// Выводим заголовок таблицы
//	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
//	ТабДокумент.Вывести(ЗаголовокТаблицы);
//	
//	КоличествоСтрок = ЗапросТовары.Количество();

//	// инициализация итогов по странице
//	ИтогоКоличествоНаСтранице = 0;
//	ИтогоСуммаСНДСНаСтранице  = 0;

//	// инициализация итогов по документу
//	ИтогоМест       = 0;
//	ИтогоКоличество = 0;
//	ИтогоСуммаСНДС  = 0;
//	Ном             = 1;

//	// Выводим многострочную часть докмента
//	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
//	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

//		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
//			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
//			Продолжить;
//		КонецЕсли;

//		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
//		ОбластьМакета.Параметры.НомерСтроки = Ном;
//		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование;
//		//		Мест        = ВыборкаСтрок.КоличествоМест;
//		Количество  = ВыборкаСтрок.Количество;
//		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
//		СуммаБезНДС = СуммаСНДС - ВыборкаСтрок.СуммаНДС;
//		
//		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

//		ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
//		ОбластьМакета.Параметры.Масса =Количество/1000;
//		ОбластьМакета.Параметры.ДокументыСопровождения =Доки;
//		ОбластьМакета.Параметры.Количество = ?(ВыборкаСтрок.Номенклатура.ВидУпаковки.Вес=0,0, Окр(Количество/ ВыборкаСтрок.Номенклатура.ВидУпаковки.Вес,0));

//		ТабДокумент.Вывести(ОбластьМакета);

//		// увеличим итоги по дукументу
//		ИтогоКоличество = ИтогоКоличество + ?(ВыборкаСтрок.Номенклатура.ВидУпаковки.Вес=0,0, Окр(Количество/ ВыборкаСтрок.Номенклатура.ВидУпаковки.Вес,0));
//		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
//		Ном             = Ном + 1;

//	КонецЦикла;

//	// Выводим итоги по документу в целом
//	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
//	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
//	ОбластьМакета.Параметры.ИтогоМасса = КоличествоТОв;

//	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

//	ТабДокумент.Вывести(ОбластьМакета);

//	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
//	
//			
//	ОбластьМакета.Параметры.ФИОДиректор = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
//	ОбластьМакета.Параметры.ФиоВодитель	= ПредставлениеВОдит + ", водій";		
//	
//	
//	ТабДокумент.Вывести(ОбластьМакета);
//	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
//	ТабДокумент.Вывести(ОбластьМакета);
//	
//КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//Если МаркаИГосНомерАвтомобиля.Грузоподъемность < Товары.Итог("Количество") Тогда 
	//	Отказ = Истина;
	//	Сообщить("Превышена Грузоподъемность");
	//	
	//КонецЕсли;
КонецПроцедуры


мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
