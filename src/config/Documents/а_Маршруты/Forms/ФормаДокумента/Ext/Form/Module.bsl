
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//Попытка
	//	//ЗаблокироватьДанныеФормыДляРедактирования();
	//	ЗаблокироватьДокументНаСервере();
	//Исключение
	//	ОписаниеБлокировки = ОписаниеОшибки();
	//	ЭтаФорма.ТолькоПросмотр = Истина;
	//	//Элементы.Группа2.ЦветФона = WebЦвета.Красный;
	//КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ЭтаФорма.ТолькоПросмотр Тогда
	//	ПоказатьОповещениеПользователя(
	//		Сред(ОписаниеБлокировки, СтрНайти(ОписаниеБлокировки, НСтр("ru = 'Объект уже заблокирован'; uk = 'Об’єкт вже заблокований'")), СтрДлина(ОписаниеБлокировки))
	//		,,, БиблиотекаКартинок.Внимание48, СтатусОповещенияПользователя.Важное, УникальныйИдентификатор
	//	);
	//КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаЗаполнитьЗавершение", ЭтотОбъект),
		Нстр("ru = 'Заполнить?
	          |Данные будут перезаполнены.'; uk = 'Заповнити?
	          |Дані буде перезаповнено.'"),
		РежимДиалогаВопрос.ДаНет,
		,
		,
		Нстр("ru = 'Заполнить?'; uk = 'Заповнити?'"),
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПунктыРазгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ПунктыРазгрузки.ТекущиеДанные;
	
	Если Поле = Элементы.ПунктыРазгрузкиЗаявка Тогда
		
		Если ЗначениеЗаполнено(ТекСтрока.Заявка) Тогда
			
			ПоказатьЗначение(,ТекСтрока.Заявка);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ПунктыРазгрузкиПунктРазгрузки Тогда
		
		ПоказатьЗначение(,ТекСтрока.ПунктРазгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обработан(Команда)

	ТекТЧ = "ПунктыРазгрузки";
	ВыделенныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект[ТекТЧ].НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда
			ТекДанные.СтатусОбработан = Не ТекДанные.СтатусОбработан;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработанПоВодителю(Команда)

	ВыделенныеСтроки = Элементы.ИтогиПоВодителям.ВыделенныеСтроки;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = ИтогиПоВодителям.НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда
			Для Каждого СтрПункты Из Объект.ПунктыРазгрузки Цикл
			    Если СтрПункты.Водитель = ТекДанные.Водитель И СтрПункты.ДатаОтгрузки = ТекДанные.ДатаОтгрузки Тогда 
					СтрПункты.СтатусОбработан = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаВодителя(Команда)
	Сп = ПолучитьСписокЗначенийВодителей();
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПослеЗакрытияВыбораИзСпискаВодителей", ЭтотОбъект),
		Сп,
		Элементы.ПунктыРазгрузкиВодитель,
		Сп.НайтиПоЗначению(Элементы.ПунктыРазгрузки.ТекущиеДанные.Водитель)
	);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявкиПоВодителю(Команда)
	
	ТекДанные = Элементы.ИтогиПоВодителям.ТекущиеДанные;
	ТабДок = ПечатьЗаявкиНаСервере(ТекДанные.Водитель, ТекДанные.Авто, ТекДанные.ДатаОтгрузки);
	ТабДок.Показать("Заявка_"+СокрЛП(ТекДанные.Водитель));

КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиВодительПриИзменении(Элемент)
	ПунктыРазгрузкиВодительПриИзмененииНаСервере(Элементы.ПунктыРазгрузки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПриИзменении(Элемент)
	ОбновитьИтогиПоВодителям();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Попытка
	//	РазблокироватьДокументНаСервере();
	//Исключение
	//КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьВывезено(Команда)
	Объект.ПунктыРазгрузки.Сортировать("СтатусОбработан");
КонецПроцедуры


#Область СлужебныеПроцедурыИФункцииБСП

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОбновитьИтогиПоВодителям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗаполнитьЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Об = РеквизитФормыВЗначение("Объект");
	
	Об.ЗаполнитьМаршруты();
	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
	ОбновитьИтогиПоВодителям();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоВодителям()
	
	Т = Объект.ПунктыРазгрузки.Выгрузить();
	Т.Свернуть("ДатаОтгрузки,Водитель,Авто", "Количество");
	ИтогиПоВодителям.Загрузить(Т);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗначенийВодителей()
	Сп = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
				   //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
				   //|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	               |ГДЕ
	               |	НЕ Сотрудники.ВАрхиве
				   |	И Сотрудники.а_Авто <> ЗНАЧЕНИЕ(Справочник.Авто.ПустаяСсылка)";
				   //|	И КадроваяИсторияСотрудниковСрезПоследних.Должность.Наименование = ""Водій""
				   //|	И НЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	Т = Запрос.Выполнить().Выгрузить();
	Сп.ЗагрузитьЗначения(Т.ВыгрузитьКолонку("Ссылка"));
	Возврат Сп;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВыбораИзСпискаВодителей(Результат, Парам2) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Для Каждого Элемент Из Элементы.ПунктыРазгрузки.ВыделенныеСтроки Цикл
			ТекСтрока = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Элемент);
			ТекСтрока.Водитель = Результат.Значение;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизитаОбъекта(Результат.Значение, "а_Авто")) Тогда
				ТекСтрока.Авто = ЗначениеРеквизитаОбъекта(Результат.Значение, "а_Авто");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы.ПунктыРазгрузки.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
КонецФункции

&НаСервере
Процедура ПунктыРазгрузкиВодительПриИзмененииНаСервере(Эл)
	Об = РеквизитФормыВЗначение("Объект"); 
	Попытка
		ИдентификаторСтроки = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Эл).Идентификатор;
	Исключение
	КонецПопытки;
	ЗаполнитьДаннымиСотрудника(Эл, Об, ИдентификаторСтроки);                                                 

	ЗначениеВРеквизитФормы(Об, "Объект");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДаннымиСотрудника(НомерСтроки = Неопределено, Об, ИдентификаторСтроки = "")
	
	Если НомерСтроки = Неопределено Тогда
		Для Каждого ТекДанные Из Об.ПунктыРазгрузки Цикл
			Если ЗначениеЗаполнено(ТекДанные.Водитель) Тогда
				Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Авто) Тогда
					//Если Не ЗначениеЗаполнено(ТекДанные.Авто) Тогда
						ТекДанные.Авто = ТекДанные.Водитель.а_Авто;
					//КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Прицеп) Тогда
					//Если Не ЗначениеЗаполнено(ТекДанные.Прицеп) Тогда
						ТекДанные.Прицеп = ТекДанные.Водитель.а_Прицеп;
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Попытка
			ТекДанныеМассив = Об.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторСтроки));
			ТекДанные = ТекДанныеМассив[0];		
		Исключение
			ТекДанные = Об.ПунктыРазгрузки[НомерСтроки];
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекДанные.Водитель) Тогда
			Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Авто) Тогда
				ТекДанные.Авто = ТекДанные.Водитель.а_Авто;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Прицеп) Тогда
				ТекДанные.Прицеп = ТекДанные.Водитель.а_Прицеп;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьЗаявкиНаСервере(Водитель, Авто, ДатаОтгрузки)
	
	М = Новый Массив;
	Для Каждого С Из Объект.ПунктыРазгрузки Цикл
		Если С.Авто = Авто и С.Водитель = Водитель Тогда
			М.Добавить(С.Заявка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Печать_ОтчетПоЗаявкам(
		М,
		Неопределено,
		Новый Структура("Водитель,Авто,ДатаВывоза", Водитель, Авто, ДатаОтгрузки),
		"ОсновнаяСхемаКомпоновкиДанных1"
	); 	
	
КонецФункции

&НаСервере
Процедура ЗаблокироватьДокументНаСервере()
	
	Если объект.Ссылка.Пустая() тогда
		возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,, УникальныйИдентификатор);

КонецПроцедуры


&НаСервере
Процедура РазблокироватьДокументНаСервере()

	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);

КонецПроцедуры





