
&НаСервере
Функция ПолучитьФамилиюСИнициалами(знач ФИО) Экспорт

	ФИОСПереносами = СтрЗаменить(ФИО, " ", Символы.ПС);

	ЧастиСтроки = Новый Массив;
	Для Индекс = 1 По СтрЧислоСтрок(ФИОСПереносами) Цикл
		Стр = СтрПолучитьСтроку(ФИОСПереносами, Индекс);
		Если ЗначениеЗаполнено(Стр) Тогда
			ЧастиСтроки.Добавить(СокрЛП(Стр));
		КонецЕсли;
	КонецЦикла;

	Результат = "";

	Если ЧастиСтроки.Количество() > 0 Тогда
		Результат = Результат + ЧастиСтроки[0];

		Если ЧастиСтроки.Количество() > 1 Тогда
			Результат = Результат + " " + Лев(ЧастиСтроки[1], 1) + ".";

			Если ЧастиСтроки.Количество() > 2 Тогда
				Результат = Результат + " " + Лев(ЧастиСтроки[2], 1) + ".";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура НастроитьФорму()

	Для Индекс = 1 По 31 Цикл
		Идентификатор = Строка(Индекс);
		ЭтаФорма.Элементы["ОсновнаяВидДня" + Идентификатор].Заголовок = Идентификатор;
		//ЭтаФорма.Элементы["ОсновнаяЧасы" + Идентификатор].ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура НастроитьПоУмолчанию()

	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

	ПроизводственныеКалендари = Справочники.ПроизводственныеКалендари.СписокПроизводственныхКалендарей();
	Если ПроизводственныеКалендари.Количество() > 0 Тогда
		//{[+](фрагмент ДОБАВЛЕН),   02.04.2022 13:23:18
		//Объект.Календарь = ПроизводственныеКалендари[0];
		Объект.Календарь = КалендарныеГрафики.ПроизводственныйКалендарьУкраины();
		//} 02.04.2022 13:23:18 
	КонецЕсли;

	Объект.ПродолжительностьРабочегоДня = 8;
	Объект.ПродолжительностьПредпраздничногоДня = 7;
	Объект.ПродолжительностьПятницы = 8;

	ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц;
	
	Если Параметры.Свойство("ОбъектыНазначения") Тогда // открытие в режиме из документа "Начисление зарплаты"
		Объект.ДатаНачала = Параметры.ОбъектыНазначения[0].МесяцНачисления;
		Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
	Иначе
		Объект.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
		Объект.ДатаОкончания = КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьПоУмолчанию();
	НастроитьФорму();
	ИзмениласьДата();		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеКалендаря()

	ДанныеКалендаря = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Объект.Календарь);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		ВидДня = ВыборкаДетальныеЗаписи.ВидДня;
		Дата = ВыборкаДетальныеЗаписи.Дата;

		ДанныеКалендаря.Вставить(
			Дата, 
			Новый Структура("ВидДня", ВидДня)
		);
	КонецЦикла;

	Возврат ДанныеКалендаря;
	
КонецФункции

&НаСервере
Процедура РасчитатьДанныеКалендаря()

	ДанныеКалендаря = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Объект.Календарь);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		ВидДня = ВыборкаДетальныеЗаписи.ВидДня;
		Дата = ВыборкаДетальныеЗаписи.Дата;

		ДанныеКалендаря.Вставить(
			Дата, 
			Новый Структура("ВидДня", ВидДня)
		);
	КонецЦикла;

	АдресДанныхКалендаря = ПоместитьВоВременноеХранилище(ДанныеКалендаря, Новый УникальныйИдентификатор());
	
	////{[+](фрагмент ДОБАВЛЕН),   02.04.2022 14:10:06
	овНормыВремениПоГрафикам.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьЗапросПоГрафикам();
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ДатаОкончания));

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НормаЧасовЗаМесяц = Выборка.НормаЧасовЗаМесяц;
			Если Выборка.РабочийДень = "Полный рабочий день" Тогда // сокращаем длительность предпраздничного дня только для полного рабочего дня
				НормаЧасовЗаМесяц = НормаЧасовЗаМесяц - РасчетЗарплатыБазовый.СократитьПредпраздничныеЧасы(Выборка.УчитыватьПраздники, Выборка.ПроизводственныйКалендарь, 	
									НачалоМесяца(Объект.ДатаНачала), КонецМесяца(Объект.ДатаОкончания));
			КонецЕсли; 
			НоваяСтрока = овНормыВремениПоГрафикам.Добавить();
			НоваяСтрока.График = Выборка.ГрафикРаботы;
			НоваяСтрока.НормаЧасов = НормаЧасовЗаМесяц;
			НоваяСтрока.РабочийДень = Выборка.РабочийДень;
		КонецЦикла;
	КонецЕсли; 
	//} 02.04.2022 14:10:06 

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьПолей()

	СекундВСутках = 60 * 60 * 24;
	Для Индекс = 1 По 31 Цикл
		Д = Объект.ДатаНачала + (Индекс - 1) * СекундВСутках;
		ДеньСуществует = Д >= Объект.ДатаНачала И Д <= Объект.ДатаОкончания;

		Идентификатор = Строка(Индекс);
		ЭтаФорма.Элементы["ОсновнаяВидДня" + Идентификатор].Доступность = ДеньСуществует;
		ЭтаФорма.Элементы["ОсновнаяЧасы" + Идентификатор].Доступность = ДеньСуществует;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()

	Объект.Основная.Очистить();

КонецПроцедуры

&НаСервере
Процедура ИзмениласьДата()

	ВосстановитьДанные();

	ОбновитьДоступностьПолей();
	РасчитатьДанныеКалендаря();

	ПервыйЗапуск();
КонецПроцедуры

// Обработка выбора периода

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Объект.ДатаНачала, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СохранитьДанные();
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
    
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Объект.ДатаНачала, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
    Если СтруктураПериода <> Неопределено Тогда
        Период = СтруктураПериода.Период;
        Объект.ДатаНачала = СтруктураПериода.НачалоПериода;
        Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
    КонецЕсли;
    
    ИзмениласьДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНачала, Объект.ДатаОкончания);

	ИзмениласьДата();

КонецПроцедуры
	
&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНачала, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНачала, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ВыборПериодаКлиент.ВидПериодаПриИзменении(Неопределено, ВидПериода, Объект.ДатаНачала, Объект.ДатаОкончания, Период);
	
	ВосстановитьНастройкиВидовРасчета();
	
	ВосстановитьИсключенияСотрудниковОрганизации();
	
	УстановитьВидимостьРеквизитов();
	
КонецПроцедуры

Процедура УстановитьВидимостьРеквизитов()
	Элементы.ВечерниеС.Доступность = Объект.УчитыватьВечерние;
	Элементы.ВечерниеПо.Доступность = Объект.УчитыватьВечерние;
	ВидимостьВечерних();
	Элементы.НочныеС.Доступность = Объект.УчитыватьНочные;
	Элементы.НочныеПо.Доступность = Объект.УчитыватьНочные;
    ВидимостьНочных();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация = Объект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение = Объект.Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации  = Ложь;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода = Объект.ДатаНачала;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода = Объект.ДатаОкончания;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные = "Должность";

	Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Сотрудники.Колонки.Добавить("ИмяСотрудника");
	Для Каждого Строка Из Сотрудники Цикл
		Строка.ИмяСотрудника = Строка.Сотрудник.Наименование;
	КонецЦикла;	
	Сотрудники.Сортировать("ИмяСотрудника");
	
	Для Каждого СтрокаПоСотруднику Из Сотрудники Цикл
		Стр = Объект.Основная.Добавить();
		Стр.Сотрудник = СтрокаПоСотруднику.Сотрудник;
		Стр.Должность = СтрокаПоСотруднику.Должность;
		Стр.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(СтрокаПоСотруднику.Сотрудник.Код, Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсех(Команда)

	Если Не РассчитатьВсехНаСервере() Тогда	
		  ПредупреждениеОПроблемахСКалендарем();
	КонецЕсли;			

КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОПроблемахСКалендарем()
	ТекстОшибки = НСтр("ru = 'У вас не заполнен производственный календарь на этот год! Откройте его (кнопка ''Открыть''), укажите нужный год, заполните и запишите. После этого закройте и откройте табель рабочего времени прежде чем продолжить работу. Внимание! Если список производственных календарей у вас пустой - создайте новый календарь!'; uk = 'Ви не заповнили виробничий календар на цей рік! Відкрийте його (кнопка ''Відкрити''), вкажіть потрібний рік, заповніть та запишіть. Після цього закрийте та відкрийте табель робочого часу, перш ніж продовжити роботу. Увага! Якщо список виробничих календарів у вас порожній – створіть новий календар!'");
	Заголовок = НСтр("ru = 'Ошибка'; uk = 'Помилка'");
	ПоказатьПредупреждение(, ТекстОшибки,, Заголовок);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	ОчиститьНаСервере();
	ЗаполнитьНаСервере();

КонецПроцедуры

Функция ПроверитьИсключениеСотрудника(Сотрудник, ПродолжительностьРабочегоДняСотрудника, ПродолжительностьСубботы=0)
	таб = ЭтотОбъект.ЭтаФорма.табИсключенияСотрудников;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сотрудник",Сотрудник);
	найд = таб.НайтиСтроки(ПараметрыОтбора);
	Если найд.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(найд[0].График) Тогда
			ПродолжительностьРабочегоДняСотрудника = найд[0].ПродолжительностьРабочегоДня;
			ПродолжительностьСубботы = найд[0].ПродолжительностьРабочегоДня6;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря)
	
	
	ДанныеРегистраРасчетов = ПолучитьДанныеРегистраРасчетовПоСотруднику(СтрокаПоСотруднику.Сотрудник,Объект.Организация,Объект.Подразделение,Объект.ДатаНачала,Объект.ДатаОкончания);
	//{[+](фрагмент ДОБАВЛЕН),   12.04.2022 09:20:48
	ДанныеРегистраРасчетов.Сортировать("ДатаНачала");
	
	//Если нет никаких начислений, берем данные для графика по предыдущему месяцу (для этого создаем пустую запись, чтобы войти в цикл)
	Если ДанныеРегистраРасчетов.Количество()=0 Тогда 
		НоваяСтрока = ДанныеРегистраРасчетов.Добавить();
		НоваяСтрока.ДатаНачала = Объект.ДатаНачала;
		НоваяСтрока.ДатаОкончания = Объект.ДатаОкончания; 
		НоваяСтрока.ПериодРегистрации = Объект.ДатаНачала;
	КонецЕсли; 
	
	Для каждого Строка Из ДанныеРегистраРасчетов Цикл
		
		Если НачалоМесяца(Строка.ДатаНачала) <> Объект.ДатаНачала Тогда // заглушка для следующего (или предыдущего) месяца, по нему ничего не считаем
			Продолжить;
		КонецЕсли; 

		ТекущийИндекс = ДанныеРегистраРасчетов.Индекс(Строка);	
		Если ТекущийИндекс = 0 И Строка.ДатаНачала > Объект.ДатаНачала Тогда
			ДатаНачала = Объект.ДатаНачала;
		Иначе
			ДатаНачала = Строка.ДатаНачала;
		КонецЕсли; 
		Если ТекущийИндекс = ДанныеРегистраРасчетов.Количество()-1 И Строка.ДатаОкончания < Объект.ДатаОкончания Тогда
			ДатаОкончания = Объект.ДатаОкончания;
		Иначе
			ДатаОкончания = Строка.ДатаОкончания;
		КонецЕсли; 
		
	КалендарьСотрудника = ПолучитьКалендарьСотрудника(
		СтрокаПоСотруднику.Сотрудник, Объект.Организация,
		Объект.Подразделение, ДатаНачала, ДатаОкончания
		);
	
	ПолучитьДатуНачалаИДатуОкончания(ДанныеРегистраРасчетов);
	//}   12.04.2022 09:20:48 
	
	ПродолжительностьРабочегоДняСотрудника = 0;
	ПродолжительностьСубботы = 0;
	СуществуетИсключение = ПроверитьИсключениеСотрудника(СтрокаПоСотруднику.Сотрудник, ПродолжительностьРабочегоДняСотрудника, ПродолжительностьСубботы);
	
	СекундВСутках = 60 * 60 * 24;
		
	Для Индекс = День(ДатаНачала) По День(ДатаОкончания) Цикл
		
		Дата = НачалоМесяца(Объект.ДатаНачала) + (Индекс - 1) * СекундВСутках;
		ДанныеПоДню = ДанныеКалендаря.Получить(Дата);

		ТипЧасов = "";
		ЧасовОтработано = 0;
		ЧасовВечерних = 0;
		ЧасовНочных = 0;

		Если ДанныеПоДню <> Неопределено Тогда
			РаботалВЭтотДень = 
				ЗначениеЗаполнено(КалендарьСотрудника.Календарь) И
				КалендарьСотрудника.Календарь.Получить(День(Дата));	
			
			ВидДня = ДанныеПоДню.ВидДня;
			Если ЗначениеЗаполнено(КалендарьСотрудника.График) Тогда
				Если КалендарьСотрудника.Календарь.Получить(День(Дата)) 
					И ((Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье = ДанныеПоДню.ВидДня)
					ИЛИ (Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота = ДанныеПоДню.ВидДня)
					ИЛИ (Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник = ДанныеПоДню.ВидДня))Тогда
					ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
				КонецЕсли;
			КонецЕсли;
			Если СуществуетИсключение 
				И (ДанныеПоДню.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота)
				И Не ПродолжительностьСубботы = 0 Тогда
					ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
			КонецЕсли;
			Если
				((ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Или
				ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный) И
				РаботалВЭтотДень)
			Тогда
				ТипЧасов = "р";
				
				Если Не СуществуетИсключение Тогда
					Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
						//{[+](фрагмент ИЗМЕНЕН),   03.04.2022 18:22:23
						СтруктураПоиска = Новый Структура("График", КалендарьСотрудника.График);
						МассивСтрок = овНормыВремениПоГрафикам.НайтиСтроки(СтруктураПоиска);
						Если МассивСтрок.Количество()=0 Тогда
							ТекстСообщения = НСтр("ru = 'Для сотрудника %1 в справочнике ""Графики работы"" не найден соответствующий график'; uk = 'Для співробітника %1 у довіднику ""Графіки роботи"" не знайдено відповідний графік'");
							Сообщить(СтрЗаменить(ТекстСообщения, "%1", СтрокаПоСотруднику.Сотрудник.Наименование));
							Объект.Основная.Удалить(СтрокаПоСотруднику);
							Возврат;
						КонецЕсли; 
						ПолныйРабочийДень = ?(МассивСтрок[0].РабочийДень = "Полный рабочий день", Истина, Ложь);
						Если ЗначениеЗаполнено(КалендарьСотрудника.График) И ПолныйРабочийДень Тогда
							ЧасовОтработано = КалендарьСотрудника.ПродолжительностьРабочегоДняСотрудника.Получить(День(Дата)) - ?(КалендарьСотрудника.График.УчитыватьПраздники,1,0);	
						ИначеЕсли ЗначениеЗаполнено(КалендарьСотрудника.График) И Не ПолныйРабочийДень Тогда	
							ЧасовОтработано = КалендарьСотрудника.ПродолжительностьРабочегоДняСотрудника.Получить(День(Дата));	
						// сокращаем на разницу времени между длительностью рабочего и предпраздничного дня, если график сотрудника не определен
						ИначеЕсли Не ЗначениеЗаполнено(КалендарьСотрудника.График) И ПолныйРабочийДень Тогда
							ЧасовОтработано = КалендарьСотрудника.ПродолжительностьРабочегоДняСотрудника.Получить(День(Дата)) - (Объект.ПродолжительностьРабочегоДня - Объект.ПродолжительностьПредпраздничногоДня);	
						ИначеЕсли Не ЗначениеЗаполнено(КалендарьСотрудника.График) И Не ПолныйРабочийДень Тогда	
							ЧасовОтработано = КалендарьСотрудника.ПродолжительностьРабочегоДняСотрудника.Получить(День(Дата));
						КонецЕсли; 
						//} 03.04.2022 18:22:23 
					Иначе
						ЧасовОтработано = КалендарьСотрудника.ПродолжительностьРабочегоДняСотрудника.Получить(День(Дата));
					КонецЕсли;
					ЧасовВечерних = КалендарьСотрудника.Вечерние.Получить(День(Дата));
					ЧасовНочных = КалендарьСотрудника.Ночные.Получить(День(Дата));
					
				Иначе
					Если ДанныеПоДню.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
						ЧасовОтработано = ПродолжительностьСубботы;
					Иначе
						ЧасовОтработано = ПродолжительностьРабочегоДняСотрудника;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТипЧасов = "";		
				ЧасовОтработано = 0;
				ЧасовВечерних = 0;
				ЧасовНочных = 0;
			КонецЕсли;

			Если ЗначениеЗаполнено(ПроставитьВидДня) Тогда
				ТипЧасов = НРег(СокрЛП(ПроставитьВидДня));
				ЧасовОтработано = 0;
			КонецЕсли;
		КонецЕсли;

		Идентификатор = Строка(Индекс);
		СтрокаПоСотруднику["ВидДня" + Идентификатор] = ТипЧасов;
		СтрокаПоСотруднику["Часы" + Идентификатор] = ЧасовОтработано;
		СтрокаПоСотруднику["Вечерние" + Идентификатор] = ЧасовВечерних;
		СтрокаПоСотруднику["Ночные" + Идентификатор] = ЧасовНочных;
		
	КонецЦикла;
	
КонецЦикла; 

	
	Для Каждого ВидНачисления Из ДанныеРегистраРасчетов Цикл
		Если Не Месяц(ВидНачисления.ДатаНачала) = Месяц(ВидНачисления.ПериодРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		Если Месяц(ВидНачисления.ДатаНачала) = Месяц(ВидНачисления.ДатаОкончания) Тогда
			ПервыйДень = День(ВидНачисления.ДатаНачала);
			ПоследнийДень = День(ВидНачисления.ДатаОкончания);
		Иначе
			ПервыйДень = День(ВидНачисления.ДатаНачала);
			ПоследнийДень = День(КонецМесяца(ВидНачисления.ДатаНачала));
		КонецЕсли;
		Для й = ПервыйДень По ПоследнийДень Цикл
			Идентификатор = Строка(й);
			таб = ЭтаФорма.табОбозначений;
			Отбор = Новый Структура();
			Отбор.Вставить("ВидРасчета",ВидНачисления.ВидРасчета);
			Строки = таб.НайтиСтроки(Отбор);
			Если Строки.Количество() > 0 Тогда
				УчитыватьПраздник = Строки[0].УчитыватьПраздничныеДни;
				Дата = НачалоМесяца(Объект.ДатаНачала) + (й - 1) * СекундВСутках;
				ДанныеПоДню = ДанныеКалендаря.Получить(Дата);
				Если ДанныеПоДню <> Неопределено Тогда
					ВидДня = ДанныеПоДню.ВидДня;
					Если (ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник) И (Не УчитыватьПраздник) Тогда
						Если Не СтрокаПоСотруднику["ВидДня" + Идентификатор] = "" Тогда
							СтрокаПоСотруднику["ВидДня" + Идентификатор] = "";
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ((СтрокаПоСотруднику["ВидДня" + Идентификатор] = "") И (Строки[0].УчитыватьВыходные)) Тогда 
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = Строки[0].Обозначение;
				ИначеЕсли (Не СтрокаПоСотруднику["ВидДня" + Идентификатор] = "") Тогда
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = Строки[0].Обозначение;
				КонецЕсли;
				ТипЧасов = СтрокаПоСотруднику["ВидДня" + Идентификатор];
				Если Не ТипЧасов = "р" И Не ТипЧасов = "рс" И Не ТипЧасов = "рв" И Не ТипЧасов = "вд" Тогда
					//СтрокаПоСотруднику["Часы" + Идентификатор] = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	
	//// проверим отпуск, больничных и прочее за другой период
	ДанныеРегистраРасчетовДругогоПериода = ПолучитьДанныеРегистраРасчетовПоСотрудникуДругогоПериода(СтрокаПоСотруднику.Сотрудник,Объект.Организация,Объект.Подразделение,Объект.ДатаНачала,Объект.ДатаОкончания);
	
	//{[+](фрагмент ДОБАВЛЕН),   12.04.2022 09:20:48
	ПолучитьДатуНачалаИДатуОкончания(ДанныеРегистраРасчетовДругогоПериода);
	//}   12.04.2022 09:20:48 

	Для Каждого ВидНачисления Из ДанныеРегистраРасчетовДругогоПериода Цикл
		Если Месяц(ВидНачисления.ДатаНачала) = Месяц(ВидНачисления.ПериодРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		Если Месяц(ВидНачисления.ДатаНачала) = Месяц(ВидНачисления.ДатаОкончания) Тогда
			ПервыйДень = День(ВидНачисления.ДатаНачала);
			ПоследнийДень = День(ВидНачисления.ДатаОкончания);
		Иначе
			ПервыйДень = День(ВидНачисления.ДатаНачала);
			ПоследнийДень = День(КонецМесяца(ВидНачисления.ДатаНачала));
		КонецЕсли;
		Для й = ПервыйДень По ПоследнийДень Цикл
			Идентификатор = Строка(й);
			таб = ЭтаФорма.табОбозначений;
			Отбор = Новый Структура();
			Отбор.Вставить("ВидРасчета",ВидНачисления.ВидРасчета);
			Строки = таб.НайтиСтроки(Отбор);
			Если Строки.Количество() > 0 Тогда
				Если ((СтрокаПоСотруднику["ВидДня" + Идентификатор] = "") И (Строки[0].УчитыватьВыходные)) Тогда 
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = Строки[0].Обозначение;
				ИначеЕсли (Не СтрокаПоСотруднику["ВидДня" + Идентификатор] = "") Тогда
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = Строки[0].Обозначение;
				КонецЕсли;
				ТипЧасов = СтрокаПоСотруднику["ВидДня" + Идентификатор];
				Если Не ТипЧасов = "р" И Не ТипЧасов = "рс" И Не ТипЧасов = "рв" И Не ТипЧасов = "вд" Тогда
					//СтрокаПоСотруднику["Часы" + Идентификатор] = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДанныеРегистраРасчетовДругогоПериода = ПолучитьДанныеРегистраРасчетовПоСотрудникуДругогоПериодаХвост(СтрокаПоСотруднику.Сотрудник,Объект.Организация,Объект.Подразделение,Объект.ДатаНачала,Объект.ДатаОкончания);
	
	//{[+](фрагмент ДОБАВЛЕН),   12.04.2022 09:20:48
	ПолучитьДатуНачалаИДатуОкончания(ДанныеРегистраРасчетовДругогоПериода);
	//}   12.04.2022 09:20:48 
	
	Для Каждого ВидНачисления Из ДанныеРегистраРасчетовДругогоПериода Цикл
		Если Месяц(ВидНачисления.ДатаНачала) = Месяц(ВидНачисления.ПериодРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		Если Месяц(ВидНачисления.ДатаНачала) = Месяц(ВидНачисления.ДатаОкончания) Тогда
			ПервыйДень = День(ВидНачисления.ДатаНачала);
			ПоследнийДень = День(ВидНачисления.ДатаОкончания);
		Иначе
			ПервыйДень = День(НачалоМесяца(ВидНачисления.ДатаОкончания));
			ПоследнийДень = День(ВидНачисления.ДатаОкончания);
		КонецЕсли;
		Для й = ПервыйДень По ПоследнийДень Цикл
			Идентификатор = Строка(й);
			таб = ЭтаФорма.табОбозначений;
			Отбор = Новый Структура();
			Отбор.Вставить("ВидРасчета",ВидНачисления.ВидРасчета);
			Строки = таб.НайтиСтроки(Отбор);
			Если Строки.Количество() > 0 Тогда
				Если ((СтрокаПоСотруднику["ВидДня" + Идентификатор] = "") И (Строки[0].УчитыватьВыходные)) Тогда 
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = Строки[0].Обозначение;
				ИначеЕсли (Не СтрокаПоСотруднику["ВидДня" + Идентификатор] = "") Тогда
					СтрокаПоСотруднику["ВидДня" + Идентификатор] = Строки[0].Обозначение;
				КонецЕсли;
				ТипЧасов = СтрокаПоСотруднику["ВидДня" + Идентификатор];
				Если Не ТипЧасов = "р" И Не ТипЧасов = "рс" И Не ТипЧасов = "рв" И Не ТипЧасов = "вд" Тогда
					//СтрокаПоСотруднику["Часы" + Идентификатор] = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	//{[+](фрагмент ДОБАВЛЕН),   12.04.2022 09:50:17
	// По дням, когда по сотруднику нет отработанных дней, но при этом он не уволен, меняем признак "р" на прочие причины отсутствия "і"
	
	Если Не ЗначениеЗаполнено(ДатаНачалаРабочегоПериода) Или Не ЗначениеЗаполнено(ДанныеРегистраРасчетов[0].ВидРасчета) Тогда //нет ни единого отработанного дня или дня с уважительной причиной в текущем месяце
		Для Идентификатор = 1 По День(Объект.ДатаОкончания) Цикл
			Если СтрокаПоСотруднику["ВидДня" + Идентификатор] = "р" Тогда
				СтрокаПоСотруднику["ВидДня" + Идентификатор] = "і";	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Если ДатаНачалаРабочегоПериода > Объект.ДатаНачала Тогда
		Для Идентификатор = День(Объект.ДатаНачала) По День(ДатаНачалаРабочегоПериода)-1 Цикл
			Если СтрокаПоСотруднику["ВидДня" + Идентификатор] = "р" Тогда
				СтрокаПоСотруднику["ВидДня" + Идентификатор] = "і";	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Если ДатаОкончанияРабочегоПериода < Объект.ДатаОкончания Тогда
		ЗначениеИдентификатора = ?(НЕ ЗначениеЗаполнено(ДатаОкончанияРабочегоПериода), 1, День(ДатаОкончанияРабочегоПериода)+1);
		Для Идентификатор = ЗначениеИдентификатора По День(Объект.ДатаОкончания) Цикл
			Если СтрокаПоСотруднику["ВидДня" + Идентификатор] = "р" Тогда
				СтрокаПоСотруднику["ВидДня" + Идентификатор] = "і";	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;  
	//}   12.04.2022 09:50:17 
	
	РассчитатьИтогиПоСотруднику(СтрокаПоСотруднику);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьВсехНаСервере()

	//ДанныеКалендаря = ПолучитьИзВременногоХранилища(АдресДанныхКалендаря);
	ДанныеКалендаря = ПолучитьДанныеКалендаря();
	
	Если ДанныеКалендаря.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого СтрокаПоСотруднику Из Объект.Основная Цикл
		ДатаНачалаРабочегоПериода    = '00010101';
		ДатаОкончанияРабочегоПериода = '00010101';

		РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря);
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция РассчитатьТекущегоНаСервере()

	ТекущаяСтрока = ЭтаФорма.Элементы.Основная.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат -1;
	КонецЕсли;

	СтрокаПоСотруднику = Объект.Основная.НайтиПоИдентификатору(ТекущаяСтрока);

	//ДанныеКалендаря = ПолучитьИзВременногоХранилища(АдресДанныхКалендаря);
	ДанныеКалендаря = ПолучитьДанныеКалендаря();
	
	Если ДанныеКалендаря.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаНачалаРабочегоПериода    = '00010101';
	ДатаОкончанияРабочегоПериода = '00010101';

	РассчитатьСтрокуПоСотруднику(СтрокаПоСотруднику, ДанныеКалендаря);
	
	Возврат 1;

КонецФункции

&НаКлиенте
Процедура РассчитатьТекущего(Команда)

	Если РассчитатьТекущегоНаСервере() = 0 Тогда
		ПредупреждениеОПроблемахСКалендарем();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяВидДняПриИзменении(Элемент)

	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные["ВидДня" + Строка(Элемент.Заголовок)] = НРег(СокрЛП(Элемент.ТекстРедактирования));
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные["Часы" + Строка(Элемент.Заголовок)] = 0;

КонецПроцедуры

Функция ПолучитьОкладСотрудника(Сотрудник, Период)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисленияСрезПоследних.Размер КАК Оклад
	               |ИЗ
	               |	РегистрСведений.ПлановыеНачисления.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК ПлановыеНачисленияСрезПоследних
	               |ГДЕ
	               |	ПлановыеНачисленияСрезПоследних.Начисление.ЗачетОтработанногоВремени = ИСТИНА";
	Запрос.Параметры.Вставить("Сотрудник",Сотрудник);
	Запрос.Параметры.Вставить("Период",Период);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Оклад;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ПолучитьКодыОрганизации(Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодыОрганизацииСрезПоследних.Период,
	               |	КодыОрганизацииСрезПоследних.Организация,
	               |	КодыОрганизацииСрезПоследних.ДатаРегистрации,
	               |	КодыОрганизацииСрезПоследних.НомерРегистрации,
	               |	КодыОрганизацииСрезПоследних.КемЗарегистрирована,
	               |	КодыОрганизацииСрезПоследних.НомерРегистрацииПФ,
	               |	КодыОрганизацииСрезПоследних.НомерРегистрацииВСлужбеЗанятости,
	               |	КодыОрганизацииСрезПоследних.НалоговаяИнспекция,
	               |	КодыОрганизацииСрезПоследних.УдалитьКодПоЕДРПОУ,
	               |	КодыОрганизацииСрезПоследних.ИНН,
	               |	КодыОрганизацииСрезПоследних.НомерСвидетельства,
	               |	КодыОрганизацииСрезПоследних.КодЗКГНГ,
	               |	КодыОрганизацииСрезПоследних.КодСПОДУ,
	               |	КодыОрганизацииСрезПоследних.КодКВЕД,
	               |	КодыОрганизацииСрезПоследних.КодКОАТУУ,
	               |	КодыОрганизацииСрезПоследних.КодКФВ,
	               |	КодыОрганизацииСрезПоследних.НомерФСС,
	               |	КодыОрганизацииСрезПоследних.НомерФССНесчСлучай,
	               |	КодыОрганизацииСрезПоследних.Отрасль,
	               |	КодыОрганизацииСрезПоследних.Территория,
	               |	КодыОрганизацииСрезПоследних.ФормаСобственности,
	               |	КодыОрганизацииСрезПоследних.ВЭД,
	               |	КодыОрганизацииСрезПоследних.ОрганГУ,
	               |	КодыОрганизацииСрезПоследних.КодОПФГ,
	               |	КодыОрганизацииСрезПоследних.ОПФГ,
	               |	КодыОрганизацииСрезПоследних.КодОрганаПФУ,
	               |	КодыОрганизацииСрезПоследних.КлассПрофессиональногоРиска
	               |ИЗ
	               |	РегистрСведений.КодыОрганизации.СрезПоследних КАК КодыОрганизацииСрезПоследних
	               |ГДЕ
	               |	КодыОрганизацииСрезПоследних.Организация = &Организация";
	Запрос.Параметры.Вставить("Организация",Организация);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПодготовитьПечатнуюФорму(Результат)

	Результат.Очистить();
	ТабДокумент = Результат;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Табель");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ИмяОрганизации = Объект.Организация.НаименованиеПолное;
	ОбластьМакета.Параметры.ИмяПодразделения = Объект.Подразделение;
	ОбластьМакета.Параметры.ЕДРПОУ = Объект.Организация.КодПоЕДРПОУ;
	//ОбластьМакета.Параметры.НомерДокумента = Месяц(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаЗаполнения = КонецМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаНач = НачалоМесяца(Объект.ДатаНачала);
	ОбластьМакета.Параметры.ДатаКон = КонецМесяца(Объект.ДатаОкончания);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Колонтитул");	
	
	ТабДокумент.Вывести(ОбластьМакета);

	НомерПоПорядку = 0;
	НеявкиВсегоДней = 0;
	НеявкиВсегоЧасов = 0;
	ВечерниеВсего = 0;
	НочныеВсего = 0;

	ВыбСотрудник = Неопределено;
	ОбластьМакета = Неопределено;
	ДнейОтработано = Неопределено;
	ЧасовОтработано = Неопределено;
	ДнейВОтпуске = Неопределено;
	ДнейПоБолезни = Неопределено;
	ЧасовВОтпуске = Неопределено;
	ЧасовПоБолезни = Неопределено;
	ДнейПрогулов = Неопределено;
	ЧасовПрогулов = Неопределено;
	ДнейНаУчебе = Неопределено;
	ЧасовНаУчебе = Неопределено;
	ДнейВОтпускеБезСЗ = Неопределено;
	ЧасовВОтпускеБезСЗ = Неопределено;
	ДнейВОтпускеБезСЗОст = Неопределено;
	ЧасовВОтпускеБезСЗОст = Неопределено;
	ДнейВДругойОрганизации = Неопределено;
	ЧасовВДругойОрганизации = Неопределено;
	НеявкиДни11 = Неопределено;
	НеявкиЧасы11 = Неопределено;
	НеявкиДни12 = Неопределено;
	НеявкиЧасы12 = Неопределено;
	
	//{[+](фрагмент ДОБАВЛЕН),   03.04.2022 17:17:44
	ДнейОтработаноИтого = 0;
	ЧасовОтработаноИтого = 0;
	ДнейВОтпускеИтого = 0;
	ДнейПоБолезниИтого = 0;
	ЧасовВОтпускеИтого = 0;
	ЧасовПоБолезниИтого = 0;
	ДнейПрогуловИтого = 0;
	ЧасовПрогуловИтого = 0;
	ДнейНаУчебеИтого = 0;
	ЧасовНаУчебеИтого = 0;
	ДнейВОтпускеБезСЗИтого = 0;
	ЧасовВОтпускеБезСЗИтого = 0;
	ДнейВОтпускеБезСЗОстИтого = 0;
	ЧасовВОтпускеБезСЗОстИтого = 0;
	ДнейВДругойОрганизацииИтого = 0;
	ЧасовВДругойОрганизацииИтого = 0;
	НеявкиВсегоДнейИтого = 0;
	НеявкиВсегоЧасовИтого = 0;
	НеявкиДни11Итого = 0;
	НеявкиЧасы11Итого = 0;
	НеявкиДни12Итого = 0;
	НеявкиЧасы12Итого = 0;
	ВечерниеИтого = 0;
	НочныеИтого = 0;
//} 03.04.2022 17:17:44 
	
	Для Каждого СтрокаПоСотруднику Из Объект.Основная Цикл

		Для ИндексДня = 1 По 31 Цикл
		
			Если ВыбСотрудник <> СтрокаПоСотруднику.Сотрудник Тогда

				Если ОбластьМакета <> Неопределено Тогда
					ОбластьМакета.Параметры.ДнейПрогулов = ДнейПрогулов;
					ОбластьМакета.Параметры.ЧасовПрогулов = ЧасовПрогулов;
					ОбластьМакета.Параметры.ДнейНаУчебе = ДнейНаУчебе;
					ОбластьМакета.Параметры.ЧасовНаУчебе = ЧасовНаУчебе;
					ОбластьМакета.Параметры.ДнейВОтпускеБезСЗ = ДнейВОтпускеБезСЗ;
					ОбластьМакета.Параметры.ЧасовВОтпускеБезСЗ = ЧасовВОтпускеБезСЗ;
					ОбластьМакета.Параметры.ДнейВОтпускеБезСЗОст = ДнейВОтпускеБезСЗОст;
					ОбластьМакета.Параметры.ЧасовВОтпускеБезСЗОст = ЧасовВОтпускеБезСЗОст;
					ОбластьМакета.Параметры.ДнейВДругойОрганизации = ДнейВДругойОрганизации;
					ОбластьМакета.Параметры.ЧасовВДругойОрганизации = ЧасовВДругойОрганизации;
					ОбластьМакета.Параметры.НеявкиВсегоДни = НеявкиВсегоДней;
					ОбластьМакета.Параметры.НеявкиВсегоЧасы = НеявкиВсегоЧасов;
					ОбластьМакета.Параметры.НеявкиДни11 = НеявкиДни11;
					ОбластьМакета.Параметры.НеявкиЧасы11 = НеявкиЧасы11;
					ОбластьМакета.Параметры.НеявкиДни12 = НеявкиДни12;
					ОбластьМакета.Параметры.НеявкиЧасы12 = НеявкиЧасы12;
					ОбластьМакета.Параметры.НочныеВсего = НочныеВсего;
					ОбластьМакета.Параметры.ВечерниеВсего = ВечерниеВсего;
					ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано,
						ДнейВОтпуске, ДнейПоБолезни, ЧасовВОтпуске, ЧасовПоБолезни);
				КонецЕсли;

				НомерПоПорядку = НомерПоПорядку + 1;

				ВыбСотрудник = СтрокаПоСотруднику.Сотрудник;

				Областьмакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.ФИО = ПолучитьФамилиюСИнициалами(СтрокаПоСотруднику.Сотрудник);
				ОбластьМакета.Параметры.Должность = СтрокаПоСотруднику.Должность;
				ОбластьМакета.Параметры.Пол = Лев(СокрЛП(СтрокаПоСотруднику.Сотрудник.ФизическоеЛицо.Пол),1);
				ОбластьМакета.Параметры.ТабельныйНомер = СтрокаПоСотруднику.ТабельныйНомер;
				Оклад = ПолучитьОкладСотрудника(СтрокаПоСотруднику.Сотрудник,Объект.ДатаОкончания);
				Если Оклад = 0 Тогда
					Оклад = ПолучитьОкладСотрудника(СтрокаПоСотруднику.Сотрудник,Объект.ДатаНачала);
				КонецЕсли;
				ОбластьМакета.Параметры.Оклад = Оклад;

				ДнейОтработано = Новый Соответствие;
				ЧасовОтработано = Новый Соответствие;
				Для Индекс = 0 По 2 Цикл
					ДнейОтработано[Индекс] = 0;
					ЧасовОтработано[Индекс] = 0;
				КонецЦикла;
				ДнейВОтпуске = 0;
				ДнейПоБолезни = 0;
				ЧасовВОтпуске = 0;
				ЧасовПоБолезни = 0;
				ДнейПрогулов = 0;
				ЧасовПрогулов = 0;
				ДнейНаУчебе = 0;
				ЧасовНаУчебе = 0;
				ДнейВОтпускеБезСЗ = 0;
				ЧасовВОтпускеБезСЗ = 0;
				ДнейВОтпускеБезСЗОст = 0;
				ЧасовВОтпускеБезСЗОст = 0;
				ДнейВДругойОрганизации = 0;
				ЧасовВДругойОрганизации = 0;
				НеявкиВсегоДней = 0;
				НеявкиВсегоЧасов = 0;
				НеявкиДни11 = 0;
				НеявкиЧасы11 = 0;
				НеявкиДни12 = 0;
				НеявкиЧасы12 = 0;
				ВечерниеВсего = 0;
				НочныеВсего = 0;

			КонецЕсли;

			Идентификатор = Строка(ИндексДня);

			ТипЧасов = НРег(СтрокаПоСотруднику["ВидДня" + Идентификатор]);
			КоличествоЧасов = Число(СтрокаПоСотруднику["Часы" + Идентификатор]);
			ЧасыВечерних = Число(СтрокаПоСотруднику["Вечерние" + Идентификатор]);
			ЧасыНочных = Число(СтрокаПоСотруднику["Ночные" + Идентификатор]);
			ТипВечерних = "";
			ТипНочных = "";

			Если ТипЧасов = "р" Или ТипЧасов = "рс" Или ТипЧасов = "рв" Или ТипЧасов = "вд" Тогда
				ДнейОтработано[0] = ДнейОтработано[0] + 1;
				ЧасовОтработано[0] = ЧасовОтработано[0] + КоличествоЧасов;

				НомерПоловиныМесяца = ?(ИндексДня <= 15, 1, 2);
				ДнейОтработано[НомерПоловиныМесяца] = ДнейОтработано[НомерПоловиныМесяца] + 1;
				ЧасовОтработано[НомерПоловиныМесяца] = ЧасовОтработано[НомерПоловиныМесяца] + КоличествоЧасов;
				
				ТекстЧасыВечерних = "";
				Если Не ЧасыВечерних = 0 И Не ТипЧасов = "вд" Тогда
					ТипВечерних = "/вч";
					ВечерниеВсего = ВечерниеВсего + ЧасыВечерних;
					ТекстЧасыВечерних = "/"+СокрЛП(ЧасыВечерних);
				КонецЕсли;
				ТекстЧасыНочных = "";
				Если Не ЧасыНочных = 0 И Не ТипЧасов = "вд" Тогда
					ТипНочных = "/рн";
					НочныеВсего = НочныеВсего + ЧасыНочных;
					ТекстЧасыНочных = "/"+СокрЛП(ЧасыНочных);
				КонецЕсли;
				ОбластьМакета.Параметры["Время" + Идентификатор] = СокрЛП(КоличествоЧасов)+ТекстЧасыВечерних+ТекстЧасыНочных;
			ИначеЕсли ТипЧасов = "в" Или ТипЧасов = "д" Или ТипЧасов = "до" Тогда
				ДнейВОтпуске = ДнейВОтпуске + 1;
				ЧасовВОтпуске = ЧасовВОтпуске + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "тн" Тогда
				ДнейПоБолезни = ДнейПоБолезни + 1;
				ЧасовПоБолезни = ЧасовПоБолезни + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "пр" Тогда
				ДнейПрогулов = ДнейПрогулов + 1;
				ЧасовПрогулов = ЧасовПрогулов + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "тв" Или ТипЧасов = "нб" Или ТипЧасов = "н" Или ТипЧасов = "дд" Или ТипЧасов = "ін" Тогда
				ДнейНаУчебе = ДнейНаУчебе + 1;
				ЧасовНаУчебе = ЧасовНаУчебе + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "на" Тогда
				ДнейВОтпускеБезСЗ = ДнейВОтпускеБезСЗ + 1;
				ЧасовВОтпускеБезСЗ = ЧасовВОтпускеБезСЗ + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "ч" Или ТипЧасов = "дб" Или ТипЧасов = "бз" Тогда
				ДнейВОтпускеБезСЗОст = ДнейВОтпускеБезСЗОст + 1;
				ЧасовВОтпускеБезСЗОст = ЧасовВОтпускеБезСЗОст + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "нп" Тогда
				ДнейВДругойОрганизации = ДнейВДругойОрганизации + 1;
				ЧасовВДругойОрганизации = ЧасовВДругойОрганизации + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "нз" Или ТипЧасов = "ів" Или ТипЧасов = "і" Тогда
				НеявкиДни11 = НеявкиДни11 + 1;
				НеявкиЧасы11 = НеявкиЧасы11 + КоличествоЧасов;
			ИначеЕсли ТипЧасов = "вп" Тогда
				НеявкиДни12 = НеявкиДни12 + 1;
				НеявкиЧасы12 = НеявкиЧасы12 + КоличествоЧасов;
			КонецЕсли;

			Если Не ТипЧасов = "р" И Не ТипЧасов = "рс" И Не ТипЧасов = "рв" И Не ТипЧасов = "вд" И Не ТипЧасов = "" Тогда
				НеявкиВсегоДней = НеявкиВсегоДней + 1;
				НеявкиВсегоЧасов = НеявкиВсегоЧасов + КоличествоЧасов;
			КонецЕсли;
			ОбластьМакета.Параметры["День" + Идентификатор] = ТипЧасов+ТипВечерних+ТипНочных;
			//ОбластьМакета.Параметры["Время" + Идентификатор] = КоличествоЧасов;

		КонецЦикла;
		
		//{[+](фрагмент ДОБАВЛЕН),   03.04.2022 17:23:10
		ДнейОтработаноИтого = ДнейОтработаноИтого + ДнейОтработано[0];
		ЧасовОтработаноИтого = ЧасовОтработаноИтого + ЧасовОтработано[0];
		ДнейВОтпускеИтого = ДнейВОтпускеИтого + ДнейВОтпуске;
		ДнейПоБолезниИтого = ДнейПоБолезниИтого + ДнейПоБолезни;
		ЧасовВОтпускеИтого = ЧасовВОтпускеИтого + ЧасовВОтпуске;
		ЧасовПоБолезниИтого = ЧасовПоБолезниИтого + ЧасовПоБолезни;
		ДнейПрогуловИтого = ДнейПрогуловИтого + ДнейПрогулов;
		ЧасовПрогуловИтого = ЧасовПрогуловИтого + ЧасовПрогулов;
		ДнейНаУчебеИтого = ДнейНаУчебеИтого + ДнейНаУчебе;
		ЧасовНаУчебеИтого = ЧасовНаУчебеИтого + ЧасовНаУчебе;
		ДнейВОтпускеБезСЗИтого = ДнейВОтпускеБезСЗИтого + ДнейВОтпускеБезСЗ;
		ЧасовВОтпускеБезСЗИтого = ЧасовВОтпускеБезСЗИтого + ЧасовВОтпускеБезСЗ;
		ДнейВОтпускеБезСЗОстИтого = ДнейВОтпускеБезСЗОстИтого + ДнейВОтпускеБезСЗОст;
		ЧасовВОтпускеБезСЗОстИтого = ЧасовВОтпускеБезСЗОстИтого + ЧасовВОтпускеБезСЗОст;
		ДнейВДругойОрганизацииИтого = ДнейВДругойОрганизацииИтого + ДнейВДругойОрганизации;
		ЧасовВДругойОрганизацииИтого = ЧасовВДругойОрганизацииИтого + ЧасовВДругойОрганизации;
		НеявкиВсегоДнейИтого = НеявкиВсегоДнейИтого + НеявкиВсегоДней;
		НеявкиВсегоЧасовИтого = НеявкиВсегоЧасовИтого + НеявкиВсегоЧасов;
		НеявкиДни11Итого = НеявкиДни11Итого + НеявкиДни11;
		НеявкиЧасы11Итого = НеявкиЧасы11Итого + НеявкиЧасы11;     
		НеявкиДни12Итого = НеявкиДни12Итого + НеявкиДни12;
		НеявкиЧасы12Итого = НеявкиЧасы12Итого + НеявкиЧасы12;     
		ВечерниеИтого = ВечерниеИтого + ВечерниеВсего;
		НочныеИтого = НочныеИтого + НочныеВсего;
		//} 03.04.2022 17:23:10 				

	КонецЦикла;

	Если ОбластьМакета <> Неопределено Тогда
		ОбластьМакета.Параметры.ДнейПрогулов = ДнейПрогулов;
		ОбластьМакета.Параметры.ЧасовПрогулов = ЧасовПрогулов;
		ОбластьМакета.Параметры.ДнейНаУчебе = ДнейНаУчебе;
		ОбластьМакета.Параметры.ЧасовНаУчебе = ЧасовНаУчебе;
		ОбластьМакета.Параметры.ДнейВОтпускеБезСЗ = ДнейВОтпускеБезСЗ;
		ОбластьМакета.Параметры.ЧасовВОтпускеБезСЗ = ЧасовВОтпускеБезСЗ;
		ОбластьМакета.Параметры.ДнейВОтпускеБезСЗОст = ДнейВОтпускеБезСЗОст;
		ОбластьМакета.Параметры.ЧасовВОтпускеБезСЗОст = ЧасовВОтпускеБезСЗОст;
		ОбластьМакета.Параметры.ДнейВДругойОрганизации = ДнейВДругойОрганизации;
		ОбластьМакета.Параметры.ЧасовВДругойОрганизации = ЧасовВДругойОрганизации;
		ОбластьМакета.Параметры.НеявкиВсегоДни = НеявкиВсегоДней;
		ОбластьМакета.Параметры.НеявкиВсегоЧасы = НеявкиВсегоЧасов;
		ОбластьМакета.Параметры.НочныеВсего = НочныеВсего;
		ОбластьМакета.Параметры.ВечерниеВсего = ВечерниеВсего;
		ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано,
			ДнейВОтпуске, ДнейПоБолезни, ЧасовВОтпуске, ЧасовПоБолезни);
	КонецЕсли;

	//{[+](фрагмент ДОБАВЛЕН),   03.04.2022 17:12:12
	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	
	ОбластьМакета.Параметры.ДниЗаМесяцИтого = ДнейОтработаноИтого;
	ОбластьМакета.Параметры.ЧасыЗаМесяцИтого = ЧасовОтработаноИтого;
	ОбластьМакета.Параметры.ДнейВОтпускеИтого = ДнейВОтпускеИтого;
	ОбластьМакета.Параметры.ДнейПоБолезниИтого = ДнейПоБолезниИтого;
	ОбластьМакета.Параметры.ЧасовВОтпускеИтого = ЧасовВОтпускеИтого;
	ОбластьМакета.Параметры.ЧасовПоБолезниИтого = ЧасовПоБолезниИтого;
	ОбластьМакета.Параметры.ДнейПрогуловИтого = ДнейПрогуловИтого;
	ОбластьМакета.Параметры.ЧасовПрогуловИтого = ЧасовПрогуловИтого;
	ОбластьМакета.Параметры.ДнейНаУчебеИтого = ДнейНаУчебеИтого;
	ОбластьМакета.Параметры.ЧасовНаУчебеИтого = ЧасовНаУчебеИтого;
	ОбластьМакета.Параметры.ДнейВОтпускеБезСЗИтого = ДнейВОтпускеБезСЗИтого;
	ОбластьМакета.Параметры.ЧасовВОтпускеБезСЗИтого = ЧасовВОтпускеБезСЗИтого;
	ОбластьМакета.Параметры.ДнейВОтпускеБезСЗОстИтого = ДнейВОтпускеБезСЗОстИтого;
	ОбластьМакета.Параметры.ЧасовВОтпускеБезСЗОстИтого = ЧасовВОтпускеБезСЗОстИтого;
	ОбластьМакета.Параметры.ДнейВДругойОрганизацииИтого = ДнейВДругойОрганизацииИтого;
	ОбластьМакета.Параметры.ЧасовВДругойОрганизацииИтого = ЧасовВДругойОрганизацииИтого;
	ОбластьМакета.Параметры.НеявкиВсегоДнейИтого = НеявкиВсегоДнейИтого;
	ОбластьМакета.Параметры.НеявкиВсегоЧасовИтого = НеявкиВсегоЧасовИтого;
	ОбластьМакета.Параметры.НеявкиДни11Итого = НеявкиДни11Итого;
	ОбластьМакета.Параметры.НеявкиЧасы11Итого = НеявкиЧасы11Итого;
	ОбластьМакета.Параметры.НеявкиДни12Итого = НеявкиДни12Итого;
	ОбластьМакета.Параметры.НеявкиЧасы12Итого = НеявкиЧасы12Итого;
	ОбластьМакета.Параметры.ВечерниеИтого = ВечерниеИтого;
	ОбластьМакета.Параметры.НочныеИтого = НочныеИтого;
	
	ТабДокумент.Вывести(ОбластьМакета);
	//} 03.04.2022 17:12:12 
		
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Областьмакета = Макет.ПолучитьОбласть("Подвал");
	
	Областьмакета.Параметры.ДолжностьОтветственного = Объект.ДолжностьОтветственного;
	Областьмакета.Параметры.ФИООтветственного = ПолучитьФамилиюСИнициалами(Объект.Ответственный);
	
	Областьмакета.Параметры.ДолжностьКадровика = Объект.ДолжностьРаботникаОтделаКадров;
	Областьмакета.Параметры.ФИОКадровика = ПолучитьФамилиюСИнициалами(Объект.РаботникОтделаКадров);

	Областьмакета.Параметры.ДолжностьРуководителя = Объект.ДолжностьРуководителяПодразделения;
	ОбластьМакета.Параметры.ФИОРуководителя = ПолучитьФамилиюСИнициалами(Объект.РуководительПодразделения);
	
	//ОбластьМакета.Параметры.дата1 = КонецМесяца(Объект.ДатаНачала);
	//ОбластьМакета.Параметры.дата2 = КонецМесяца(Объект.ДатаОкончания);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ТолькоПросмотр      = Истина;
	ТабДокумент.ОтображатьСетку     = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;

	Возврат ТабДокумент;

КонецФункции

Процедура ВывестиОбласть(ТабДокумент, ОбластьМакета, НомерПоПорядку, ДнейОтработано, ЧасовОтработано, ДнейВОтпуске, ДнейПоБолезни, ЧасовВОтпуске=Неопределено, ЧасовПоБолезни=Неопределено)

		ОбластьМакета.Параметры.НомерПоПорядку = НомерПоПорядку;

		ОбластьМакета.Параметры.ДниЗаМесяц = ДнейОтработано[0]; 
		ОбластьМакета.Параметры.ЧасыЗаМесяц = ЧасовОтработано[0];

		//ОбластьМакета.Параметры.ДнейОтработано1 = ДнейОтработано[1]; 
		//ОбластьМакета.Параметры.ЧасовОтработано1 = ЧасовОтработано[1];

		//ОбластьМакета.Параметры.ДнейОтработано2 = ДнейОтработано[2]; 
		//ОбластьМакета.Параметры.ЧасовОтработано2 = ЧасовОтработано[2];

		//Если ДнейВОтпуске > 0 Тогда
		//	ОбластьМакета.Параметры.КодВОтпуске = "В";
			ОбластьМакета.Параметры.ДнейВОтпуске = ДнейВОтпуске; //НеявкиДни1
			ОбластьМакета.Параметры.ЧасовВОтпуске = ЧасовВОтпуске; //НеявкиДни1
		//КонецЕсли;

		//Если ДнейПоБолезни > 0 Тогда
		//	ОбластьМакета.Параметры.КодПоБолезни = "ТН";
			ОбластьМакета.Параметры.ДнейПоБолезни = ДнейПоБолезни;
			ОбластьМакета.Параметры.ЧасовПоБолезни = ЧасовПоБолезни;
		//КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)

	Таб = Новый ТабличныйДокумент;
	ПодготовитьПечатнуюФорму(Таб);
	//{[+](фрагмент ДОБАВЛЕН),   04.04.2022 10:54:48
	//Таб.Показать("Форма П-5");
	
    // создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
    КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("Расчет");    
    // Добавляем в коллекцию (тип массив) сформированный Табличный документ
    КоллекцияПечатныхФорм[0].ТабличныйДокумент = Таб; 
    // если требуется устанавливаем параметры печати
    КоллекцияПечатныхФорм[0].Экземпляров=1;
	КоллекцияПечатныхФорм[0].ЭтоМногоязычнаяПечатнаяФорма = Ложь;
    КоллекцияПечатныхФорм[0].СинонимМакета = "Расчет средней для отпуска";  // используется для формирования имени файла при сохранении из общей формы печати документов
    // .. и выводим стандартной процедурой БСП
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);

	//}   04.04.2022 10:54:48 
	

КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюДолжностьСотрудника(Сотрудник)

	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудник, "Должность", 
		НачалоДня(Объект.ДатаНачала));
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		ТекущиеКадровыеДанныеСотрудника = ДанныеСотрудников[0];
		Возврат ТекущиеКадровыеДанныеСотрудника.Должность;
	КонецЕсли;

	Возврат Справочники.Должности.ПустаяСсылка();

КонецФункции

&НаСервере
Процедура ПодобратьДолжностьРуководителяПодразделения()

	Объект.ДолжностьРуководителяПодразделения = ПолучитьТекущуюДолжностьСотрудника(Объект.РуководительПодразделения);

КонецПроцедуры

&НаКлиенте
Процедура РуководительПодразделенияПриИзменении(Элемент)

	ПодобратьДолжностьРуководителяПодразделения();

КонецПроцедуры

&НаКлиенте
Процедура РаботникОтделаКадровПриИзменении(Элемент)

	РаботникОтделаКадровПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура РаботникОтделаКадровПриИзмененииНаСервере()

	Объект.ДолжностьРаботникаОтделаКадров = ПолучитьТекущуюДолжностьСотрудника(Объект.РаботникОтделаКадров);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)

	ОтветственныйПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()

	Объект.ДолжностьОтветственного = ПолучитьТекущуюДолжностьСотрудника(Объект.Ответственный);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ПриЗакрытииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()

	СохранитьДанные();
	
	СохранитьНастройкиВидовРасчета();
	
	СохранитьИсключенияСотрудниковОрганизации();

КонецПроцедуры

&НаСервере
Функция ПодготовитьКаталогДляТабеля(ДляОрганизации, ДляПодразделения)

	КодПодразделения = ?(ЗначениеЗаполнено(ДляПодразделения), ДляПодразделения.Код, "");

	КаталогИБ = НСтр(СтрокаСоединенияИнформационнойБазы(), "File");
	Вариант1_КаталогТабеля = КаталогИБ + "/Tabeli/" + Строка(ДляОрганизации.ИНН) + "/" + КодПодразделения;
	Вариант2_КаталогТабеля = КаталогИБ + "/Табели/" + Строка(ДляОрганизации.ИНН) + "/" + КодПодразделения;
	
	Каталог1НаДиске = Новый Файл(Вариант1_КаталогТабеля);
    Если Каталог1НаДиске.Существует() Тогда
		КаталогТабеля = Вариант1_КаталогТабеля;
	Иначе
		КаталогТабеля = Вариант2_КаталогТабеля;
	КонецЕсли;
		
	Возврат КаталогТабеля;

КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьИмяНастроекНаДату(ИмяНастроек, Дата)

	Возврат ИмяНастроек + "_" + Формат(Дата, "ДФ=гггг") + "_" + Формат(Дата, "ДФ=ММ");

КонецФункции

&НаСервере
Процедура ОбработатьРеквизит(Каталог, Имя, Операция)

	Если Операция = 0 Тогда
		ЗначениеВФайл(Каталог + "/" + Имя, Объект[Имя]);
	Иначе
		Объект[Имя] = ЗначениеИзФайла(Каталог + "/" + Имя);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизиты(Каталог, Операция)
	
	ОбработатьРеквизит(Каталог, "РуководительПодразделения", Операция);
	ОбработатьРеквизит(Каталог, "ДолжностьРуководителяПодразделения", Операция);
	ОбработатьРеквизит(Каталог, "РаботникОтделаКадров", Операция);
	ОбработатьРеквизит(Каталог, "ДолжностьРаботникаОтделаКадров", Операция);
	ОбработатьРеквизит(Каталог, "Ответственный", Операция);
	ОбработатьРеквизит(Каталог, "ДолжностьОтветственного", Операция);
	ОбработатьРеквизит(Каталог, "ПродолжительностьРабочегоДня", Операция);
	ОбработатьРеквизит(Каталог, "ПродолжительностьПредпраздничногоДня", Операция);
	ОбработатьРеквизит(Каталог, "ПродолжительностьПятницы", Операция);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные()

	Попытка

		КаталогТабеля = ПодготовитьКаталогДляТабеля(Объект.Организация, Объект.Подразделение);
		СоздатьКаталог(КаталогТабеля);

		ЗначениеВФайл(
			КаталогТабеля + "/" + ПодготовитьИмяНастроекНаДату("ТабличнаяЧасть", Объект.ДатаНачала), 
			Объект.Основная.Выгрузить()
		);

		ОбработатьРеквизиты(КаталогТабеля, 0);

	Исключение
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанные()

	ОчиститьНаСервере();

	Попытка

		КаталогТабеля = ПодготовитьКаталогДляТабеля(Объект.Организация, Объект.Подразделение);

		Объект.Основная.Загрузить(
			ЗначениеИзФайла(
				КаталогТабеля + "/" + ПодготовитьИмяНастроекНаДату("ТабличнаяЧасть", Объект.ДатаНачала)
			)
		);

		ОбработатьРеквизиты(КаталогТабеля, 1);
	
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ВосстановитьДанные();
	
	ВосстановитьИсключенияСотрудниковОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)

	ВосстановитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СохранитьДанные();
	
	Если СохранитьИсключенияСотрудниковОрганизации() Тогда
		ЭтаФорма.табИсключенияСотрудников.Очистить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СохранитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалендари(Команда)
	ОткрытьФорму("Справочник.ПроизводственныеКалендари.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)

	РасчитатьДанныеКалендаря();

КонецПроцедуры

&НаСервере
Функция ПолучитьГрафикСотрудника(Сотрудник, ДатаНачала, ДатаОкончания)
	Отбор = Новый Структура;
	Отбор.Вставить("Сотрудник",Сотрудник);
	Строки = табИсключенияСотрудников.НайтиСтроки(Отбор);
	Если Не Строки.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Строки[0].График) Тогда
			Возврат Строки[0].График;
		КонецЕсли;
	КонецЕсли;
	
	//{[+](фрагмент ДОБАВЛЕН),   02.04.2022 13:47:47
	//Получим график сотрудника, сопоставив норму времени за период основного начисления (в часах) с количеством часов по графикам в базе за такой же период
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Сотрудник КАК Сотрудник,
	               |	Начисления.ДатаНачала КАК ДатаНачала,
	               |	Начисления.ДатаОкончания КАК ДатаОкончания,
	               |	Начисления.НормаЧасов КАК НормаЧасов
	               |ИЗ
	               |	РегистрРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Сотрудник = &Сотрудник
	               |	И Начисления.ПериодРегистрации МЕЖДУ &НачалоМесяца И &КонецМесяца
	               |	И Начисления.Сторно = ЛОЖЬ
	               |	И Начисления.Активность = ИСТИНА
	               |	И Начисления.НормаЧасов <> 0
	               |	И Начисления.ДатаНачала >= &ДатаНачала
	               |	И Начисления.ДатаОкончания <= &ДатаОкончания";
	Запрос.Параметры.Вставить("Сотрудник",Сотрудник);
	Запрос.Параметры.Вставить("ДатаНачала", ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	Запрос.Параметры.Вставить("НачалоМесяца", Объект.ДатаНачала);
	Запрос.Параметры.Вставить("КонецМесяца", Объект.ДатаОкончания);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Организация = &Организация";
		Запрос.Параметры.Вставить("Организация",Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Подразделение В (&Подразделение)";
		Запрос.Параметры.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда //если не получили график, возьмем данные на последнюю дату предыдущего месяца 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.ДатаНачала >= &ДатаНачала", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.ДатаОкончания <= &ДатаОкончания", "");
		НачалоПредыдущегоМесяца = ДобавитьМесяц(НачалоМесяца(Объект.ДатаНачала), 1);
		Запрос.Параметры.Вставить("НачалоМесяца", НачалоПредыдущегоМесяца);
		Запрос.Параметры.Вставить("КонецМесяца", КонецМесяца(НачалоПредыдущегоМесяца));
		Результат = Запрос.Выполнить();
	КонецЕсли;

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Запрос = Новый Запрос;
		Запрос.Текст = СформироватьЗапросПоГрафикам();
		Запрос.УстановитьПараметр("ДатаНачала", Выборка.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Выборка.ДатаОкончания);
		
		ВыборкаГрафики = Запрос.Выполнить().Выбрать();
		Пока ВыборкаГрафики.Следующий() Цикл
			НормаЧасовЗаМесяц = ВыборкаГрафики.НормаЧасовЗаМесяц;
			Если ВыборкаГрафики.РабочийДень = "Полный рабочий день" Тогда // сокращаем длительность предпраздничного дня только для полного рабочего дня
				НормаЧасовЗаМесяц = НормаЧасовЗаМесяц - РасчетЗарплатыБазовый.СократитьПредпраздничныеЧасы(ВыборкаГрафики.УчитыватьПраздники, ВыборкаГрафики.ПроизводственныйКалендарь, 	
				Выборка.ДатаНачала, Выборка.ДатаОкончания);
			КонецЕсли; 
			
			Если НормаЧасовЗаМесяц = Выборка.НормаЧасов Тогда
				Возврат ВыборкаГрафики.ГрафикРаботы;
			КонецЕсли; 
		КонецЦикла;
		//} 02.04.2022 13:47:47 
	КонецЕсли;	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьКалендарьСотрудника(Сотрудник, Организация, Подразделение, Знач ДатаНач, Знач ДатаКон)
	
	ГрафикСотрудника = ПолучитьГрафикСотрудника(Сотрудник, ДатаНач, ДатаКон);
	Результат = Новый Структура;
	Результат.Вставить("РаботалХотяБыДень", Ложь);
	Результат.Вставить("РаботалХотяБыДеньВВыбранномПодразделении", Ложь);
	Результат.Вставить("Календарь", Новый Соответствие);
	Результат.Вставить("ПродолжительностьРабочегоДняСотрудника", Новый Соответствие);
	Результат.Вставить("Вечерние", Новый Соответствие);
	Результат.Вставить("ВидДня", Новый Соответствие);
	Результат.Вставить("Ночные", Новый Соответствие);
	Результат.Вставить("График", Справочники.Календари.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Если ГрафикСотрудника = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаботникиОрганизацийСрезПоследних.ВидСобытия КАК ВидСобытия,
			|	РаботникиОрганизацийСрезПоследних.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
			|		&ВыбДата, Организация = &ВыбОрганизация И Сотрудник = &ВыбСотрудник
			|	) КАК РаботникиОрганизацийСрезПоследних";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	РаботникиОрганизацийСрезПоследних.ВидСобытия КАК ВидСобытия,
		               |	РаботникиОрганизацийСрезПоследних.Подразделение КАК Подразделение,
		               |	КалендарныеГрафики.Календарь,
		               |	КалендарныеГрафики.Год,
		               |	КалендарныеГрафики.ДатаГрафика,
		               |	КалендарныеГрафики.ДеньВключенВГрафик,
		               |	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода
		               |ИЗ
		               |	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
		               |			&ВыбДата,
		               |			Организация = &ВыбОрганизация
		               |				И Сотрудник = &ВыбСотрудник) КАК РаботникиОрганизацийСрезПоследних,
		               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		               |ГДЕ
		               |	КалендарныеГрафики.Календарь = &Календарь
		               |	И КалендарныеГрафики.ДатаГрафика = &ВыбДата";
		Запрос.УстановитьПараметр("Календарь", ГрафикСотрудника);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВыбОрганизация", Организация);
	Запрос.УстановитьПараметр("ВыбСотрудник", Сотрудник);
	// Определение увольнение на расчетный период
	Запрос.УстановитьПараметр("ВыбДата", ДатаНач - 24*60*60);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если 
		ВыборкаДетальныеЗаписи.Следующий() И
		ВыборкаДетальныеЗаписи.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение
	Тогда
		БылУволен = Истина;
	Иначе
		БылУволен = Ложь;
	КонецЕсли;
	// Окончание расчета
	Пока ДатаНач <= ДатаКон Цикл
		Запрос.УстановитьПараметр("ВыбДата", ДатаНач);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ЧислитсяРаботающим = Ложь;
		ПродолжительностьРабочегоДняСотрудника = 0;
		Ночные = 0;
		Вечерние = 0;
		Если 
			ВыборкаДетальныеЗаписи.Следующий() И
			ВыборкаДетальныеЗаписи.ВидСобытия <> Перечисления.ВидыКадровыхСобытий.Увольнение
		Тогда
			Если ГрафикСотрудника = Неопределено Тогда
				ЧислитсяРаботающим = Истина;
				Результат.РаботалХотяБыДень = Истина;
				Если
					Не Подразделение.Пустая() И
					ВыборкаДетальныеЗаписи.Подразделение = Подразделение 
				Тогда
					Результат.РаботалХотяБыДеньВВыбранномПодразделении = Истина;
				КонецЕсли;
				ПродолжительностьРабочегоДняСотрудника = Объект.ПродолжительностьРабочегоДня;
			Иначе
				ЧислитсяРаботающим = ВыборкаДетальныеЗаписи.ДеньВключенВГрафик;
				Результат.РаботалХотяБыДень = ВыборкаДетальныеЗаписи.ДеньВключенВГрафик;
				Результат.График = ВыборкаДетальныеЗаписи.Календарь;
				Если
					Не Подразделение.Пустая() И
					ВыборкаДетальныеЗаписи.Подразделение = Подразделение 
				Тогда
					Результат.РаботалХотяБыДеньВВыбранномПодразделении = ВыборкаДетальныеЗаписи.ДеньВключенВГрафик;
				КонецЕсли;
				// Расчет продолжительности дня
				Если ВыборкаДетальныеЗаписи.Календарь.СпособЗаполнения = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоЦикламПроизвольнойДлины Тогда
					Периодичность = ВыборкаДетальныеЗаписи.Календарь.ШаблонЗаполнения.Количество();
					Сутки = 60*60*24;
					РазницаДат = (ДатаНач - ВыборкаДетальныеЗаписи.Календарь.ДатаОтсчета);
					дн = Окр((РазницаДат/Сутки/Периодичность-Окр(РазницаДат/Сутки/Периодичность,0,0))*Периодичность,0,1)+1;
					ОтборДняНедели = Новый Структура;
					ОтборДняНедели.Вставить("НомерДня",дн);
				Иначе
					дн = ДеньНедели(ДатаНач);
					ОтборДняНедели = Новый Структура;
					ОтборДняНедели.Вставить("НомерДня",дн);
				КонецЕсли;
				РасписаниеРаботы = ВыборкаДетальныеЗаписи.Календарь.РасписаниеРаботы;
				Если Не РасписаниеРаботы.Количество() = 0 Тогда
					СтрокиРасписания = РасписаниеРаботы.НайтиСтроки(ОтборДняНедели);
					Если Не СтрокиРасписания.Количество() = 0 Тогда
						ДиапазонВечерних = ПолучитьДиапазонВечерних();
						ДиапазонНочных = ПолучитьДиапазонНочных();
						Для Каждого СтрокаРасписания Из СтрокиРасписания Цикл
							Если СтрокаРасписания.ВремяОкончания < СтрокаРасписания.ВремяНачала Тогда
								ВремяОкончания = СтрокаРасписания.ВремяОкончания + 24*3600;
							Иначе
								ВремяОкончания = СтрокаРасписания.ВремяОкончания;
							КонецЕсли;
							ПродолжительностьРабочегоДняСотрудника = ПродолжительностьРабочегоДняСотрудника + (ВремяОкончания - СтрокаРасписания.ВремяНачала)/3600;
							Если Объект.УчитыватьВечерние Тогда
								Для Каждого стрВ Из ДиапазонВечерних Цикл
									ВремяОкончанияВечерних = стрВ.ВремяОкончания;
									Если стрВ.ВремяНачала <= СтрокаРасписания.ВремяНачала Тогда
										ВремяНачалаВечерних = СтрокаРасписания.ВремяНачала;
									Иначе
										ВремяНачалаВечерних = стрВ.ВремяНачала;
									КонецЕсли;
									Если ВремяОкончания <= ВремяНачалаВечерних Тогда
										ВремяОкончанияВечерних = ВремяНачалаВечерних;
									ИначеЕсли ВремяОкончания > ВремяОкончанияВечерних Тогда
										ВремяОкончанияВечерних = ВремяОкончанияВечерних;
									Иначе
										ВремяОкончанияВечерних = ВремяОкончания;
									КонецЕсли;
									Если (ВремяОкончанияВечерних - ВремяНачалаВечерних) > 0 Тогда
										Вечерние = Вечерние + (ВремяОкончанияВечерних - ВремяНачалаВечерних)/3600;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если Объект.УчитыватьНочные Тогда
								Для Каждого стрН Из ДиапазонНочных Цикл
									ВремяОкончанияНочных = стрН.ВремяОкончания;
									Если стрН.ВремяНачала <= СтрокаРасписания.ВремяНачала Тогда
										ВремяНачалаНочных = СтрокаРасписания.ВремяНачала;
									Иначе
										ВремяНачалаНочных = стрН.ВремяНачала;
									КонецЕсли;
									Если ВремяОкончания <= ВремяНачалаНочных Тогда
										ВремяОкончанияНочных = ВремяНачалаНочных;
									ИначеЕсли ВремяОкончания > ВремяОкончанияНочных Тогда
										ВремяОкончанияНочных = ВремяОкончанияНочных;
									Иначе
										ВремяОкончанияНочных = ВремяОкончания;
									КонецЕсли;
									Если (ВремяОкончанияНочных - ВремяНачалаНочных) > 0 Тогда
										Ночные = Ночные + (ВремяОкончанияНочных - ВремяНачалаНочных)/3600;
									КонецЕсли;
								КонецЦикла;
								//Если (СтрокаРасписания.ВремяОкончания <= Объект.НочныеПо) 
								//	И (СтрокаРасписания.ВремяНачала <= Объект.НочныеС)
								//	И (СтрокаРасписания.ВремяОкончания > СтрокаРасписания.ВремяНачала) Тогда
								//		Ночные = Ночные + (СтрокаРасписания.ВремяОкончания-СтрокаРасписания.ВремяНачала)/3600;
								//Иначе //Если СтрокаРасписания.ВремяОкончания < СтрокаРасписания.ВремяНачала Тогда
								//	Если Объект.НочныеПо < Объект.НочныеС Тогда
								//		ВремяОкончанияНочных = Объект.НочныеПо + 24*3600;
								//	Иначе
								//		ВремяОкончанияНочных = Объект.НочныеПо;
								//	КонецЕсли;
								//	Если Объект.НочныеС <= СтрокаРасписания.ВремяНачала Тогда
								//		ВремяНачалаНочных = СтрокаРасписания.ВремяНачала;
								//	Иначе
								//		ВремяНачалаНочных = Объект.НочныеС;
								//	КонецЕсли;
								//	Если ВремяОкончания <= ВремяНачалаНочных Тогда
								//		ВремяОкончанияНочных = Объект.НочныеС;
								//	ИначеЕсли ВремяОкончания > ВремяОкончанияНочных Тогда
								//		ВремяОкончанияНочных = ВремяОкончанияНочных;
								//	Иначе
								//		ВремяОкончанияНочных = ВремяОкончания;
								//	КонецЕсли;
								//	Ночные = Ночные + (ВремяОкончанияНочных - ВремяНачалаНочных)/3600;
								//КонецЕсли; 
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Не БылУволен И ВыборкаДетальныеЗаписи.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			Если ГрафикСотрудника = Неопределено Тогда
				ЧислитсяРаботающим = Истина;
				Результат.РаботалХотяБыДень = Истина;
				Если
					Не Подразделение.Пустая() И
					ВыборкаДетальныеЗаписи.Подразделение = Подразделение 
				Тогда
					Результат.РаботалХотяБыДеньВВыбранномПодразделении = Истина;
				КонецЕсли;
				ПродолжительностьРабочегоДняСотрудника = Объект.ПродолжительностьРабочегоДня;
			Иначе
				ЧислитсяРаботающим = ВыборкаДетальныеЗаписи.ДеньВключенВГрафик;
				Результат.РаботалХотяБыДень = ВыборкаДетальныеЗаписи.ДеньВключенВГрафик;
				Если
					Не Подразделение.Пустая() И
					ВыборкаДетальныеЗаписи.Подразделение = Подразделение 
				Тогда
					Результат.РаботалХотяБыДеньВВыбранномПодразделении = ВыборкаДетальныеЗаписи.ДеньВключенВГрафик;
				КонецЕсли;
				// Расчет продолжительности дня
				РасписаниеРаботы = ВыборкаДетальныеЗаписи.Календарь.РасписаниеРаботы;
				Если Не РасписаниеРаботы.Количество() = 0 Тогда
					дн = ДеньНедели(ДатаНач);
					ОтборДняНедели = Новый Структура;
					ОтборДняНедели.Вставить("НомерДня",дн);
					СтрокиРасписания = РасписаниеРаботы.НайтиСтроки(ОтборДняНедели);
					Если Не СтрокиРасписания.Количество() = 0 Тогда
						Для Каждого СтрокаРасписания Из СтрокиРасписания Цикл
							ПродолжительностьРабочегоДняСотрудника = ПродолжительностьРабочегоДняСотрудника + (СтрокаРасписания.ВремяОкончания - СтрокаРасписания.ВремяНачала)/3600;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			БылУволен = Истина;
		КонецЕсли;
		Результат.Календарь.Вставить(День(ДатаНач), ЧислитсяРаботающим);
		Результат.ПродолжительностьРабочегоДняСотрудника.Вставить(День(ДатаНач), ПродолжительностьРабочегоДняСотрудника);
		Результат.Вечерние.Вставить(День(ДатаНач), Вечерние);
		Результат.Ночные.Вставить(День(ДатаНач), Ночные);
		ДатаНач = ДатаНач + 24 * 60 * 60;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьДиапазонВечерних()
	ДиапазонВечерних = Новый ТаблицаЗначений; 
	ДиапазонВечерних.Колонки.Добавить("ВремяНачала"); 
	ДиапазонВечерних.Колонки.Добавить("ВремяОкончания");
	Если Объект.ВечерниеПо < Объект.ВечерниеС Тогда
		стр = ДиапазонВечерних.Добавить();
		стр.ВремяНачала = Объект.ВечерниеС;
		стр.ВремяОкончания = КонецДня(Объект.ВечерниеС);
		стр = ДиапазонВечерних.Добавить();
		стр.ВремяНачала = НачалоДня(Объект.ВечерниеПо);
		стр.ВремяОкончания = Объект.ВечерниеПо;
	Иначе
		стр = ДиапазонВечерних.Добавить();
		стр.ВремяНачала = Объект.ВечерниеС;
		стр.ВремяОкончания = Объект.ВечерниеПо;
	КонецЕсли;
	Возврат ДиапазонВечерних;
КонецФункции
Функция ПолучитьДиапазонНочных()
	ДиапазонНочных = Новый ТаблицаЗначений; 
	ДиапазонНочных.Колонки.Добавить("ВремяНачала"); 
	ДиапазонНочных.Колонки.Добавить("ВремяОкончания");
	Если Объект.НочныеПо < Объект.НочныеС Тогда
		стрДН = ДиапазонНочных.Добавить();
		стрДН.ВремяНачала = Объект.НочныеС;
		стрДН.ВремяОкончания = КонецДня(Объект.НочныеС);
		стрДН = ДиапазонНочных.Добавить();
		стрДН.ВремяНачала = НачалоДня(Объект.НочныеПо);
		стрДН.ВремяОкончания = Объект.НочныеПо;
	Иначе
		стрДН = ДиапазонНочных.Добавить();
		стрДН.ВремяНачала = Объект.НочныеС;
		стрДН.ВремяОкончания = Объект.НочныеПо;
	КонецЕсли;
	Возврат ДиапазонНочных;
КонецФункции

Функция СохранитьНастройкиВидовРасчета()
	КлючНастроек = "ТабельНастройкаВидыРасчетов";	
	Настройки = Новый Соответствие; 
	Настройки.Вставить("НастройкаТарифДневной", Объект.НастройкаТарифДневной); 
	Настройки.Вставить("НастройкаТарифЧасовой", Объект.НастройкаТарифЧасовой); 
	Настройки.Вставить("НастройкаОкладПоДням", Объект.НастройкаОкладПоДням); 
	Настройки.Вставить("НастройкаОкладПоЧасам", Объект.НастройкаОкладПоЧасам); 
	
	//{[+](фрагмент ДОБАВЛЕН),   02.04.2022 11:04:51
	//Настройки.Вставить("НастройкаИндексацияЗарплаты", Объект.НастройкаИндексацияЗарплаты); 
	Настройки.Вставить("НастройкаОплатаПоСреднемуБЛОрганизации", Объект.НастройкаОплатаПоСреднемуБЛОрганизации); 
	Настройки.Вставить("НастройкаОплатаПоСреднемуБЛ", Объект.НастройкаОплатаПоСреднемуБЛ); 
	Настройки.Вставить("НастройкаОплатаПоСреднемуОтп", Объект.НастройкаОплатаПоСреднемуОтп); 
	//Настройки.Вставить("НастройкаДоплатаДоМЗП", Объект.НастройкаДоплатаДоМЗП); 
	Настройки.Вставить("НастройкаОбозначений", ЭтаФорма.табОбозначений.Выгрузить());
	//} 02.04.2022 11:04:51 
	
	Настройки.Вставить("РуководительПодразделения", Объект.РуководительПодразделения); 
	Настройки.Вставить("ДолжностьРуководителяПодразделения", Объект.ДолжностьРуководителяПодразделения); 
	Настройки.Вставить("РаботникОтделаКадров", Объект.РаботникОтделаКадров); 
	Настройки.Вставить("ДолжностьРаботникаОтделаКадров", Объект.ДолжностьРаботникаОтделаКадров); 
	Настройки.Вставить("Ответственный", Объект.Ответственный); 
	Настройки.Вставить("ДолжностьОтветственного", Объект.ДолжностьОтветственного);
	
	Настройки.Вставить("УчитыватьВечерние", Объект.УчитыватьВечерние); 
	Настройки.Вставить("ВечерниеС", Объект.ВечерниеС); 
	Настройки.Вставить("ВечерниеПо", Объект.ВечерниеПо); 
	Настройки.Вставить("УчитыватьНочные", Объект.УчитыватьНочные); 
	Настройки.Вставить("НочныеС", Объект.НочныеС); 
	Настройки.Вставить("НочныеПо", Объект.НочныеПо); 
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Настройки.Вставить("НастройкаИсключенияСотрудников_"+СокрЛП(Объект.Организация.Код), ЭтаФорма.табИсключенияСотрудников.Выгрузить());
	КонецЕсли;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТабельНастройки", КлючНастроек, Настройки); 
КонецФункции

Функция ВосстановитьНастройкиВидовРасчета(СброситьНастройки = Ложь)
	КлючНастроек = "ТабельНастройкаВидыРасчетов";	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТабельНастройки", КлючНастроек);	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда 
		Объект.НастройкаТарифДневной = ЗначениеНастроек.Получить("НастройкаТарифДневной");	
		Объект.НастройкаТарифЧасовой = ЗначениеНастроек.Получить("НастройкаТарифЧасовой");	
		Объект.НастройкаОкладПоДням = ЗначениеНастроек.Получить("НастройкаОкладПоДням");	
		Объект.НастройкаОкладПоЧасам = ЗначениеНастроек.Получить("НастройкаОкладПоЧасам");	
		//Объект.НастройкаИндексацияЗарплаты = ЗначениеНастроек.Получить("НастройкаИндексацияЗарплаты");	
		Объект.НастройкаОплатаПоСреднемуБЛОрганизации = ЗначениеНастроек.Получить("НастройкаОплатаПоСреднемуБЛОрганизации");	
		Объект.НастройкаОплатаПоСреднемуБЛ = ЗначениеНастроек.Получить("НастройкаОплатаПоСреднемуБЛ");	
		Объект.НастройкаОплатаПоСреднемуОтп = ЗначениеНастроек.Получить("НастройкаОплатаПоСреднемуОтп");	
		//Объект.НастройкаДоплатаДоМЗП = ЗначениеНастроек.Получить("НастройкаДоплатаДоМЗП");
		ЭтаФорма.табОбозначений.Загрузить(ЗначениеНастроек.Получить("НастройкаОбозначений"));
		//ЭтаФорма.табИсключенияСотрудников.Загрузить(ЗначениеНастроек.Получить("НастройкаИсключенияСотрудников"));
		
		Объект.РуководительПодразделения = ЗначениеНастроек.Получить("РуководительПодразделения");
		Объект.ДолжностьРуководителяПодразделения = ЗначениеНастроек.Получить("ДолжностьРуководителяПодразделения");
		Объект.РаботникОтделаКадров = ЗначениеНастроек.Получить("РаботникОтделаКадров");
		Объект.ДолжностьРаботникаОтделаКадров = ЗначениеНастроек.Получить("ДолжностьРаботникаОтделаКадров");
		Объект.Ответственный = ЗначениеНастроек.Получить("Ответственный");
		Объект.ДолжностьОтветственного = ЗначениеНастроек.Получить("ДолжностьОтветственного");
		
		Объект.УчитыватьВечерние = ЗначениеНастроек.Получить("УчитыватьВечерние");
		Объект.ВечерниеС = ЗначениеНастроек.Получить("ВечерниеС");
		Объект.ВечерниеПо = ЗначениеНастроек.Получить("ВечерниеПо");
		Объект.УчитыватьНочные = ЗначениеНастроек.Получить("УчитыватьНочные");
		Объект.НочныеС = ЗначениеНастроек.Получить("НочныеС");
		Объект.НочныеПо = ЗначениеНастроек.Получить("НочныеПо");
	КонецЕсли;
	
	ПервыйЗапуск(СброситьНастройки);
	
КонецФункции

Процедура ПервыйЗапуск(СброситьНастройки = Ложь)
	Если Не ЗначениеЗаполнено(Объект.НастройкаТарифДневной) Тогда
		Объект.НастройкаТарифДневной = ПланыВидовРасчета.Начисления.ТарифДневной;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаТарифЧасовой) Тогда
		Объект.НастройкаТарифЧасовой = ПланыВидовРасчета.Начисления.ТарифЧасовой;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаОкладПоДням) Тогда
		Объект.НастройкаОкладПоДням = ПланыВидовРасчета.Начисления.ОкладПоДням;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаОкладПоЧасам) Тогда	
		Объект.НастройкаОкладПоЧасам = ПланыВидовРасчета.Начисления.ОкладПоЧасам;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаИндексацияЗарплаты) Тогда	
		Объект.НастройкаИндексацияЗарплаты = ПланыВидовРасчета.Начисления.ИндексацияЗарплаты;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаОплатаПоСреднемуБЛОрганизации) Тогда	
		Объект.НастройкаОплатаПоСреднемуБЛОрганизации = ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛОрганизации;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаОплатаПоСреднемуБЛ) Тогда	
		Объект.НастройкаОплатаПоСреднемуБЛ = ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛ;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаОплатаПоСреднемуОтп) Тогда	
		Объект.НастройкаОплатаПоСреднемуОтп = ПланыВидовРасчета.Начисления.ОплатаПоСреднемуОтп;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НастройкаДоплатаДоМЗП) Тогда	
		Объект.НастройкаДоплатаДоМЗП = ПланыВидовРасчета.Начисления.ДоплатаДоМЗП;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВечерниеС) Тогда
		Объект.ВечерниеС = Объект.ВечерниеС + 20*60*60;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВечерниеПо) Тогда
		Объект.ВечерниеПо = Объект.ВечерниеПо + 22*60*60;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НочныеС) Тогда
		Объект.НочныеС = Объект.НочныеС + 22*60*60;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НочныеПо) Тогда
		Объект.НочныеПо = Объект.НочныеПо + 6*60*60;
	КонецЕсли;
	
	Если СброситьНастройки Тогда
		ЭтаФорма.табОбозначений.Очистить();
	КонецЕсли;
	Если ЭтаФорма.табОбозначений.Количество() = 0 Тогда
		таб = ЭтаФорма.табОбозначений;
		стр = таб.Добавить();
		стр.ВидРасчета = Объект.НастройкаТарифДневной;
		стр.Обозначение = "р";
		стр = таб.Добавить();
		стр.ВидРасчета = Объект.НастройкаТарифЧасовой;
		стр.Обозначение = "р";
		стр = таб.Добавить();
		стр.ВидРасчета = Объект.НастройкаОкладПоДням;
		стр.Обозначение = "р";
		стр = таб.Добавить();
		стр.ВидРасчета = Объект.НастройкаОкладПоЧасам;
		стр.Обозначение = "р";
		//стр = таб.Добавить();
		//стр.ВидРасчета = Объект.НастройкаИндексацияЗарплаты;
		//стр.Обозначение = "";
		стр = таб.Добавить();
		стр.ВидРасчета = Объект.НастройкаОплатаПоСреднемуБЛОрганизации;
		стр.Обозначение = "тн";
		стр.УчитыватьВыходные = Истина;
		стр.УчитыватьПраздничныеДни = Истина;
		стр = таб.Добавить();
		стр.ВидРасчета = Объект.НастройкаОплатаПоСреднемуБЛ;
		стр.Обозначение = "тн";
		стр.УчитыватьВыходные = Истина;
		стр.УчитыватьПраздничныеДни = Истина;
		стр = таб.Добавить();
		стр.ВидРасчета = Объект.НастройкаОплатаПоСреднемуОтп;
		стр.Обозначение = "в";
		стр.УчитыватьВыходные = Истина;
		//стр = таб.Добавить();
		//стр.ВидРасчета = Объект.НастройкаДоплатаДоМЗП;
		//стр.Обозначение = "";
		
		//{[+](фрагмент ДОБАВЛЕН),   02.04.2022 11:10:22
		стр = таб.Добавить();
		стр.ВидРасчета = СоздатьВидРасчетаПоБеременностиИРодам();
		стр.Обозначение = "вп";
		стр.УчитыватьВыходные = Истина;
		стр.УчитыватьПраздничныеДни = Истина;

		стр = таб.Добавить();
		стр.ВидРасчета = СоздатьВидРасчетаПоУходуЗаРебенкомДо3Лет();
		стр.Обозначение = "вп";
		стр.УчитыватьВыходные = Истина;
		
		стр = таб.Добавить();
		стр.ВидРасчета = СоздатьВидРасчетаПоУходуЗаРебенкомДо6Лет();
		стр.Обозначение = "дд";
		стр.УчитыватьВыходные = Истина;
		
		стр = таб.Добавить();
		стр.ВидРасчета = СоздатьВидРасчетаНеоплачиваемыйОтпуск();
		стр.Обозначение = "на";
		стр.УчитыватьВыходные = Истина;
		
		стр = таб.Добавить();
		стр.ВидРасчета = СоздатьВидРасчетаОплатаМобилизованным();
		стр.Обозначение = "ін";
		
		стр = таб.Добавить();
		стр.ВидРасчета = СоздатьВидРасчетаКоммандировка();
		стр.Обозначение = "вд";
		//} 02.04.2022 11:10:22 
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДанныеРегистраРасчетовПоСотруднику(Сотрудник,Организация,Подразделение,ДатаНачала,ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Организация КАК Организация,
	               |	Начисления.Сотрудник КАК Сотрудник,
	               |	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	               |	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	               |	Начисления.НормаДней КАК НормаДней,
	               |	Начисления.НормаЧасов КАК НормаЧасов,
	               |	Начисления.КалендарныеДни КАК КалендарныеДни,
	               |	Начисления.ДатаНачала КАК ДатаНачала,
	               |	Начисления.ДатаОкончания КАК ДатаОкончания,
	               |	Начисления.ВидРасчета КАК ВидРасчета,
	               |	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	               |	Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления
	               |ИЗ
	               |	РегистрРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Сотрудник = &Сотрудник
	               |	И Начисления.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
	               |			ИЛИ Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)";
	Запрос.Параметры.Вставить("Сотрудник",Сотрудник);
	Запрос.Параметры.Вставить("ДатаНачала",ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания",ДатаОкончания);
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Организация = &Организация";
		Запрос.Параметры.Вставить("Организация",Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Подразделение В (&Подразделение)";
		Запрос.Параметры.Вставить("Подразделение",Подразделение);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеРегистраРасчетовПоСотрудникуДругогоПериода(Сотрудник,Организация,Подразделение,ДатаНачала,ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Организация,
	               |	Начисления.Сотрудник,
	               |	Начисления.БазовыйПериодНачало,
	               |	Начисления.БазовыйПериодКонец,
	               |	Начисления.НормаДней,
	               |	Начисления.НормаЧасов,
	               |	Начисления.КалендарныеДни,
	               |	Начисления.ДатаНачала,
	               |	Начисления.ДатаОкончания,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ПериодРегистрации
	               |ИЗ
	               |	РегистрРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Сотрудник = &Сотрудник
	               |	И (Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
	               |			ИЛИ Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)
	               |	И Начисления.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания";
	Запрос.Параметры.Вставить("Сотрудник",Сотрудник);
	Запрос.Параметры.Вставить("ДатаНачала",ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания",ДатаОкончания);
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Организация = &Организация";
		Запрос.Параметры.Вставить("Организация",Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Подразделение В (&Подразделение)";
		Запрос.Параметры.Вставить("Подразделение",Подразделение);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеРегистраРасчетовПоСотрудникуДругогоПериодаХвост(Сотрудник,Организация,Подразделение,ДатаНачала,ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Организация,
	               |	Начисления.Сотрудник,
	               |	Начисления.БазовыйПериодНачало,
	               |	Начисления.БазовыйПериодКонец,
	               |	Начисления.НормаДней,
	               |	Начисления.НормаЧасов,
	               |	Начисления.КалендарныеДни,
	               |	Начисления.ДатаНачала,
	               |	Начисления.ДатаОкончания,
	               |	Начисления.ВидРасчета,
	               |	Начисления.ПериодРегистрации
	               |ИЗ
	               |	РегистрРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Сотрудник = &Сотрудник
	               |	И (Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
	               |			ИЛИ Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)
	               |	И Начисления.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания";
	Запрос.Параметры.Вставить("Сотрудник",Сотрудник);
	Запрос.Параметры.Вставить("ДатаНачала",ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания",ДатаОкончания);
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Организация = &Организация";
		Запрос.Параметры.Вставить("Организация",Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И Начисления.Подразделение В (&Подразделение)";
		Запрос.Параметры.Вставить("Подразделение",Подразделение);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура табИсключенияСотрудниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	
КонецПроцедуры

&НаКлиенте
Процедура табИсключенияСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Если НоваяСтрока Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		ТекСтрока.ПродолжительностьРабочегоДня = 4;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СброситьОбозначения(Команда)
	// Вставить содержимое обработчика.
	ВосстановитьНастройкиВидовРасчета(Истина);
КонецПроцедуры

Функция ВосстановитьИсключенияСотрудниковОрганизации()
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	КлючНастроек = "ТабельНастройкаИсключениеСотрудников"+СокрЛП(Объект.Организация.Код);	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТабельНастройкиИсключений", КлючНастроек);	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда 
		ЭтаФорма.табИсключенияСотрудников.Загрузить(ЗначениеНастроек.Получить("НастройкаИсключенияСотрудников"));
	КонецЕсли;
КонецФункции

Функция СохранитьИсключенияСотрудниковОрганизации()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		КлючНастроек = "ТабельНастройкаИсключениеСотрудников"+СокрЛП(Объект.Организация.Код);	
		Настройки = Новый Соответствие; 
		Настройки.Вставить("НастройкаИсключенияСотрудников", ЭтаФорма.табИсключенияСотрудников.Выгрузить());
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТабельНастройкиИсключений", КлючНастроек, Настройки);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ПодборСотрудниковНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьПараметрыПодбора()
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",Объект.Организация);
	Отбор.Вставить("Подразделение",Объект.Подразделение);
	Возврат Отбор;
КонецФункции

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	ПодборСотрудниковНаСервере();
	Отбор = ПолучитьПараметрыПодбора();
	ФормаПодбора = ПолучитьФорму("Обработка.ТабельУчетаРабочегоВремени.Форма.ФормаПодбора",Отбор,ЭтаФорма);
	ФормаПодбора.Открыть();
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(Параметры)
	//Вставить содержимое обработчика
	мас = Параметры.Сотрудники;
	График = Параметры.График;
	Пятидневка = Параметры.Пятидневка;
	Шестидневка = Параметры.Шестидневка;
	Для Каждого Элемент Из мас Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Сотрудник",Элемент);
		Найдены = табИсключенияСотрудников.НайтиСтроки(Отбор);
		Если Найдены.Количество() = 0 Тогда
			стр = табИсключенияСотрудников.Добавить();
			стр.Сотрудник = Элемент;
			стр.ПродолжительностьРабочегоДня = Пятидневка;
			стр.ПродолжительностьРабочегоДня6 = Шестидневка;
			стр.График = График;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыбраныСотрудники"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ОбработкаОповещенияНаСервере(Параметр.ВыбранСотрудник);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура табИсключенияСотрудниковГрафикПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура табИсключенияСотрудниковГрафикПриИзменении(Элемент)
	табИсключенияСотрудниковГрафикПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура табИсключенияСотрудниковПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура табИсключенияСотрудниковПриИзменении(Элемент)
	табИсключенияСотрудниковПриИзмененииНаСервере();
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.График) Тогда
			Элемент.ТекущиеДанные.ПродолжительностьРабочегоДня = 0;
			Элемент.ТекущиеДанные.ПродолжительностьРабочегоДня6 = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновнойГрафикНаСервере()
	// Вставить содержимое обработчика.
	Если Не ЗначениеЗаполнено(ОсновнойГрафик) Тогда
		Возврат;
	КонецЕсли;
	Для Каждого стр Из табИсключенияСотрудников Цикл
		стр.График = ОсновнойГрафик;
		стр.ПродолжительностьРабочегоДня = 0;
		стр.ПродолжительностьРабочегоДня6 = 0;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновнойГрафик(Команда)
	ЗаполнитьОсновнойГрафикНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВечерниеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Элементы.ВечерниеС.Доступность = Объект.УчитыватьВечерние;
	Элементы.ВечерниеПо.Доступность = Объект.УчитыватьВечерние;
	ВидимостьВечерних();
КонецПроцедуры

&НаСервере
Процедура ВидимостьВечерних()
	Для Индекс = 1 По 31 Цикл
		Идентификатор = Строка(Индекс);
		ЭтаФорма.Элементы["ОсновнаяВечерние" + Идентификатор].Видимость = Объект.УчитыватьВечерние;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНочныеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Элементы.НочныеС.Доступность = Объект.УчитыватьНочные;
	Элементы.НочныеПо.Доступность = Объект.УчитыватьНочные;
	ВидимостьНочных();
КонецПроцедуры

&НаСервере
Процедура ВидимостьНочных()
	Для Индекс = 1 По 31 Цикл
		Идентификатор = Строка(Индекс);
		Элементы["ОсновнаяНочные" + Идентификатор].Видимость = Объект.УчитыватьНочные;
	КонецЦикла;
КонецПроцедуры


#Область ДобавленныеПроцедурыФункции

&НаСервереБезКонтекста
Функция СоздатьВидРасчетаНеоплачиваемыйОтпуск()
	Ссылка = ПланыВидовРасчета.Начисления.НайтиПоРеквизиту("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Если Ссылка.Пустая() Тогда
		НовыйЭлемент = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		НовыйЭлемент.Код = "00241";
		НовыйЭлемент.Наименование = "Неоплачувана відпустка";
		НовыйЭлемент.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
		НовыйЭлемент.СпособРасчета = Перечисления.СпособыРасчетаНачислений.НулеваяСумма;
		НовыйЭлемент.ЗачетНормыВремени = Истина;
		НовыйЭлемент.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
		НовыйЭлемент.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		НовыйЭлемент.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НовыйЭлемент.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСРазрешенияАдминистрации;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат Ссылка;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьВидРасчетаПоУходуЗаРебенкомДо3Лет()
	Ссылка = ПланыВидовРасчета.Начисления.НайтиПоРеквизиту("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо3Лет);
	Если Ссылка.Пустая() Тогда
		НовыйЭлемент = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		НовыйЭлемент.Код = "00251";
		НовыйЭлемент.Наименование = "По догляду за дитиною до 3-х років";
		НовыйЭлемент.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо3Лет;
		НовыйЭлемент.ЗачетНормыВремени = Истина;
		НовыйЭлемент.СпособРасчета = Перечисления.СпособыРасчетаНачислений.НулеваяСумма;
		НовыйЭлемент.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
		НовыйЭлемент.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		НовыйЭлемент.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат Ссылка;
	КонецЕсли;
КонецФункции
	
&НаСервереБезКонтекста	
Функция СоздатьВидРасчетаПоУходуЗаРебенкомДо6Лет()
	Ссылка = ПланыВидовРасчета.Начисления.НайтиПоРеквизиту("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо6Лет);
	Если Ссылка.Пустая() Тогда
		НовыйЭлемент = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		НовыйЭлемент.Код = "00252";
		НовыйЭлемент.Наименование = "По догляду за дитиною до 6-ти років";
		НовыйЭлемент.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо6Лет;
		НовыйЭлемент.ЗачетНормыВремени = Истина;
		НовыйЭлемент.СпособРасчета = Перечисления.СпособыРасчетаНачислений.НулеваяСумма;
		НовыйЭлемент.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
		НовыйЭлемент.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		НовыйЭлемент.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат Ссылка;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста	
Функция СоздатьВидРасчетаОплатаМобилизованным()
	Ссылка = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Оплата мобілізованим");
	Если Ссылка.Пустая() Тогда
		НовыйЭлемент = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		НовыйЭлемент.Код = "00271";
		НовыйЭлемент.Наименование = "Оплата мобілізованим";
		НовыйЭлемент.ЗачетНормыВремени = Истина;
		НовыйЭлемент.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НачисленияМобилизованным;
		НовыйЭлемент.ЗачетНормыВремени = Истина;
		НовыйЭлемент.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой;
		НовыйЭлемент.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код01;
		НовыйЭлемент.ВидЕСВ = Перечисления.ВидыЕСВ.НачисленияМобилизованным;
		НовыйЭлемент.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.КакЗаданоВидуРасчета;
		НовыйЭлемент.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НовыйЭлемент.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ_НеотработанноеВремя;
		НовыйЭлемент.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины;
		НовыйЭлемент.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеВидыНачисленийДопФОТ;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат Ссылка;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция СоздатьВидРасчетаКоммандировка()
	Ссылка = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Відрядження");
	Если Ссылка.Пустая() Тогда
		НовыйЭлемент = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		НовыйЭлемент.Код = "00270";
		НовыйЭлемент.Наименование = "Відрядження";
		НовыйЭлемент.ЗачетОтработанногоВремени = Истина;
		НовыйЭлемент.ЗачетНормыВремени = Истина;
		НовыйЭлемент.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НачисленияМобилизованным; //???
		НовыйЭлемент.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой;
		НовыйЭлемент.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код01;
		НовыйЭлемент.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата;
		НовыйЭлемент.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
		НовыйЭлемент.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НовыйЭлемент.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
		НовыйЭлемент.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_Отработано;
		НовыйЭлемент.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ЗатратыНаКомандировки;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат Ссылка;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьВидРасчетаПоБеременностиИРодам()
	Ссылка = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Оплата декретних");
	Если Ссылка.Пустая() Тогда
		НовыйЭлемент = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		НовыйЭлемент.Код = "00250";
		НовыйЭлемент.Наименование = "Оплата декретних";
		НовыйЭлемент.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам;
		НовыйЭлемент.ЗачетНормыВремени = Истина;
		НовыйЭлемент.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой;
		НовыйЭлемент.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.Код22;
		НовыйЭлемент.ВидЕСВ = Перечисления.ВидыЕСВ.Декретные;
		НовыйЭлемент.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.КакЗаданоВидуРасчета;
		НовыйЭлемент.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеДекретныхЗаСчетФСС;
		НовыйЭлемент.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоДругимВыплатам;
		НовыйЭлемент.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Соцстрах;
		НовыйЭлемент.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат Ссылка;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьОтветственныхЛицНаСервере()
	
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   Объект.ДатаОкончания);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Объект.Организация);
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизаций.Должность КАК Должность
		|
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизаций";
		
		ОтвественныеЛицаОрганизации = ЗапросПоЛицам.Выполнить().Выбрать();
		
		ЗаписьНайдена = ОтвественныеЛицаОрганизации.НайтиСледующий(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель));
		Если ЗаписьНайдена Тогда
			Объект.ДолжностьРуководителяПодразделения = ОтвественныеЛицаОрганизации.Должность;
			ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ОтвественныеЛицаОрганизации.ФизическоеЛицо, Ложь, Объект.Организация, Объект.ДатаОкончания);
			Если ТаблицаСотрудников.Количество()>0 Тогда
				Объект.РуководительПодразделения = ТаблицаСотрудников[0].Сотрудник;		
			КонецЕсли; 
		КонецЕсли;
		
		ОтвественныеЛицаОрганизации.Сбросить();
		ЗаписьНайдена = ОтвественныеЛицаОрганизации.НайтиСледующий(Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы));
		Если ЗаписьНайдена Тогда
			Объект.ДолжностьРаботникаОтделаКадров = ОтвественныеЛицаОрганизации.Должность;
			ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ОтвественныеЛицаОрганизации.ФизическоеЛицо, Ложь, Объект.Организация, Объект.ДатаОкончания);
			Если ТаблицаСотрудников.Количество()>0 Тогда
				Объект.РаботникОтделаКадров = ТаблицаСотрудников[0].Сотрудник;	
			КонецЕсли; 
		КонецЕсли;
		
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтветственныхЛиц(Команда)
	ЗаполнитьОтветственныхЛицНаСервере();
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоСотруднику (СтрокаПоСотруднику)
	
	// Посчитаем колонку всего по каждому сотруднику
	ДнейВечернихВсего = 0;
	ДнейНочныхВсего = 0;
	ЧасовВечернихВсего = 0;
	ЧасовНочныхВсего = 0;
	ИтогиПоВидамВремени = Новый Структура;
	
	Для Индекс = 1 По 31 Цикл
		Часы = СтрокаПоСотруднику["Часы" + Индекс];
		ВидДня = СтрокаПоСотруднику["ВидДня" + Индекс];
		Если ЗначениеЗаполнено(ВидДня) Тогда
			Если ИтогиПоВидамВремени.Свойство(ВидДня) Тогда
				ИтогоВремени = ИтогиПоВидамВремени[ВидДня] + Часы;
				ИтогиПоВидамВремени.Вставить(ВидДня, ИтогоВремени);
				Ключ = ВидДня + "Дней";
				Дней = ИтогиПоВидамВремени[Ключ] + 1;
				ИтогиПоВидамВремени.Вставить(Ключ, Дней);
			Иначе
				ИтогиПоВидамВремени.Вставить(ВидДня, Часы);
				Ключ = ВидДня + "Дней";
				Дней = 1;
				ИтогиПоВидамВремени.Вставить(Ключ, Дней);
			КонецЕсли; 
		КонецЕсли; 
		ЧасовВечернихВсего = ЧасовВечернихВсего + СтрокаПоСотруднику["Вечерние" + Индекс];
		ЧасовНочныхВсего = ЧасовНочныхВсего + СтрокаПоСотруднику["Ночные" + Индекс];;
		ДнейВечернихВсего = ?(ЧасовВечернихВсего>0, ДнейВечернихВсего + 1, ДнейВечернихВсего);
		ДнейНочныхВсего = ?(ЧасовНочныхВсего>0, ДнейНочныхВсего + 1, ДнейНочныхВсего);
		
	КонецЦикла;
	
	ВсегоСтрокой = "";
	ПервыйЭлемент = Истина;
	Для каждого Элемент Из ИтогиПоВидамВремени Цикл
		Если Прав(Элемент.Ключ, 4) = "Дней" Тогда
			ОбозначениеВидаВремени = СтрЗаменить(Элемент.Ключ, "Дней", "");
			СтрокаДобавления =  ОбозначениеВидаВремени + " " + Элемент.Значение + " д. " + СтрокаДобавления;
		Иначе
			СтрокаДобавления = Строка(Элемент.Значение) + НСтр("ru = ' ч.'; uk = ' г.'");
		КонецЕсли; 
		Если СтрНайти(СтрокаДобавления, " д. ") Тогда
			ВсегоСтрокой = ?(ПервыйЭлемент, СтрокаДобавления, ВсегоСтрокой + Символы.ПС + СтрокаДобавления);	
			ПервыйЭлемент = Ложь;
		КонецЕсли; 
		
	КонецЦикла; 
	Если ЗначениеЗаполнено(ЧасовВечернихВсего) Тогда
		ВсегоСтрокой = ВсегоСтрокой + Символы.ПС + "вч " + ЧасовВечернихВсего;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЧасовНочныхВсего) Тогда
		ВсегоСтрокой = ВсегоСтрокой + Символы.ПС + "рн " + ЧасовНочныхВсего;
	КонецЕсли; 
	СтрокаПоСотруднику.Всего = ВсегоСтрокой;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяСотрудникПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Основная.ТекущиеДанные;
	Сотрудник = ТекущиеДанные.Сотрудник;
	ТекущиеДанные.Должность = ПолучитьТекущуюДолжностьСотрудника(Сотрудник);
	ТекущиеДанные.ТабельныйНомер = ПолучитьКодСотрудника(Сотрудник);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодСотрудника(Сотрудник)
	Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Код");
	Возврат ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Код, Истина);
КонецФункции 
 
&НаСервере
Процедура ПолучитьДатуНачалаИДатуОкончания(ДанныеРегистраРасчетов)
		
	Для каждого Строка Из ДанныеРегистраРасчетов Цикл
		Если Не ЗначениеЗаполнено(ДатаНачалаРабочегоПериода) Тогда
			ДатаНачалаРабочегоПериода    = Строка.ДатаНачала;
		ИначеЕсли Не ЗначениеЗаполнено(ДатаОкончанияРабочегоПериода) Тогда
			ДатаОкончанияРабочегоПериода = Строка.ДатаОкончания;
		КонецЕсли; 
		
		Если Строка.ДатаНачала < ДатаНачалаРабочегоПериода Тогда
			ДатаНачалаРабочегоПериода = Строка.ДатаНачала;
		КонецЕсли; 
		Если Строка.ДатаОкончания > ДатаОкончанияРабочегоПериода Тогда
			ДатаОкончанияРабочегоПериода = Строка.ДатаОкончания;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры 

Функция СформироватьЗапросПоГрафикам()
	
	ЗапросТекст = 
		"ВЫБРАТЬ
		|	КалендариРасписаниеРаботы.Ссылка КАК Ссылка,
		|	КалендариРасписаниеРаботы.НомерДня КАК НомерДня,
		|	СУММА(ЧАС(КалендариРасписаниеРаботы.ВремяОкончания) - ЧАС(КалендариРасписаниеРаботы.ВремяНачала)) КАК Часов,
		|	КалендариРасписаниеРаботы.Ссылка.УчитыватьПраздники КАК УчитыватьПраздники,
		|	КалендариРасписаниеРаботы.Ссылка.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ втРабочихЧасовПоДням
		|ИЗ
		|	Справочник.Календари.РасписаниеРаботы КАК КалендариРасписаниеРаботы
		|ГДЕ
		|	КалендариРасписаниеРаботы.НомерДня <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендариРасписаниеРаботы.Ссылка,
		|	КалендариРасписаниеРаботы.НомерДня,
		|	КалендариРасписаниеРаботы.Ссылка.УчитыватьПраздники,
		|	КалендариРасписаниеРаботы.Ссылка.ПроизводственныйКалендарь
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	НомерДня
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.Календарь КАК Календарь,
		|	СУММА(втРабочихЧасовПоДням.Часов) КАК Часов,
		|	втРабочихЧасовПоДням.УчитыватьПраздники КАК УчитыватьПраздники,
		|	втРабочихЧасовПоДням.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ втНормаЧасовНаМесяц
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРабочихЧасовПоДням КАК втРабочихЧасовПоДням
		|		ПО (ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика) = втРабочихЧасовПоДням.НомерДня)
		|			И КалендарныеГрафики.Календарь = втРабочихЧасовПоДням.Ссылка
		|ГДЕ
		|	КалендарныеГрафики.ДатаГрафика МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И КалендарныеГрафики.ДеньВключенВГрафик = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендарныеГрафики.Календарь,
		|	втРабочихЧасовПоДням.УчитыватьПраздники,
		|	втРабочихЧасовПоДням.ПроизводственныйКалендарь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРабочихЧасовПоДням.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втРабочихЧасовПоДням.НомерДня) КАК ДнейПоНорме,
		|	МАКСИМУМ(втРабочихЧасовПоДням.Часов) КАК Часов
		|ПОМЕСТИТЬ втДлительностьРабНеделиПоНорме
		|ИЗ
		|	втРабочихЧасовПоДням КАК втРабочихЧасовПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	втРабочихЧасовПоДням.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендариШаблонЗаполнения.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендариШаблонЗаполнения.НомерСтроки) КАК ДнейПоГрафику
		|ПОМЕСТИТЬ втДлительностьРабНеделиПоГрафику
		|ИЗ
		|	Справочник.Календари.ШаблонЗаполнения КАК КалендариШаблонЗаполнения
		|ГДЕ
		|	КалендариШаблонЗаполнения.ДеньВключенВГрафик = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	КалендариШаблонЗаполнения.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДлительностьРабНеделиНоНорме.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА втДлительностьРабНеделиНоГрафику.ДнейПоГрафику = втДлительностьРабНеделиНоНорме.ДнейПоНорме
		|			ТОГДА ""Полная рабочая неделя""
		|		ИНАЧЕ ""Неполная рабочая неделя""
		|	КОНЕЦ КАК РабочаяНеделя,
		|	ВЫБОР
		|		КОГДА втДлительностьРабНеделиНоНорме.ДнейПоНорме = 5
		|					И втДлительностьРабНеделиНоНорме.Часов = 8
		|				ИЛИ втДлительностьРабНеделиНоНорме.ДнейПоНорме = 6
		|					И втДлительностьРабНеделиНоНорме.Часов = 7
		|			ТОГДА ""Полный рабочий день""
		|		ИНАЧЕ ""Неполный рабочий день""
		|	КОНЕЦ КАК РабочийДень
		|ПОМЕСТИТЬ втРабочаяНеделя
		|ИЗ
		|	втДлительностьРабНеделиПоНорме КАК втДлительностьРабНеделиНоНорме
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДлительностьРабНеделиПоГрафику КАК втДлительностьРабНеделиНоГрафику
		|		ПО втДлительностьРабНеделиНоНорме.Ссылка = втДлительностьРабНеделиНоГрафику.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНормаЧасовНаМесяц.Календарь КАК ГрафикРаботы,
		|	втНормаЧасовНаМесяц.Часов КАК НормаЧасовЗаМесяц,
		|	втНормаЧасовНаМесяц.УчитыватьПраздники КАК УчитыватьПраздники,
		|	втРабочаяНеделя.РабочаяНеделя КАК РабочаяНеделя,
		|	втРабочаяНеделя.РабочийДень КАК РабочийДень,
		|	втНормаЧасовНаМесяц.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ИЗ
		|	втНормаЧасовНаМесяц КАК втНормаЧасовНаМесяц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРабочаяНеделя КАК втРабочаяНеделя
		|		ПО втНормаЧасовНаМесяц.Календарь = втРабочаяНеделя.Ссылка";
	
	Возврат ЗапросТекст;
КонецФункции //СформироватьЗапросПоГрафикам
 

#КонецОбласти 
