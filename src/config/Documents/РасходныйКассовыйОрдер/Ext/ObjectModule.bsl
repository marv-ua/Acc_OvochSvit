#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента;
Перем КратностьДокумента;

Перем мВалютаРегламентированногоУчета;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами;
Перем ЕстьРасчетыПоКредитам;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//


// Заполняет документ на основании приходного кассового ордера\
//
Процедура ЗаполнитьПоПКО()

	Если ДокументОснование.ПоОбособленномуПодразделению Тогда
		
		ПоОбособленномуПодразделению = Истина;
		ОбособленноеПодразделениеОрганизации = ДокументОснование.ОбособленноеПодразделениеОрганизации;
		
	КонецЕсли;
	
	ВидОперацииДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ВидОперации");
	
	Если ВидОперацииДокументаОснования = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда

		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВалютаДокумента, Дата, Контрагент");
		
		СтруктураКурсаОснования = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;

		ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Контрагент  = ДокументОснование.Контрагент;

		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл

			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;

			Если НЕ ЗначениеЗаполнено(СтрокаОснование.Сделка) И СтрокаОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = 
				Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			КонецЕсли;

			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;

			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
			
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
														
		    СтрокаПлатеж.СчетУчетаНДС    				= СчетаУчета.СчетУчетаНДСПродаж;
			СтрокаПлатеж.СчетУчетаНДСПодтвержденный     = СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
			СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПродаж;
			
		КонецЦикла;


		Для Индекс = 0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл

			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = ДокументОснование.РасшифровкаПлатежа[Индекс];

			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
			   И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания

				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
					ДокументОснование.ВалютаДокумента, 
					СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
					КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);

				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
					СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);

			Иначе

				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;

				Иначе

					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
						ВалютаДокумента, 
						СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

				КонецЕсли;

			КонецЕсли;

			ПересчитатьСуммуНДС(СтрокаПлатеж);

		КонецЦикла;

		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	Иначе

		ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКОУпр()

Процедура ЗаполнитьПоВедомостьНаВыплатуЗарплаты(Основание)
	
	ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;

	// Определим сумму выплаченной заработной платы
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Основание);
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ПараметрыОплаты.Ссылка.ФорматОбмена30
	|			ТОГДА ПараметрыОплаты.СчетУчета
	|			ИНАЧЕ ГруппыУчетаНачисленийИУдержаний.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	СУММА(ПараметрыОплаты.Сумма) 		КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты.ПараметрыОплаты КАК ПараметрыОплаты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплаты.РаботникиОрганизации КАК РаботникиОрганизации
	|		ПО	РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник	
	|			И РаботникиОрганизации.ФизЛицо = ПараметрыОплаты.ФизЛицо
	|			И РаботникиОрганизации.Ссылка = &Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыУчетаНачисленийИУдержаний КАК ГруппыУчетаНачисленийИУдержаний
	|       ПО ГруппыУчетаНачисленийИУдержаний.Ссылка = ПараметрыОплаты.ГруппаУчетаНачислений
	|
	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
	|	И	РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И	РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|   И   (НЕ ПараметрыОплаты.Ссылка.ФорматОбмена30 ИЛИ ПараметрыОплаты.Ссылка.ВидМестаВыплаты = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса) ИЛИ ПараметрыОплаты.Ссылка.ВидМестаВыплаты = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Раздатчик))
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ ПараметрыОплаты.Ссылка.ФорматОбмена30
	|			ТОГДА ПараметрыОплаты.СчетУчета
	|			ИНАЧЕ ГруппыУчетаНачисленийИУдержаний.СчетУчета
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыОплаты.СчетУчета 			КАК СчетУчета,
	|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.ЗарплатаПодробно КАК ПараметрыОплаты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
	|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОплаты.СчетУчета
	|
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость			= Основание;
		СтрокаВедомость.СчетУчета			= РезультатЗапроса.СчетУчета;
		СтрокаВедомость.СуммаКВыплате		= РезультатЗапроса.Сумма;
		
	КонецЦикла;
	
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");

	Организация = Основание.Организация;

	
КонецПроцедуры

//++ БУ ЗИК
//~Процедура ЗаполнитьПоВедомостьНаВыплатуЗарплатыРасширенная(Основание)
//~	
//~	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
//~		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
//~	Иначе
//~		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком;
//~	КонецЕсли;	
//~
//~	// Определим сумму выплаченной заработной платы
//~	Запрос=Новый Запрос;
//~	Запрос.УстановитьПараметр("Ссылка",Основание);
//~	
//~	Запрос.Текст="ВЫБРАТЬ
//~	|	ПараметрыОплаты.ГруппаУчетаНачислений 			КАК ГруппаУчетаНачислений,
//~	|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
//~	|ИЗ
//~	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ПараметрыОплаты
//~	|
//~	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
//~	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
//~	|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
//~	|			И	ПараметрыОплаты.ГруппаУчетаНачислений = РанееВыплаченныеСуммы.ГруппаУчетаНачислений
//~	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
//~	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
//~	|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
//~	|СГРУППИРОВАТЬ ПО
//~	|	ПараметрыОплаты.ГруппаУчетаНачислений
//~	|
//~	|ОБЪЕДИНИТЬ ВСЕ
//~	|
//~	|ВЫБРАТЬ
//~	|	ПараметрыОплаты.ГруппаУчетаНачислений 			КАК ГруппаУчетаНачислений,
//~	|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
//~	|ИЗ
//~	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК ПараметрыОплаты
//~	|
//~	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
//~	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
//~	|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
//~	|			И	ПараметрыОплаты.ГруппаУчетаНачислений = РанееВыплаченныеСуммы.ГруппаУчетаНачислений
//~	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
//~	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
//~	|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
//~	|СГРУППИРОВАТЬ ПО
//~	|	ПараметрыОплаты.ГруппаУчетаНачислений
//~	|
//~	|";
//~	
//~	РезультатЗапроса = Запрос.Выполнить().Выбрать();
//~	Пока РезультатЗапроса.Следующий() Цикл
//~		
//~		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
//~		СтрокаВедомость.Ведомость			= Основание;
//~		СтрокаВедомость.ГруппаУчетаНачислений			= РезультатЗапроса.ГруппаУчетаНачислений;
//~		СтрокаВедомость.СуммаКВыплате		= РезультатЗапроса.Сумма;
//~		
//~	КонецЦикла;
//~	
//~	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
//~
//~	Организация = Основание.Организация;
//~	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//~		Контрагент = Основание.Раздатчик;
//~	КонецЕсли;	
//~
//~	
//~КонецПроцедуры	
//-- БУ ЗИК

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	ДокументОснование = Основание;
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
//++ БУ ЗИК
	Если НЕ ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
		И НЕ ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет")
		И НЕ ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
//~	Если НЕ ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком")
//~		И НЕ ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет")
//~		И НЕ ТипЗначенияОснования = Тип("ДокументСсылка.ДоговорЗаймаСотруднику")
//~		И НЕ ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
//-- БУ ЗИК	
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Основание.Организация, 
														Основание.Контрагент, Основание.ДоговорКонтрагента);
	    ВалютаВзаиморасчетовДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Основание.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЕсли;
		
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента    = ВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетКасса) Тогда
		СчетКасса = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
	КонецЕсли;
	
	Если ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 	
	 	ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНМА") 
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли; 
		
		Контрагент = Основание.Контрагент;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ВалютаВзаиморасчетовДоговора;
		Иначе
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетовДоговора, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СуммаПлатежа = Основание.СуммаВознаграждения;
			СтрокаТаблицыСумм.СтавкаНДС    = Основание.СтавкаНДСВознаграждения;
			СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
			Если НЕ Основание.СуммаВключаетНДС Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа+СтрокаТаблицыСумм.СуммаНДС;
			КонецЕсли;
		Иначе
			СуммаДокументаОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") и Основание.УдержатьВознаграждение тогда
				СуммаКоррПлатежа= СуммаДокументаОснования.Итог("СуммаПлатежа") - Основание.СуммаВознаграждения;
				СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаНДС") - Основание.Товары.Итог("СуммаНДСВознаграждения");
				
				НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррПлатежа,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
				Если не НоваяКолонкаСумм = Неопределено Тогда
					СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
				КонецЕсли; 
				
				НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаНДС"));
				Если не НоваяКолонкаНДС = Неопределено Тогда
					СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаНДС");
				КонецЕсли; 
			ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				Если НЕ (Основание.Сумма = 0 И Основание.СуммаНДС = 0) Тогда
					Если СуммаДокументаОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС     + Основание.СуммаНДС;
					Если НЕ Основание.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + Основание.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				СуммаДокументаОснования.ЗаполнитьЗначения(Основание.СтавкаНДС, "СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		Если Основание.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СделкаВОсновании = Неопределено;
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				СделкаВОсновании = Основание.СделкаПоПриобретению;
			ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", Основание.Метаданные()) Тогда
				СделкаВОсновании = Основание.Сделка;
			КонецЕсли; 
			ТаблицаПлатежей.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Основание,СделкаВОсновании),"Сделка");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовЗаПосредническиеУслуги, "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансамВыданным     , "СчетУчетаРасчетовПоАвансам");
			
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовСКонтрагентом, 	"СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансамВыданным, "СчетУчетаРасчетовПоАвансам") ;
			
		ИначеЕсли НЕ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание.СчетУчетаРасчетовПоАвансам    , "СчетУчетаРасчетовПоАвансам");
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетов, "СчетУчетаРасчетовСКонтрагентом") ;
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансов,  "СчетУчетаРасчетовПоАвансам") ;
			КонецЕсли;
			
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретений, 				 "СчетУчетаНДС");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный, "СчетУчетаНДСПодтвержденный");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПриобретений, 		 "НалоговоеНазначение");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.Амортизируется, 		 				 "Амортизируется");
			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, 				"СчетУчетаНДС");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный,  "СчетУчетаНДСПодтвержденный");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПродаж, 		"НалоговоеНазначение");
			
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = РасшифровкаПлатежа[0];
		
//++ БУ ЗИК
	ИначеЕсли  ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
		  ИЛИ  ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
	Тогда

		ЗаполнитьПоВедомостьНаВыплатуЗарплаты(Основание);
		
//~	ИначеЕсли  ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком")
//~		  ИЛИ  ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
//~	Тогда
//~
//~		ЗаполнитьПоВедомостьНаВыплатуЗарплатыРасширенная(Основание);
//-- БУ ЗИК

//++ БУ ЗИК
//~	ИначеЕсли  ТипЗначенияОснования = Тип("ДокументСсылка.ДоговорЗаймаСотруднику") Тогда
//~
//~		ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику;
//~		Контрагент  = Основание.ФизическоеЛицо;
//~		
//~		ДоговорЗаймаСотруднику = Основание;
//~		СуммаДокумента = Основание.Сумма;
//~
//-- БУ ЗИК

	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПоПКО();
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
		Контрагент  = Основание.ФизЛицо;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		НоваяСтрока.КурсВзаиморасчетов           = СтруктураКурсаДокумента.Курс;
		НоваяСтрока.КратностьВзаиморасчетов      = СтруктураКурсаДокумента.Кратность;
	
		Запрос = Новый Запрос;
		
		Если НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
	 		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
	
		Запрос.УстановитьПараметр("Сотрудник",  Основание.ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Основание.Организация);
		Запрос.УстановитьПараметр("ДатаИтогов", Основание.Дата +1);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки."+?(ВалютаДокумента = ВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокКт КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&СчетРасчетов), ,
		|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
	    	
		ПредыдущийАванс = Запрос.Выполнить().Выбрать();
		ПредыдущийАванс.Следующий();
		
		Остаток    = ?(ЗначениеЗаполнено(ПредыдущийАванс.СуммаОстаток), ПредыдущийАванс.СуммаОстаток, 0);
		
		СуммаДокумента  = Остаток;
		
		НоваяСтрока.СуммаПлатежа = СуммаДокумента;
	
	КонецЕсли;
	
	НовыеПараметрыПечати = Новый Структура;	
	ЗаполнитьРеквизитыПечати("ВидОперации", ЭтотОбъект, НовыеПараметрыПечати);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметрыПечати, "Выдать, Основание, ПоДокументу");
	ЭтотОбъект.Приложение=ЭтотОбъект.Основание;
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ЭтотОбъект.Выдать = ОпределитьКассираОрганизации();
	КонецЕсли;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// Процедура заполняет реквизиты, используемые для формирования печатной формы (Выдать, 
// Основание и ПоДокументу). 
// Параметры:
//  ЧтоИзменилось - имя реквизита документа
//
Процедура ЗаполнитьРеквизитыПечати(ЧтоИзменилось = Неопределено, Знач Объект, НовыеПараметры) Экспорт

	// если не передали название реквизита считаем, что это ВидОперации.
	// Как следствие будет проведено заполнение всех реквизитов по-умолчанию.
	Если ЧтоИзменилось = Неопределено Тогда
	
		ЧтоИзменилось = "ВидОперации";
	
	КонецЕсли; 
	
	Если  ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
	  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда 
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			Выдать = ?(Контрагент.НаименованиеПолное="", Контрагент.Наименование, Контрагент.НаименованиеПолное);
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "Сделка" Тогда
			
			Основание = "";	
			
			РасшифровкаКопия = РасшифровкаПлатежа.Выгрузить();
			РасшифровкаКопия.Свернуть("ДоговорКонтрагента, Сделка","");
			РасшифровкаКопия.Сортировать("ДоговорКонтрагента, Сделка");
			
			ТекДоговор = Неопределено;
			
			Для Инд = 0 По РасшифровкаКопия.Количество() - 1 Цикл
				
				СтрокаРасшифровки = РасшифровкаКопия[Инд];
				
				Шапка = Новый Структура();
				Шапка.Вставить("ДоговорКонтрагента", 			СтрокаРасшифровки.ДоговорКонтрагента);
				Шапка.Вставить("ДоговорНаименованиеДляПечати", 	СтрокаРасшифровки.ДоговорКонтрагента.НаименованиеДляПечати);
				Шапка.Вставить("ДоговорДата",  					СтрокаРасшифровки.ДоговорКонтрагента.Дата);
				Шапка.Вставить("ДоговорНомер", 					СтрокаРасшифровки.ДоговорКонтрагента.Номер);
				Шапка.Вставить("Сделка", 						СтрокаРасшифровки.Сделка);	
				
				// Выводим дополнительно информацию о договоре и сделке
				Если НЕ ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента Тогда
				
					СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
				    ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента;
					
				Иначе	
					
					СписокДополнительныхПараметров = "";
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
					СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
				КонецЕсли;
				
				МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,"uk");
				
				Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
					Основание = Основание + СтруктураСтроки.НазваниеПараметра + " " + СтруктураСтроки.ЗначениеПараметра + ", ";
				КонецЦикла;	
				
				
			КонецЦикла;
			
			// обрежем последнюю запятую
			Если Прав(Основание, 2) = ", " Тогда
				Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "Контрагент" 
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "ВидОперации" Тогда
			ПоДокументу = ?(Контрагент.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Контрагент.ДокументУдостоверяющийЛичность, "");
		КонецЕсли
		
		// Приложение
		// не заполняется ни в одном случае
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//++ БУ ЗИК
//~          ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику
//-- БУ ЗИК			
          ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			ФизЛицо = Контрагент.ФизическоеЛицо;
		Иначе 
			ФизЛицо = Контрагент;
		КонецЕсли;
		
		// Выдать		
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			Выдать = "";	
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",?(Дата = '00010101', ОбщегоНазначенияБП.ПолучитьРабочуюДату(), Дата));
			Запрос.УстановитьПараметр("ФизЛицо", Физлицо);

			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
							  Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), "")
							  ,"");

			КонецЕсли;
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"
			ИЛИ ЧтоИзменилось = "Ведомость"
			ИЛИ ЧтоИзменилось = "РасчетныйДокумент" Тогда
			
			Основание = "";	
			
			Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
				Основание = "Платіжна відомість ";
							
				Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПлатежнаяВедомость.Номер) + " від " + Формат(ПлатежнаяВедомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
			
			// обрежем последнюю запятую
				Если Прав(Основание, 2) = ", " Тогда
					Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
				КонецЕсли;
			
			КонецЕсли;

//++ БУ ЗИК
//~            Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику Тогда
//~				Основание = "Договір позики ";
//~							
//~				Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДоговорЗаймаСотруднику.Номер) + " від " + Формат(ДоговорЗаймаСотруднику.Дата, "ДФ=dd.MM.yyyy") + ", ";	
//~			
//~			// обрежем последнюю запятую
//~				Если Прав(Основание, 2) = ", " Тогда
//~					Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
//~				КонецЕсли;
//~			
//~			КонецЕсли;
//-- БУ ЗИК			


		КонецЕсли;	
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" 
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			ПоДокументу = "";
			
			Если Не Контрагент.Пустая() Тогда
			
				ДокФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, Дата);
		 		Если ЗначениеЗаполнено(ДокФизЛица) Тогда
		 			ПоДокументу = Строка(ДокФизЛица.ВидДокумента) + " серія " +
		 			ДокФизЛица.Серия       + ", номер " +
		 			ДокФизЛица.Номер       + ", виданий " +
		 			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
		 			//ДокФизЛица.Выдан;
					ДокФизЛица.КемВыдан;
		 		КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "СчетОрганизации" Тогда
			
			Выдать = "";	
			Если Не СчетОрганизации.Пустая() Тогда
			
				Выдать = "п/р " + СчетОрганизации.НомерСчета + " у " + СчетОрганизации.Банк;
			
			КонецЕсли; 
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ОбъявлениеНаВзносНаличными" Тогда
			
			Основание = "";	
			
		КонецЕсли;		
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Выдать = "";	
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации" 
			ИЛИ ЧтоИзменилось = "Ведомость"  Тогда
			
			Основание = "";
			
			Если ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
				Основание = "Платіжна відомість ";
			ИначеЕсли ВыплатаЗаработнойПлаты.Количество() > 1 Тогда
				Основание = "Платіжні відомісті ";
			КонецЕсли;
			
			Для каждого СтрВедомости Из ВыплатаЗаработнойПлаты Цикл
				
				Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрВедомости.Ведомость.Номер) + " від " + Формат(СтрВедомости.Ведомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
				
			КонецЦикла;
			
			// обрежем последнюю запятую
			Если Прав(Основание, 2) = ", " Тогда
				Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
//++ БУ ЗИК	
	//~ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
	//~	
	//~	// Выдать
	//~	ФизЛицо = Контрагент;
	//~	Если    ЧтоИзменилось = "ВидОперации"  
	//~		ИЛИ ЧтоИзменилось = "Контрагент" Тогда
	//~		
	//~		Выдать = "";	
	//~		
	//~		Запрос=Новый Запрос;
	//~		Запрос.Текст="ВЫБРАТЬ
	//~		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	//~		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	//~		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
	//~		|ИЗ
	//~		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	//~		Запрос.УстановитьПараметр("Дата",?(Дата = '00010101', ОбщегоНазначенияБП.ПолучитьРабочуюДату(), Дата));
	//~		Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	//~
	//~		Результат=Запрос.Выполнить().Выбрать();
	//~		Если Результат.Следующий() Тогда
    //~
	//~			Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
	//~						  Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), "")
	//~						  ,"");
    //~
	//~		КонецЕсли;
	//~		
	//~	КонецЕсли;		
	//~	
	//~	// Основание
	//~	Если    ЧтоИзменилось = "ВидОперации" 
	//~		ИЛИ ЧтоИзменилось = "Ведомость"  Тогда
	//~		
	//~		Основание = "";
	//~		
	//~		Если ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
	//~			Основание = "Відомість виплати через роздавальника ";
	//~		ИначеЕсли ВыплатаЗаработнойПлаты.Количество() > 1 Тогда
	//~			Основание = "Відомісті виплати через роздавальника ";
	//~		КонецЕсли;
	//~		
	//~		Для каждого СтрВедомости Из ВыплатаЗаработнойПлаты Цикл
	//~			
	//~			Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрВедомости.Ведомость.Номер) + " від " + Формат(СтрВедомости.Ведомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
	//~			
	//~		КонецЦикла;
	//~		
	//~		// обрежем последнюю запятую
	//~		Если Прав(Основание, 2) = ", " Тогда
	//~			Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
	//~		КонецЕсли;
	//~		
	//~	КонецЕсли;
	//~	
	//~	// ПоДокументу
	//~	Если    ЧтоИзменилось = "ВидОперации" 
	//~		ИЛИ ЧтоИзменилось = "Контрагент" Тогда
	//~		
	//~		ПоДокументу = "";
	//~		
	//~		Если Не Контрагент.Пустая() Тогда
	//~		
	//~			ДокФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, Дата);
    //~
	//~			Если ЗначениеЗаполнено(ДокФизЛица) Тогда
	//~	 			ПоДокументу = Строка(ДокФизЛица.ВидДокумента) + " серія " +
	//~	 			ДокФизЛица.Серия       + ", номер " +
	//~	 			ДокФизЛица.Номер       + ", виданий " +
	//~	 			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
	//~				ДокФизЛица.КемВыдан;
	//~	 		КонецЕсли;
	//~		
	//~		КонецЕсли;
	//~	КонецЕсли;
//-- БУ ЗИК			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Выдать = "";	
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Основание = "";	
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("Выдать",      Выдать);
	НовыеПараметры.Вставить("Основание",   Основание);
	НовыеПараметры.Вставить("ПоДокументу", ПоДокументу);
	
КонецПроцедуры


Процедура УстановитьНазначениеДенежныхСредств() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Командировка
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
        НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.ПокупкаТоваров
//++ БУ ЗИК
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		  или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
//~	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
//~		  или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//~		  или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//-- БУ ЗИК
		НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.ОплатаТруда
	Иначе
        НазначениеДенежныхСредств = Справочники.НазначенияНаличныхДенежныхСредств.Прочее	
	КонецЕсли;	

	
КонецПроцедуры	

Функция ОпределитьКассираОрганизации() Экспорт
	
	ВыдатьПредставление = "";	
	Если НЕ ЗначениеЗаполнено(ОбособленноеПодразделениеОрганизации) Тогда
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, Дата);
	Иначе
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛицаОбособленногоПодразделения(ОбособленноеПодразделениеОрганизации, Дата);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
		ВыдатьПредставление = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(Руководители.КассирФИО.Фамилия, Руководители.КассирФИО.Имя, Руководители.КассирФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	Возврат ВыдатьПредставление
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт


	СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Хозрасчетный;

	КассаВВалюте = Ложь;
	МоментДокумента = Новый МоментВремени(Дата, Ссылка);
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
		Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, ВалютаДокумента, МоментДокумента, СтруктураШапкиДокумента.СчетКасса, ОбособленноеПодразделениеОрганизации, Заголовок);
		Иначе
			УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, ВалютаДокумента, МоментДокумента, СтруктураШапкиДокумента.СчетКасса, , Заголовок);
		КонецЕсли;
	Иначе
		Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, , МоментДокумента, СтруктураШапкиДокумента.СчетКасса, ОбособленноеПодразделениеОрганизации, Заголовок);
		Иначе
			УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, Организация, , МоментДокумента, СтруктураШапкиДокумента.СчетКасса, , Заголовок);
		КонецЕсли;
	КонецЕсли;

	СчетКт = СтруктураШапкиДокумента.СчетКасса;
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда

		СтруктураШапкиДокумента.Вставить("КоррСчет", СчетКт);
		Если БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,ЕстьРасчетыСКонтрагентами,Отказ,Заголовок,?(ЕстьРасчетыПоКредитам,НСтр("ru='Расчеты по кредитам и займам';uk='Розрахунки за кредитами і позиками'",Локализация.КодЯзыкаИнформационнойБазы()),""))=Ложь тогда
			Возврат;
		КонецЕсли;

//++ БУ ЗИК
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
//~		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
//~			  или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//-- БУ ЗИК			
		
		УчетЗарплаты.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, ПроводкиБУ, СчетКасса, ВидОперации,  СчетОрганизации,,,,,ОбособленноеПодразделениеОрганизации, СтатьяДвиженияДенежныхСредств);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда

		УчетЗарплаты.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, ПроводкиБУ, СчетКасса, ВидОперации,  СчетОрганизации, Контрагент, ПлатежнаяВедомость, СчетУчетаРасчетовПоЗП, ГруппаУчетаНачислений, ОбособленноеПодразделениеОрганизации, СтатьяДвиженияДенежныхСредств);
	Иначе
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			Проводка.Содержание = НСтр("ru='Выдача средств подотчетнику';uk='Видача коштів підзвітній особі'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Если КассаВВалюте Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
			КонецЕсли;
			
			Проводка.СубконтоДт.РаботникиОрганизаций = СтруктураШапкиДокумента.Контрагент;
			
			СтруктураШапкиДокумента.Вставить("КоррСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			
			Проводка.Содержание = ?(ВидОперации=Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств,НСтр("ru='Инкассация денежных средств';uk='Інкасація коштів'",Локализация.КодЯзыкаИнформационнойБазы()),НСтр("ru='Прочие расходы';uk='Інші витрати'",Локализация.КодЯзыкаИнформационнойБазы()));
			Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			
			Проводка.Содержание = НСтр("ru='Взнос наличными в банк';uk='Внесок готівкою в банк'",Локализация.КодЯзыкаИнформационнойБазы());
			
			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентом;
			Проводка.СубконтоДт.БанковскиеСчета               = СтруктураШапкиДокумента.СчетОрганизации;
			Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств;
			
//++ БУ ЗИК
//~		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику Тогда
//~			
//~			Проводка.Содержание = НСтр("ru='Выдача займа сотруднику';uk='Видача позики працівнику'",Локализация.КодЯзыкаИнформационнойБазы());
//~			
//~			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям;
//~			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтруктураШапкиДокумента.Контрагент);
//~			
//~			СтруктураШапкиДокумента.Вставить("КоррСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
//-- БУ ЗИК			
			
		КонецЕсли;
		
		Проводка.СчетКт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СтатьиДвиженияДенежныхСредств",СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		Если СтруктураШапкиДокумента.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОбособленныеПодразделенияБезОбразованияЮрЛица", СтруктураШапкиДокумента.ОбособленноеПодразделениеОрганизации);
		КонецЕсли; 
		
		Если КассаВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			
			ВалютаРег       = ВалютаРегламентированногоУчета;
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			
		Иначе
			Проводка.Сумма  = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
			
			Если УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом,,Дата) = "Затраты" Тогда
				Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
					Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеПриПрочемСписании;
					Если НЕ НалоговоеНазначениеПриПрочемСписании = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
						Проводка.СуммаНУДт = Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если   ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
		 И СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда

		Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			
			Если НЕ СтрокаРасшифровки.ВозвратАвансаДо01042011НУ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоПриобретение = (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ВХОДЯЩ") > 0) ИЛИ (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ПРИХОД") > 0);			
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период     = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			СуммаСторноДоходовЗатрат = - СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011;
				
			Если ЭтоПриобретение Тогда
				Проводка.СчетДт    = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
				Проводка.СчетКт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУДт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно расходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно витрат при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
					
			Иначе	
				Проводка.СчетКт    = ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;
				Проводка.СчетДт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУКт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно доходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно доходів при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> ВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, ВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц
	
	Если (ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам или
		(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику)) 
		и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		НалоговыйУчет.ДвиженияПоЕдиномуНалогуРасчеты(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//++ БУ ЗИК
//~     или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком
//-- БУ ЗИК		
		или ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее) и СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		
		НалоговыйУчет.ДвиженияПоЕдиномуНалогуПрочее(ЭтотОбъект,СтруктураШапкиДокумента,Отказ);	
	КонецЕсли;	
	
//++ БУ ЗИК
//~	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику Тогда
//~		ЗаймыСотрудникам.ЗарегистрироватьПредоставлениеЗайма(Движения, СтруктураШапкиДокумента.ДоговорЗаймаСотруднику, СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Контрагент, Отказ);
//~	КонецЕсли;	
//-- БУ ЗИК	
	
	Если ЕстьРасчетыСКонтрагентами и (СтруктураШапкиДокумента.ЕстьНДС или СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015) Тогда
		РеестрПлатежей = НалоговыйУчет.ПодготовитьТаблицуОплатДляНалоговогоУчета(СтруктураШапкиДокумента);
		НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаПлатежныхДокументов(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Массив") Тогда
//++ БУ ЗИК
		Если    ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") 
			ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
//~		Если    ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком") 
//~			ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
//-- БУ ЗИК	
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения[0]);
			ВводНаОсновании = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
//++ БУ ЗИК
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику
//-- БУ ЗИК		
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
	Иначе
		СчетКасса= ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
//++ БУ ЗИК
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//-- БУ ЗИК		
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		ОграничениеТипаКонтрагента = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	Если ОграничениеТипаКонтрагента.Типы().Количество() = 0 Тогда
		Контрагент = Неопределено;
	Иначе
		Контрагент = ОграничениеТипаКонтрагента.ПривестиЗначение(Контрагент);
	КонецЕсли;
	
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами)
		И ПустаяСтрока(Выдать) 
		И ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "НаименованиеПолное, Наименование");
		Выдать = ?(ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное), ДанныеКонтрагента.Наименование, ДанныеКонтрагента.НаименованиеПолное);
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
//++ БУ ЗИК
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком)
//-- БУ ЗИК		

		И (ПустаяСтрока(Выдать) ИЛИ ПустаяСтрока(ПоДокументу)) 
		И ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Организация, Контрагент, Дата);
		Если ПустаяСтрока(Выдать) Тогда
			Выдать = ДанныеФизЛица.Представление;
		КонецЕсли;
		Если ПустаяСтрока(ПоДокументу) Тогда
			ПоДокументу = ДанныеФизЛица.ПредставлениеДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЕстьНалогНаПрибыльДо2015 = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Организация, НачалоМесяца(Дата));
	ЕстьНДС			   = УчетнаяПолитика.ПлательщикНДС(Организация, НачалоМесяца(Дата));
	
	// Отключаем проверку реквизитов шапки
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю
		И ВидОперации <> Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
//++ БУ ЗИК
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
//~		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//~		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику
//~		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//-- БУ ЗИК			
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если (ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И ВидОперации <> Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
	Если Не ПоОбособленномуПодразделению Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОбособленноеПодразделениеОрганизации");
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов"); // Проверяем построчно
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом"); // Проверяем построчно
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов, связанных с выплатой заработной платы
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем
	
//++ БУ ЗИК
	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
//~	Если (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//~		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком)
//-- БУ ЗИК		
		И НЕ РучнаяКорректировка Тогда
		
//++ БУ ЗИК
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
//~		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
//~	     или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//-- БУ ЗИК				
			
			Ведомости = ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость");
			ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости);

			ТаблицаВедомостей.Свернуть("Ведомость, СчетУчета, ГруппаУчетаНачислений","СуммаКВыплате");
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ТаблицаВедомостей", ТаблицаВедомостей);
			Запрос.УстановитьПараметр("ВыплатаЗаработнойПлаты", ВыплатаЗаработнойПлаты.Выгрузить());
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеВедомостей.Ведомость КАК Ведомость,
			|	ДанныеВедомостей.СчетУчета КАК СчетУчета,
			|	ДанныеВедомостей.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
			|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВТТаблицаВедомостей
			|ИЗ
			|	&ТаблицаВедомостей КАК ДанныеВедомостей
			|;
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ведомость КАК Ведомость,
			|	ДанныеДокумента.СчетУчета КАК СчетУчета,
			|	ДанныеДокумента.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
			|	ДанныеДокумента.СуммаКВыплате КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВТВыплатаЗаработнойПлаты
			|ИЗ
			|	&ВыплатаЗаработнойПлаты КАК ДанныеДокумента
			|;
			|
			|ВЫБРАТЬ
			|	СУММА(ДанныеВедомостей.СуммаКВыплате) КАК СуммаКВыплате
			|ИЗ
			|   ВТВыплатаЗаработнойПлаты КАК ДанныеДокумента
			|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	ВТТаблицаВедомостей КАК ДанныеВедомостей
			|   ПО ДанныеВедомостей.Ведомость = ДанныеДокумента.Ведомость
			|    И ДанныеВедомостей.СчетУчета = ДанныеДокумента.СчетУчета
			|    И ДанныеВедомостей.ГруппаУчетаНачислений = ДанныеДокумента.ГруппаУчетаНачислений
			|    И ДанныеВедомостей.СуммаКВыплате = ДанныеДокумента.СуммаКВыплате
			|";
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если НЕ Результат.Следующий() ИЛИ Результат.СуммаКВыплате <> СуммаДокумента Тогда
				ШаблонСообщения = НСтр("ru='Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.';uk='Не збігається сума документа й сума по відомостях на виплату заробітної плати.'");
				ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
			
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоЗП");
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
			Ведомости = Новый Массив;
			Ведомости.Добавить(ПлатежнаяВедомость);
			
			ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости);
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ТаблицаВедомостей", ТаблицаВедомостей);
			Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
			Запрос.УстановитьПараметр("СчетУчетаРасчетовПоЗП", СчетУчетаРасчетовПоЗП);
			Запрос.УстановитьПараметр("ГруппаУчетаНачислений", ГруппаУчетаНачислений);
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДанныеВедомостей.Ведомость КАК Ведомость,
			|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеВедомостей.СчетУчета КАК СчетУчета,
			|	ДанныеВедомостей.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
			|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате
			|ПОМЕСТИТЬ ВТТаблицаВедомостей
			|ИЗ
			|	&ТаблицаВедомостей КАК ДанныеВедомостей
			|;
			|
			|ВЫБРАТЬ
			|	СУММА(ДанныеВедомостей.СуммаКВыплате) КАК СуммаКВыплате
			|ИЗ
			|   ВТТаблицаВедомостей КАК ДанныеВедомостей
			|ГДЕ ДанныеВедомостей.Ведомость = &ПлатежнаяВедомость
			|    И ДанныеВедомостей.СчетУчета = &СчетУчетаРасчетовПоЗП
			|    И ДанныеВедомостей.ГруппаУчетаНачислений = &ГруппаУчетаНачислений
			|    И ДанныеВедомостей.ФизическоеЛицо = &Контрагент
			|";
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если НЕ Результат.Следующий() ИЛИ Результат.СуммаКВыплате <> СуммаДокумента Тогда
				ШаблонСообщения = НСтр("ru='Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.';uk='Не збігається сума документа й сума по відомостях на виплату заробітної плати.'");
				ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоЗП");

		КонецЕсли;
		
	Иначе
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;		
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.Ведомость");
		МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты.СуммаКВыплате");
		МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовПоЗП");
		
	КонецЕсли;
	
//++ БУ ЗИК
//~    Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику Тогда
//~		
//~		МассивНепроверяемыхРеквизитов.Добавить("ДоговорЗаймаСотруднику");
//~		
//~	КонецЕсли;
//-- БУ ЗИК	
	
	// Проверка соответствия налогового назначения характеру затрат
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее тогда
		Если  ЕстьНалогНаПрибыльДо2015 Тогда                                               
			Если УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом,,Дата) = "Затраты" Тогда
				Если Не ЗначениеЗаполнено(НалоговоеНазначениеПриПрочемСписании) Тогда
					ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
					"Поле", "Заполнение", НСтр("ru='Налоговое назначение';uk='Податкове призначення'")); 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НалоговоеНазначениеПриПрочемСписании", "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru='Не совпадают сумма документа и ее расшифровка';uk='Не збігаються сума документа та її розшифровка'");
			ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомостей на выплату зарплаты
	
//++ БУ ЗИК
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
//~	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
//~		или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//-- БУ ЗИК
		
		Если ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru='Не совпадают сумма документа и общая сумма по платежным ведомостям';uk='Не збігаються сума документа і загальна сума за платіжними відомостями'");
			ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Построчная проверка заполнения отдельных реквизитов ТЧ РасшифровкаПлатежа
	
	ЕстьРасчетыСПоставщикамиПокупателями = ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
	
	ШаблонТекстаСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
		"Колонка", "Заполнение", "%1", "%2", НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'"));
	
	Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ДоговорКонтрагента) 
			И СтрокаПлатежа.СуммаПлатежа > 0
			И СтрокаПлатежа.СуммаВзаиморасчетов = 0 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru='Сумма расчетов';uk='Сума розрахунків'"), СтрокаПлатежа.НомерСтроки);
			Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СуммаВзаиморасчетов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если ЕстьРасчетыСПоставщикамиПокупателями
			И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения, НСтр("ru='Счет расчетов';uk='Рахунок розрахунків'"), СтрокаПлатежа.НомерСтроки);
			Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаРасчетовСКонтрагентом";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если  ЕстьРасчетыСПоставщикамиПокупателями И ЕстьНДС Тогда
			// проверим заполнение ТЧ для целей налогового учета (упрощенный налоговый учет)
			
			Если НЕ СтрокаПлатежа.ДоговорКонтрагента.СложныйНалоговыйУчет Тогда
				
				// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
				Если ЕстьНДС И СтрокаПлатежа.СчетУчетаНДС.Пустая() Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаСообщения, НСтр("ru='Счет учета НДС (неподтвержденный)';uk='Рахунок ПДВ (непідтверджений)'"), СтрокаПлатежа.НомерСтроки);
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаНДС";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
				Если ЕстьНДС И СтрокаПлатежа.СчетУчетаНДСПодтвержденный.Пустая() Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаСообщения, НСтр("ru='Счет учета НДС н/о (н/к)';uk='Рахунок обліку ПДВ п/з (п/к)'"), СтрокаПлатежа.НомерСтроки);
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СчетУчетаНДСПодтвержденный";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
				Если СтрокаПлатежа.НалоговоеНазначение.Пустая()  И ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаСообщения, НСтр("ru='Налоговое назначение';uk='Податкове призначення'"), СтрокаПлатежа.НомерСтроки);
					Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].НалоговоеНазначение";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если  ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю И ЕстьНалогНаПрибыльДо2015 Тогда
			
			Если   СтрокаПлатежа.ВозвратАвансаДо01042011НУ И НЕ ЗначениеЗаполнено(СтрокаПлатежа.СтатьяПоВозвратуАвансаДо2011НУ) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаСообщения, НСтр("ru='Статья по возврату аванса до 01.04.2011';uk='Стаття з повернення авансу до 01.04.2011'"), СтрокаПлатежа.НомерСтроки);
				Поле = "РасшифровкаПлатежа[" + Формат((СтрокаПлатежа.НомерСтроки-1), "ЧН=0; ЧГ=") + "].СтатьяПоВозвратуАвансаДо2011НУ";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа: ';uk='Проведення документа: '") + СокрЛП(Ссылка) + " (" + ВидОперации + ")";
	
	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ВестиУчетДенежныхСредствПоОбособленнымПодразделениям" , УчетнаяПолитика.УчетПоОбособленнымПодразделениям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	

	//Проверим на возможность проведения в БУ и НУ
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда

		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,НСтр("ru='Строка ';uk='Рядок '")+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;

	КонецЕсли;
        
	Если Не Отказ Тогда
				ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);

КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НомерОрдера) ИЛИ ЭтоНовый() Тогда
		СформироватьНомерОрдера();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	// для нового документа стоит очистить номер ордера
	НомерОрдера = "";
	ДокументОснование = Неопределено;

КонецПроцедуры

Процедура СформироватьНомерОрдера()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Нумератор", 	   Перечисления.Нумераторы.РасходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("Дата",           Дата);
	СтруктураПараметров.Вставить("Организация",    Организация);
	СтруктураПараметров.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделениеОрганизации);
	СтруктураПараметров.Вставить("Валюта", 		   ВалютаДокумента);
	
	УправлениеДенежнымиСредствами.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, НомерОрдера);
	УправлениеДенежнымиСредствами.ЗаписатьОчереднойНомер(СтруктураПараметров, НомерОрдера);
	
КонецПроцедуры

#КонецЕсли

