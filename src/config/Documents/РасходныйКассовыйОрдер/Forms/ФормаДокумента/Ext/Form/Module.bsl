#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	УстановитьДоступностьПоляВводаНомерОрдера();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		Элементы.ВыплатаЗаработнойПлатыГруппаУчетаНачислений.Видимость = Истина;
		Элементы.ГруппаУчетаНачислений.Видимость = Истина;
		Элементы.ВыплатаЗаработнойПлатыСчетУчета.Видимость = Ложь;
		Элементы.СчетУчетаРасчетовПоЗП.Видимость = Ложь;
	Иначе
		Элементы.ВыплатаЗаработнойПлатыГруппаУчетаНачислений.Видимость = Ложь;
		Элементы.ГруппаУчетаНачислений.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыСчетУчета.Видимость = Истина;
		Элементы.СчетУчетаРасчетовПоЗП.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
	УстановитьДоступностьПоляВводаНомерОрдера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка)	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(
		ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	СброситьУстановленныйНомерОрдера();
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

   	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;

	Если Год(Объект.Дата) <> Год(ТекущаяДатаДокумента) Тогда
		РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
	КонецЕсли;
	
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКассаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Возврат;
	КонецЕсли;
	
	СчетКассаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьПропорциональныйНДС(ЭтаФорма);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетУчетаРасчетовСКонтрагентом,, "");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
	
	ПоляОбъекта.Вставить("Организация"  , Объект.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчетаРасчетовСКонтрагентом, Объект, ПоляОбъекта);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", Новый Структура("РежимВыбора", Истина), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	ПараметрыОбъекта.Вставить("ВыдатьФизЛицо", ВыбранноеЗначение);
	НовыеПараметры   = НовыеПараметрыПриВыбореВыдать(ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Выдать, ПоДокументу");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуПриИзменении(Элемент)
	
	Платеж = СуммаВыплаченнойЗарплатыРаботнику(Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, Объект.СчетУчетаРасчетовПоЗП, Объект.ГруппаУчетаНачислений, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Если Платеж = Неопределено Тогда
		Объект.СуммаДокумента = 0;
	Иначе
		Объект.СуммаДокумента = Платеж.СуммаКВыплате;
		Объект.СчетУчетаРасчетовПоЗП = Платеж.СчетУчета;
		НовыеПараметрыПечати = Новый Структура;
		ЗаполнитьРеквизитыПечати("Ведомость", Объект, НовыеПараметрыПечати);
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "Выдать, Основание, ПоДокументу");
		Объект.Приложение=Объект.Основание;
//++ БУ ЗИК		
//~		Объект.ГруппаУчетаНачислений = Платеж.ГруппаУчетаНачислений;
//-- БУ ЗИК		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовПоЗППриИзменении(Элемент)
	
	Платеж = СуммаВыплаченнойЗарплатыРаботнику(Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, Объект.СчетУчетаРасчетовПоЗП, Объект.ГруппаУчетаНачислений, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Если Платеж = Неопределено Тогда
		Объект.СуммаДокумента = 0;
	Иначе
		Объект.СуммаДокумента = Платеж.СуммаКВыплате;
		Объект.СчетУчетаРасчетовПоЗП = Платеж.СчетУчета;
//++ БУ ЗИК		
//~		Объект.ГруппаУчетаНачислений = Платеж.ГруппаУчетаНачислений;
//-- БУ ЗИК		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУчетаНачисленийПриИзменении(Элемент)
	Платеж = СуммаВыплаченнойЗарплатыРаботнику(Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, Объект.СчетУчетаРасчетовПоЗП, Объект.ГруппаУчетаНачислений, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Если Платеж = Неопределено Тогда
		Объект.СуммаДокумента = 0;
	Иначе
		Объект.СуммаДокумента = Платеж.СуммаКВыплате;
		Объект.СчетУчетаРасчетовПоЗП = Платеж.СчетУчета;
		Объект.СчетУчетаРасчетовПоЗП = Платеж.ГруппаУчетаНачислений;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
//++ БУ ЗИК	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",   Объект.Организация);		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	КонецЕсли;
//-- БУ ЗИК		
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоДт%Индекс%");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоОбособленномуПодразделениюПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ИнициализироватьСвойстваПлатежаНаКлиенте();
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаПлатежа.ТекущиеДанные, СвойстваПлатежа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
		ПараметрыОбъекта.ЗаТару				= СтрокаПлатеж.ЗаТару;
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		СвойстваПлатежа.ЗаТару			= СтрокаПлатеж.ЗаТару;
		СвойстваПлатежа.Амортизируется 	= СтрокаПлатеж.Амортизируется;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьПропорциональныйНДС(ЭтаФорма);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указана дата.';uk='Не вказана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указана организация.';uk='Не зазначена організація.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан контрагент.';uk='Не зазначений контрагент.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан договор.';uk='Не вказаний договір.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю") Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не указан счет авансов.';uk='Не вказаний рахунок авансів.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Не указан счет расчетов.';uk='Не вказаний рахунок розрахунків.'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.РасходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаПриИзменении(Элемент)
	
	НовыеПараметрыПечати = Новый Структура;
	ЗаполнитьРеквизитыПечати("Сделка", Объект, НовыеПараметрыПечати);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "Выдать, Основание, ПоДокументу");
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьПропорциональныйНДС(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Валюта"     			 , СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПроверкаКурсовВалют(СтрокаПлатеж, ЭтаФорма);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаГрн = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаГрн / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаТаруПриИзменении(Элемент)
		
	РасшифровкаПлатежаЗаТаруПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаНалоговоеНазначениеПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	РассчитатьПропорциональныйНДС(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Платеж = СуммаВыплаченнойЗарплатыПоВедомости(
		СтрокаПлатеж.Ведомость, СтрокаПлатеж.СчетУчета, СтрокаПлатеж.ГруппаУчетаНачислений, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
		
	Если Платеж <> Неопределено Тогда 
		ЗаполнитьЗначениясвойств(СтрокаПлатеж, Платеж);
	КонецЕсли;	
	
	НовыеПараметрыПечати = Новый Структура;
	ЗаполнитьРеквизитыПечати("Ведомость", Объект, НовыеПараметрыПечати);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "Выдать, Основание, ПоДокументу");
	Объект.Приложение=Объект.Основание;

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Если ПроверитьДублиВедомостей(ТекущиеДанные) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
//++ БУ ЗИК
		ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
//~     Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
//~			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
//~		Иначе
//~			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПустаяСсылка");
//~		КонецЕсли;	
//-- БУ ЗИК		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыСчетУчетаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Платеж = СуммаВыплаченнойЗарплатыПоВедомости(
		СтрокаПлатеж.Ведомость, СтрокаПлатеж.СчетУчета, СтрокаПлатеж.ГруппаУчетаНачислений, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
		
	Если Платеж <> Неопределено Тогда 
		ЗаполнитьЗначениясвойств(СтрокаПлатеж, Платеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыГруппаУчетаНачисленийПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	Платеж = СуммаВыплаченнойЗарплатыПоВедомости(
		СтрокаПлатеж.Ведомость, СтрокаПлатеж.СчетУчета, СтрокаПлатеж.ГруппаУчетаНачислений, Объект.Ссылка, СтрокаПлатеж.НомерСтроки,
		УчетЗарплатыИКадровВоВнешнейПрограмме);
		
	Если Платеж <> Неопределено Тогда 
		ЗаполнитьЗначениясвойств(СтрокаПлатеж, Платеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
		Иначе
//++ БУ ЗИК
			ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
//~			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
//~				ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
//~			Иначе
//~				ТекущиеДанные.Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПустаяСсылка");
//~			КонецЕсли;
//-- БУ ЗИК	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ПроверитьДублиВедомостей(ТекущиеДанные) Тогда
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.Ведомость     = "";
				Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаКВыплате = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	// Заполнение реквизитов формы
	
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Объект.ПлатежнаяВедомость = Документы.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка();
		Иначе
			Объект.ПлатежнаяВедомость = Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	ЗаголовокСтатьяДДС						 = НСтр("ru='Статья движения ден. средств:';uk='Стаття руху гр. коштів:'");
	ЗаголовокНН  							 = НСтр("ru='Налоговое назначение:';uk='Податкове призначення:'");
	ЗаголовокСтатьяДекларацииПоЕдиномуНалогу = НСтр("ru='Ст. декл. по ед. налогу:';uk='Ст. декл. по єд. податку:'");
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетКасса).Валютный;
	
	УстановитьКурсДокумента();
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Заполнение свойств элементов формы
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	УстановитьПараметрыВыбораВалютыДокумента(ЭтаФорма);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	УстановитьОграничениеТипаКонтрагента(ЭтаФорма);
	
	// Управление внешним видом формы
	
	УстановитьВидимостьСтраницНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
    ПлательщикЕдиногоНалога = УчетнаяПолитика.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	ЕстьНалогНаПрибыльДо2015= УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, НачалоМесяца(Объект.Дата));
	ЕстьНДС			  		= УчетнаяПолитика.ПлательщикНДС(Объект.Организация, НачалоМесяца(Объект.Дата));
	
	ЕстьУчетПоОбособленнымПодразделениям = УчетнаяПолитика.УчетПоОбособленнымПодразделениям(Объект.Организация, НачалоМесяца(Объект.Дата));
	
	КоэффициентПропорциональногоНДС = НалоговыйУчет.ПолучитьКоэффициентПропорциональногоНДС(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее") Тогда
		УстановитьЗаголовкиИДоступностьСубконто(Форма, Объект.СчетУчетаРасчетовСКонтрагентом,, "");
	КонецЕсли;
	
	Элементы.Контрагент.Доступность =
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее");
	
	Элементы.ВалютаДокумента.Доступность = Форма.ОплатаВВалюте
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
//++ БУ ЗИК
//~		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком")
//-- БУ ЗИК		
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику");
	
	Элементы.ПоОбособленномуПодразделению.Видимость = Форма.ЕстьУчетПоОбособленнымПодразделениям;
	Элементы.ОбособленноеПодразделение.Видимость    = Форма.ЕстьУчетПоОбособленнымПодразделениям И Объект.ПоОбособленномуПодразделению;
	
	Элементы.ЗаголовокНалоговоеНазначение.Видимость 		= Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств");
	Элементы.НалоговоеНазначениеПриПрочемСписании.Видимость = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее") Тогда
		ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Объект.СчетУчетаРасчетовСКонтрагентом,,Объект.Дата);
		Элементы.НалоговоеНазначениеПриПрочемСписании.Видимость = Форма.ЕстьНалогНаПрибыльДо2015 И ХарактерЗатрат = "Затраты";
		Элементы.ЗаголовокНалоговоеНазначение.Видимость			= Форма.ЕстьНалогНаПрибыльДо2015 И ХарактерЗатрат = "Затраты";
	КонецЕсли;
	
	Элементы.ЗаголовокСтатьяДекларацииПоЕН.Видимость         = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств");
	Элементы.СтатьяДекларацииПоЕдиномуНалогуПрочие.Видимость = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств");
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРасшифровкаПлатежа(ВидОперации)
	
	ЕстьРасшифровка = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами"));
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ (НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор) Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, ВалютаДокумента, ЗаТару");
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		ПараметрыПлатежа.Вставить("ОплатаВВалюте",
			ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоговораСКонтрагентом(ВидОперации)
	
	ВидыДоговора = Новый Массив;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	КонецЕсли;
	
	Возврат ВидыДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Контрагент, ВалютаДокумента, СчетКасса");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ЗаТару",
		?(Форма.СвойстваПлатежа = Неопределено, Ложь,   ?(Форма.СвойстваПлатежа.ЗаТару = Неопределено, Ложь,   Форма.СвойстваПлатежа.ЗаТару)));
	ПараметрыОбъекта.Вставить("Амортизируется",
		?(Форма.СвойстваПлатежа = Неопределено, Ложь,   ?(Форма.СвойстваПлатежа.Амортизируется = Неопределено, Ложь,   Форма.СвойстваПлатежа.Амортизируется)));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ЕстьНалогНаПрибыльДо2015", Форма.ЕстьНалогНаПрибыльДо2015);
	ПараметрыОбъекта.Вставить("ЕстьНДС", 			Форма.ЕстьНДС);
	ПараметрыОбъекта.Вставить("КурсДокумента",      Форма.КурсДокумента);
	ПараметрыОбъекта.Вставить("КратностьДокумента", Форма.КратностьДокумента);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику") Тогда
		ПараметрыОбъекта.Вставить("ПлатежнаяВедомость", Объект.ПлатежнаяВедомость);
		ПараметрыОбъекта.Вставить("СчетУчетаРасчетовПоЗП", Объект.СчетУчетаРасчетовПоЗП);
		ПараметрыОбъекта.Вставить("Ссылка",             Объект.Ссылка);
		ПараметрыОбъекта.Вставить("ГруппаУчетаНачислений",             Объект.ГруппаУчетаНачислений);
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров.Вставить("Организация", Форма.Объект.Организация);
	СписокПараметров.Вставить("СчетУчета"  , Форма.Объект.СчетУчетаРасчетовСКонтрагентом);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПропорциональныйНДС(Форма, ПересчитыватьВсеСтроки = Ложь)
	
	Объект = Форма.Объект;
	Если ПересчитыватьВсеСтроки Тогда
		Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаРасшифровки,Форма.ЕстьНДС,Форма.КоэффициентПропорциональногоНДС);
		КонецЦикла;
	Иначе	
		СтрокаРасшифровки = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьПропорциональныйНДСТабЧасти(СтрокаРасшифровки,Форма.ЕстьНДС,Форма.КоэффициентПропорциональногоНДС);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж)
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатежа, ПараметрыДокумента)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, ПараметрыДокумента.Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Префикс = "", Постфикс = "", ЭтоТаблица = Ложь)
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
		Префикс + "СубконтоДт1" + Постфикс,
		Префикс + "СубконтоДт2" + Постфикс,
		Префикс + "СубконтоДт3" + Постфикс);
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
		"ЗаголовокСубконто1", "ЗаголовокСубконто2", "ЗаголовокСубконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей, ЭтоТаблица);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма)
	
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "СубконтоДт%Индекс%");
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "СубконтоДт%Индекс%", "СубконтоДт%Индекс%", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами")) Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику")
//++ БУ ЗИК
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")) Тогда
//~		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
//~		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаСотруднику")
//~		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком")) Тогда
//-- БУ ЗИК		
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа()
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьПропорциональныйНДС(ЭтаФорма, Истина);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтаФорма);
		ОбновитьИтоги(ЭтаФорма);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьВыплатуДепонентов(НевыплаченныеДепоненты)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ВыплатаДепонентов = Объект.ВыплатаДепонентов;
		Для Каждого СтрокаТаблицы из НевыплаченныеДепоненты Цикл
			НайденныеСтроки = ВыплатаДепонентов.НайтиСтроки(Новый Структура("Ведомость", СтрокаТаблицы.Ведомость));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
					НайденнаяСтрока.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате;
				КонецЦикла;
			Иначе
				 НоваяСтрока = ВыплатаДепонентов.Добавить();
				 НоваяСтрока.Ведомость = СтрокаТаблицы.Ведомость;
				 НоваяСтрока.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате;
			КонецЕсли;			
		КонецЦикла;
	Иначе
		Объект.ВыплатаДепонентов.Очистить();
		Объект.ВыплатаДепонентов.Загрузить(НевыплаченныеДепоненты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСПодотчетнымиЛицами);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаВзносНаличнымиВБанк);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочее);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
//++ БУ ЗИК
//~	МассивСтраниц.Добавить(Элементы.ГруппаЗаймы);
//-- БУ ЗИК	
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСПодотчетнымиЛицами;
//++ БУ ЗИК
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
//~	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
//~	      или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
//-- БУ ЗИК
		Элементы.ГруппаВыплатаЗарплатыСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыОперации;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплаты;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыОперации;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплаты;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВзносНаличнымиВБанк;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочее;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрочее;
//++ БУ ЗИК
//~	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику Тогда
//~		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаймы;
//-- БУ ЗИК		
		// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
	КонецЕсли;
	
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|Сделка,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ВедениеВзаиморасчетов,
		|ВалютаДокумента, СтавкаНДС, СложныйНалоговыйУчет,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,
		|НалоговоеНазначение,СтавкаНДС,Амортизируется,ЗаТару");
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		
		НовыйДоговор  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ВидыДоговоров = ВидыДоговораСКонтрагентом(ПараметрыПлатежа.ВидОперации);
		
		Отбор = Новый Структура;
		ОтборОплатаВВалюте = Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ОплатаВВалюте);
		Отбор.Вставить("ОплатаВВалюте", ОтборОплатаВВалюте);
		Если ПараметрыПлатежа.ОплатаВВалюте Тогда
			ОтборВалютаВзаиморасчетов = Новый Структура("ЗначениеОтбора", ПараметрыПлатежа.ВалютаДокумента);
			Отбор.Вставить("ВалютаВзаиморасчетов", ОтборВалютаВзаиморасчетов);
		КонецЕсли;
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			НовыйДоговор, ПараметрыПлатежа.Контрагент, ПараметрыПлатежа.Организация, ВидыДоговоров, Отбор);
		ПараметрыПлатежа.ДоговорКонтрагента = НовыйДоговор;
		
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента = ПараметрыПлатежа.ДоговорКонтрагента;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ВедениеВзаиморасчетов 					   = СвойстваДоговора.ВедениеВзаиморасчетов;
		СвойстваПлатежа.СложныйНалоговыйУчет                       = СвойстваДоговора.СложныйНалоговыйУчет;
		
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	Иначе
		Если ЗначениеЗаполнено(ПараметрыПлатежа.ВалютаДокумента) Тогда
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаДокумента;
		Иначе
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СвойстваПлатежа.КурсВзаиморасчетов      = 1;
		СвойстваПлатежа.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)

	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь)

	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			КонецЕсли;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетаУчетаРасчетовСКонтрагентом(Знач ПараметрыОбъекта)
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам,СчетУчетаНДС,СчетУчетаНДСПодтвержденный,НалоговоеНазначение,СтавкаНДС,Амортизируется");
	
	СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику тогда
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
		
		СчетаУчета.СчетУчетаНДС    				  = СтруктураСчетов.СчетУчетаНДСПриобретений;
		СчетаУчета.СчетУчетаНДСПодтвержденный     = СтруктураСчетов.СчетУчетаНДСПриобретенийПодтвержденный;
		СчетаУчета.НалоговоеНазначение 			  = СтруктураСчетов.НалоговоеНазначениеПриобретений;
		Если ПараметрыОбъекта.ЗаТару Тогда
			СчетаУчета.НалоговоеНазначение 		  = СтруктураСчетов.НалоговоеНазначениеПриобретенийПоТаре;
		КонецЕсли;
		СчетаУчета.СтавкаНДС		  			  = СтруктураСчетов.СтавкаНДСПриобретений;
		СчетаУчета.Амортизируется		  		  = СтруктураСчетов.Амортизируется;
		
	Иначе
		
		СчетаУчета.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
		СчетаУчета.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
		
		СчетаУчета.СчетУчетаНДС    				  = СтруктураСчетов.СчетУчетаНДСПродаж;
		СчетаУчета.СчетУчетаНДСПодтвержденный     = СтруктураСчетов.СчетУчетаНДСПродажПодтвержденный;
		СчетаУчета.НалоговоеНазначение 			  = СтруктураСчетов.НалоговоеНазначениеПродаж;
		Если ПараметрыОбъекта.ЗаТару Тогда
			СчетаУчета.НалоговоеНазначение 		  = СтруктураСчетов.НалоговоеНазначениеПродажПоТаре;
		КонецЕсли;
		СчетаУчета.СтавкаНДС		  			  = СтруктураСчетов.СтавкаНДСПродаж;
		
	КонецЕсли;
	Возврат СчетаУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма)
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаБанка(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетБанк.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораСчетаИнкассации(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств") Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Форма.МассивСчетовИнкассации));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	КонецЕсли;
	
	Элементы.СчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВалютыДокумента(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	Если НЕ Форма.ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ВалютаРегламентированногоУчета));
	КонецЕсли;
	
	Элементы.ВалютаДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура;
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте);
		НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		
	КонецЕсли;
	
	Если НЕ НовыеПараметры.Свойство("ДоговорКонтрагента")
		И ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме, ВедетсяУчетРасчетовПоЗарплатеСводно)
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент,
			"ЮридическоеФизическоеЛицо, ДокументУдостоверяющийЛичность, Наименование, НаименованиеПолное");
		НовыеПараметры.Вставить("ПоДокументу",
			?(СвойстваКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
				СвойстваКонтрагента.ДокументУдостоверяющийЛичность, ""));
		НовыеПараметры.Вставить("Выдать", ?(ПустаяСтрока(СвойстваКонтрагента.НаименованиеПолное),
			СвойстваКонтрагента.Наименование, СвойстваКонтрагента.НаименованиеПолное));
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//++ БУ ЗИК
//~		ИЛИ   ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком
//~		ИЛИ   ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику
//-- БУ ЗИК		
		ИЛИ   ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата, Ложь);
		
		Если ПараметрыОбъекта.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику") 
//++ БУ ЗИК
//~			ИЛИ ПараметрыОбъекта.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком")
//-- БУ ЗИК				
			ИЛИ ПараметрыОбъекта.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику") Тогда
			
			КодПоДРФО = ПараметрыОбъекта.Контрагент.КодПоДРФО;
			ВыдатьПредставление = "" + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление),ДанныеФизЛица.Представление, ПараметрыОбъекта.Контрагент.Наименование) + ?(КодПоДРФО="",""," ("+КодПоДРФО+")");
			
		Иначе
			
			ВыдатьПредставление = ДанныеФизЛица.Представление;
			
		КонецЕсли;
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
											ВыдатьПредставление, ДанныеФизЛица.ПредставлениеДокумента);
		
		Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			
			Платеж = СуммаВыплаченнойЗарплатыРаботнику(ПараметрыОбъекта.Ссылка, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ПлатежнаяВедомость, ПараметрыОбъекта.СчетУчетаРасчетовПоЗП, ПараметрыОбъекта.ГруппаУчетаНачислений, УчетЗарплатыИКадровВоВнешнейПрограмме); 
			Если Платеж = Неопределено Тогда
				НовыеПараметры.Вставить("СуммаДокумента", 0);
			Иначе
				НовыеПараметры.Вставить("СуммаДокумента", Платеж.СуммаКВыплате);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииСчетаКассы(Знач ПараметрыОбъекта)
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетКасса).Валютный;
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		НоваяВалюта = ПараметрыОбъекта.ВалютаРегламентированногоУчета;
		НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
				И ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
				УчетДенежныхСредствБП.УстановитьБанковскийСчет(
					НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
					ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ОплатаВВалюте);
		КонецЕсли;
		
		НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
			НоваяВалюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйСчетОрганизации,"ВалютаДенежныхСредств");
		КонецЕсли;
		
		НовыеПараметры.Вставить("ВалютаДокумента", НоваяВалюта);
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВалютыДокумента(Знач ПараметрыОбъекта)
	
	Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			И ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте);
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбъекта.ВалютаДокумента, ПараметрыОбъекта.Дата);
	НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаДокумента);
	НовыеПараметры.Вставить("КурсДокумента",      СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриВыбореВыдать(Знач ПараметрыОбъекта)
	
	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВыдатьФизЛицо, ПараметрыОбъекта.Дата, Ложь);
	
	Если ПараметрыОбъекта.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику") 
//++ БУ ЗИК
//~			ИЛИ ПараметрыОбъекта.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком")
//~			ИЛИ ПараметрыОбъекта.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаСотруднику")
//-- БУ ЗИК			
		ИЛИ ПараметрыОбъекта.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику") Тогда
		
		КодПоДРФО = ПараметрыОбъекта.ВыдатьФизЛицо.КодПоДРФО;
		ВыдатьПредставление = "" + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление),ДанныеФизЛица.Представление, ПараметрыОбъекта.ВыдатьФизЛицо.Наименование) + ?(КодПоДРФО="",""," ("+КодПоДРФО+")");
				
	Иначе
		
		ВыдатьПредставление = ДанныеФизЛица.Представление;
		
	КонецЕсли;
	НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
		ВыдатьПредставление, ДанныеФизЛица.ПредставлениеДокумента);
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыПоВедомости(Знач ПлатежнаяВедомость, Знач СчетУчета, Знач ГруппаУчетаНачислений, Знач Ссылка, Знач НомерСтроки, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
		
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостей(Ведомости, ,Ссылка);
		СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате");
		Если СуммаДокумента = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По документу %1 нет сумм к выплате!';uk='За документом %1 немає сум до виплати!'"), ПлатежнаяВедомость.Ссылка);
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Колонка", "Корректность", НСтр("ru='Ведомость';uk='Відомість'"), НомерСтроки, НСтр("ru='Выплата заработной платы';uk='Виплата заробітної плати'"), ТекстСообщения);
			ШаблонПоля = "ВыплатаЗаработнойПлаты[%1].Ведомость";
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		КонецЕсли;
		
		ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
		ТаблицаДокументовОплаты.Свернуть("Ведомость,СчетУчета","СуммаКВыплате");
		
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			Для Каждого СтрокаОплаты из ТаблицаДокументовОплаты Цикл
				Если СтрокаОплаты.СчетУчета = СчетУчета Тогда
					Продолжить;
				КонецЕсли;	
				ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
			КонецЦикла;	
		КонецЕсли;
		
		Если ТаблицаДокументовОплаты.Количество() = 1 Тогда
			Платеж = Новый Структура;
			Платеж.Вставить("СчетУчета",ТаблицаДокументовОплаты[0].СчетУчета);
			Платеж.Вставить("СуммаКВыплате",ТаблицаДокументовОплаты[0].СуммаКВыплате);
			Возврат Платеж;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

	Иначе
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости);
		
		ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
//++ БУ ЗИК
        ТаблицаДокументовОплаты.Свернуть("Ведомость,СчетУчета","СуммаКВыплате");
		Если ЗначениеЗаполнено(СчетУчета) Тогда
			Для Каждого СтрокаОплаты из ТаблицаДокументовОплаты Цикл
				Если СтрокаОплаты.СчетУчета = СчетУчета Тогда
					Продолжить;
				КонецЕсли;	
				ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
			КонецЦикла;	
		КонецЕсли;
//~		
//~     ТаблицаДокументовОплаты.Свернуть("Ведомость,ГруппаУчетаНачислений","СуммаКВыплате");
//~		Если ЗначениеЗаполнено(ГруппаУчетаНачислений) Тогда
//~			Счетчик = ТаблицаДокументовОплаты.Количество();
//~			Пока Счетчик > 0 Цикл
//~				СтрокаОплаты = ТаблицаДокументовОплаты[Счетчик-1];
//~				Счетчик = Счетчик - 1;
//~				Если СтрокаОплаты.ГруппаУчетаНачислений = ГруппаУчетаНачислений Тогда
//~					Продолжить;
//~				КонецЕсли;	
//~				ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
//~			КонецЦикла;	
//~		КонецЕсли;
//-- БУ ЗИК		
		
		ВедомостьОплачена = Ложь;
		Если ТаблицаДокументовОплаты.Количество() = 0 Тогда
			ВедомостьОплачена = Истина;
		КонецЕсли;
		
		Если ВедомостьОплачена Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ %1 полностью оплачен!';uk='Документ %1 повністю оплачений!'"), ПлатежнаяВедомость.Ссылка);
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Колонка", "Корректность", НСтр("ru='Ведомость';uk='Відомість'"), НомерСтроки, НСтр("ru='Выплата заработной платы';uk='Виплата заробітної плати'"), ТекстСообщения);
			ШаблонПоля = "ВыплатаЗаработнойПлаты[%1].Ведомость";
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
			Платеж = Новый Структура;
			Платеж.Вставить("СчетУчета",СчетУчета);
//++ БУ ЗИК
//~			Платеж.Вставить("ГруппаУчетаНачислений",ГруппаУчетаНачислений);
//-- БУ ЗИК			
			Платеж.Вставить("СуммаКВыплате",0);
			Возврат Платеж
		ИначеЕсли ТаблицаДокументовОплаты.Количество() = 1 Тогда
			Платеж = Новый Структура;
//++ БУ ЗИК
			Платеж.Вставить("СчетУчета",ТаблицаДокументовОплаты[0].СчетУчета);
//~			Платеж.Вставить("ГруппаУчетаНачислений",ТаблицаДокументовОплаты[0].ГруппаУчетаНачислений);
//-- БУ ЗИК			

			Платеж.Вставить("СуммаКВыплате",ТаблицаДокументовОплаты[0].СуммаКВыплате);
			Возврат Платеж;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, Знач СчетУчета, Знач ГруппаУчетаНачислений, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостей(Ведомости, ФизЛицо, Ссылка);
			СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате");
			Если СуммаДокумента = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По документу %1 нет сумм к выплате!';uk='За документом %1 немає сум до виплати!'"), ПлатежнаяВедомость.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			Иначе
				ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
				ТаблицаДокументовОплаты.Свернуть("Ведомость,СчетУчета","СуммаКВыплате");
				Если ТаблицаДокументовОплаты.Количество() = 1 Тогда
					Платеж = Новый Структура;
					Платеж.Вставить("СчетУчета",ТаблицаДокументовОплаты[0].СчетУчета);
					Платеж.Вставить("СуммаКВыплате",ТаблицаДокументовОплаты[0].СуммаКВыплате);
					Возврат Платеж;
				Иначе
					Возврат Неопределено;
                КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо);
			
			ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать();
//++ БУ ЗИК			
			ТаблицаДокументовОплаты.Свернуть("Ведомость,СчетУчета,ФизическоеЛицо","СуммаКВыплате");
			
			Если ЗначениеЗаполнено(СчетУчета) Тогда
				Для Каждого СтрокаОплаты из ТаблицаДокументовОплаты Цикл
					Если СтрокаОплаты.СчетУчета = СчетУчета Тогда
						Продолжить;
					КонецЕсли;	
					ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
				КонецЦикла;	
			КонецЕсли;
//~	        ТаблицаДокументовОплаты.Свернуть("Ведомость,СчетУчета,ГруппаУчетаНачислений,ФизическоеЛицо","СуммаКВыплате");
//~			Если ЗначениеЗаполнено(ГруппаУчетаНачислений) Тогда
//~				Счетчик = ТаблицаДокументовОплаты.Количество();
//~				Пока Счетчик > 0 Цикл
//~					СтрокаОплаты = ТаблицаДокументовОплаты[Счетчик-1];
//~					Счетчик = Счетчик - 1;
//~					Если СтрокаОплаты.ГруппаУчетаНачислений = ГруппаУчетаНачислений Тогда
//~						Продолжить;
//~					КонецЕсли;	
//~					ТаблицаДокументовОплаты.Удалить(СтрокаОплаты);
//~				КонецЦикла;	
//~			КонецЕсли;
//-- БУ ЗИК			
			Если ТаблицаДокументовОплаты.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru='В выбранной ведомости отсутствуют сведения о заработной плате сотрудника!';uk='В обраній відомості відсутні відомості про заробітну плату співробітника!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
				Возврат Неопределено;
			ИначеЕсли ТаблицаДокументовОплаты.Количество() = 1 Тогда
				Платеж = Новый Структура;
				Платеж.Вставить("СчетУчета",ТаблицаДокументовОплаты[0].СчетУчета);
				Платеж.Вставить("СуммаКВыплате",ТаблицаДокументовОплаты[0].СуммаКВыплате);
//++ БУ ЗИК
//~				Платеж.Вставить("ГруппаУчетаНачислений",ТаблицаДокументовОплаты[0].ГруппаУчетаНачислений);
//-- БУ ЗИК					
				Возврат Платеж;
			Иначе
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаНеВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостей(Ведомости, ФизЛицо, Ссылка, Истина);
			СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате");
			Если СуммаДокумента = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По документу %1 нет сумм к выплате!';uk='За документом %1 немає сум до виплати!'"), ПлатежнаяВедомость.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			КонецЕсли;
		Иначе
			
			МассивФизическихЛиц = Новый Массив;
			МассивФизическихЛиц.Добавить(ФизЛицо);
			
			НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
			Ссылка, Ссылка.Организация, Ссылка.Дата, МассивФизическихЛиц);
			
			Если НевыплаченныеДепоненты.Найти(ПлатежнаяВедомость,"Ведомость") = Неопределено Тогда
				СуммаДокумента = 0;
			Иначе
				СуммаДокумента = НевыплаченныеДепоненты[0].Сумма;
			КонецЕсли;
			
			Если СуммаДокумента = 0 Тогда
				ТекстСообщения = НСтр("ru='В выбранной ведомости отсутствуют сведения о депонированной заработной плате сотрудника!';uk='В обраній відомості відсутні відомості про депоновану заробітну плату співробітника!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Ведомость");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДСПоДоговору(Знач ДоговорКонтрагента)
	
	СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	
	Возврат СтавкаНДС;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств()
	
	// Счет кассы
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	
	СчетаИсключений = Новый Массив;
	
	СчетаКассы = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь, , СчетаИсключений);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет банка
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);
	
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет выплаты заработной платы
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОплатеТруда);
	
	СчетаВыплатыЗП = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаВыплатыЗП)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.ВыплатаЗаработнойПлатыСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	// Счет инкассации
	
	СчетаОтбора = Новый Массив;
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте);
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте);
		
	СчетаИсключений = Новый Массив;
	СчетаИнкассации = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь, , СчетаИсключений);
	// Счета инкассации сохраняются в реквизит формы
	МассивСчетовИнкассации = Новый ФиксированныйМассив(СчетаИнкассации);
	
	НовыйМассивПараметров = Новый Массив;
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   МассивСчетовИнкассации));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	КонецЕсли;
	
	Элементы.СчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсДокумента()
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		
		Если Объект.ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов Тогда
			
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьКурсДокумента();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	Если НовыеПараметры.Свойство("СчетОрганизации") Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации");
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа();
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		Объект.Выдать = ДокументОбъект.ОпределитьКассираОрганизации();
	КонецЕсли;	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	УстановитьВидимостьСтраницНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов,ВедениеВзаиморасчетов,СложныйНалоговыйУчет");
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ВедениеВзаиморасчетов 					    = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВедениеВзаиморасчетов;
			СтрокаПлатеж.СложныйНалоговыйУчет                       = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].СложныйНалоговыйУчет;

		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ВедениеВзаиморасчетов     					= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка();
			СтрокаПлатеж.СложныйНалоговыйУчет     					= Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДокументаПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма); // Текущие значения реквизитов объекта
	НовыеПараметры   = НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта); // Возможно, изменятся: банковский счет, курс, кратность
	
	// перезаполнить значения, даже если валюта осталась та же
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "КурсДокумента,   КратностьДокумента");
	ЗаполнитьЗначенияСвойств(Объект,   НовыеПараметры, "ВалютаДокумента, СчетОрганизации");
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа();
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	УстановитьОграничениеТипаКонтрагента(ЭтаФорма);
	Если Элементы.Контрагент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		Объект.Контрагент = Неопределено;
	Иначе
		Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	КонецЕсли;
	
	Объект.СчетОрганизации    = Неопределено;
//++ БУ ЗИК
	Объект.ПлатежнаяВедомость = Неопределено;
//~	Объект.ПлатежнаяВедомость = Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка();
//~ Элементы.ВедомостьЗарплатаРаботнику.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу");
//-- БУ ЗИК
	Объект.Основание = "";
	Объект.Приложение = "";
	Объект.СтавкаНДС = Неопределено;
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
		СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		
	ИначеЕсли (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ИнкассацияДенежныхСредств")) Тогда
		
		ИзменитьПараметрыВыбораСчетаИнкассации(ЭтаФорма);
		Объект.СчетУчетаРасчетовСКонтрагентом = ?(ОплатаВВалюте,
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте"),
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте"));
		
	ИначеЕсли (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее")) Тогда
		
		ИзменитьПараметрыВыбораСчетаИнкассации(ЭтаФорма);
		Объект.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		
	ИначеЕсли (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")) Тогда
		
		ИзменитьПараметрыВыбораСчетаБанка(ЭтаФорма);
		
		Если ОплатаВВалюте Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте");
		Иначе
			Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте");
		КонецЕсли;
		
		НовыйСчетОрганизации   = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			Объект.Организация, ВалютаРегламентированногоУчета, НЕ ОплатаВВалюте);
		Объект.СчетОрганизации = НовыйСчетОрганизации;
		
	ИначеЕсли (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
//++ БУ ЗИК
//~		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком")
//~		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаСотруднику")			
//-- БУ ЗИК	
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику"))
		И ОплатаВВалюте Тогда
		
		Объект.СчетКасса       = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаВНациональнойВалюте");
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		ОплатаВВалюте          = Ложь;
		
	КонецЕсли;
	
	НовыеПараметрыПечати = Новый Структура;	
	ЗаполнитьРеквизитыПечати("ВидОперации", Объект, НовыеПараметрыПечати);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметрыПечати, "Выдать, Основание, ПоДокументу");
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		Объект.Выдать = ДокументОбъект.ОпределитьКассираОрганизации();
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа();
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(
		ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме,
		ВедетсяУчетРасчетовПоЗарплатеСводно);
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Выдать, ПоДокументу");
	
	ПерезаполнитьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура СчетКассаПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтаФорма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		Если ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
			ПараметрыОбъекта.ВалютаДокумента = НовыеПараметры.ВалютаДокумента;
			ПараметрыОбъекта.ОплатаВВалюте   = НовыеПараметры.ОплатаВВалюте;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, НовыеПараметры, "ОплатаВВалюте");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
			"ВалютаДокумента, СчетОрганизации");
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк") Тогда
			ИзменитьПараметрыВыбораСчетаБанка(ЭтаФорма);
			Объект.СчетУчетаРасчетовСКонтрагентом = ?(НовыеПараметры.ОплатаВВалюте,
				ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте,
				ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте);
		КонецЕсли;
		
		ИзменитьПараметрыВыбораСчетаИнкассации(ЭтаФорма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтаФорма);
		УстановитьПараметрыВыбораВалютыДокумента(ЭтаФорма);
		
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа();
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублиВедомостей(ТекущиеДанные, ТабличнаяЧасть = "ВыплатаЗаработнойПлаты")
	
	ЕстьДублиВедомостей = Ложь;
	
//++ БУ ЗИК	
	СтрокаПоиска = Новый Структура("Ведомость, СчетУчета", ТекущиеДанные.Ведомость, ТекущиеДанные.СчетУчета);
//~	СтрокаПоиска = Новый Структура("Ведомость, ГруппаУчетаНачислений", ТекущиеДанные.Ведомость, ТекущиеДанные.ГруппаУчетаНачислений);
//-- БУ ЗИК	
	НайденныеСтроки = Объект[ТабличнаяЧасть].НайтиСтроки(СтрокаПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если Элементы[ТабличнаяЧасть].ТекущиеДанные.НомерСтроки <> НайденныеСтроки[0].НомерСтроки Тогда
				ЕстьДублиВедомостей = Истина;
			КонецЕсли;
		Иначе
			ЕстьДублиВедомостей = Истина;
		КонецЕсли;
		
		Если ЕстьДублиВедомостей  Тогда
			ТекстСообщения = НСтр("ru='Указанная ведомость уже выбрана в документе!';uk='Зазначена відомість вже обрана в документі!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДублиВедомостей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ИтогоСуммаПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Форма.ИтогоВсегоНДС     = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Форма.ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(Форма.ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаЗаТаруПриИзмененииНаСервере()
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока <> Неопределено Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	КонецЕсли;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику тогда
		
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПриобретений;
		Если СтрокаПлатеж.ЗаТару Тогда
			СтрокаПлатеж.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначениеПриобретенийПоТаре;
		КонецЕсли;
		
	Иначе		
		
		СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПродаж;
		Если СтрокаПлатеж.ЗаТару Тогда
			СтрокаПлатеж.НалоговоеНазначение 		= СчетаУчета.НалоговоеНазначениеПродажПоТаре;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоляВводаНомерОрдера()

	Элементы.НомерОрдера.Видимость = Истина;
	Элементы.НомерОрдера.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.НомерОрдера);
	Если Элементы.НомерОрдера.ТолькоПросмотр Тогда
		Элементы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера будет присвоен при записи объекта.';uk=""Номер ордеру буде привласнений при записі об'єкта.""");
	Иначе
		Элементы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера';uk='Номер ордеру'");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СброситьУстановленныйНомерОрдера()
	
	Если Объект.НомерОрдера <> "" Тогда
		Объект.НомерОрдера = "";
	КонецЕсли;
	УстановитьДоступностьПоляВводаНомерОрдера();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПечати(ЧтоИзменилось = Неопределено, Знач Объект, НовыеПараметры) Экспорт

	// если не передали название реквизита считаем, что это ВидОперации.
	// Как следствие будет проведено заполнение всех реквизитов по-умолчанию.
	Если ЧтоИзменилось = Неопределено Тогда
	
		ЧтоИзменилось = "ВидОперации";
	
	КонецЕсли; 
	
	Выдать      = Объект.Выдать;
	Основание   = Объект.Основание;
	ПоДокументу = Объект.ПоДокументу;
	
	Если  Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
	  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда 
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Контрагент" Тогда
			
			Выдать = ?(Объект.Контрагент.НаименованиеПолное="", Объект.Контрагент.Наименование, Объект.Контрагент.НаименованиеПолное);
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "Сделка" Тогда
			
			Основание = "";	
			
			РасшифровкаКопия = Объект.РасшифровкаПлатежа.Выгрузить();
			РасшифровкаКопия.Свернуть("ДоговорКонтрагента, Сделка","");
			РасшифровкаКопия.Сортировать("ДоговорКонтрагента, Сделка");
			
			ТекДоговор = Неопределено;
			
			Для Инд = 0 По РасшифровкаКопия.Количество() - 1 Цикл
				
				СтрокаРасшифровки = РасшифровкаКопия[Инд];
				
				Шапка = Новый Структура();
				Шапка.Вставить("ДоговорКонтрагента", 			СтрокаРасшифровки.ДоговорКонтрагента);
				Шапка.Вставить("ДоговорНаименованиеДляПечати", 	СтрокаРасшифровки.ДоговорКонтрагента.НаименованиеДляПечати);
				Шапка.Вставить("ДоговорДата",  					СтрокаРасшифровки.ДоговорКонтрагента.Дата);
				Шапка.Вставить("ДоговорНомер", 					СтрокаРасшифровки.ДоговорКонтрагента.Номер);
				Шапка.Вставить("Сделка", 						СтрокаРасшифровки.Сделка);	
				
				// Выводим дополнительно информацию о договоре и сделке
				Если НЕ ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента Тогда
				
					СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
				    ТекДоговор = СтрокаРасшифровки.ДоговорКонтрагента;
					
				Иначе	
					
					СписокДополнительныхПараметров = "";
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
					СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
				КонецЕсли;
				
				МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,"uk");
				
				Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
					Основание = Основание + СтруктураСтроки.НазваниеПараметра + " " + СтруктураСтроки.ЗначениеПараметра + ", ";
				КонецЦикла;	
				
				
			КонецЦикла;
			
			// обрежем последнюю запятую
			Если Прав(Основание, 2) = ", " Тогда
				Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "Контрагент" 
			ИЛИ ЧтоИзменилось = "ДоговорКонтрагента" 
			ИЛИ ЧтоИзменилось = "ВидОперации" Тогда
			ПоДокументу = ?(Объект.Контрагент.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, Объект.Контрагент.ДокументУдостоверяющийЛичность, "");
		КонецЕсли
		
		// Приложение
		// не заполняется ни в одном случае
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
//++ БУ ЗИК
//~		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику
//-- БУ ЗИК		  
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		ФизЛицо = Объект.Контрагент;
		
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "Ведомость"
			ИЛИ ЧтоИзменилось = "РасчетныйДокумент" Тогда
			
			Основание = "";	
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику 
				И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
				Основание = "Платіжна відомість ";
							
				Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.ПлатежнаяВедомость.Номер) + " від " + Формат(Объект.ПлатежнаяВедомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
			
			// обрежем последнюю запятую
				Если Прав(Основание, 2) = ", " Тогда
					Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
				КонецЕсли;
			КонецЕсли;
//++ БУ ЗИК
//~       Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаСотруднику Тогда
	//~				Основание = "";
//~			
//~		 КонецЕсли;
//-- БУ ЗИК	

		КонецЕсли;	
		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "СчетОрганизации" Тогда
			
			Выдать = "";	
			Если Не Объект.СчетОрганизации.Пустая() Тогда
			
				Выдать = "п/р " + Объект.СчетОрганизации.НомерСчета + " у " + Объект.СчетОрганизации.Банк;
			
			КонецЕсли; 
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации"  
			ИЛИ ЧтоИзменилось = "ОбъявлениеНаВзносНаличными" Тогда
			
			Основание = "";	
			
		КонецЕсли;		
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Выдать = "";	
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации" 
			ИЛИ ЧтоИзменилось = "Ведомость"  Тогда
			
			Основание = "";
			
			Если Объект.ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
				Основание = "Платіжна відомість ";
			ИначеЕсли Объект.ВыплатаЗаработнойПлаты.Количество() > 1 Тогда
				Основание = "Платіжні відомісті ";
			КонецЕсли;
			
			Для каждого СтрВедомости Из Объект.ВыплатаЗаработнойПлаты Цикл
				
				Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрВедомости.Ведомость.Номер) + " від " + Формат(СтрВедомости.Ведомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
				
			КонецЦикла;
			
			// обрежем последнюю запятую
			Если Прав(Основание, 2) = ", " Тогда
				Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
//++ БУ ЗИК	
	//~ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗарплатыРаздатчиком Тогда
	//~	// Выдать
	//~	
	//~	// Основание
	//~	Если    ЧтоИзменилось = "ВидОперации" 
	//~		ИЛИ ЧтоИзменилось = "Ведомость"  Тогда
	//~		
	//~		Основание = "";
	//~		
	//~		Если Объект.ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
	//~			Основание = "Відомість виплати через роздавальника ";
	//~		ИначеЕсли Объект.ВыплатаЗаработнойПлаты.Количество() > 1 Тогда
	//~			Основание = "Відомісті виплати через роздавальника ";
	//~		КонецЕсли;
	//~		
	//~		Для каждого СтрВедомости Из Объект.ВыплатаЗаработнойПлаты Цикл
	//~			
	//~			Основание = Основание + "№ "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрВедомости.Ведомость.Номер) + " від " + Формат(СтрВедомости.Ведомость.Дата, "ДФ=dd.MM.yyyy") + ", ";	
	//~			
	//~		КонецЦикла;
	//~		
	//~		// обрежем последнюю запятую
	//~		Если Прав(Основание, 2) = ", " Тогда
	//~			Основание = Сред(Основание, 1, СтрДлина(Основание) - 2);
	//~		КонецЕсли;
	//~		
	//~	КонецЕсли;
	//~	
	//~	// ПоДокументу
//-- БУ ЗИК			
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ИнкассацияДенежныхСредств Тогда
		
		// Выдать
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Выдать = "";	
			
		КонецЕсли;
		
		// Основание
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			Основание = "";	
			
		КонецЕсли;
		
		// ПоДокументу
		Если    ЧтоИзменилось = "ВидОперации" Тогда
			
			ПоДокументу = "";		
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("Выдать",      Выдать);
	НовыеПараметры.Вставить("Основание",   Основание);
	НовыеПараметры.Вставить("ПоДокументу", ПоДокументу);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВидНалоговойДекларации", Перечисления.ВидыНалоговыхДеклараций.ЕдиныйНалог));
	
	ЭтоВозврат = (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	
	Если ЭтоВозврат ИЛИ Не ЕстьНДС Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогПриход));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогРасход));		
	КонецЕсли;
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.РасшифровкаПлатежаСтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуЗарплата.ПараметрыВыбора = НовыеПараметрыВыбора;
	Элементы.СтатьяДекларацииПоЕдиномуНалогуПрочие.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти