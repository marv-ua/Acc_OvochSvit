#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Функция СоздатьДоначисленияВНУНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	   "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	   |	УчетнаяПолитикаОрганизацийЕН.Организация КАК Организация
	   |ПОМЕСТИТЬ ОрганизацииКОбработке
	   |ИЗ
	   |	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизацийЕН
	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизацийПрибыль
	   |		ПО УчетнаяПолитикаОрганизацийЕН.Организация = УчетнаяПолитикаОрганизацийПрибыль.Организация
	   |			И (УчетнаяПолитикаОрганизацийПрибыль.Период > УчетнаяПолитикаОрганизацийЕН.Период)
	   |			И (УчетнаяПолитикаОрганизацийПрибыль.ПлательщикНалогаНаПрибыль = ИСТИНА)
	   |ГДЕ
	   |	УчетнаяПолитикаОрганизацийЕН.ПлательщикЕдиногоНалога = ИСТИНА
	   |	И УчетнаяПолитикаОрганизацийЕН.ГруппаПлательщикаЕдиногоНалога = ЗНАЧЕНИЕ(Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппаОсобая)
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	   |	СтатусыПлательщиковЕдиногоНалога.Организация КАК Организация,
	   |	НАЧАЛОПЕРИОДА(СтатусыПлательщиковЕдиногоНалога.Период, МЕСЯЦ) КАК ПериодНачало,
	   |	ВЫБОР
	   |		КОГДА МИНИМУМ(ДОБАВИТЬКДАТЕ(СтатусыПлательщиковЕдиногоНалогаОкончание.Период, СЕКУНДА, -1)) < &МаксимальныйПериод
	   |			ТОГДА МИНИМУМ(ДОБАВИТЬКДАТЕ(СтатусыПлательщиковЕдиногоНалогаОкончание.Период, СЕКУНДА, -1))
	   |		ИНАЧЕ &МаксимальныйПериод
	   |	КОНЕЦ КАК ПериодКонец
	   |ИЗ
	   |	РегистрСведений.СтатусыПлательщиковЕдиногоНалога КАК СтатусыПлательщиковЕдиногоНалога
	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииКОбработке КАК ОрганизацииКОбработке
	   |		ПО СтатусыПлательщиковЕдиногоНалога.Организация = ОрганизацииКОбработке.Организация
	   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПлательщиковЕдиногоНалога КАК СтатусыПлательщиковЕдиногоНалогаОкончание
	   |		ПО (СтатусыПлательщиковЕдиногоНалогаОкончание.Организация = СтатусыПлательщиковЕдиногоНалога.Организация)
	   |			И (СтатусыПлательщиковЕдиногоНалогаОкончание.Период > СтатусыПлательщиковЕдиногоНалога.Период)
	   |			И (СтатусыПлательщиковЕдиногоНалогаОкончание.ГруппаПлательщикаЕдиногоНалога <> ЗНАЧЕНИЕ(Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппаОсобая))
	   |ГДЕ
	   |	СтатусыПлательщиковЕдиногоНалога.ГруппаПлательщикаЕдиногоНалога = ЗНАЧЕНИЕ(Перечисление.ГруппыПлательщиковЕдиногоНалога.ТретьяГруппаОсобая)
	   |	И СтатусыПлательщиковЕдиногоНалога.ПлательщикЕдиногоНалога = ИСТИНА
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	СтатусыПлательщиковЕдиногоНалога.Организация,
	   |	НАЧАЛОПЕРИОДА(СтатусыПлательщиковЕдиногоНалога.Период, МЕСЯЦ)
	   |
	   |УПОРЯДОЧИТЬ ПО
	   |	Организация,
	   |	ПериодНачало"; 
	МаксимальныйПериод = '20230731235959';
	Запрос.УстановитьПараметр("МаксимальныйПериод", МаксимальныйПериод);
	
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();    
	
	Если ТаблицаПериодов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПериодов.Организация КАК Организация,
		|	ТаблицаПериодов.ПериодНачало КАК ПериодНачало,
		|	ТаблицаПериодов.ПериодКонец КАК ПериодКонец
		|ПОМЕСТИТЬ ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодов.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) КАК ПериодДокумента,
		|	МАКСИМУМ(ЗакрытиеМесяца.АмортизацияОСНУ) КАК ЕстьАмортизацияОСНУ,
		|	МАКСИМУМ(ЗакрытиеМесяца.АмортизацияНМАНУ) КАК ЕстьАмортизацияНМАНУ
		|ИЗ
		|	ТаблицаПериодов КАК ТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|		ПО ТаблицаПериодов.Организация = ЗакрытиеМесяца.Организация
		|			И (ЗакрытиеМесяца.АмортизацияОСНУ
		|				ИЛИ ЗакрытиеМесяца.АмортизацияНМАНУ)
		|			И (ЗакрытиеМесяца.Дата > ТаблицаПериодов.ПериодНачало)
		|			И (ЗакрытиеМесяца.Дата <= ТаблицаПериодов.ПериодКонец)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Организация,
		|	НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ПериодДокумента"; 
	
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	ВыборкаСуществующиеДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Для каждого СтрокаПериодов Из ТаблицаПериодов Цикл
		ТекущийМесяц = СтрокаПериодов.ПериодНачало;
		ВыборкаСуществующиеДокументы.Сбросить();
		Пока ТекущийМесяц < СтрокаПериодов.ПериодКонец Цикл
			
			НуженДокументАмортизацияОСНУ = Истина;
			НуженДокументАмортизацияНМАНУ = Истина;
		
			СтруктураПоиска = Новый Структура("Организация, ПериодДокумента");
			СтруктураПоиска.Организация = СтрокаПериодов.Организация;
			СтруктураПоиска.ПериодДокумента = ТекущийМесяц;          
			Если ВыборкаСуществующиеДокументы.НайтиСледующий(СтруктураПоиска) Тогда
				НуженДокументАмортизацияОСНУ = НЕ ВыборкаСуществующиеДокументы.ЕстьАмортизацияОСНУ;
				НуженДокументАмортизацияНМАНУ = НЕ ВыборкаСуществующиеДокументы.ЕстьАмортизацияНМАНУ;
			КонецЕсли;
			
			Если НуженДокументАмортизацияОСНУ ИЛИ НуженДокументАмортизацияНМАНУ Тогда			

				НовыйДокумент = Документы.ЗакрытиеМесяца.СоздатьДокумент();
				НовыйДокумент.Организация = СтрокаПериодов.Организация;
				НовыйДокумент.Дата = КонецМесяца(ТекущийМесяц);
				НовыйДокумент.АмортизацияОСНУ = НуженДокументАмортизацияОСНУ; 
				НовыйДокумент.АмортизацияНМАНУ = НуженДокументАмортизацияНМАНУ; 				
				НовыйДокумент.Ответственный = Пользователи.ТекущийПользователь();
				
				ОписаниеНовогоДокумента = ?(НуженДокументАмортизацияОСНУ,"ОЗ","");
				ОписаниеНовогоДокумента = "Нарахування амортизації в ПО для " + ОписаниеНовогоДокумента + ?(НуженДокументАмортизацияНМАНУ,?(ЗначениеЗаполнено(ОписаниеНовогоДокумента)," та ","")+"НМА","");				НовыйДокумент.Комментарий = "#Сформовано автоматично: " + ОписаниеНовогоДокумента;
				
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			ТекущийМесяц = НачалоМесяца(ДобавитьМесяц(ТекущийМесяц, 1));
		КонецЦикла;
	КонецЦикла;
	
    Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КомандаГрупповоеСозданиеДоначислениеАмортизацииВНУ(Команда)
	
	ТекстВопроса = НСтр("ru='Будут сформированы непроведенные документы 
                         |""Закрытие месяца"" с доначислением амортизации в налоговом учете 
                         |для всех организаций за все периоды единого налога 2%. Продолжить?'
                         |;uk='Будуть сформовані непроведені документи
                         |""Закриття місяця"" з донарахуванням амортизації у податковому обліку 
                         |для всіх організацій за всі періоди єдиного податку 2%. Продовжити?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаГрупповоеСозданиеДоначислениеВНУЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГрупповоеСозданиеДоначислениеВНУЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Результат = СоздатьДоначисленияВНУНаСервере();
		Если Результат = Ложь Тогда 
			ТекстПредупреждения = НСтр("ru='Нет организаций, которые были плательщиками единого налога 2%, а затем стали плательщиками налога на прибыль. 
                                |Групповое создание доначислений амортизации в налоговом учете не требуется.'
                                |;uk='Немає організацій, які були платниками єдиного податку 2%, а згодом стали платниками податку на прибуток.
                                |Групове створення донарахувань амортизації у податковому обліку не потрібне.'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
		КонецЕсли;
		ЭтаФорма.Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Команда.Имя = "ПодменюПечатьОбычное_Реестр" Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
