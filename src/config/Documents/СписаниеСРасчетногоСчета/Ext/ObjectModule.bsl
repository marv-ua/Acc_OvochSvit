#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мВалютаРегламентированногоУчета;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами;
Перем ЕстьРасчетыПоКредитам;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=uk_UA; ДП=Ложь";
	ПарамПредмета = ВалютаДокумента.ПараметрыПрописиНаУкраинском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0") - 1) + "=";
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат = Формат(СуммаДок,"ЧДЦ=2; ЧРД=,; ЧГ=0");
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт
	
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП Тогда
		Возврат Новый Структура("ПлатежноеПоручение, ПлатежноеПоручениеДо2009, ПеречислениеЗП",
		НСтр("ru='Платежное поручение';uk='Платіжне доручення'"),НСтр("ru='Платежное поручение, старая версия ';uk='Платіжне доручення, стара версія'"),НСтр("ru='Ведомость перечисления зарплаты';uk='Відомість перерахування зарплати'"));
	Иначе
		Возврат Новый Структура("ПлатежноеПоручение, ПлатежноеПоручениеДо2009",НСтр("ru='Платежное поручение';uk='Платіжне доручення'"), НСтр("ru='Платежное поручение, старая версия ';uk='Платіжне доручення, стара версія'"));
	КонецЕсли
	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	// Бухгалтерские проводки документа
	Если СтруктураШапкиДокумента.НеПодтвержденоВыпискойБанка Тогда
		Возврат;
	Конецесли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	РасчетыВВалюте = Ложь;
	Если СчетОрганизации.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
	Иначе 
		КассаВВалюте = Ложь;
	КонецЕсли;
	
	ВидСчетаОрг = СчетОрганизации.ВидСчета;
	ВалютаСчета = СчетОрганизации.ВалютаДенежныхСредств;
	
	СчетКт		= СтруктураШапкиДокумента.СчетБанк;
	
	РасчетыВВалюте = Ложь;
	МоментДокумента = Новый МоментВремени(Дата, Ссылка);
	Если СчетБанк.Валютный Тогда
		РасчетыВВалюте = Истина;
		УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ВалютаДокумента, МоментДокумента, СтруктураШапкиДокумента.СчетБанк,СтруктураШапкиДокумента.СчетОрганизации, Заголовок);
	Иначе
		УправлениеДенежнымиСредствами.ПроверитьОстатокДенежныхСредств(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.Организация, , МоментДокумента, СтруктураШапкиДокумента.СчетБанк,СтруктураШапкиДокумента.СчетОрганизации, Заголовок);
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		
		//Дополнение структуры шапки документа (для использования глобальных процедур)
		СтруктураШапкиДокумента.Вставить("КоррСчет"			,СчетКт);
		
		//Вызов универсальной процедуры подготовки реестра платежей по данным документа. 		
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
		СодержаниеПроводки = "";
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
				СодержаниеПроводки = НСтр("ru='Расчеты с контрагентом';uk='Розрахунки з контрагентом'",Локализация.КодЯзыкаИнформационнойБазы());
				РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СчетОплаты"),"СчетАванса");
			КонецЕсли; 
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Истина,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей); 	  
		Иначе //расчеты по кредитам
			СодержаниеПроводки = НСтр("ru='Расчеты по кредитам и займам';uk='Розрахунки за кредитами і позиками'",Локализация.КодЯзыкаИнформационнойБазы());
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенег(ЭтотОбъект,СтруктураШапкиДокумента,Ложь,Отказ,Заголовок,СодержаниеПроводки,,РеестрПлатежей);
		КонецЕсли; 
		                
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		УчетЗарплаты.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, ПроводкиБУ, СчетКт, ВидОперации,  СчетОрганизации,,,,,, СтатьяДвиженияДенежныхСредств);
//++ БУ ЗИК
//~	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета Тогда
//~		
//~		УчетЗарплаты.ВыполнитьДвиженияПоЗарплате( Ссылка, Движения, ПроводкиБУ, СчетКт, ВидОперации,  СчетОрганизации, ФизЛицо,,,,, СтатьяДвиженияДенежныхСредств);
//-- БУ ЗИК		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
		ИЛИ   ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПокупкаПродажаВалюты Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			Проводка.Содержание  = НСтр("ru='Перечисление налогов';uk='Перерахування податків'",Локализация.КодЯзыкаИнформационнойБазы());
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда	
			Проводка.Содержание  = НСтр("ru='Прочее списание денежных средств';uk='Інше списання коштів'",Локализация.КодЯзыкаИнформационнойБазы());
		ИначеЕсли Проводка.СчетДт.Валютный Тогда
			Проводка.Содержание = НСтр("ru='Продажа валюты';uk='Продаж валюти'",Локализация.КодЯзыкаИнформационнойБазы());
		Иначе
			Проводка.Содержание = НСтр("ru='Покупка валюты';uk='Купівля валюти'",Локализация.КодЯзыкаИнформационнойБазы());
		КонецЕсли;		
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПокупкаПродажаВалюты Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
		Иначе	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
		КонецЕсли;	
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		Если УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетУчетаРасчетовСКонтрагентом,,Дата) = "Затраты" Тогда
			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеПриПрочемСписании;
				Если НЕ НалоговоеНазначениеПриПрочемСписании = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Для каждого ТекущаяСтрока Из ПеречислениеНалогов Цикл
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			
			Проводка.Организация = Организация;
			
			Проводка.Содержание  = НСтр("ru='Перечисление налога';uk='Перерахування податку'",Локализация.КодЯзыкаИнформационнойБазы());
			
//++ БУ ЗИК
			Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
//~			Проводка.СчетДт      = ТекущаяСтрока.СчетУчета;
//-- БУ ЗИК
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ТекущаяСтрока.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ТекущаяСтрока.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ТекущаяСтрока.СубконтоДт3);
			
			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекущаяСтрока.СтатьяДвиженияДенежныхСредств);
			
			// суммы в валюте быть не могут, это налоги
			Проводка.Сумма = ТекущаяСтрока.Сумма;
//++ БУ ЗИК			
			// только для расчета ЗП
			Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению 
				ИЛИ Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию
				ИЛИ Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюНаСлучайБезработицы
				ИЛИ Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованиюОтНесчастныхСлучаев
				Тогда
				
				мСтатьяНалоговойДекларации = "";
				Если ТекущаяСтрока.СубконтоДт1 <> Неопределено И ТекущаяСтрока.СубконтоДт1.Метаданные().Имя ="СтатьиНалоговыхДеклараций" Тогда
					мСтатьяНалоговойДекларации = ТекущаяСтрока.СубконтоДт1; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт2 <> Неопределено И ТекущаяСтрока.СубконтоДт2.Метаданные().Имя ="СтатьиНалоговыхДеклараций" Тогда
					мСтатьяНалоговойДекларации = ТекущаяСтрока.СубконтоДт2; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт3 <> Неопределено И ТекущаяСтрока.СубконтоДт3.Метаданные().Имя ="СтатьиНалоговыхДеклараций" Тогда
					мСтатьяНалоговойДекларации = ТекущаяСтрока.СубконтоДт3; 
				КонецЕсли;
				мНалог = "";
				Если ТекущаяСтрока.СубконтоДт1.Метаданные().Имя ="Налоги" Тогда
					мНалог = ТекущаяСтрока.СубконтоДт1; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт2.Метаданные().Имя ="Налоги" Тогда
					мНалог = ТекущаяСтрока.СубконтоДт2; 
				ИначеЕсли ТекущаяСтрока.СубконтоДт3.Метаданные().Имя ="Налоги" Тогда
					мНалог = ТекущаяСтрока.СубконтоДт3; 
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
					ДвиженияПоВзаиморасчетыПоВзносамВФонды(ТекущаяСтрока.Ведомость, мСтатьяНалоговойДекларации, мНалог)
				КонецЕсли;	
				
			КонецЕсли; 	
//-- БУ ЗИК			
			
		КонецЦикла; 
		
//++ БУ ЗИК		
		Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			ДвиженияПоВзаиморасчетыПоНДФЛ();
		КонецЕсли;
//-- БУ ЗИК		
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = НСтр("ru='Перевод средств на другой счет организации';uk='Переведення  коштів на інший рахунок організації'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.Дата);
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание = НСтр("ru='Перечисление денежных средств подотчетнику';uk='Перерахунок грошових коштів підзвітній особі'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Если КассаВВалюте Тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте;
		Иначе
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте;
		КонецЕсли;
		
		Проводка.СубконтоДт.РаботникиОрганизаций = СтруктураШапкиДокумента.ФизЛицо;
		
		Проводка.СчетКт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
		
		Если КассаВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			
			ВалютаРег       = мВалютаРегламентированногоУчета;
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
			
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			
		Иначе
			Проводка.Сумма  = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если   ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю 
		 И СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда

		Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			
			Если НЕ СтрокаРасшифровки.ВозвратАвансаДо01042011НУ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоПриобретение = (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ВХОДЯЩ") > 0) ИЛИ (Найти(ВРЕГ(СтруктураШапкиДокумента.ВидДокумента), "ПРИХОД") > 0);			
			
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период     = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			СуммаСторноДоходовЗатрат = - СтрокаРасшифровки.СуммаВДВРПоАвансуДо01042011;
				
			Если ЭтоПриобретение Тогда
				Проводка.СчетДт    = ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
				Проводка.СчетКт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУДт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно расходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно витрат при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
					
			Иначе	
				Проводка.СчетКт    = ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;
				Проводка.СчетДт    = ПланыСЧетов.Хозрасчетный.Вспомогательный;
				Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУКт = СуммаСторноДоходовЗатрат;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДоходов", СтрокаРасшифровки.СтатьяПоВозвратуАвансаДо2011НУ);
				Проводка.Содержание = НСтр("ru='(НУ) Сторно доходов при возврате аванса до 01.04.2011';uk='(ПО) Сторно доходів при поверненні авансу до 01.04.2011'",Локализация.КодЯзыкаИнформационнойБазы());
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	//Учет курсовых разниц
	Если (ВалютаДокумента <> мВалютаРегламентированногоУчета) тогда
		БухгалтерскийУчетРед12.ПереоценкаСчетовДокументаРегл(ЭтотОбъект,СтруктураШапкиДокумента, мВалютаРегламентированногоУчета,Отказ,Заголовок);
	КонецЕсли; // Учет курсовых разниц

	Если СтруктураШапкиДокумента.ЕстьЕдиныйНалог Тогда
		Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
			
			РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
			НалоговыйУчет.ДвиженияПоЕдиномуНалогуРасчеты(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			ТаблицаПеречислениеНалогов = ПеречислениеНалогов.Выгрузить();
			НалоговыйУчет.ДвиженияПоЕдиномуНалогуТаблица(ЭтотОбъект,СтруктураШапкиДокумента,ТаблицаПеречислениеНалогов,Отказ);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП 
//++ БУ ЗИК
//~			или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета
//-- БУ ЗИК			
			или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств 
			или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			НалоговыйУчет.ДвиженияПоЕдиномуНалогуПрочее(ЭтотОбъект,СтруктураШапкиДокумента,Отказ);	
			
		КонецЕсли;
	КонецЕсли;	
	
	Если (ЕстьРасчетыСКонтрагентами и не ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
	   и (СтруктураШапкиДокумента.ЕстьНДС) Тогда
		РеестрПлатежей = НалоговыйУчет.ПодготовитьТаблицуОплатДляНалоговогоУчета(СтруктураШапкиДокумента);
		НалоговыйУчет.ДвиженияПоРегистрамНалоговогоУчетаПлатежныхДокументов(ЭтотОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура	ДвиженияПоВзаиморасчетыПоНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ                                          
	|   ВЫБОР
	|   	КОГДА Основной.Сотрудник ССЫЛКА Справочник.Сотрудники
	|        ТОГДА Основной.Сотрудник.ФизическоеЛицо
	|		ИНАЧЕ Основной.Сотрудник
	|	КОНЕЦ КАК Контрагент,
	|	Основной.ДоходНДФЛ				КАК ДоходНДФЛ,
	|	Основной.ВидСтавки				КАК ВидСтавки,
	|	Основной.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов,
	|	Основной.Льгота					КАК Льгота,
	|	Основной.КоличествоЛьгот		КАК КоличествоЛьгот,
	|	Основной.НалоговыйПериод	КАК НалоговыйПериод,
	|	Основной.Налог		КАК Налог,
	|	Основной.Доход		КАК Доход
	|ИЗ	Документ.ВедомостьНаВыплатуЗарплаты.НДФЛ КАК Основной
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.ПеречислениеНалогов  КАК НалогиПлатежки
	|ПО НалогиПлатежки.Ссылка = &Ссылка
	|	И НалогиПлатежки.Ведомость = Основной.Ссылка
	|
	|ГДЕ	Основной.Налог <> 0
	|";
	
	КодОперацииВыплата = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВзаиморасчетыПоНДФЛ.Добавить();
		
		Движение.Период      	= Дата;
		Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;;
		
		Движение.Организация 		= Организация;
		Движение.Контрагент			= Выборка.Контрагент;
		Движение.ДоходНДФЛ 			= Выборка.ДоходНДФЛ;
		Движение.ПериодВзаиморасчетов 	= Выборка.ПериодВзаиморасчетов;
		Движение.НалоговыйПериод	= Выборка.НалоговыйПериод;
		
		Движение.Налог 			= Выборка.Налог;	
		Движение.Доход 			= Выборка.Доход;	
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоЗарплатеРегл()

Процедура	ДвиженияПоВзаиморасчетыПоВзносамВФонды(Ведомость, СтатьяНалоговойДекларации, Налог)
	
	// все проверки уже сделаны, осталось только провести
	НаименованиеДокумента = Ссылка.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("СтатьяНалоговойДекларации", СтатьяНалоговойДекларации);
	Запрос.УстановитьПараметр("Налог", Налог);
	
	Запрос.Текст =
	"ВЫБРАТЬ                                          
	|	Основной.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов,
	|	СУММА(Основной.База)			КАК База,
	|	СУММА(Основной.БазаВзноса)		КАК БазаВзноса,
	|	СУММА(Основной.Результат)		КАК Результат
	|ИЗ	Документ.ВедомостьНаВыплатуЗарплаты.Взносы КАК Основной
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + НаименованиеДокумента + ".ПеречислениеНалогов  КАК НалогиПлатежки
	|ПО НалогиПлатежки.Ссылка = &Ссылка
	|	И НалогиПлатежки.Ведомость = Основной.Ссылка
	|
	|ГДЕ	
	|	НалогиПлатежки.СубконтоДт1 = &Налог
	|	И НалогиПлатежки.СубконтоДт2 = &СтатьяНалоговойДекларации
	|	И	Основной.Ссылка = &Ведомость
	|	И	Основной.Налог =  &Налог
	|	И	Основной.СтатьяНалоговойДекларации =  &СтатьяНалоговойДекларации
	|	И	(Основной.База <> 0 ИЛИ	Основной.БазаВзноса <> 0 ИЛИ	Основной.Результат <> 0)
	|СГРУППИРОВАТЬ ПО                                          
	|	Основной.ПериодВзаиморасчетов
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ                                          
	|	Основной.ПериодВзаиморасчетов	КАК ПериодВзаиморасчетов,
	|	Сумма(Основной.База)			КАК База,
	|	Сумма(Основной.БазаВзноса)		КАК БазаВзноса,
	|	Сумма(Основной.Результат)		КАК Результат
	|ИЗ	Документ.ВедомостьНаВыплатуЗарплаты.ВзносыФОТ КАК Основной
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + НаименованиеДокумента + ".ПеречислениеНалогов  КАК НалогиПлатежки
	|ПО НалогиПлатежки.Ссылка = &Ссылка
	|	И НалогиПлатежки.Ведомость = Основной.Ссылка
	|
	|ГДЕ
	|	НалогиПлатежки.СубконтоДт1 = &Налог
	|	И НалогиПлатежки.СубконтоДт2 = &СтатьяНалоговойДекларации
	|	И Основной.Ссылка = &Ведомость
	|	И	Основной.Налог =  &Налог
	|	И	Основной.СтатьяНалоговойДекларации =  &СтатьяНалоговойДекларации
	|	И	(Основной.База <> 0 ИЛИ	Основной.БазаВзноса <> 0 ИЛИ	Основной.Результат <> 0)
	|СГРУППИРОВАТЬ ПО                                          
	|	Основной.ПериодВзаиморасчетов
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВзаиморасчетыПоВзносамВФонды.Добавить();
		
		Движение.Период      			= Дата;
		Движение.ВидДвижения 			= ВидДвиженияНакопления.Расход;
		
		Движение.Организация 				= Организация;
		Движение.СтатьяНалоговойДекларации	= СтатьяНалоговойДекларации;
		Движение.Налог						= Налог;
		Движение.ПериодВзаиморасчетов		= Выборка.ПериодВзаиморасчетов;
		
	
		Движение.Сумма 		= Выборка.Результат;	
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоЗарплатеРегл()


Процедура ЗаполнитьДокументПоВедомостьНаВыплатуЗарплаты(Основание) Экспорт
	
	ВидОперации        = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	Организация        = Основание.Организация;
	ДокументОснование  = Основание;
	
	Если  ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ЗарплатныйПроект = Основание.ЗарплатныйПроект;
		Если ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
			Контрагент = ЗарплатныйПроект.Банк;
		КонецЕсли;	
	КонецЕсли;	
		
			
	Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		СчетОрганизации = Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
			
							
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТекстЗапроса = "                    
	|ВЫБРАТЬ                          
	|	ВЫБОР
	|		КОГДА НЕ ПараметрыОплаты.Ссылка.ФорматОбмена30
	|			ТОГДА ПараметрыОплаты.СчетУчета
	|			ИНАЧЕ ГруппыУчетаНачисленийИУдержаний.СчетУчета
	|	КОНЕЦ		КАК СчетУчета,
	|	СУММА(ПараметрыОплаты.Сумма)	КАК Сумма
	|ИЗ	Документ.ВедомостьНаВыплатуЗарплаты.ПараметрыОплаты	КАК ПараметрыОплаты
	|                          
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплаты.РаботникиОрганизации КАК РаботникиОрганизации
	|ПО	ПараметрыОплаты.Ссылка = РаботникиОрганизации.Ссылка
	|И	ПараметрыОплаты.Сотрудник = РаботникиОрганизации.Сотрудник
	|И	ПараметрыОплаты.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыУчетаНачисленийИУдержаний КАК ГруппыУчетаНачисленийИУдержаний
	|       ПО ГруппыУчетаНачисленийИУдержаний.Ссылка = ПараметрыОплаты.ГруппаУчетаНачислений
	|
	|ГДЕ ПараметрыОплаты.Ссылка = &Ссылка
	|	И РаботникиОрганизации.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И РаботникиОрганизации.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
	|   И   (НЕ ПараметрыОплаты.Ссылка.ФорматОбмена30 ИЛИ ПараметрыОплаты.Ссылка.ВидМестаВыплаты = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект) ИЛИ ПараметрыОплаты.Ссылка.ВидМестаВыплаты = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ ПараметрыОплаты.Ссылка.ФорматОбмена30
	|			ТОГДА ПараметрыОплаты.СчетУчета
	|			ИНАЧЕ ГруппыУчетаНачисленийИУдержаний.СчетУчета
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыОплаты.СчетУчета 			КАК СчетУчета,
	|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатаПодробно КАК ПараметрыОплаты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
	|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОплаты.СчетУчета
	|
	|";
				
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость		= Основание;
		СтрокаВедомость.СчетУчета		= Выборка.СчетУчета;
		СтрокаВедомость.СуммаКВыплате	= Выборка.Сумма;
		
		СуммаДокумента = СуммаДокумента + Выборка.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоВедомостьНаВыплатуЗарплатыРасширенная(Основание) Экспорт
	
	ВидОперации        = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	Организация        = Основание.Организация;
	ДокументОснование  = Основание;
	
	Если  ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ЗарплатныйПроект = Основание.ЗарплатныйПроект;
		Если ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
			Контрагент = ЗарплатныйПроект.Банк;
		КонецЕсли;	
	КонецЕсли;	
		
			
	Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		СчетОрганизации = Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
			
							
	// Определим сумму выплаченной заработной платы
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Основание);
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПараметрыОплаты.ГруппаУчетаНачислений 			КАК ГруппаУчетаНачислений,
	|	СУММА(ПараметрыОплаты.КВыплате) 	КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ПараметрыОплаты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РанееВыплаченныеСуммы
	|		ПО		ПараметрыОплаты.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И	ПараметрыОплаты.ФизическоеЛицо = РанееВыплаченныеСуммы.ФизическоеЛицо
	|			И	ПараметрыОплаты.ГруппаУчетаНачислений = РанееВыплаченныеСуммы.ГруппаУчетаНачислений
	|			И	(РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка
	|	И	РанееВыплаченныеСуммы.ФизическоеЛицо ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОплаты.ГруппаУчетаНачислений
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		СтрокаВедомость = ВыплатаЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость			= Основание;
		СтрокаВедомость.ГруппаУчетаНачислений			= РезультатЗапроса.ГруппаУчетаНачислений;
		СтрокаВедомость.СуммаКВыплате		= РезультатЗапроса.Сумма;
		
		СуммаДокумента = СуммаДокумента + РезультатЗапроса.Сумма;
		
	КонецЦикла;
	
	
КонецПроцедуры



Процедура ЗаполнитьПоДокументуОснованию(Основание, СуммаКОплате = Неопределено, ДанныеПлПоручение = Неопределено)	
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	// Валюта документа должна соответствовать валюте банковского счета!
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "ВалютаДенежныхСредств");
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументОснование = Основание;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
	Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаПокупкуПродажуВалюты") 
//++ БУ ЗИК
		И НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
//-- БУ ЗИК		
		И НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
		И НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет")
		Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
	
	Если ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		или ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		или ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") 	
		или ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНМА")
		или ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		или ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		или ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  Тогда
			ВидОперации  = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации  = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		КонецЕсли; 
		
		ВидРасчетовПоДоговору = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,мВалютаРегламентированногоУчета);
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
		Иначе
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СуммаДокументаОснования = Новый ТаблицаЗначений();
			СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СуммаДокументаОснования.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			СуммаДокументаОснования.Колонки.Добавить("СуммаНДС",ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
			СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
			
			СтрокаТаблицыСумм.СтавкаНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДСВознаграждения");
			СтрокаТаблицыСумм.СуммаНДС	= Основание.Товары.Итог("СуммаНДСВознаграждения");

			СтрокаТаблицыСумм.СуммаПлатежа	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
		Иначе
			СуммаДокументаОснования = УчетНДС.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			СуммаДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") и ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") тогда
				СуммаКоррПлатежа= СуммаДокументаОснования.Итог("СуммаПлатежа") - ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
				НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррПлатежа,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа"));
				Если не НоваяКолонкаСумм = Неопределено Тогда
					СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаСумм,"СуммаПлатежа");
				КонецЕсли; 
				
				СуммаКоррНДС	= СуммаДокументаОснования.Итог("СуммаНДС") - Основание.Товары.Итог("СуммаНДСВознаграждения");
				НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКоррНДС,СуммаДокументаОснования.ВыгрузитьКолонку("СуммаНДС"));
				Если не НоваяКолонкаНДС = Неопределено Тогда
					СуммаДокументаОснования.ЗагрузитьКолонку(НоваяКолонкаНДС,"СуммаНДС");
				КонецЕсли; 
			ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") тогда
				
				ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Сумма, СуммаНДС, СтавкаНДС, СуммаВключаетНДС");
				
				Если (ДанныеОснования.Сумма <> 0) ИЛИ (ДанныеОснования.СуммаНДС <> 0) Тогда
					Если СуммаДокументаОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = СуммаДокументаОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС + ДанныеОснования.СуммаНДС;
					Если НЕ ДанныеОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				СуммаДокументаОснования.ЗаполнитьЗначения(ДанныеОснования.СтавкаНДС,"СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
		// Сумма платежа может не совпадать с итогом СуммаДокументаОснования.
		СуммаПоОснованиям = СуммаДокументаОснования.Итог("СуммаПлатежа");
		Если ЗначениеЗаполнено(СуммаКОплате) И СуммаКОплате <> СуммаПоОснованиям Тогда
			Если СуммаДокументаОснования.Количество() = 0 И ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
				// Это ввод на основании платежного поручения, сумма должна быть заполнена.
				СтрокаТаблицы = СуммаДокументаОснования.Добавить();
				СтрокаТаблицы.СтавкаНДС    = ДанныеПлПоручение.СтавкаНДС;
				СтрокаТаблицы.СуммаНДС     = Окр(СуммаКОплате * ДанныеПлПоручение.СуммаНДС / ДанныеПлПоручение.СуммаДокумента, 2, 1);
				СтрокаТаблицы.СуммаПлатежа = СуммаКОплате;
			ИначеЕсли СуммаДокументаОснования.Количество() = 1 Тогда
				Если ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
					СуммаДокументаОснования[0].СуммаНДС     = Окр(СуммаКОплате * ДанныеПлПоручение.СуммаНДС / ДанныеПлПоручение.СуммаДокумента, 2, 1);
					СуммаДокументаОснования[0].СуммаПлатежа = СуммаКОплате;
				Иначе
					СуммаДокументаОснования[0].СуммаНДС = Окр(СуммаКОплате * СуммаДокументаОснования[0].СуммаНДС / СуммаДокументаОснования[0].СуммаПлатежа, 2, 1);
					СуммаДокументаОснования[0].СуммаПлатежа = СуммаКОплате;
				КонецЕсли;
			Иначе
				МассивСуммОснований = СуммаДокументаОснования.ВыгрузитьКолонку("СуммаПлатежа");
				МассивСуммКОплате = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКОплате, МассивСуммОснований);
				Счетчик = 0;
				Для каждого СтрокаОснования Из СуммаДокументаОснования Цикл
					СтрокаОснования.СуммаНДС = Окр(МассивСуммКОплате[Счетчик] * СтрокаОснования.СуммаНДС / СтрокаОснования.СуммаПлатежа, 2, 1);
					СтрокаОснования.СуммаПлатежа = МассивСуммКОплате[Счетчик];
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаДокументаОснования.Количество() > 0 И ТаблицаПлатежей.Количество() > 0 Тогда
			ТаблицаПлатежей.Очистить();
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,"КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность,"КратностьВзаиморасчетов");
		
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Если ДанныеДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СделкаВОсновании = Неопределено;
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				СделкаВОсновании = Основание.СделкаПоПриобретению;
			ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", Основание.Метаданные()) Тогда
				СделкаВОсновании = Основание.Сделка;
			КонецЕсли; 
			ТаблицаПлатежей.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(Основание,СделкаВОсновании),"Сделка");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"),"СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
		КонецЦикла; 
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовЗаПосредническиеУслуги"), "СчетУчетаРасчетовСКонтрагентом"); 
			ТаблицаПлатежей.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамВыданным"), "СчетУчетаРасчетовПоАвансам") ;
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамВыданным"), "СчетУчетаРасчетовПоАвансам") ;
		ИначеЕсли НЕ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом") ;
			ТаблицаПлатежей.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансам"), "СчетУчетаРасчетовПоАвансам") ;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику тогда
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетРасчетов, "СчетУчетаРасчетовСКонтрагентом") ;
				ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетАвансов, "СчетУчетаРасчетовПоАвансам") ;
			КонецЕсли;
			
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретений, 				 "СчетУчетаНДС");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный, "СчетУчетаНДСПодтвержденный");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПриобретений, 		 "НалоговоеНазначение");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.Амортизируется, 		 				 "Амортизируется");
			
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродаж, 				"СчетУчетаНДС");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.СчетУчетаНДСПродажПодтвержденный,  "СчетУчетаНДСПодтвержденный");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетаУчета.НалоговоеНазначениеПродаж, 		"НалоговоеНазначение");
			
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж = РасшифровкаПлатежа[0];
		
//++ БУ ЗИК
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")
		  или ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
		Тогда
		
		ЗаполнитьДокументПоВедомостьНаВыплатуЗарплаты(Основание);
		
//~	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
//~		Тогда
//~		
//~		ЗаполнитьДокументПоВедомостьНаВыплатуЗарплатыРасширенная(Основание);
//-- БУ ЗИК
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ЗаявкаНаПокупкуПродажуВалюты")	Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПокупкаПродажаВалюты;
				
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПокупкаВалюты Тогда
			ВалютаДокумента=мВалютаРегламентированногоУчета;
			
			СчетОрганизации = Основание.СчетГривневый;
			Контрагент = Основание.Банк;
			СчетКонтрагента = Основание.СчетБанка;
			СрезНалогов = РегистрыСведений.ШкалаСтавокНалогов.ПолучитьПоследнее(Основание.Дата, Новый Структура("Налог",Справочники.Налоги.ПенсионныйВалюта));
			СуммаДокумента = Основание.СуммаГривневая + Окр(Основание.СуммаГривневая*Основание.Комиссионные/100,2,1) + Окр(Основание.СуммаГривневая*СрезНалогов.Ставка,2,1);
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВНациональнойВалюте;
			
		ИначеЕсли Основание.ВидОперации = Перечисления.ВидыОперацийПокупкаПродажаВалюты.ПродажаВалюты Тогда
			ВалютаДокумента = Основание.Валюта;
						
			СчетОрганизации = Основание.СчетВалютный;
			Контрагент = Основание.Банк;
			СчетКонтрагента = Основание.СчетБанка;
			СуммаДокумента = Основание.СуммаВалютная;
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиВИностраннойВалюте;
	
		КонецЕсли;	
	
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Номер, НомерПоручения, СчетКонтрагента, 
			|НазначениеПлатежа, ПереводНаДругойСчет, ДокументОснование, СуммаДокумента, ДоговорКонтрагента,
			|ПоказательОснования, СтатусСоставителя, СтавкаНДС, СуммаНДС");
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
		ДатаВходящегоДокумента  = ДанныеОснования.Дата;
		НомерВходящегоДокумента = ДанныеОснования.НомерПоручения;
		Если Не ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
			НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеОснования.Номер, Истина, Истина);
		КонецЕсли;
		СчетКонтрагента = ДанныеОснования.СчетКонтрагента;
		
		НазначениеПлатежа = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
		
		Если ЗначениеЗаполнено(ДанныеОснования.ДокументОснование) Тогда
			Если ЗначениеЗаполнено(СуммаКОплате) Тогда
				ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, СуммаКОплате, ДанныеОснования);
			Иначе
				ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, ДанныеОснования.СуммаДокумента, ДанныеОснования);
			КонецЕсли;
			
			ДокументОснование = Основание;
			Возврат;
		КонецЕсли;
		
		Если ДанныеОснования.ПереводНаДругойСчет Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.ДоговорКонтрагента, "ВидДоговора")
				= Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.ДоговорКонтрагента, "ВидДоговора")
				= Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		
		
		ВалютаДокумента = ВалютаРегламентированногоУчета;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Если ДанныеДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
				ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		СуммаДокумента = ДанныеОснования.СуммаДокумента;
		
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
		СтрокаПлатеж.СтавкаНДС = ДанныеОснования.СтавкаНДС;
		СтрокаПлатеж.СуммаНДС = ДанныеОснования.СуммаНДС;
		
		СписокВидовДоговора = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
		
		СтрокаПлатеж.ДоговорКонтрагента      = ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		?(ЗначениеЗаполнено(ДанныеДоговора.ВалютаВзаиморасчетов), ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаДокумента), Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, ДанныеДоговора.ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
				
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				
				СтрокаПлатеж.СчетУчетаНДС    				= СчетаУчета.СчетУчетаНДСПриобретений;
				СтрокаПлатеж.СчетУчетаНДСПодтвержденный  	= СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный;
				СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПриобретений;
				Если Не ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
					СтрокаПлатеж.СтавкаНДС		  			= СчетаУчета.СтавкаНДСПриобретений;
				КонецЕсли; 
				СтрокаПлатеж.Амортизируется		  			= СчетаУчета.Амортизируется;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
				
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				
				СтрокаПлатеж.СчетУчетаНДС    				= СчетаУчета.СчетУчетаНДСПродаж;
				СтрокаПлатеж.СчетУчетаНДСПодтвержденный   	= СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
				СтрокаПлатеж.НалоговоеНазначение 			= СчетаУчета.НалоговоеНазначениеПродаж;
				Если Не ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
					СтрокаПлатеж.СтавкаНДС		  			= СчетаУчета.СтавкаНДСПродаж;
				КонецЕсли;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
				
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
				Если НЕ ЗначениеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
					СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте;
				Иначе
					СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику;
		ФизЛицо = Основание.ФизЛицо;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		НоваяСтрока.КурсВзаиморасчетов           = СтруктураКурсаДокумента.Курс;
		НоваяСтрока.КратностьВзаиморасчетов      = СтруктураКурсаДокумента.Кратность;
				
		Запрос = Новый Запрос;
		
		Если НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
	 		Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте);
		Иначе
			Запрос.УстановитьПараметр("СчетРасчетов", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВНациональнойВалюте);
		КонецЕсли;
	
		Запрос.УстановитьПараметр("Сотрудник",  Основание.ФизЛицо);
		Запрос.УстановитьПараметр("Организация",Основание.Организация);
		Запрос.УстановитьПараметр("ДатаИтогов", Основание.Дата +1);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки."+?(ВалютаДокумента = мВалютаРегламентированногоУчета,"","Валютная")+"СуммаОстатокКт КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В ИЕРАРХИИ (&СчетРасчетов), ,
		|	                                        Организация = &Организация И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки";
        	
		ПредыдущийАванс = Запрос.Выполнить().Выбрать();
		ПредыдущийАванс.Следующий();
		
		Остаток    = ?(ЗначениеЗаполнено(ПредыдущийАванс.СуммаОстаток), ПредыдущийАванс.СуммаОстаток, 0);
		
		СуммаДокумента  = Остаток;
		
		НоваяСтрока.СуммаПлатежа = СуммаДокумента;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ВалютаДокумента             = мВалютаРегламентированногоУчета;
	//определяем счет банка по валюте
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ТипДанныхЗаполнения = Тип("Массив") Тогда
//++ БУ ЗИК
		Если ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения[0]);
			ВводНаОсновании = Истина;
		КонецЕсли;
//-- БУ ЗИК		
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
//++ БУ ЗИК		
//~	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ПлатежиПоНалогам") Тогда
//~		ПлатежиПоНалогам = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.ПлатежиПоНалогам);
//~		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПлатежиПоНалогам);
//~		Для Каждого СтрокаПлатежа Из ПлатежиПоНалогам.ТаблицаРасшифровкаПлатежа Цикл
//~			НоваяСтрока = ПеречислениеНалогов.Добавить();
//~			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлатежа);
//~			НоваяСтрока.СубконтоДт1 = СтрокаПлатежа.Субконто1;
//~			НоваяСтрока.СубконтоДт2 = СтрокаПлатежа.Субконто2;
//~			НоваяСтрока.СубконтоДт3 = СтрокаПлатежа.Субконто3;
//~		КонецЦикла;			
//-- БУ ЗИК		
	КонецЕсли;	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	СписокВидовСРасшифровкойПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьСписокВидовОперацийСРасшифровкойПлатежа();
	
	Если СписокВидовСРасшифровкойПлатежа.НайтиПоЗначению(ВидОперации) = Неопределено Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) или ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СчетБанк = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте;
	Иначе
		СчетБанк = ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога 
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
//++ БУ ЗИК
//~		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета
//-- БУ ЗИК		
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПокупкаПродажаВалюты
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ВидОперации);
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
//++ БУ ЗИК
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
//~	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику
//~		и ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета Тогда	
//-- БУ ЗИК
		
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");
		
	КонецЕсли;
	
//++ БУ ЗИК
//~	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета Тогда	
//~		
//~		МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
//~		
//~	КонецЕсли;	
//-- БУ ЗИК	
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сделка"); // Проверяем построчно
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
 		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначениеПриПрочемСписании");
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов, связанных с перечислением заработной платы
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем
	
//++ БУ ЗИК
	Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
//~	Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
//~		или	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета)
//-- БУ ЗИК
			И НЕ РучнаяКорректировка Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;

	
	// Проверка соответствия суммы документа расшифровке платежа
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru='Не совпадают сумма документа и ее расшифровка';uk='Не збігаються сума документа та її розшифровка'");
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
//++ БУ ЗИК
//~	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
//~		
//~		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетовСКонтрагентом");
//~		Если РучнаяКорректировка Тогда
//~			МассивНепроверяемыхРеквизитов.Добавить("ПеречислениеНалогов.СчетУчета");
//~		КонецЕсли
//~		
//~	КонецЕсли;
//-- БУ ЗИК

	// Проверка соответствия суммы документа и ведомостей на выплату зарплаты
	
//++ БУ ЗИК
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
//~	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
//~	 или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыплатаЗарплатыНаЛицевыеСчета Тогда
//-- БУ ЗИК
		Если ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru='Не совпадают сумма документа и общая сумма по платежным ведомостям';uk='Не збігаються сума документа і загальна сума за платіжними відомостями'");
			ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Если ПеречислениеНалогов.Итог("Сумма") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru='Не совпадают сумма документа и общая сумма по платежным ведомостям';uk='Не збігаються сума документа і загальна сума за платіжними відомостями'");
			ТекстСообщения  = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
				"Поле", "Корректность", НСтр("ru='Сумма документа';uk='Сума документа'"),,, ШаблонСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru='Проведение документа ""';uk='Проведення документа ""'") + СокрЛП(Ссылка) + """: ";
	
	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ВидОперации);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыльДо2015", УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС", УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ЕстьЕдиныйНалог", УчетнаяПолитика.ПлательщикЕдиногоНалога(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.Дата));
	
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам тогда 
		
		//Проверим на возможность проведения в БУ и НУ
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента,СтрокаОплаты.ДоговорКонтрагента,
			Отказ, Заголовок,НСтр("ru='Строка ';uk='Рядок '")+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
		
	КонецЕсли;
	
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Движения.Хозрасчетный.ВыполнитьДействияПередЗаписьюДвижений();
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НеПодтвержденоВыпискойБанка И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи    = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		ТекстСообщения =
			НСтр("ru='Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"". Документ записан без движений';uk='Проведення документа можливе тільки після встановлення прапора ""Підтверджено випискою банку"". Документ записаний без рухів'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НеПодтвержденоВыпискойБанка", "Объект", Ложь);
	КонецЕсли;
	
	ПлатежноеПоручениеОснование = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(Ссылка, ДокументОснование);
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		ТекущийПризнакОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежноеПоручениеОснование, "Оплачено");
		НужныйПризнакОплаты  = РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если ТекущийПризнакОплаты <> НужныйПризнакОплаты Тогда
			ОснованиеОбъект = ПлатежноеПоручениеОснование.ПолучитьОбъект();
			Попытка
				ОснованиеОбъект.Заблокировать();
				ОснованиеОбъект.Оплачено = НужныйПризнакОплаты;
				ОснованиеОбъект.Записать();
				ОснованиеОбъект.Разблокировать()
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось изменить отметку об оплате для документа: %1.
|Возможно, документ в настоящий момент редактируется.';uk='Не вдалося змінити позначку про оплату для документа: %1.
|Можливо, документ зараз редагується.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПлатежноеПоручениеОснование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НеПодтвержденоВыпискойБанка", "Объект", Ложь);
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации)
		И РасшифровкаПлатежа.Количество() > 0 Тогда
		ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                    = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный           = Пользователи.ТекущийПользователь();
	ДокументОснование       = Неопределено;
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = '00010101';

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
#КонецЕсли
