#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	И ЭтаФорма.Параметры.Ключ.Пустая()
	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	Элементы.ВсегоМетодКорректировкиНДС1.Заголовок = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства");
	Элементы.ВсегоМетодКорректировкиНДС2.Заголовок = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит");
	
	МетодыКорректировки_ВосстановлениеПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	МетодыКорректировки_ВосстановлениеПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит);
	МетодыКорректировки_ВосстановлениеПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать);
	
	МетодыКорректировки_ПотеряПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства);
	МетодыКорректировки_ПотеряПраваНаНК.Добавить(Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры // ПриСозданииНаСервере

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПослеЗаписиНаСервере

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ИзменениеНалоговогоНазначенияЗапасов.Форма.ФормаПодбораОстатков" Тогда
		ЗаполнитьПоОстаткамНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
	ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если  Объект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
		И СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		
		ТекстСообщения = НСтр("ru='Нельзя изменять налоговое назначение запасов в неавтоматизированной торговой точке 
|если применяется оценка товаров в рознице ""по продажным ценам!""';uk='Не можна змінювати податкове призначення запасів у неавтоматизованій торговельній точці 
|якщо застосовується оцінка товарів у роздробі ""за продажними цінами!""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Склад");
		Склад = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗатратПриИзменении(Элемент)
	
	НастроитьСубконтоПриИзмененииСчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыСубконтоПриИзменении(Элемент)
	УстановитьПараметрыВыбораСубконто(ЭтотОбъект)
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= ПолучитьДанныеСтрокиТаблицы(ТекущиеДанные);
	ДанныеОбъекта	= ПолучитьДанныеОбъекта(ЭтаФорма);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеОбъекта(Форма)
	
	ДанныеОбъекта	= Новый Структура(
	"Дата, Организация, Склад, 
	|СчетУчетаЗатрат, 
	|ВалютаРегламентированногоУчета, ЕстьНалогНаПрибыльДо2015, СпособОценкиТоваровВРознице");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Форма.Объект);
	ДанныеОбъекта.ВалютаРегламентированногоУчета = Форма.ВалютаРегламентированногоУчета;
	ДанныеОбъекта.ЕстьНалогНаПрибыльДо2015		 = Форма.ЕстьНалогНаПрибыльДо2015;
	ДанныеОбъекта.СпособОценкиТоваровВРознице    = Форма.СпособОценкиТоваровВРознице;
	
	Возврат ДанныеОбъекта;
	
КонецФункции // ПолучитьДанныеОбъекта()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеСтрокиТаблицы(СтрокаТаблицы)
	
	ДанныеСтрокиТаблицы	= Новый Структура(
	"Номенклатура, ЕдиницаИзмерения, Коэффициент,
	|Количество, Цена, Сумма, СтавкаНДС, СуммаНДС,  
	|СчетУчетаБУ, ДокументОприходования, 
	|НалоговоеНазначение, НалоговоеНазначениеНовое, МетодКорректировкиНалоговогоКредита, СуммаНУ,
	|ВидКорректировкиНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	Возврат ДанныеСтрокиТаблицы;
	
КонецФункции // ПолучитьДанныеСтрокиТаблицы()

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
	СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СчетУчетаБУ            = СведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
	СтрокаТабличнойЧасти.НалоговоеНазначение    = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти);
	//СтрокаТабличнойЧасти.СуммаНУ = СтрокаТабличнойЧасти.Сумма;
	
КонецПроцедуры // ТоварыНоменклатураПриИзмененииНаСервере

&НаСервереБезКонтекста
Процедура РассчитатьСуммуНДСВСтроке(СтрокаТЧ)
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
		СтрокаТЧ.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
	КонецЕсли;
	
	Если УчетНДС.ЕстьПравоНаНалоговыйКредит(СтрокаТЧ.НалоговоеНазначение) Тогда
		//сумма не включет НДС
		СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма * УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) / 100;	
	Иначе
		//сумма включет НДС
		СтрокаТЧ.СуммаНДС = СтрокаТЧ.Сумма * УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) /(УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС) + 100);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДСВСтрокеКлиент(СтрокаТЧ = Неопределено)
	
	Если СтрокаТЧ = Неопределено Тогда
		СтрокаТЧ = Элементы.Товары.ТекущиеДанные;
	КонецЕсли; 
	ДанныеСтрокиТаблицы	= ПолучитьДанныеСтрокиТаблицы(СтрокаТЧ);
	РассчитатьСуммуНДСВСтроке(ДанныеСтрокиТаблицы);
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТаблицы);
	ОбновитьИтоги(ЭтаФорма); 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы	= ПолучитьДанныеСтрокиТаблицы(ТекущиеДанные);
	ДанныеОбъекта	= ПолучитьДанныеОбъекта(ЭтаФорма);
	
	ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении

&НаСервереБезКонтекста
Процедура ТоварыЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзмененииНаСервере

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	РассчитатьСуммуНДСВСтрокеКлиент(СтрокаТаблицы);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы);
	РассчитатьСуммуНДСВСтрокеКлиент(СтрокаТаблицы);
КонецПроцедуры // ТоварыЦенаПриИзменении

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТаблицы);
	РассчитатьСуммуНДСВСтрокеКлиент(СтрокаТаблицы);
	
КонецПроцедуры // ТоварыСуммаПриИзменении

&НаКлиенте
Процедура ТоварыМетодКорректировкиНалоговогоКредитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит") Тогда
		
		ДанныеВыбора = МетодыКорректировки_ВосстановлениеПраваНаНК;
		
	ИначеЕсли СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит") Тогда
		
		ДанныеВыбора = МетодыКорректировки_ПотеряПраваНаНК;
		
	Иначе
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НеКорректировать"));
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНалоговоеНазначениеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	//определим Допустимые методы корректировок налогового кредита
	СтрокаТабличнойЧасти.ВидКорректировкиНДС = ОпределитьВидКорректировкиНК(Новый Структура("НалоговоеНазначение,НалоговоеНазначениеНовое",СтрокаТабличнойЧасти.НалоговоеНазначение,СтрокаТабличнойЧасти.НалоговоеНазначениеНовое));
	Если СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит") Тогда
		ДопустимыеМетодыКорректировки = МетодыКорректировки_ВосстановлениеПраваНаНК;
	ИначеЕсли СтрокаТабличнойЧасти.ВидКорректировкиНДС = ПредопределенноеЗначение("Перечисление.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит") Тогда
		ДопустимыеМетодыКорректировки = МетодыКорректировки_ПотеряПраваНаНК;
	Иначе
		ДопустимыеМетодыКорректировки = Новый СписокЗначений();
	КонецЕсли;
	
	//Очистим метод корректировки в строке при необходимости
	Если ДопустимыеМетодыКорректировки.НайтиПоЗначению(СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита) = Неопределено Тогда
		Если ДопустимыеМетодыКорректировки.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НеКорректировать");		
		Иначе
			СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита = ДопустимыеМетодыКорректировки[0].Значение;
		КонецЕсли;
	КонецЕсли; 
	
	РассчитатьСуммуНДСВСтрокеКлиент(СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти.СуммаНУ <> 0
		И СтрокаТабличнойЧасти.НалоговоеНазначение <> ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность")  Тогда
		СтрокаТабличнойЧасти.СуммаНУ = 0;
	КонецЕсли; 
	
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНалоговоеНазначениеНовоеПриИзменении(Элемент)
	ТоварыНалоговоеНазначениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДСВСтрокеКлиент();
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора();
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
		ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПартиям(Команда)
	ЗаполнитьПоПартиямНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПартиямНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Документ должен быть записан в базу!';uk='Документ повинен бути записаний у базу!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли; 
	// получим остатки партий на момент докумета
	ТаблицаПартий = СформироватьТаблицуНалоговыхПартий();	
	
	// выгрузим табличную чать в дерево значений.
	ДеревоТЧ = ОбщегоНазначенияРед12.ТаблицуЗначенийВДеревоСГруппировкой(Объект.Товары.Выгрузить());
	
	// вычеркнем из таблицы партий количества точно указанных в ТЧ партий
	СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета, ДокументОприходования, НалоговоеНазначение");
	Для каждого СтрокаТЧ Из ДеревоТЧ.Строки Цикл
		
		Если СтрокаТЧ.Количество = 0 Тогда
			// нечего вычитать
			Продолжить;	
		КонецЕсли;
		
		СтруктураОтбора.Вставить("Номенклатура",				СтрокаТЧ.Номенклатура);
		
		СтруктураОтбора.Вставить("СчетУчета",					СтрокаТЧ.СчетУчетаБУ);
		СтруктураОтбора.Вставить("ДокументОприходования",		СтрокаТЧ.ДокументОприходования);
		Если Не СтрокаТЧ.ДокументОприходования = Неопределено И СтрокаТЧ.ДокументОприходования.Пустая() Тогда
			СтруктураОтбора.Вставить("ДокументОприходования",	Неопределено);	
		КонецЕсли;
		
		СтруктураОтбора.Вставить("НалоговоеНазначение",			СтрокаТЧ.НалоговоеНазначение);
		
		ДеревоПартийПоНоменклатуре = ТаблицаПартий.Строки.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если НЕ ДеревоПартийПоНоменклатуре = Неопределено Тогда
			СтрокиПартий = ДеревоПартийПоНоменклатуре.Строки.НайтиСтроки(СтруктураОтбора);
		Иначе	
			СтрокиПартий = Новый Массив();
		КонецЕсли;
		
		Если НЕ СтрокиПартий.Количество() = 0 Тогда
			// строка партий может быть только одна
			Партия = СтрокиПартий[0];
			
			Если Партия.Количество <= 0 Тогда
				// нет остатка партии
				Продолжить	
			КонецЕсли;
			
			КоличествоВСтроке = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
			Если Партия.Количество = КоличествоВСтроке Тогда
				Коэф = 0;	
			Иначе
				Коэф = 1 - Мин(Партия.Количество, КоличествоВСтроке)/Партия.Количество;
			КонецЕсли; 
			
			Партия.Количество 	= Партия.Количество * Коэф;
			Партия.Стоимость 	= Партия.Стоимость 	* Коэф;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь пройдемся по строкам ТЧ в которых не указана только партия (Документ оприходования)
	СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета, НалоговоеНазначение");
	Для каждого СтрокаТЧ Из ДеревоТЧ.Строки Цикл
		
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ (СтрокаТЧ.ДокументОприходования = Неопределено ИЛИ СтрокаТЧ.ДокументОприходования.Пустая()) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если СтрокаТЧ.НалоговоеНазначение.Пустая() Тогда
			Продолжить;	
		КонецЕсли;
		
		СтруктураОтбора.Вставить("Номенклатура",				СтрокаТЧ.Номенклатура);
		СтруктураОтбора.Вставить("СчетУчета",					СтрокаТЧ.СчетУчетаБУ);
		СтруктураОтбора.Вставить("НалоговоеНазначение",			СтрокаТЧ.НалоговоеНазначение);
		
		КоличествоОбработать = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
		
		ДеревоПартийПоНоменклатуре = ТаблицаПартий.Строки.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если НЕ ДеревоПартийПоНоменклатуре = Неопределено Тогда
			СтрокиПартий = ДеревоПартийПоНоменклатуре.Строки.НайтиСтроки(СтруктураОтбора);
		Иначе	
			СтрокиПартий = Новый Массив();
		КонецЕсли;
		
		Для каждого Партия Из СтрокиПартий Цикл
			
			Если КоличествоОбработать <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Партия.Количество <= 0 Тогда
				// нет остатка партии
				Продолжить	
			КонецЕсли;
			
			//добавим подстроку в дерево
			ПодСтрокаТЧ = СтрокаТЧ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ПодСтрокаТЧ,СтрокаТЧ,,"Родитель, Строки");
			
			ПодСтрокаТЧ.ДокументОприходования = Партия.ДокументОприходования;
			
			Если Партия.Количество = КоличествоОбработать Тогда
				Коэф = 1;	
			Иначе
				Коэф = Мин(Партия.Количество, КоличествоОбработать)/Партия.Количество;
			КонецЕсли; 
			
			// спишем из партии и строки табличной части в подстроку ТЧ.
			СписываемоеКоличество 	= Окр(Партия.Количество * Коэф, 3);
			
			КоличествоОбработать 	= КоличествоОбработать 	- СписываемоеКоличество;
			
			Партия.Количество 	  	= Партия.Количество   	- СписываемоеКоличество;
			СтрокаТЧ.Количество	  	= СтрокаТЧ.Количество 	- ?(СтрокаТЧ.Коэффициент = 0, 0,СписываемоеКоличество/СтрокаТЧ.Коэффициент);
			ПодСтрокаТЧ.Количество  = ?(СтрокаТЧ.Коэффициент = 0, 0,СписываемоеКоличество/СтрокаТЧ.Коэффициент);
			
			СписываемаяСтоимость    = Окр(Партия.Стоимость * Коэф, 2);
			Партия.Стоимость 	  	= Партия.Стоимость - СписываемаяСтоимость;
			// в строке сумма без указания партии смысла не имеет;
			СтрокаТЧ.Сумма		  	= 0;
			ПодСтрокаТЧ.Сумма  		= СписываемаяСтоимость;
			ПодСтрокаТЧ.Цена  		= ?(СписываемоеКоличество = 0, 0 ,СписываемаяСтоимость/СписываемоеКоличество * СтрокаТЧ.Коэффициент);
			
			ТекСтавкаНДС = ?(ЗначениеЗаполнено(ПодСтрокаТЧ.СтавкаНДС), ПодСтрокаТЧ.СтавкаНДС, Перечисления.СтавкиНДС.НДС20);
			
			
			Если    ПодСтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
				ИЛИ ПодСтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность Тогда
				// НДС будем считать как восстанавливаемый, и на текущий момент он находится в составе себестомости
				НДС = УчетНДС.РассчитатьСуммуНДС(СписываемаяСтоимость, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекСтавкаНДС)); 
			Иначе	
				// НДС будем считать для условной продажи от обычной цены, от себестомости
				НДС = УчетНДС.РассчитатьСуммуНДС(СписываемаяСтоимость, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТекСтавкаНДС)); 
			КонецЕсли;
			ПодСтрокаТЧ.СуммаНДС		= НДС;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// в последнюю очередь пройдемся по строкам, в которых не указано налоговое назначение
	СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета");
	Для каждого СтрокаТЧ Из ДеревоТЧ.Строки Цикл
		
		Если СтрокаТЧ.Количество = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		Если СтрокаТЧ.Номенклатура.Пустая() Тогда
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке №%1 не указана номенклатура! Строка не будет обработана!';uk='У рядку №%1 не вказана номенклатура! Рядок не буде оброблено!'"), ДеревоТЧ.Строки.Индекс(СтрокаТЧ) + 1));
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.НалоговоеНазначение.Пустая() Тогда
			// эта строка обрабатывалась в предыдущем цикле
			Продолжить;	
		КонецЕсли;
		
		СтруктураОтбора.Вставить("Номенклатура",				СтрокаТЧ.Номенклатура);
		СтруктураОтбора.Вставить("СчетУчета",					СтрокаТЧ.СчетУчетаБУ);
		
		КоличествоОбработать = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
		
		ДеревоПартийПоНоменклатуре = ТаблицаПартий.Строки.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если НЕ ДеревоПартийПоНоменклатуре = Неопределено Тогда
			СтрокиПартий = ДеревоПартийПоНоменклатуре.Строки.НайтиСтроки(СтруктураОтбора);
		Иначе	
			СтрокиПартий = Новый Массив();
		КонецЕсли;
		
		Для каждого Партия Из СтрокиПартий Цикл
			
			Если НЕ (СтрокаТЧ.ДокументОприходования = Неопределено ИЛИ СтрокаТЧ.ДокументОприходования.Пустая()) Тогда
				// указана конкретная партия
				Если НЕ Партия.ДокументОприходования = СтрокаТЧ.ДокументОприходования Тогда
					Продолжить;		
				КонецЕсли; 
			КонецЕсли;
			
			Если СтрокаТЧ.НалоговоеНазначениеНовое = Партия.НалоговоеНазначение Тогда
				// нет смысла не менять назначение	
				Продолжить;
			КонецЕсли;
			
			Если КоличествоОбработать <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Партия.Количество <= 0 Тогда
				// нет остатка партии
				Продолжить	
			КонецЕсли;
			
			//добавим подстроку в дерево
			ПодСтрокаТЧ = СтрокаТЧ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ПодСтрокаТЧ,СтрокаТЧ,,"Родитель, Строки");
			
			ПодСтрокаТЧ.ДокументОприходования = Партия.ДокументОприходования;
			ПодСтрокаТЧ.НалоговоеНазначение   = Партия.НалоговоеНазначение;
			
			Если Партия.Количество = КоличествоОбработать Тогда
				Коэф = 1;	
			Иначе
				Коэф = Мин(Партия.Количество, КоличествоОбработать)/Партия.Количество;
			КонецЕсли; 
			
			// спишем из партии и строки табличной части в подстроку ТЧ.
			СписываемоеКоличество 	= Окр(Партия.Количество * Коэф, 3);
			
			КоличествоОбработать 	= КоличествоОбработать 	- СписываемоеКоличество;
			
			Партия.Количество 	  	= Партия.Количество   	- СписываемоеКоличество;
			СтрокаТЧ.Количество	  	= СтрокаТЧ.Количество 	- ?(СтрокаТЧ.Коэффициент = 0, 0,СписываемоеКоличество/СтрокаТЧ.Коэффициент);
			ПодСтрокаТЧ.Количество  = ?(СтрокаТЧ.Коэффициент = 0, 0,СписываемоеКоличество/СтрокаТЧ.Коэффициент);
			
			СписываемаяСтоимость    = Окр(Партия.Стоимость * Коэф, 2);
			Партия.Стоимость 	  	= Партия.Стоимость - СписываемаяСтоимость;
			// в строке сумма без указания партии смысла не имеет;
			СтрокаТЧ.Сумма		  	= 0;
			ПодСтрокаТЧ.Сумма  		= СписываемаяСтоимость;
			ПодСтрокаТЧ.Цена  		= ?(СписываемоеКоличество = 0, 0 ,СписываемаяСтоимость/СписываемоеКоличество * СтрокаТЧ.Коэффициент);
			
			Если    ПодСтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
				ИЛИ ПодСтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность Тогда
				// НДС будем считать как восстанавливаемый, и на текущий момент он находится в составе себестомости
				НДС = УчетНДС.РассчитатьСуммуНДС(СписываемаяСтоимость, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20)); 
			Иначе	
				// НДС будем считать для условной продажи от обычной цены, от себестомости
				НДС = УчетНДС.РассчитатьСуммуНДС(СписываемаяСтоимость, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.НДС20)); 
			КонецЕсли;
			ПодСтрокаТЧ.СуммаНДС		= НДС;
			
			ВидКорректировки = ОпределитьВидКорректировкиНК(ПодСтрокаТЧ);
			Если ВидКорректировки = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит Тогда
				ПодСтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит;
			ИначеЕсли ВидКорректировки = Перечисления.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит Тогда
				ПодСтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства;
			Иначе
				ПодСтрокаТЧ.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Выгрузим дерево в табличную часть
	Объект.Товары.Очистить();
	Для каждого СтрокаТЧ Из ДеревоТЧ.Строки Цикл
		// строки верхнего уровня перенесем в ТЧ если у них нет подстрок 
		// или количество в этой строке не равно нулю
		Если    СтрокаТЧ.Строки.Количество() = 0 
			ИЛИ НЕ СтрокаТЧ.Количество = 0 Тогда
			СтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаТЧ);
		КонецЕсли;
		
		Для каждого ПодСтрокаТЧ Из СтрокаТЧ.Строки Цикл
			СтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, ПодСтрокаТЧ);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммы(Команда)
	ОбновитьСуммыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Документ должен быть записан в базу!';uk='Документ повинен бути записаний у базу!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли; 
	
	ТаблицаПартий = СформироватьТаблицуНалоговыхПартий();	
	
	// Пройдемся по таблице партий и обновим суммы в табличной части
	СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета, ДокументОприходования, НалоговоеНазначение");
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.Количество = 0 Тогда
			// нечего вычитать
			Продолжить;	
		КонецЕсли;
		
		СтруктураОтбора.Вставить("Номенклатура",				СтрокаТЧ.Номенклатура);
		СтруктураОтбора.Вставить("СчетУчета",					СтрокаТЧ.СчетУчетаБУ);
		СтруктураОтбора.Вставить("ДокументОприходования",		СтрокаТЧ.ДокументОприходования);
		Если Не СтрокаТЧ.ДокументОприходования = Неопределено И СтрокаТЧ.ДокументОприходования.Пустая() Тогда
			СтруктураОтбора.Вставить("ДокументОприходования",	Неопределено);	
		КонецЕсли;
		СтруктураОтбора.Вставить("НалоговоеНазначение",			СтрокаТЧ.НалоговоеНазначение);
		
		ДеревоПартийПоНоменклатуре = ТаблицаПартий.Строки.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		Если НЕ ДеревоПартийПоНоменклатуре = Неопределено Тогда
			СтрокиПартий = ДеревоПартийПоНоменклатуре.Строки.НайтиСтроки(СтруктураОтбора);
		Иначе	
			СтрокиПартий = Новый Массив();
		КонецЕсли;
		
		Если  СтрокиПартий.Количество() = 0 Тогда
			
			// нет партий - нет и корректный сумм
			СтрокаТЧ.Сумма 		= 0;
			СтрокаТЧ.СуммаНДС	= 0;
			СтрокаТЧ.Цена		= 0;
			
		Иначе
			// строка партий может быть только одна
			Партия = СтрокиПартий[0];
			
			КоличествоВСтроке = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
			Если Партия.Количество = КоличествоВСтроке Тогда
				Коэф = 1;	
			ИначеЕсли Партия.Количество = 0 Тогда	
				Коэф = 0;	
			Иначе
				Коэф = КоличествоВСтроке / Партия.Количество;
			КонецЕсли; 
			
			Стоимость			    = Окр(Партия.Стоимость * Коэф, 2);
			СтрокаТЧ.Сумма		  	= Стоимость;
			СтрокаТЧ.Цена  			= ?(КоличествоВСтроке = 0, 0 ,Стоимость/КоличествоВСтроке*СтрокаТЧ.Коэффициент);
			
			ТекСтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС), СтрокаТЧ.СтавкаНДС, Перечисления.СтавкиНДС.НДС20);
			
			Если    СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
				ИЛИ СтрокаТЧ.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность Тогда
				// НДС будем считать как восстанавливаемый, и на текущий момент он находится в составе себестомости
				НДС = УчетНДС.РассчитатьСуммуНДС(Стоимость, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекСтавкаНДС)); 
			Иначе	
				// НДС будем считать для условной продажи от обычной цены, от себестомости
				НДС = УчетНДС.РассчитатьСуммуНДС(Стоимость, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТекСтавкаНДС)); 
			КонецЕсли;
			
			СтрокаТЧ.СуммаНДС		= НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	ОшибкиЗаполнения = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация!';uk='Не вибрана організація!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		ОшибкиЗаполнения = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru='Не выбран склад!';uk='Не вибраний склад!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Склад");
		ОшибкиЗаполнения = Истина;
	КонецЕсли;
	
	Если ОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ИзменениеНалоговогоНазначенияЗапасов.Форма.ФормаПодбораОстатков", Новый Структура("Организация, Дата", Объект.Организация, Объект.Дата),
		ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ОчиститьТабличнуюЧасть Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	СтруктураПараметровПартий = Новый Структура();
	СтруктураПараметровПартий.Вставить("ПроводитьДокументПоРазделуУчета", Истина);
	СтруктураПараметровПартий.Вставить("СпособОценкиБух", СпособОценкиМПЗ);
	СтруктураПараметровПартий.Вставить("МоментКон", Новый Граница(Новый МоментВремени(Объект.Дата, Объект.Ссылка), ВидГраницы.Исключая));
	
	НалоговыеНазначения = Новый Массив;
	НалоговыеНазначения.Добавить(ПараметрыЗаполнения.НалоговоеНазначение);  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет.УчетПоНалоговымНазначениямНДС
	|				И НЕ Счет.УчетСуммНУ
	|				И (Счет В ИЕРАРХИИ (&Счет)
	|					ИЛИ &Счет = НЕОПРЕДЕЛЕНО),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
	|			Организация = &Организация
	|				И НалоговоеНазначение = &НалоговоеНазначение) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.Субконто1 КАК Субконто1
	|ИЗ
	|	Остатки КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.Счет КАК Счет
	|ИЗ
	|	Остатки КАК Остатки";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", СтруктураПараметровПартий.МоментКон);
	Запрос.УстановитьПараметр("НалоговоеНазначение", ПараметрыЗаполнения.НалоговоеНазначение);
	Запрос.УстановитьПараметр("Счет", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.СчетУчета), ПараметрыЗаполнения.СчетУчета, Неопределено));
	
	Результаты = Запрос.ВыполнитьПакет();
	МассивНоменклатуры = Результаты[1].Выгрузить().ВыгрузитьКолонку(0);
	СчетаУчета = Результаты[2].Выгрузить().ВыгрузитьКолонку(0);
	
	Если МассивНоменклатуры.Количество() Тогда
		
		ДеревоПартий = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуПартийНаСкладах(СтруктураПараметровПартий, "Бух", Объект.Организация, НалоговыеНазначения, СчетаУчета, МассивНоменклатуры, Объект.Склад);
		
		Для каждого СтрокаНоменклатуры Из ДеревоПартий.Строки Цикл
			
			Для каждого СтрокаПартии Из СтрокаНоменклатуры.Строки Цикл
				
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();                      
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаПартии);
				
				СтрокаТабличнойЧасти.СчетУчетаБУ = СтрокаПартии.СчетУчета;
				СтрокаТабличнойЧасти.НалоговоеНазначениеНовое = ПараметрыЗаполнения.НалоговоеНазначениеНовое;
				
				СтрокаТабличнойЧасти.Сумма = СтрокаПартии.Стоимость;
				СтрокаТабличнойЧасти.СуммаНУ = СтрокаПартии.СтоимостьНУ;
				СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);
				
				СвойстваНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТабличнойЧасти.Номенклатура, "БазоваяЕдиницаИзмерения, СтавкаНДС"); 
				
				СтрокаТабличнойЧасти.СтавкаНДС = ?(ЗначениеЗаполнено(СвойстваНоменклатуры.СтавкаНДС), СвойстваНоменклатуры.СтавкаНДС, Перечисления.СтавкиНДС.НДС20);
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СвойстваНоменклатуры.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент = 1;
				
				Если    СтрокаТабличнойЧасти.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
					ИЛИ СтрокаТабличнойЧасти.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность Тогда
					// НДС будем считать как восстанавливаемый, и на текущий момент он находится в составе себестомости
					СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)); 
				Иначе	
					// НДС будем считать для условной продажи от обычной цены, от себестомости
					СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС)); 
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ВидКорректировкиНДС = ОпределитьВидКорректировкиНК(СтрокаТабличнойЧасти);
				Если СтрокаТабличнойЧасти.ВидКорректировкиНДС = Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит Тогда
					СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит;
				ИначеЕсли СтрокаТабличнойЧасти.ВидКорректировкиНДС = Перечисления.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит Тогда
					СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства;
				Иначе
					СтрокаТабличнойЧасти.МетодКорректировкиНалоговогоКредита = Перечисления.МетодыКорректировкиНалоговогоКредита.НеКорректировать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;  
		
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если Объект.Товары.Количество() Тогда
		Элементы.Товары.ТекущаяСтрока = Объект.Товары[Объект.Товары.Количество()-1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента	= Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПодготовитьФормуНаСервере

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	//ПлательщикНДС               = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ЕстьНалогНаПрибыльДо2015    = УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(Объект.Организация, Объект.Дата);
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата); 
	СпособОценкиМПЗ             = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация,Объект.Дата);
	
	//ПлательщикЕН                = УчетнаяПолитика.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	
КонецПроцедуры // УстановитьФункциональныеОпцииФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы     = Форма.Элементы;
	ОбъектФормы  = Форма.Объект;
	
	Элементы.НалоговоеНазначениеДоходовИЗатрат.Видимость 	= Форма.ЕстьНалогНаПрибыльДо2015;
	Элементы.ТоварыСуммаНУ.Видимость 						= Форма.ЕстьНалогНаПрибыльДо2015;
	
	НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма);
	
КонецПроцедуры // УправлениеФормой

&НаСервере
Процедура УправлениеФормойНаСервере() Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // УправлениеФормойНаСервере

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(Знач Форма, ПараметрыОбъекта)
	
	ОбъектФормы = Форма.Объект;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	//ПараметрыОбъекта.Вставить("ПлательщикНДС", Форма.ПлательщикНДС);
	ПараметрыОбъекта.Вставить("Дата", 		   ОбъектФормы.Дата);
	
КонецПроцедуры // ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц() Экспорт
	
	ПараметрыОбъекта = Неопределено;
	ЗаполнитьПараметрыОбъектаДляЗаполненияДобавленныхКолонок(ЭтаФорма, ПараметрыОбъекта);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, ПараметрыОбъекта);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДобавленныеКолонкиТаблиц

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Знач ПараметрыОбъекта)
	
	СтрокаТаблицы.ВидКорректировкиНДС  =  ОпределитьВидКорректировкиНК(СтрокаТаблицы);
	//СтрокаТаблицы.СчетУчетаЗабалансовый = ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаБУ)
	//	И БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаБУ).Забалансовый;
	
КонецПроцедуры // ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары

// Процедура определяет возможный вид корректировки налогового кредита, по переданным данным
//
// Параметры
//  Данные  – Строка табличной части, структура, строка таблицы. Должна содержать реквизиты (колонки):
//  			НалоговоеНазначение, НалоговоеНазначениеНовое
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыКорректировокНалоговогоКредита  - вид корректировки. Если неопределен - пустая ссылка.
//
&НаСервереБезКонтекста
Функция ОпределитьВидКорректировкиНК(Данные) Экспорт
	
	Если    НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначение)
		ИЛИ НЕ ЗначениеЗаполнено(Данные.НалоговоеНазначениеНовое) Тогда 
		
		Возврат  Перечисления.ВидыКорректировокНалоговогоКредита.ПустаяСсылка();
		
	КонецЕсли; 
	
	НалоговыйКредитВход  = Данные.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально ИЛИ УчетНДС.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначение);
	НалоговыйКредитВыход = Данные.НалоговоеНазначениеНовое = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально ИЛИ УчетНДС.ЕстьПравоНаНалоговыйКредит(Данные.НалоговоеНазначениеНовое);
	
	Если НалоговыйКредитВход = НалоговыйКредитВыход Тогда
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.НетКорректировок;
		
	ИначеЕсли НалоговыйКредитВход И НЕ НалоговыйКредитВыход Тогда
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.ПотеряПраваНаНалоговыйКредит;
		
	Иначе
		
		Возврат Перечисления.ВидыКорректировокНалоговогоКредита.ВосстановлениеПраваНаНалоговыйКредит;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	// При изменении данных обновим суммы в подвале.
	Форма.ВсегоМетодКорректировкиНДС1 = 0;
	Форма.ВсегоМетодКорректировкиНДС2 = 0;
	Для  каждого СтрокаТЧ Из Форма.Объект.Товары Цикл
		Если СтрокаТЧ.МетодКорректировкиНалоговогоКредита = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыеОбязательства") Тогда
			Форма.ВсегоМетодКорректировкиНДС1 = Форма.ВсегоМетодКорректировкиНДС1 + СтрокаТЧ.СуммаНДС;	
		ИначеЕсли СтрокаТЧ.МетодКорректировкиНалоговогоКредита = ПредопределенноеЗначение("Перечисление.МетодыКорректировкиНалоговогоКредита.НаНалоговыйКредит") Тогда
			Форма.ВсегоМетодКорректировкиНДС2 = Форма.ВсегоМетодКорректировкиНДС2 + СтрокаТЧ.СуммаНДС;	
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьИтоги

&НаСервере
Процедура ОбновитьИтогиНаСервере() Экспорт
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры // ОбновитьИтогиНаСервере

// Изменение счетов учета и их субконто

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриПодготовкеФормыНаСервере(Форма)
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма);
	УстановитьПараметрыВыбораСубконто(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСчета(Форма)
	
	УстановитьЗаголовкиИДоступностьСубконто(Форма);
	УстановитьЗначенияСубконтоПриИзмененииСчета(Форма);
	УстановитьПараметрыВыбораСубконто(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСубконтоПриИзмененииСубконто(Форма, ИмяСчета)
	
	УстановитьПараметрыВыбораСубконто(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма)
	
	ОбъектФормы = Форма.Объект;
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗатратыСубконто1",
	"ЗатратыСубконто2",
	"ЗатратыСубконто3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	"ЗаголовокСубконто1",
	"ЗаголовокСубконто2",
	"ЗаголовокСубконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ОбъектФормы.СчетУчетаЗатрат, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры // УстановитьЗаголовкиИДоступностьСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСубконто(Форма)
	
	ОбъектФормы = Форма.Объект;
	
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, "ЗатратыСубконто%Индекс%"); 
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
	Форма,
	ОбъектФормы,
	"ЗатратыСубконто%Индекс%",
	"ЗатратыСубконто%Индекс%",
	ПараметрыДокумента);
	
КонецПроцедуры // УстановитьПараметрыВыбораСубконто

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСубконтоПриИзмененииСчета(Форма)
	
	ОбъектФормы = Форма.Объект;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
	"ЗатратыСубконто1",
	"ЗатратыСубконто2",
	"ЗатратыСубконто3",
	ОбъектФормы.Организация);
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ОбъектФормы.СчетУчетаЗатрат, ОбъектФормы, ПоляОбъекта);
	
КонецПроцедуры // УстановитьЗначенияСубконтоПриИзмененииСчета

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ШаблонИмяПоляОбъекта)
	
	Объект = Форма.Объект;
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект[ИмяПоля]);
		ИначеЕсли ТипЗнч(Объект[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", Объект[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация", Объект.Организация);

	Возврат СписокПараметров;
	
КонецФункции // ПолучитьСписокПараметров

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, ЕдиницаИзмерения", СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			// Рассчитываем реквизиты табличной части
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			РассчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти);
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара,,"Цена");
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СчетУчетаБУ            = СведенияОНоменклатуре.СчетаУчета.СчетУчетаБУ;
			СтрокаТабличнойЧасти.НалоговоеНазначение    = СведенияОНоменклатуре.СчетаУчета.НалоговоеНазначение;
			СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			РассчитатьСуммуНДСВСтроке(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры // ОбработкаВыбораПодборНаСервере

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)
	
	СтрокаТабличнойЧасти = Неопределено;
	
	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("ru='Подбор номенклатуры в %1 ';uk='Підбір номенклатури %1 '");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены", Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора());
	ПараметрыФормы.Вставить("ИмяТаблицы"    , "Товары");
	ПараметрыФормы.Вставить("Услуги"        , Ложь);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора()
	
	ВидПодбора = "";
	
	Возврат ВидПодбора;
	
КонецФункции

&НаКлиенте
Процедура ТоварыМетодКорректировкиНалоговогоКредитаОчистка(Элемент, СтандартнаяОбработка)
	
	// запретим очистку
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуНалоговыхПартий()
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) 
		ИЛИ Объект.Товары.Количество() = 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = НСтр("ru='Не выбрана Организация!';uk='Не обрана Організація!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		ИначеЕсли Объект.Товары.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Нет строк в табличной части Товары!';uk='Немає рядків у табличній частині Товари!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", Истина);
	СтруктураПараметров.Вставить("СпособОценкиБух", СпособОценкиМПЗ);
	СтруктураПараметров.Вставить("МоментКон", Объект.Ссылка.МоментВремени());
	
	НалоговыеНазначения = НОвый Массив();
	НалоговыеНазначения.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	НалоговыеНазначения.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность);
	НалоговыеНазначения.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая);
	НалоговыеНазначения.Добавить(Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	
	Возврат УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, "Бух", Объект.Организация, НалоговыеНазначения, Объект.Товары.Выгрузить(,"СчетУчетаБУ").ВыгрузитьКолонку("СчетУчетаБУ"), Объект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"), Объект.Склад);
	
КонецФункции

&НаКлиенте
Процедура ТоварыМетодКорректировкиНалоговогоКредитаПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
