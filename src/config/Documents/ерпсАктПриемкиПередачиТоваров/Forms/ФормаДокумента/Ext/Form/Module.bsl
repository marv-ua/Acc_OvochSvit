 
 
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьРеквизит_КоличествоОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(ТекущиеДанные);

	ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	Если ПараметрыОбработки.ДанныеСтрокиТаблицы.Свойство("КоличествоОстаток") тогда
		ПараметрыОбработки.ДанныеСтрокиТаблицы.КоличествоОстаток = ПолучитьОстатокПоНоменклатуре(ПараметрыОбработки.ДанныеСтрокиТаблицы.Номенклатура);            
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы)

	Если НЕ ДанныеСтрокиТаблицы.Свойство("Номенклатура") тогда
		Возврат;
	КонецЕсли;  
	
	Если ДанныеСтрокиТаблицы.Свойство("ЕдиницаИзмерения") тогда
		
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтрокиТаблицы.Номенклатура,"БазоваяЕдиницаИзмерения");
		
	КонецЕсли;  
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти    //СлужебныеПроцедурыИФункцииБСП

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
		
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)

	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Загрузка из Excel недоступна в Web-клиенте.';uk='Завантаження Excel недоступне у Web-клієнті.'"));
	#Иначе	
		ДопПараметры = Новый Структура("Контрагент",Неопределено);
		ОбработкаЗакрытия = Новый ОписаниеОповещения("ЗаркытиеОбработки_ЗагрузкаИзВнешнегоФайла",ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ерпсСозданиеАктаПриемаПередачиТовара.Форма.Форма",
					ДопПараметры,
					ЭтаФорма,,,,
					ОбработкаЗакрытия,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	#КонецЕсли	

КонецПроцедуры


&НаКлиенте
Процедура ЗаркытиеОбработки_ЗагрузкаИзВнешнегоФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузкаИзВнешнегоФайлаНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаИзВнешнегоФайлаНаСервере(АдресВременногоХранилища)
	
	ТЗНоменклатур = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Товары.Очистить();	
	КодСтроки = 0;
	Для каждого ТекущаяСтрока из ТЗНоменклатур Цикл
		
		НовСтр = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,ТекущаяСтрока);
		НовСтр.КодСтроки = КодСтроки;
		
	КонецЦикла;
	
	ТЗНоменклатур.Свернуть("ПунктРазгрузки");
	
	Объект.ПунктыРазгрузки.Загрузить(ТЗНоменклатур);
	
КонецПроцедуры

&НаКлиенте
Процедура ПустоеОповещение(Р,П) Экспорт
КонецПроцедуры

&НаСервере
Функция ЕстьПустыеКонтрагенты()

	Возврат Объект.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Контрагент",Справочники.Контрагенты.ПустаяСсылка())).Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки, ТекстСообщения) 
	ПоказатьВопрос(ОписаниеОповещениеПослеОшибки,
	                    ТекстСообщения,
						РежимДиалогаВопрос.ОК,
						,
						,
						Нстр("ru='Внимание';uk='Увага'")
		);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораКонтрагентов()

	Результат = Новый СписокЗначений;
	
	ТЗКонтрагенты = Объект.ПунктыРазгрузки.Выгрузить();
	ТЗКонтрагенты.Свернуть("Контрагент");
	
	Для каждого ТекКонтрагент из ТЗКонтрагенты Цикл
		Результат.Добавить(ТекКонтрагент.Контрагент,ТекКонтрагент.Контрагент);	
	КонецЦикла;                                    
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненияДокументаНеПройдена()
	
	Если Объект.Товары.Количество() = 0 тогда
		ОписаниеОповещениеПослеОшибки = Новый ОписаниеОповещения("ПустоеОповещение",ЭтотОбъект);
		ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки,Нстр("ru='Сначала заполните таблицу товаров';uk='Спочатку заповніть таблицю товарів'"));
		Возврат Истина;
	КонецЕсли;         
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизит_КоличествоОстаток()
	
	Для каждого Стр из Объект.Товары Цикл
		Стр.КоличествоОстаток = ПолучитьОстатокПоНоменклатуре(Стр.Номенклатура);	
	КонецЦикла;
	
	
КонецПроцедуры 

Функция  ПолучитьОстатокПоНоменклатуре(ТекНоменклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    ХозрасчетныйОстатки.КоличествоОстаток КАК ТекОстаток,
	|    ХозрасчетныйОстатки.КоличествоОстатокДт КАК ТекОстатокДТ
	|ИЗ
	|    РегистрБухгалтерии.Хозрасчетный.Остатки(
	|            &Дата,
	|            Счет = &Счет,
	|            &МассивСубконто,
	|            Организация = &Организация
	|                И Субконто1 = &Номенклатура
	|                И Субконто2 = &Склад) КАК ХозрасчетныйОстатки";
	
	МассивСубконто = Новый Массив;    
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);
	Запрос.УстановитьПараметр("Склад", ОБъект.Склад);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТекОстаток - ПолучитьОстатокПоАктам(ТекНоменклатура);
	
КонецФункции
Функция ПолучитьОстатокПоАктам(ТекНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ерпсАктПриемкиПередачиТоваровТовары.Количество) КАК Количество,
		|	ерпсАктПриемкиПередачиТоваровТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.ерпсАктПриемкиПередачиТоваров.Товары КАК ерпсАктПриемкиПередачиТоваровТовары
		|ГДЕ
		|	НЕ ерпсАктПриемкиПередачиТоваровТовары.Ссылка.ПометкаУдаления
		|	И ерпсАктПриемкиПередачиТоваровТовары.Ссылка.Склад = &Склад
		|	И ерпсАктПриемкиПередачиТоваровТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.ерпсСтатусыАктовПриемкиПередачи.Создан)
		|	И ерпсАктПриемкиПередачиТоваровТовары.Номенклатура = &Номенклатура
		|	И ерпсАктПриемкиПередачиТоваровТовары.Ссылка <> &Ссылка
		|	И ерпсАктПриемкиПередачиТоваровТовары.Ссылка.Статус <> Значение(Перечисление.ерпсСтатусыАктовПриемкиПередачи.Отгружено)
		|
		|СГРУППИРОВАТЬ ПО
		|	ерпсАктПриемкиПередачиТоваровТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;

КонецФункции



#КонецОбласти

#Область СозданиеРеализацииТоваровНаОсновании

&НаКлиенте
Процедура СоздатьРТУПоКонтрагенту(Команда)
	
	Если ПроверкаЗаполненияДокументаНеПройдена() тогда
		Возврат;
	КонецЕсли;
	
    ПослеВыбораКонтрагента_СозданиеРеализации(Объект.Контрагент, Новый Структура); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКонтрагента_СозданиеРеализации(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено тогда 
		Возврат;
	КонецЕсли;
	МассивИдентификаторов = ПолучитьМассивИдентификаторов();
	
	Для каждого ТекИдентификатор из МассивИдентификаторов Цикл
		ФормаДокументаРТУ = ПолучитьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаОбщая",,,Новый УникальныйИдентификатор);
		ДанныеФормы = ФормаДокументаРТУ.Объект;
		СоздатьРТУПоКонтрагентуНаСервере(ДанныеФормы, Результат,ТекИдентификатор); 
		
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокументаРТУ.Объект);
		ФормаДокументаРТУ.УправлениеФормойНаСервере();
		ФормаДокументаРТУ.Открыть();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРТУПоКонтрагентуНаСервере(ФормаОбъект, Контрагент,ТекИдентификатор)
	
	НовДок = ДанныеФормыВЗначение(ФормаОбъект, Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	
	НовДок.Дата = Объект.Дата + 1;
	// Заполним реквизиты шапки по документу основанию.
	НовДок.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	
	НовДок.а_Периоды = Объект.ПериодОтгрузки;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(НовДок, ОБъект.Ссылка); // Копировать подразделение = Истина
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРПСАктПриемаПередачиТовараТовары.Номенклатура КАК Номенклатура,
	|	ЕРПСАктПриемаПередачиТовараТовары.ДополнительныеАртикулы КАК ДополнительныйАртикул,
	|	ЕРПСАктПриемаПередачиТовараТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕРПСАктПриемаПередачиТовараТовары.Количество КАК Количество,
	|	ЕРПСАктПриемаПередачиТовараТовары.Примечание КАК Примечание,
	|	ЕРПСАктПриемаПередачиТовараТовары.КодСтроки КАК КодСтроки,
	|	ЕРПСАктПриемаПередачиТовараТовары.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВТАкт
	|ИЗ
	|	Документ.ерпсАктПриемкиПередачиТоваров.Товары КАК ЕРПСАктПриемаПередачиТовараТовары
	|ГДЕ
	|	ЕРПСАктПриемаПередачиТовараТовары.Ссылка = &Основание
	|	И ЕРПСАктПриемаПередачиТовараТовары.ПунктРазгрузки В(&ПунктРазгрузки)
	|	И ЕРПСАктПриемаПередачиТовараТовары.Идентификатор = &Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.ДополнительныйАртикул КАК ДополнительныйАртикул,
	|	РеализацияТоваровУслугТовары.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТРту
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
	|	И РеализацияТоваровУслугТовары.Ссылка.Сделка = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТАкт.Номенклатура КАК Номенклатура,
	|	ВТАкт.ДополнительныйАртикул КАК ДополнительныйАртикул,
	|	ВТАкт.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТАкт.Количество КАК Количество,
	|	ВТАкт.Примечание КАК Примечание,
	|	ВТАкт.КодСтроки КАК КодСтроки,
	|	ВТАкт.ДатаОтгрузки КАК ДатаОтгрузки
	|ИЗ
	|	ВТАкт КАК ВТАкт
	|ГДЕ
	|	НЕ ВТАкт.КодСтроки В
	|				(ВЫБРАТЬ
	|					ВТРТУ.КодСтроки
	|				ИЗ
	|					ВТРТУ КАК ВТРТУ)";
	
	МассивПунктРазгрузки = Новый массив;
	МассивПунктРазгрузки.Добавить(Объект.ПунктРазгрузки);
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПунктРазгрузки", МассивПунктРазгрузки);
	Запрос.УстановитьПараметр("Идентификатор", ТекИдентификатор);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, НовДок);
	ДанныеОбъекта.Реализация	= Истина;
	ДанныеОбъекта.ЭтоКомиссия	= (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовДок.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
	ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = НовДок.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,СтрокаТабличнойЧасти.Номенклатура);
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
		СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.Коэффициент = 1;
		
	КонецЦикла;
	
	Если ТаблицаТоваров.Количество() > 0 тогда
		Если ЗначениеЗаполнено(ТаблицаТоваров[0].ДатаОтгрузки) тогда
			НовДок.Дата = ТаблицаТоваров[0].ДатаОтгрузки;
		Иначе
			НовДок.Дата = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	НовДок.Контрагент 	  		= Контрагент; 
	НовДок.ДоговорКонтрагента   = Объект.Договор;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		НовДок.ДоговорКонтрагента, НовДок.Контрагент, НовДок.Организация, 
		ПолучитьМассивВидовДоговоров());
	
	НовДок.Авто 		  			= Объект.Авто;
	НовДок.Водитель 	  			= Объект.Водитель;
	НовДок.Организация 	  			= Объект.Организация;
	НовДок.ЕРПСПеревозчик 			= Объект.Перевозчик;
	НовДок.Прицеп		  			= Объект.Прицеп;
	НовДок.ерпсАктПриемкиПередачи	= Объект.Ссылка;              
	НовДок.ПредставительОрганизации = Объект.ПредставительОрганизации;
	НовДок.Склад 					= Объект.Склад;
	НовДок.АдресДоставки			= ОБъект.АдрессДоставки;
	НовДок.ерпсПунктПогрузки		= Объект.Склад;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(НовДок);
	
	НовДок.ПунктРазгрузки = МассивПунктРазгрузки[0];
	
	ЗначениеВДанныеФормы(НовДок,ФормаОбъект);

КонецПроцедуры  

&НаСервере
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);

	Возврат СписокВидовДоговоров;
	
КонецФункции
&НаСервере
Функция ПолучитьМассивИдентификаторов()
	
	КопияТЗ = Объект.Товары.Выгрузить(,"Идентификатор");
	КопияТЗ.Свернуть("Идентификатор");
	Возврат КопияТЗ.ВыгрузитьКолонку("Идентификатор");	
КонецФункции


#КонецОбласти

#Область ПечатьАкта


&НаКлиенте
Процедура ПечатьАктаПриемкиПередачиТовара(Команда)
	
	Если ПроверкаЗаполненияДокументаНеПройдена() тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбораКонтрагентов = ПолучитьСписокВыбораКонтрагентов();
	
	ОписаниеОповещенияОбВыбореКонтрагента = Новый ОписаниеОповещения("ПослеВыбораКонтрагента_ПечатьАкта", ЭтотОбъект);

КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораКонтрагента_ПечатьАкта(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено тогда 
		Возврат;
	КонецЕсли;
	
	ПечатнаяФорма = ПолучитьСформироватьПечатнуюФорму_АктПриемкиПередачи(Результат);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСформироватьПечатнуюФорму_АктПриемкиПередачи(Контрагент)
	
	Возврат Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ПолучитьПечатнуюФормуАктаПоКонтрагенту(Объект.Ссылка,Контрагент);
	
КонецФункции

&НаКлиенте
Процедура АдрессДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	АдресДоставкиНачалоВыбораНаСервере(Объект.Контрагент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АдресДоставкиНачалоВыбораНаСервере(Знач Контрагент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресаДоставки.Представление КАК Представление
	|ИЗ
	|	Справочник.АдресаДоставки КАК АдресаДоставки
	|ГДЕ
	|	АдресаДоставки.Владелец = &Контрагент
	|	И НЕ АдресаДоставки.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		ДанныеВыбора.Добавить(РезультатЗапроса.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеализацию(Команда)                           
	ОчиститьСообщения();
	Если Модифицированность тогда                               
		Сообщить(Нстр("ru='Сначала необходимо сохранить документ';uk='Спочатку необхідно зберегти документ'"));	
		Возврат;	
	КонецЕсли;
	
	ОбновитьРеализацииНаСервере(ОБъект.Ссылка);
	ЗаполнитьРеквизит_КоличествоОстаток();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьРеализацииНаСервере(АктСсылка)
	 ерпсАктПриемкиПередачиСервер.ОбновитьРеализациюТоваровУслуг(АктСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьРеквизит_КоличествоОстаток();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПроверитьНоменклатуруНасервере(Отказ);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНоменклатуруНасервере(Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Номенклатура КАК Номенклатура,
	               |	Таб.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТТаб
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТаб.Номенклатура КАК Номенклатура,
	               |	ВТТаб.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ВТТаб КАК ВТТаб
				   |ГДЕ
				   |	ВТТаб.Номенклатура.а_Номенклатура = ЗНАЧЕНИЕ(Справочник.а_Номенклатура.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'В строке %1 у номенклатуры %2 не заполнено поле номенклатуры. Взможно стоит выбрать другую номенклатуру'; uk = 'У рядку %1 у номенклатури %2 не заповнено поле номентклатури. Можливо треба обрати іншу номенклатуру'"),
				Выборка.НомерСтроки, 
				Выборка.Номенклатура
			),
			,
			"Товары["+Формат(Выборка.НомерСтроки-1,"ЧГ=")+"].Номенклатура",
			"Объект",
			Отказ
		);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

