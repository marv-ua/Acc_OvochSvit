 
 
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьДоступностьЭлементовФормы();
	
	Элементы.Утвердить.Пометка = Объект.Утвержден;
	Элементы.ГруппаДатаНомер.ЦветФона = ?(Объект.Утвержден, WebЦвета.БледноЗеленый, WebЦвета.Белый);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(ТекущиеДанные);

	ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы)

	Если НЕ ДанныеСтрокиТаблицы.Свойство("Номенклатура") тогда
		Возврат;
	КонецЕсли;  
	
	Если ДанныеСтрокиТаблицы.Свойство("ЕдиницаИзмерения") тогда
		
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтрокиТаблицы.Номенклатура,"БазоваяЕдиницаИзмерения");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Номенклатура) 
		И ДанныеСтрокиТаблицы.Свойство("ДополнительныеАртикулы") Тогда
		ДанныеСтрокиТаблицы.ДополнительныеАртикулы = НайтиАртикул(ДанныеСтрокиТаблицы.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиАртикул(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеАртикулы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДополнительныеАртикулы КАК ДополнительныеАртикулы
	               |ГДЕ
	               |	НЕ ДополнительныеАртикулы.ПометкаУдаления
	               |	И ДополнительныеАртикулы.НаименованиеНоменклатуры = &НаименованиеНоменклатуры";
	Запрос.УстановитьПараметр("НаименованиеНоменклатуры", Номенклатура.НаименованиеПолное);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ДополнительныеАртикулы.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТоварыКоличествоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПунктРазгрузкиПриИзменении(Элемент)
	ЗаполнитьКонтактнымиДанными(Элементы.ПунктыРазгрузки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПунктыРазгрузки(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОбновленияТаблицыПунктыРазгрузки", ЭтотОбъект),
		НСтр("ru = 'Обновить данные в таблице из таблицы Товары?'; uk = 'Оновити дані в таблиці з таблиці Товари?'"),
		РежимДиалогаВопрос.ДаНет,
	);
		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект)
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти    //СлужебныеПроцедурыИФункцииБСП

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеВопросаОбновленияТаблицыПунктыРазгрузки(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьПунктыРазгрузкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПунктыРазгрузкиНаСервере()
	тзНомен = Объект.Товары.Выгрузить();
	тзНомен.Свернуть("ПунктРазгрузки,Идентификатор,ДатаОтгрузки", "Количество");
	
	Объект.ПунктыРазгрузки.Загрузить(тзНомен);
	ЗаполнитьЗначенияПунктыРазгрузкиПоУмолчанию();
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере()
	
	тзНомен = Объект.Товары.Выгрузить();
	Для Каждого Эл Из Объект.ПунктыРазгрузки Цикл
		тз = тзНомен.Скопировать(
			тзНомен.НайтиСтроки(Новый Структура("ПунктРазгрузки,Идентификатор,ДатаОтгрузки", Эл.ПунктРазгрузки, Эл.Идентификатор, Эл.ДатаОтгрузки))
		);
		Эл.Количество = тз.Итог("Количество");
	КонецЦикла;
	//тзНомен.Свернуть("ПунктРазгрузки,Идентификатор,ДатаОтгрузки", "Количество");
	
	//Объект.ПунктыРазгрузки.Загрузить(тзНомен);
	
	
	ЗаполнитьЗначенияПунктыРазгрузкиПоУмолчанию();
	ЗаполнитьКонтактнымиДанными();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнымиДанными(НомерСтроки = Неопределено)
	
	Если НомерСтроки = Неопределено Тогда
		Для Каждого ТекДанные Из Объект.ПунктыРазгрузки Цикл
			Если ЗначениеЗаполнено(ТекДанные.ПунктРазгрузки) Тогда
				ТекПункт = ТекДанные.ПунктРазгрузки;
				Если ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ТекДанные.КонтактныеДанные) Тогда
				Иначе
				ТекДанные.КонтактноеЛицо = ТекПункт.КонтактноеЛицо;
				ТекДанные.КонтактныеДанные = ТекПункт.КонтактныеДанные;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(НомерСтроки);
		Если ЗначениеЗаполнено(ТекДанные.ПунктРазгрузки) Тогда
			Если ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ТекДанные.КонтактныеДанные) Тогда
			Иначе
			ТекПункт = ТекДанные.ПунктРазгрузки;
			ТекДанные.КонтактноеЛицо = ТекПункт.КонтактноеЛицо;
			ТекДанные.КонтактныеДанные = ТекПункт.КонтактныеДанные;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если РольДоступна("епрсРазрешитьРедактированиеЗагруженныхКолонокАкта") Тогда
		Элементы.ТоварыЗагруженноеКоличество.ТолькоПросмотр = Ложь;
		Элементы.ТоварыЗагруженнаяНоменклатура.ТолькоПросмотр = Ложь; 
		Элементы.ТоварыЗагруженныйДополнительныеАртикулы.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, ДополнительныеАртикулы 
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
		
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)

	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Загрузка из Excel недоступна в Web-клиенте.';uk='Завантаження Excel недоступне у Web-клієнті.'"));
	#Иначе
		//ERPS_TASK_В.Головченко_28.02.2023 - додано параметр "Организация"
		//ДопПараметры = Новый Структура("Контрагент, Организация",Неопределено,Объект.Организация);
		// ек убран параметр организация
		ДопПараметры = Новый Структура("Контрагент",Неопределено);
		ОбработкаЗакрытия = Новый ОписаниеОповещения("ЗаркытиеОбработки_ЗагрузкаИзВнешнегоФайла",ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ерпсСозданиеАктаПриемаПередачиТовара.Форма.Форма",
					ДопПараметры,
					ЭтаФорма,,,,
					ОбработкаЗакрытия,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	#КонецЕсли	

КонецПроцедуры


&НаКлиенте
Процедура ЗаркытиеОбработки_ЗагрузкаИзВнешнегоФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьВопросОчиститьДалее", ЭтотОбъект, Результат),
			НСтр("ru = 'В документе уже есть данные, очистить строки?'; uk = 'В документі вже є дані, очистити рядки?'"),
			РежимДиалогаВопрос.ДаНет
		);
	Иначе
		Объект.Товары.Очистить();
		ЗагрузкаИзВнешнегоФайлаНаСервере(Результат);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОчиститьДалее(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ЗагрузкаИзВнешнегоФайлаНаСервере(ДопПараметры);
	Иначе
		ЗагрузкаИзВнешнегоФайлаНаСервере(ДопПараметры);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаИзВнешнегоФайлаНаСервере(АдресВременногоХранилища)
	
	ТЗНоменклатур = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
	КодСтроки = 0;
	Для каждого ТекущаяСтрока из ТЗНоменклатур Цикл
		
		НовСтр = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,ТекущаяСтрока);
		НовСтр.КодСтроки = КодСтроки;
		
		НовСтр.ЗагруженнаяНоменклатура = ТекущаяСтрока.Номенклатура;
		НовСтр.ЗагруженноеКоличество = ТекущаяСтрока.Количество;
		НовСтр.ЗагруженныйДополнительныеАртикулы = ТекущаяСтрока.ДополнительныеАртикулы;
		
	КонецЦикла;
	
	ОбновитьПунктыРазгрузкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПунктыРазгрузкиПоУмолчанию()
	
	Для Каждого Эл Из Объект.ПунктыРазгрузки Цикл
		Если Не ЗначениеЗаполнено(Эл.Организация) Тогда
			Эл.Организация = Справочники.Организации.НайтиПоКоду("00-000004");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Эл.Склад) Тогда
			Эл.Склад = Справочники.Склады.НайтиПоКоду("00-000024");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Эл.Перевозчик) Тогда
			Эл.Перевозчик = Справочники.Контрагенты.НайтиПоКоду("00-000510");
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПустоеОповещение(Р,П) Экспорт
КонецПроцедуры

&НаСервере
Функция ЕстьПустыеКонтрагенты()

	Возврат Объект.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Контрагент",Справочники.Контрагенты.ПустаяСсылка())).Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки, ТекстСообщения) 
	ПоказатьВопрос(ОписаниеОповещениеПослеОшибки,
	                    ТекстСообщения,
						РежимДиалогаВопрос.ОК,
						,
						,
						Нстр("ru='Внимание';uk='Увага'")
		);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораКонтрагентов()

	Результат = Новый СписокЗначений;
	
	ТЗКонтрагенты = Объект.ПунктыРазгрузки.Выгрузить();
	ТЗКонтрагенты.Свернуть("Контрагент");
	
	Для каждого ТекКонтрагент из ТЗКонтрагенты Цикл
		Результат.Добавить(ТекКонтрагент.Контрагент,ТекКонтрагент.Контрагент);	
	КонецЦикла;                                    
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненияДокументаНеПройдена()

	Если Объект.ПунктыРазгрузки.Количество() = 0 тогда
		ОписаниеОповещениеПослеОшибки = Новый ОписаниеОповещения("ПустоеОповещение",ЭтотОбъект);
		ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки,Нстр("ru='Сначала заполните таблицу пунктов разгрузки';uk='Спочатку заповніть таблицю пунктів розвантаження'"));
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПустыеКонтрагенты() Тогда
		ОписаниеОповещениеПослеОшибки = Новый ОписаниеОповещения("ПустоеОповещение",ЭтотОбъект);
		ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки, Нстр("ru='Сначала заполните контрагентов в таблице пунктов разгрузки';uk='Спочатку заповніть контрагентів в таблиці пунктів розвантаження'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 тогда
		ОписаниеОповещениеПослеОшибки = Новый ОписаниеОповещения("ПустоеОповещение",ЭтотОбъект);
		ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки,Нстр("ru='Сначала заполните таблицу товаров';uk='Спочатку заповніть таблицю товарів'"));
		Возврат Истина;
	КонецЕсли;         
	
	Возврат Ложь;

КонецФункции


#КонецОбласти

#Область СозданиеАктов

&НаКлиенте
Процедура СоздатьАкты(Команда)
		
	Если ПроверкаЗаполненияДокументаНеПройдена() тогда
		Возврат;
	КонецЕсли;
	
	//СоздатьАктыНаСервере();
	//ек++
	СоздатьАктыНаСервереНовый();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьАктыНаСервереНовый()
	
	Для каждого Пункт из ОБъект.ПунктыРазгрузки Цикл
		
		Если АктУжеСозданРаннее(Пункт.Контрагент,Пункт.ПунктРазгрузки,Объект.Ссылка) тогда
			Продолжить;
		КонецЕсли;
		
		НовДок = Документы.ерпсАктПриемкиПередачиТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовДок,Объект,,"Номер");
		
		НовДок.ЗаявкаНаСозданиеАктовПриемкиПередачи = ОБъект.Ссылка;
		НовДок.Контрагент 		= Пункт.Контрагент;
		НовДок.Договор 			= Пункт.Договор;
		НовДок.Ответственный	= Пользователи.ТекущийПользователь();
		НовДок.ПунктРазгрузки	= Пункт.ПунктРазгрузки;
		НовДок.Дата 			= ?(ЗначениеЗаполнено(Пункт.ДатаОтгрузки),Пункт.ДатаОтгрузки,ТекущаяДата()); 
		//ек++
		//НовДок.Склад			= Объект.Склад;
		НовДок.Организация		= Пункт.Организация;
		НовДок.Склад			= Пункт.Склад;
		НовДок.ПериодОтгрузки	= Объект.ПериодОтгрузки;
		
		СтрокиКПереносу = Объект.Товары.НайтиСтроки(Новый Структура("ПунктРазгрузки",Пункт.ПунктРазгрузки));
		НовДок.Товары.Загрузить(Объект.Товары.Выгрузить(СтрокиКПереносу));
		
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура СоздатьАктыНаСервере()
	Для каждого Пункт из ОБъект.ПунктыРазгрузки Цикл
		
		Если АктУжеСозданРаннее(Пункт.Контрагент,Пункт.ПунктРазгрузки,Объект.Ссылка) тогда
			Продолжить;
		КонецЕсли;
		
		НовДок = Документы.ерпсАктПриемкиПередачиТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовДок,Объект,,"Номер");
		
		НовДок.ЗаявкаНаСозданиеАктовПриемкиПередачи = ОБъект.Ссылка;
		НовДок.Контрагент 		= Пункт.Контрагент;
		НовДок.Договор 			= Пункт.Договор;
		НовДок.Ответственный	= Пользователи.ТекущийПользователь();
		НовДок.ПунктРазгрузки	= Пункт.ПунктРазгрузки;
		НовДок.Дата 			= ТекущаяДата(); 
		НовДок.Склад			= Объект.Склад;
		
		СтрокиКПереносу = Объект.Товары.НайтиСтроки(Новый Структура("ПунктРазгрузки",Пункт.ПунктРазгрузки));
		НовДок.Товары.Загрузить(Объект.Товары.Выгрузить(СтрокиКПереносу));
		
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция АктУжеСозданРаннее(Контрагент,ПунктРазгрузки,ДокументСсылка, Организация = Неопределено)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ерпсАктПриемкиПередачиТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ерпсАктПриемкиПередачиТоваров КАК ерпсАктПриемкиПередачиТоваров
		|ГДЕ
		|	НЕ ерпсАктПриемкиПередачиТоваров.ПометкаУдаления
		|	И ерпсАктПриемкиПередачиТоваров.ПунктРазгрузки = &ПунктРазгрузки
		|	И ерпсАктПриемкиПередачиТоваров.Контрагент = &Контрагент
		|	И ерпсАктПриемкиПередачиТоваров.ЗаявкаНаСозданиеАктовПриемкиПередачи = &ЗаявкаНаСозданиеАктовПриемкиПередачи";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузки);
	Запрос.УстановитьПараметр("ЗаявкаНаСозданиеАктовПриемкиПередачи",ДокументСсылка);
	Если Не Организация = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "	И ерпсАктПриемкиПередачиТоваров.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура Утвердить(Команда)
	Объект.Утвержден = Не Объект.Утвержден;
	Элементы.Утвердить.Пометка = Объект.Утвержден;
	Элементы.ГруппаДатаНомер.ЦветФона = ?(Объект.Утвержден, WebЦвета.БледноЗеленый, WebЦвета.Белый);
КонецПроцедуры





 #КонецОбласти

