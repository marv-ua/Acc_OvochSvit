 
 
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьДоступностьЭлементовФормы();
	
	Элементы.Утвердить.Пометка = Объект.Утвержден;
	Элементы.ГруппаДатаНомер.ЦветФона = ?(Объект.Утвержден, WebЦвета.БледноЗеленый, WebЦвета.Белый);
	
	ЗаполнитьЗначенияПоУмолчанию();
	
	// Test{20230914
	Попытка
		//ЗаблокироватьДанныеФормыДляРедактирования();
		ЗаблокироватьДокументНаСервере();
	Исключение
		ОписаниеБлокировки = ОписаниеОшибки();
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецПопытки;
	// Test}
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтаФорма.ТолькоПросмотр Тогда
		ПоказатьОповещениеПользователя(
			Сред(ОписаниеБлокировки, СтрНайти(ОписаниеБлокировки, НСтр("ru = 'Объект уже заблокирован'; uk = 'Об’єкт вже заблокований'")), СтрДлина(ОписаниеБлокировки))
			,,, БиблиотекаКартинок.Внимание48, СтатусОповещенияПользователя.Важное, УникальныйИдентификатор
		);
	КонецЕсли;
	
	ВыделениеНоменклатурыИзменениеКоличества();
	
	//ПодключитьОбработчикОжидания("ОбновитьСтатусы", 30, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьДатуВывозаФакт();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// Test{20230914
	Попытка
		РазблокироватьДокументНаСервере();
	Исключение
	КонецПопытки;
	// Test}
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДокументНаСервере()
	
	Если объект.Ссылка.Пустая() тогда
		возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,, УникальныйИдентификатор);

КонецПроцедуры


&НаСервере
Процедура РазблокироватьДокументНаСервере()

	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);

КонецПроцедуры


&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыОбработки = ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(ТекущиеДанные);

	ТоварыНоменклатураПриИзмененииНаСервере(ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы)

	Если НЕ ДанныеСтрокиТаблицы.Свойство("Номенклатура") тогда
		Возврат;
	КонецЕсли;  
	
	Если ДанныеСтрокиТаблицы.Свойство("ЕдиницаИзмерения") тогда
		
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтрокиТаблицы.Номенклатура,"БазоваяЕдиницаИзмерения");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Номенклатура) 
		И ДанныеСтрокиТаблицы.Свойство("ДополнительныеАртикулы") Тогда
		ДанныеСтрокиТаблицы.ДополнительныеАртикулы = Справочники.ДополнительныеАртикулы.НайтиАртикул(ДанныеСтрокиТаблицы.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТоварыКоличествоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПунктРазгрузкиПриИзменении(Элемент)
	ЗаполнитьКонтактнымиДаннымиНаСервере(Элементы.ПунктыРазгрузки.ТекущаяСтрока);
	
	ТекДанные = Элементы.ПунктыРазгрузки.ТекущиеДанные;
	ТЧТоварыИзменитьПунктОтгрузки(ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки, ТекДанные.Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнымиДаннымиНаСервере(ТекущаяСтрока)
	Об = РеквизитФормыВЗначение("Объект");
	ЗаполнитьКонтактнымиДанными(Объект.ПунктыРазгрузки.НайтиПоИдентификатору(ТекущаяСтрока).Идентификатор, Об);
	ЗначениеВРеквизитФормы(Об, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиВодительПриИзменении(Элемент)
	ПунктыРазгрузкиВодительПриИзмененииНаСервере(Элементы.ПунктыРазгрузки.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПунктыРазгрузкиВодительПриИзмененииНаСервере(Эл)
	Об = РеквизитФормыВЗначение("Объект"); 
	Попытка
		ИдентификаторСтроки = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Эл).Идентификатор;
	Исключение
	КонецПопытки;
	ЗаполнитьДаннымиСотрудника(Эл, Об, ИдентификаторСтроки);                                                 

	ЗначениеВРеквизитФормы(Об, "Объект");
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьПунктыРазгрузки(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОбновленияТаблицыПунктыРазгрузки", ЭтотОбъект),
		НСтр("ru = 'Обновить данные в таблице из таблицы Товары?'; uk = 'Оновити дані в таблиці з таблиці Товари?'"),
		РежимДиалогаВопрос.ДаНет,
	);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявку(Команда)

	СтруктураПараметров = Новый Структура;
	
	ЗаголовокВыбора = НСтр("ru = 'Выберите настройку загрузки'; uk = 'Оберіть налаштування завантаження'");
	ОповещениеВыбор = Новый ОписаниеОповещения("ОкончаниеВыбораНастройкиЗагрузки", ЭтотОбъект, СтруктураПараметров);
	
	ПоказатьВводЗначения(ОповещениеВыбор,
		ПредопределенноеЗначение("Справочник.а_НастройкиЗагрузкиЗаявок.ПустаяСсылка"),
		ЗаголовокВыбора,
		Тип("СправочникСсылка.а_НастройкиЗагрузкиЗаявок")
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура Обработано(Команда)
	
	ВыделенныеСтроки = Неопределено;
	ТекТЧ = "ПунктыРазгрузки";	
	ТабЧасть = "Товары";
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПунктыРазгрузки Тогда
		ТекТЧ = "ПунктыРазгрузки";
		ТабЧасть = "Товары";
		ВыделенныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	Иначе
		ТекТЧ = "Товары";
		ТабЧасть = "ПунктыРазгрузки";
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект[ТекТЧ].НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда
			УстановитьОбработаноНаСервере(ТабЧасть, ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки, ТекДанные.Идентификатор, Не ТекДанные.Обработано);
			ТекДанные.Обработано = Не ТекДанные.Обработано;
		КонецЕсли;
	КонецЦикла;
	
	
	//Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПунктыРазгрузки Тогда
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаСоздатьЗаказНаСБоркуЗавершение", ЭтотОбъект, Элементы.ПунктыРазгрузки.ВыделенныеСтроки),
	//		НСтр("ru = 'Создать заказ на сборку?'; uk = 'Створити замовлення на збірку?'"),
	//		РежимДиалогаВопрос.ДаНет,
	//		,
	//		,
	//	);
	//КонецЕсли; 
	
	М = Новый Массив;
	Для Каждого С Из Элементы.ПунктыРазгрузки.ВыделенныеСтроки Цикл	
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(С);
		Состояние(СтрШаблон("%1 от %2", ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки));
		Если Не ТекДанные = Неопределено Тогда
			Если ТекДанные.Обработано Тогда
				ОбновлениеДокумента = Ложь;
				СоздатьЗаказНаСборкуНаСервере(ТекДанные.Идентификатор, ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки, ТекДанные.ЗаказНаЗборку, ОбновлениеДокумента); 
				Если ОбновлениеДокумента Тогда
					М.Добавить(ТекДанные.ЗаказНаЗборку);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если М.Количество() Тогда
		ПоказатьПредупреждение(,
			"Замовлення на збирання які вже зібрані НЕ було оновлено, треба повідомити комірника зоб було знято признак ЗІБРАН" + Символы.ПС +Символы.ПС + СтрСоединить(М, Символы.ПС),
			,
			"Замовлення на збирання вже ЗІБРАНІ"
		);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявкиПоВодителю(Команда)
	
	ТекДанные = Элементы.ИтогиПоВодителям.ТекущиеДанные;
	ТабДок = ПечатьЗаявкиНаСервере(ТекДанные.Водитель, ТекДанные.Авто,ТекДанные.ДатаОтгрузки);
	ТабДок.Показать("Заявка_"+СокрЛП(ТекДанные.Водитель));
		
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРНПоВодителю(Команда)

	ТекДанные = Элементы.ИтогиПоВодителям.ТекущиеДанные;
	ТабДок = ПечатьРННаСервере(ТекДанные.Водитель, ТекДанные.Авто,, ТекДанные.ДатаОтгрузки);
	ТабДок.Показать("РН_"+СокрЛП(ТекДанные.Водитель)+"_"+СокрЛП(ТекДанные.Авто));

КонецПроцедуры

&НаКлиенте
Процедура ПечатьАктОтгрузкиПоВодителю(Команда)

	ТекДанные = Элементы.ИтогиПоВодителям.ТекущиеДанные;
	ТабДок = ПечатьАктОтгрузкиНаСервере(ТекДанные.Водитель, ТекДанные.Авто,, ТекДанные.ДатаОтгрузки);
	ТабДок.Показать("РН_"+СокрЛП(ТекДанные.Водитель)+"_"+СокрЛП(ТекДанные.Авто));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДекларацииПоставщиков(Команда)
	
	ТекДанные = Элементы.ИтогиПоВодителям.ТекущиеДанные;
	ТабДок = ПечатьДекларацииНаСервере(ТекДанные.Водитель, ТекДанные.Авто,, ТекДанные.ДатаОтгрузки);
	ТабДок.Показать("РН_"+СокрЛП(ТекДанные.Водитель)+"_"+СокрЛП(ТекДанные.Авто));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРНПоПР(Команда)
	
	ВыбранныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	Массив = Новый Массив;
	Для Каждого Эл Из ВыбранныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Эл);
		Если Не ТекДанные = Неопределено Тогда
			Массив.Добавить(ТекДанные.ПунктРазгрузки);                    
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
	
	Если Массив.Количество() Тогда
		ТабДок = ПечатьРННаСервере(,, Массив);
		ТабДок.Показать("РН_"+СокрЛП(ТекДанные.Водитель)+"_"+СокрЛП(ТекДанные.Авто));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьТТНПоВодителю(Команда)
	ТекДанные = Элементы.ИтогиПоВодителям.ТекущиеДанные;
	ТабДок = ПечатьТТТННаСервере(ТекДанные.Водитель, ТекДанные.Авто,, ТекДанные.ДатаОтгрузки);
	ТабДок.Показать("РН_"+СокрЛП(ТекДанные.Водитель)+"_"+СокрЛП(ТекДанные.Авто));
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТТНПоВодителюБезЦен(Команда)
	
	ТекДанные = Элементы.ИтогиПоВодителям.ТекущиеДанные;
	ТабДок = ПечатьТТТННаСервере(ТекДанные.Водитель, ТекДанные.Авто,, ТекДанные.ДатаОтгрузки, Истина);
	ТабДок.Показать("РН_"+СокрЛП(ТекДанные.Водитель)+"_"+СокрЛП(ТекДанные.Авто));
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТТНПоПР(Команда)
	
	ВыбранныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	Массив = Новый Массив;
	Для Каждого Эл Из ВыбранныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Эл);
		Если Не ТекДанные = Неопределено Тогда
			Массив.Добавить(ТекДанные.ПунктРазгрузки);                    
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
	
	Если Массив.Количество() Тогда
		ТабДок = ПечатьТТТННаСервере(,, Массив);
		ТабДок.Показать("РН_"+СокрЛП(ТекДанные.Водитель)+"_"+СокрЛП(ТекДанные.Авто));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьТТТННаСервере(Водитель = Неопределено, Авто = Неопределено, ПунктРазгрузки = Неопределено, ДатаВывоза = Неопределено, БезЦен = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	МассивОбъектов = ПолучитьРНПоЗаявке(Водитель, Авто, ПунктРазгрузки, ДатаВывоза);
	
	Если Не МассивОбъектов.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Незнайдено документів реалізації по водію "+ Водитель);
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомлпектВодителю";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПараметрыПечати = ПодготовитьПараметрыПечати(
		Новый Структура("ОбъектыПечати,Форма,Идентификатор", МассивОбъектов, Неопределено, Новый УникальныйИдентификатор), БезЦен
	);
	
	ТабличныйДокумент = Обработки.ПечатьТТН.ПечатьНесколькихТТН(ПараметрыПечати, Новый СписокЗначений, МассивОбъектов);
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.Нет;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьПараметрыПечати(ОписаниеКоманды, БезЦен)
	
	ПараметрКоманды    = ОписаниеКоманды.ОбъектыПечати;
	ВладелецФормы      = ОписаниеКоманды.Форма;
	
	// Проверим количество объектов, допустима печать только одного документа
	Если ТипЗнч(ПараметрКоманды) <> Тип("Массив") ИЛИ ПараметрКоманды.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получим ключ уникальности открываемой формы
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	Счетчик = 0;

	ПараметрыПечати = Новый Структура;
	Для каждого Элемент из ПараметрКоманды цикл
		ПараметрыОткрытия = Новый Структура("Документ", ПараметрКоманды[Счетчик]);
		ПараметрыОткрытия.Вставить("Идентификатор", ОписаниеКоманды.Идентификатор);
		//ФормаТТН = ПолучитьФорму("Обработка.ПечатьТТН.Форма.Форма", ПараметрыОткрытия, ВладелецФормы);
		
		стрСчетчик = Формат(Счетчик, "ЧГ=");
		  
		ПараметрыПечати.Вставить("Документ"+стрСчетчик, Элемент);
		ПараметрыПечати.Вставить("МаркаИГосНомерАвтомобиля"+стрСчетчик, Элемент.Авто);
		ПараметрыПечати.Вставить("ГосНомерПрицепа"+стрСчетчик, Элемент.Прицеп);
		ПараметрыПечати.Вставить("ПунктПогрузки"+стрСчетчик, Элемент.ерпсПунктПогрузки);
		ПараметрыПечати.Вставить("ПунктРазгрузки"+стрСчетчик,Элемент.ПунктРазгрузки);
		ПараметрыПечати.Вставить("Водитель"+стрСчетчик, СокрЛП(Элемент.Водитель));
		ПараметрыПечати.Вставить("Перевозчик"+стрСчетчик, Элемент.ЕРПСПеревозчик);
		ПараметрыПечати.Вставить("ВидПеревозки"+стрСчетчик, "за кілометровим тарифом");
		ПараметрыПечати.Вставить("ЗаголовокФормы"+стрСчетчик,Элемент);
		ПараметрыПечати.Вставить("НомерТТН"+стрСчетчик, "Р"+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Элемент.Номер));
		ПараметрыПечати.Вставить("ТипЦен"+стрСчетчик, Элемент.ТипЦен);
		ПараметрыПечати.Вставить("УпрощеннаяТТН"+стрСчетчик, Истина);
		ПараметрыПечати.Вставить("БезЦен"+стрСчетчик, БезЦен);
		ПараметрыПечати.Вставить("ПечатьНескольких", "ПечатьНескольких"); 
		ПараметрыПечати.Вставить("УпрощеннаяТТН", Истина);

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Функция ПечатьДекларацииНаСервере(Водитель = Неопределено, Авто = Неопределено, ПунктРазгрузки = Неопределено, ДатаВывоза = Неопределено)
	
	ТПунктыРазгрузки = Объект.ПунктыРазгрузки.Выгрузить();
	ТТовары = Объект.Товары.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ Т.* ПОМЕСТИТЬ ВТПунктыРазгрузки Из &Таб КАК Т";
	Запрос.УстановитьПараметр("Таб", ТПунктыРазгрузки);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ Т.* ПОМЕСТИТЬ ВТТовары Из &Таб КАК Т";
	Запрос.УстановитьПараметр("Таб", ТТовары);
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Т.Идентификатор КАК Идентификатор
	             //  |ПОМЕСТИТЬ ВТИдентификаторы
	               |ИЗ
	               |	ВТПунктыРазгрузки КАК Т
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА Т.ДатаВывозаФакт = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА Т.ДатаОтгрузки
	               |			ИНАЧЕ Т.ДатаВывозаФакт
	               |		КОНЕЦ = &ДатаВывоза
	               |	И ВЫБОР
	               |			КОГДА Т.ВодительФакт = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |				ТОГДА Т.Водитель
	               |			ИНАЧЕ Т.ВодительФакт
	               |		КОНЕЦ = &Водитель
	               |	И ВЫБОР
	               |			КОГДА Т.АвтоФакт = ЗНАЧЕНИЕ(Справочник.Авто.ПустаяСсылка)
	               |				ТОГДА Т.Авто
	               |			ИНАЧЕ Т.АвтоФакт
	               |		КОНЕЦ = &Авто
	               |";
				   
	Запрос.УстановитьПараметр("ДатаВывоза", ДатаВывоза);
	Запрос.УстановитьПараметр("Водитель", Водитель);
	Запрос.УстановитьПараметр("Авто", Авто);				   
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	
	Для Каждого Ид Из ТЗ Цикл
		
		ОбщегоНазначенияСервер.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, "ВТНоменклатура", Истина);
		
		Запрос.УстановитьПараметр("Идентификатор", Ид.Идентификатор);
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	Т.Номенклатура КАК Номенклатура,
		               |	Т.ДополнительныеАртикулы КАК ДополнительныеАртикулы,
		               |	Т.Идентификатор КАК Идентификатор
		               |ПОМЕСТИТЬ ВТНоменклатура
		               |ИЗ
		               |	ВТТовары КАК Т
		               |ГДЕ
					   //|	Т.Идентификатор В
					   //|			(ВЫБРАТЬ
					   //|				ТТ.Идентификатор
					   //|			ИЗ
					   //|				ВТИдентификаторы КАК ТТ)
					   |	Т.Идентификатор = &Идентификатор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Т.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.а_ДекларацияПоставщика.Товары КАК Т
		               |ГДЕ
		               |	Т.ДополнительныеАртикулы В
		               |			(ВЫБРАТЬ
		               |				ТТ.ДополнительныеАртикулы
		               |			ИЗ
		               |				ВТНоменклатура КАК ТТ)
		               |	И НАЧАЛОПЕРИОДА(Т.Ссылка.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(&ДатаВывоза, НЕДЕЛЯ)";

		Таб = Запрос.Выполнить().Выгрузить();
		ТабДокИД = Документы.а_ДекларацияПоставщика.ПечатьДекларацииПоставщика(Таб.ВыгрузитьКолонку("Ссылка"), Новый СписокЗначений, "");
		
		ВывестиРазделитель = Ложь;
		Если Не ТабДок.ПроверитьВывод(ТабДокИД) Тогда
			ВывестиРазделитель = Истина;
		КонецЕсли;
		ТабДок.Вывести(ТабДокИД);
		Если ВывестиРазделитель Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		

	КонецЦикла;
	//Таб = Запрос.Выполнить().Выгрузить();
	//
	//Возврат Документы.а_ДекларацияПоставщика.ПечатьДекларацииПоставщика(Таб.ВыгрузитьКолонку("Ссылка"), Новый СписокЗначений, "");
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ПечатьАктОтгрузкиНаСервере(Водитель = Неопределено, Авто = Неопределено, ПунктРазгрузки = Неопределено, ДатаВывоза = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомлпектВодителю";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	МассивРН = ПолучитьРНПоЗаявке(Водитель, Авто, ПунктРазгрузки, ДатаВывоза);
	
	
	Для Каждого Эл Из МассивРН Цикл
		ТабДок = Документы.РеализацияТоваровУслуг.ПечатьАктаОтгрузки(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Эл),
			Новый СписокЗначений,
			УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода()
		);
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//Если ТабличныйДокумент.ПроверитьВывод(ТабДок) Тогда
			ТабличныйДокумент.Вывести(ТабДок);
		//Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ТабДок);
		//КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПечатьРННаСервере(Водитель = Неопределено, Авто = Неопределено, ПунктРазгрузки = Неопределено, ДатаВывоза = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КомлпектВодителю";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	МассивРН = ПолучитьРНПоЗаявке(Водитель, Авто, ПунктРазгрузки, ДатаВывоза);
	
	
	Для Каждого Эл Из МассивРН Цикл
		ТабДок = Документы.РеализацияТоваровУслуг.ПечатьДокументаБезЦен(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Эл),
			Новый СписокЗначений,
			УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода()
		);
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//Если ТабличныйДокумент.ПроверитьВывод(ТабДок) Тогда
			ТабличныйДокумент.Вывести(ТабДок);
		//Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ТабДок);
		//КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПолучитьРНПоЗаявке(Водитель = Неопределено, Авто = Неопределено, ПунктРазгрузки = Неопределено, ДатаВывоза = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Идентификатор КАК Идентификатор,
	               |	ВЫБОР
	               |		КОГДА Т.ВодительФакт = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |			ТОГДА Т.Водитель
	               |		ИНАЧЕ Т.ВодительФакт
	               |	КОНЕЦ КАК Водитель,
	               |	ВЫБОР
	               |		КОГДА Т.АвтоФакт = ЗНАЧЕНИЕ(Справочник.Авто.ПустаяСсылка)
	               |			ТОГДА Т.Авто
	               |		ИНАЧЕ Т.АвтоФакт
	               |	КОНЕЦ КАК Авто,
	               |	ВЫБОР
	               |		КОГДА Т.ДатаВывозаФакт = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА Т.ДатаОтгрузки
	               |		ИНАЧЕ Т.ДатаВывозаФакт
	               |	КОНЕЦ КАК ДатаВывоза,
	               |	Т.ПунктРазгрузки КАК ПунктРазгрузки
	               |ПОМЕСТИТЬ ВТТаб
	               |ИЗ
	               |	&Таб КАК Т
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Т.Идентификатор КАК Идентификатор,
	               |	Т.Водитель КАК Водитель,
	               |	Т.Авто КАК Авто,
	               |	Т.ДатаВывоза КАК ДатаВывоза,
	               |	Т.ПунктРазгрузки КАК ПунктРазгрузки,
	               |	РН.Ссылка КАК РН
	               |ИЗ
	               |	ВТТаб КАК Т
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РН
	               |		ПО (РН.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаВывоза, ДЕНЬ, -10) И ДОБАВИТЬКДАТЕ(&ДатаВывоза, ДЕНЬ, 10))
	               |			И Т.Идентификатор = РН.Идентификатор
	               |			И (РН.Проведен)
	               |ГДЕ
	               |	Т.Водитель = &Водитель
	               |	И Т.Авто = &Авто
	               |	И Т.ПунктРазгрузки В(&ПунктРазгрузки)
	               |	И НАЧАЛОПЕРИОДА(Т.ДатаВывоза, ДЕНЬ) = &ДатаВывоза";
	
	
	
				   //|ВЫБРАТЬ
				   //|	РН.Ссылка КАК РН,
				   //|	Акт.Ссылка КАК Акт,
				   //|	Заявка.Ссылка КАК Заявка,
				   //|	РН.ПунктРазгрузки КАК ПунктРазгрузки
				   //|ИЗ
				   //|	Документ.РеализацияТоваровУслуг КАК РН
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ерпсАктПриемкиПередачиТоваров КАК Акт
				   //|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи КАК Заявка
				   //|			ПО Акт.ЗаявкаНаСозданиеАктовПриемкиПередачи = Заявка.Ссылка
				   //|		ПО РН.ерпсАктПриемкиПередачи = Акт.Ссылка
				   //|ГДЕ
				   //|	Заявка.Ссылка = &Ссылка
				   //|	И РН.Проведен
				   //|	И РН.Водитель = &Водитель
				   //|	И РН.ПунктРазгрузки В(&ПунктРазгрузки)
				   //|	И РН.Авто = &Авто
				   //|	И НАЧАЛОПЕРИОДА(РН.Дата, ДЕНЬ) = &ДатаВывоза";
	Запрос.УстановитьПараметр("Таб", Объект.ПунктыРазгрузки.Выгрузить());
	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Если Не ЗначениеЗаполнено(Водитель) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Водитель = &Водитель", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Водитель", Водитель);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Авто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Авто = &Авто", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("Авто", Авто);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПунктРазгрузки) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ПунктРазгрузки В(&ПунктРазгрузки)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузки);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаВывоза) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА(Т.ДатаВывоза, ДЕНЬ) = &ДатаВывоза", "ИСТИНА");
		Запрос.УстановитьПараметр("ДатаВывоза", Объект.Дата);
	Иначе
		Запрос.УстановитьПараметр("ДатаВывоза", ДатаВывоза);
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РН"));
	
КонецФункции

&НаКлиенте
Процедура ПечатьЗаказНаСборку(Команда)
	
	ВыбранныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	Массив = Новый Массив;
	МассивВ = Новый Массив;
	МассивА = Новый Массив;
	Для Каждого Эл Из ВыбранныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Эл);
		Если Не ТекДанные = Неопределено Тогда
			Массив.Добавить(ТекДанные.ПунктРазгрузки);                    
			МассивВ.Добавить(ТекДанные.Водитель);
			МассивА.Добавить(ТекДанные.Авто);
		КонецЕсли;
	КонецЦикла;
	
	Если Массив.Количество() Тогда
		ТабДок = ПечатьЗаявкуНаСборкуНаСервере(Массив, МассивВ, МассивА);
		ТабДок.Показать("Заказ на сборку");
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявка(Команда)
	
	ВыбранныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	Массив = Новый Массив;
	Для Каждого Эл Из ВыбранныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Эл);
		Если Не ТекДанные = Неопределено Тогда
			Массив.Добавить(Новый Структура("ПунктРазгрузки, Водитель", ТекДанные.ПунктРазгрузки, ТекДанные.Водитель));                    
		КонецЕсли;
	КонецЦикла;
	
	Если Массив.Количество() Тогда
		ТабДок = ПечатьЗаявкуНаСервере(Массив);
		ТабДок.Показать("Заявка по пунктам розвантаження");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявки(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаСозданиеЗаявкиЗавершение", ЭтотОбъект),
		НСтр("ru = 'Создать заявку на основании текущей с распределением по датам вывоза?'; uk = 'Створити заявку на підставі поточної з розподіленням по датах вивозу?'"),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да,
		,
	);
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьЗаявки1(Команда)

	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необхідно записати документ");
		Возврат;
	КонецЕсли;
	
	МассивРегионов = ПолучитьМассивРегионов();
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаСозданиеЗаявкиЗавершение", ЭтотОбъект, Новый Структура("ПоПериодамОтгрузки,МассивРегионов", Истина, МассивРегионов)),
		НСтр("ru = 'ВНИМАНИЕ!
              |Создать заявку на основании текущей с распределением по периоду отгрузки?'; uk = 'УВАГА!
              |Створити заявку на підставі поточної з розподіленням по періоду відвантаження?'"),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да,
		,
	);
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиВНовуюЗаявку(Команда)

	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Збережіть документ, операція не виконана",,,,);
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаВыделениеЗаявкиЗавершение", ЭтотОбъект),
			НСтр("ru = 'Выделить выбранные строки в отдельные заявки?'; uk = 'Виділити обрані строки в окремі заявки?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			,
		);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПередУдалением(Элемент, Отказ)
	
	//ТекДанные = Элементы.ПунктыРазгрузки.ТекущиеДанные;
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Збережіть документ, видалення не виконано",,,, Отказ);
	Иначе
		Для Каждого ТекСтрока Из Элементы.ПунктыРазгрузки.ВыделенныеСтроки Цикл
			ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(ТекСтрока);
			ТЧТоварыУдалитьНаСервере(ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки, ТекДанные.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПунктыРазгрузкиДатаОтгрузкиПриИзменении(Элемент)

	ТекДанные = Элементы.ПунктыРазгрузки.ТекущиеДанные;
	ТЧТоварыИзменитьДатуОтгрузки(ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки, ТекДанные.Идентификатор);	

КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элементы.ПунктыРазгрузки.ТекущиеДанные;
	ДатаВывозаДоИзменения = ТекДанные.ДатаОтгрузки;
	ПунктРазгрузкиДоИзменения = ТекДанные.ПунктРазгрузки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект)
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти    //СлужебныеПроцедурыИФункцииБСП

#Область СлужебныеПроцедурыИФункции
&НаКлиенте 
Процедура ПослеЗакрытияВопросаВыделениеЗаявкиЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивУдаляемыхСтрок = Новый Массив;
		Результат = СоздатьЗаявкуНаСервере();
		Для Каждого ТекСтрока Из Элементы.ПунктыРазгрузки.ВыделенныеСтроки Цикл
			
			//Результат = СоздатьЗаявкуНаСервере(ТекСтрока);
			Если ЗначениеЗаполнено(Результат) Тогда 
				ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(ТекСтрока);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Створено документ: "+ СокрЛП(Результат), Результат,,,);
				ТЧТоварыУдалитьНаСервере(ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки, ТекДанные.Идентификатор);
				МассивУдаляемыхСтрок.Добавить(ТекСтрока);
				//Объект.ПунктыРазгрузки.Удалить(ТекСтрока);
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ТоварыКоличествоПриИзмененииНаСервере();
		//УдалитьСтрокуПунктаНаСервере(МассивУдаляемыхСтрок);
		
	КонецЕсли;

КонецПроцедуры

//&НаСервере
//Процедура УдалитьСтрокуПунктаНаСервере(МассивУдаляемыхСтрок)
//	
//	Т = Новый ТаблицаЗначений;
//	Т.Колонки.Добавить("Номер");
//	Для Каждого Эл Из МассивУдаляемыхСтрок Цикл
//		НоваяСтрока = Т.Добавить();
//		НоваяСтрока.Номер = Эл;
//	КонецЦикла;
//	
//	Т.Сортировать("Номер Убыв");
//	
//	Для Каждого Стр Из Т Цикл
//		Объект.ПунктыРазгрузки.Удалить(Стр);
//	КонецЦикла;
//	
//КонецПроцедуры
	
	
&НаКлиенте 
Процедура ПослеЗакрытияВопросаСозданиеЗаявкиЗавершение(Результат, ДопПараметры) Экспорт
	
	ДопПараметры.Вставить("СоответствиеРегионов", Новый Соответствие);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			Если ДопПараметры.Свойство("МассивРегионов") Тогда
				Для Каждого Регион Из ДопПараметры.МассивРегионов Цикл
					//ДопПараметры.Вставить("Регион", Регион);
					ДопПараметры.СоответствиеРегионов.Вставить(Регион, Неопределено);
					//ОписаниеВыбора = Новый ОписаниеОповещения("ПослеВыбораЗаявкиЗавершение", ЭтотОбъект, ДопПараметры);
					//ОткрытьФорму("Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ФормаВыбора",
					//    ПолучитьПараметрыВыбораЗаявкиНаСервере(Регион),
					//	ЭтотОбъект,
					//	,,,
					//	ОписаниеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
					//);

				КонецЦикла;
				
				Для Каждого Регион Из ДопПараметры.СоответствиеРегионов Цикл
					ВыбратьЗаявкуРаспределения(Регион.Ключ, ДопПараметры);
				КонецЦикла;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// старый механизм по датам
	   	Успешно = Ложь;
		СоздатьЗаявкиНаСервере(Успешно, ДопПараметры);
		ПоказатьОповещениеПользователя("Завершено",,, ?(Успешно, БиблиотекаКартинок.Успешно32, БиблиотекаКартинок.Ошибка32));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаявкуРаспределения(Регион, ДопПараметры)
	
	ОписаниеВыбора = Новый ОписаниеОповещения("ПослеВыбораЗаявкиЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ФормаВыбора",
	    ПолучитьПараметрыВыбораЗаявкиНаСервере(Регион, ДопПараметры),
		ЭтотОбъект,
		,,,
		ОписаниеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);

КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыВыбораЗаявкиНаСервере(Регион, ДопПараметры)
	Возврат Новый Структура("ИмяФормы,МножественныйВыбор,Регион,Основание,РежимВыбора,ДопПараметры",
		"Вибір заявки для регіону "+ Регион,
		Ложь,
		Регион,
		Объект.Ссылка,
		Истина,
		ДопПараметры
	);
КонецФункции
	
&НаКлиенте
Процедура ПослеВыбораЗаявкиЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Успешно = Ложь;
		ПоказатьОповещениеПользователя("Створення заявки по регіону "+ Результат.Регион,, Результат,,,);	
		СоздатьЗаявкиНаСервере(Успешно, ДопПараметры, Результат.Регион, Результат.Ссылка);
		ПоказатьОповещениеПользователя("Завершено",,Результат.Регион, ?(Успешно, БиблиотекаКартинок.Успешно32, БиблиотекаКартинок.Ошибка32));
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаявкуНаСервере()
	//ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(ТекСтрока);
	//Если ТекДанные = Неопределено Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Об = Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(Об, Объект,, "Ответственный,Номер,Комментарий,Регион,ДокументОснования");
	
	Для Каждого ТекСтрока Из Элементы.ПунктыРазгрузки.ВыделенныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(ТекСтрока);
		
		НоваяСтрока = Об.ПунктыРазгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
		НоваяСтрока.ДатаОтгрузки = ?(ЗначениеЗаполнено(ТекДанные.ДатаВывозаФакт), ТекДанные.ДатаВывозаФакт, ТекДанные.ДатаОтгрузки);
		НоваяСтрока.Авто = ?(ЗначениеЗаполнено(ТекДанные.АвтоФакт), ТекДанные.АвтоФакт, ТекДанные.Авто);
		НоваяСтрока.Водитель = ?(ЗначениеЗаполнено(ТекДанные.ВодительФакт), ТекДанные.ВодительФакт, ТекДанные.Водитель);
		НоваяСтрока.Прицеп = ?(ЗначениеЗаполнено(ТекДанные.ПрицепФакт), ТекДанные.ПрицепФакт, ТекДанные.Прицеп);
		НоваяСтрока.Перевозчик = ?(ЗначениеЗаполнено(ТекДанные.ПеревозчикФакт), ТекДанные.ПеревозчикФакт, ТекДанные.Перевозчик);
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("ПунктРазгрузки", ТекДанные.ПунктРазгрузки);
		Запрос.УстановитьПараметр("ДатаОтгрузки", ТекДанные.ДатаОтгрузки);
		Запрос.УстановитьПараметр("Идентификатор", ТекДанные.Идентификатор);
		Запрос.Текст = "ВЫБРАТЬ 
		|	Таб.* 
		|ПОМЕСТИТЬ ВТТаб
		|ИЗ &Таб КАК Таб
		|;
		|ВЫБРАТЬ  
		|	Т.*, ТТ.Номенклатура 
		|ИЗ ВТТаб КАК Т
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТТаб КАК ТТ
		|ПО ТТ.НомерСтроки = Т.НомерСтроки
		|	И ТТ.ПунктРазгрузки = &ПунктРазгрузки
		|	И ТТ.ДатаОтгрузки = &ДатаОтгрузки
		|	И ТТ.Идентификатор = &Идентификатор
		|ГДЕ
		|	НЕ ТТ.Номенклатура is null	
		|"; 
		
		Т = Запрос.Выполнить().Выгрузить();
		Для Каждого Стр Из Т Цикл
			Стр.ДатаОтгрузки = ?(ЗначениеЗаполнено(ТекДанные.ДатаВывозаФакт), ТекДанные.ДатаВывозаФакт, ТекДанные.ДатаОтгрузки);
		КонецЦикла;
		ТДок = Об.Товары.Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Т, ТДок);
		
		Об.Товары.Загрузить(ТДок);
	КонецЦикла;
	
	Попытка
		Об.Записать(РежимЗаписиДокумента.Запись);
		Возврат Об.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура СоздатьЗаявкиНаСервере(Успешно, ДопПараметры, Регион = Неопределено, Ссылка = Неопределено)
	
	ПоПериодамОтгрузки = Ложь;
	ЭтоНовый = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ПоПериодамОтгрузки") Тогда
			ПоПериодамОтгрузки = ДопПараметры.ПоПериодамОтгрузки;
		КонецЕсли;
	КонецЕсли;
		
	
	
	Успешно = Истина;
	МассивОбъектов = Новый Массив;
	МассивОбъектовДляЗаписи = Новый Массив;
	
	тзРодитель = Новый ТаблицаЗначений;
	Если ЗначениеЗаполнено(Регион) Тогда
		тзРодитель = Объект.ПунктыРазгрузки.Выгрузить(Новый Структура("Регион", Регион));
	Иначе
		тзРодитель = Объект.ПунктыРазгрузки.Выгрузить();
	КонецЕсли;

		
	
	// Test{20230911
	// добавляем фильтр по складу, если склад не заполнен - нельзя использовать
	// Test}
	тзРодитель.Свернуть("ДатаОтгрузки,ДатаВывозаФакт,ПунктРазгрузки,Регион,Идентификатор");
	
	тзТовары = Объект.Товары.Выгрузить(); 
	// в товары доставляем дату откгрузки если необходимо (по идее уже не актуально так как дата подставляется на этапе первоначального заполнения документа)
	Для Каждого СтрокаТовары Из тзТовары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки) Тогда
			Попытка
				СтрокаТовары.ДатаОтгрузки = тзРодитель.НайтиСтроки(Новый Структура("ПунктРазгрузки", СтрокаТовары.ПунктРазгрузки))[0].ДатаОтгрузки;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	// проверяем на путую дату
	МассивСтрок = тзТовары.НайтиСтроки(Новый Структура("ДатаОтгрузки", Дата(1,1,1)));
	Если МассивСтрок.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось однозначно определить дату вывоза товара, документы созданы не будут'; uk = 'Не вдалося однозначно визначити дату вивозу товару, документи створені не будуть'"));
		Успешно = Ложь;
		Возврат;
	КонецЕсли;
	
	тзДатаПунктРегионСклад = тзРодитель.Скопировать();
	// убрал склад, так как теперь пересекаемость заявок контролируется регионом
	тзРодитель.Свернуть("ДатаОтгрузки,ДатаВывозаФакт,Регион,Идентификатор");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Об = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого СтрокаРодитель Из тзРодитель Цикл
		Если Не ЗначениеЗаполнено(СтрокаРодитель.ДатаОтгрузки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана дата отгрузки, по данной строке документ создан не будет'; uk = 'Не вказано рядок, за даним рядком документ створено не буде'"));
			Успешно = Ложь;
			Продолжить;
		КонецЕсли;
		//Если Не ЗначениеЗаполнено(СтрокаРодитель.Склад) Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен склад, по данной строке документ создан не будет'; uk = 'Не вказано склад, за даним рядком документ створено не буде'"));
		//	Успешно = Ложь;
		//	Продолжить;
		//КонецЕсли;		
		
		// Test{20230904
		// Поиск документа и дополнение данных в конец
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			//Об = Ссылка.ПолучитьОбъект();
		Иначе
			
			Об = Неопределено;
			
			Запрос = Новый Запрос;
			Если ПоПериодамОтгрузки Тогда
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				               |	Док.Ссылка КАК Ссылка,
				               |	Док.Дата КАК Дата,
				               |	Док.Регион КАК Регион
				               |ИЗ
				               |	Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи КАК Док
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ЗаявкиКВывозу КАК а_ЗаявкиКВывозу
				               |		ПО Док.Ссылка = а_ЗаявкиКВывозу.Объект
				               |ГДЕ
				               |	НЕ Док.ПометкаУдаления
				               |	И Док.Регион = &Регион
				               |	И Док.Ссылка <> &Ссылка
				               |	И НЕ а_ЗаявкиКВывозу.Объект ЕСТЬ NULL";
				
				Запрос.УстановитьПараметр("Регион", СтрокаРодитель.Регион);
				Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);				
			Иначе	
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				               |	Док.Ссылка КАК Ссылка,
				               |	Док.Дата КАК Дата,
				               |	Док.Регион КАК Регион
				               |ИЗ
				               |	Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи КАК Док
				               |ГДЕ
				               |	НЕ Док.ПометкаУдаления
				               |	И НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
				               |	И Док.Регион = &Регион
				               |	И Док.Ссылка <> &Ссылка";
				Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(СтрокаРодитель.ДатаВывозаФакт), СтрокаРодитель.ДатаВывозаФакт, СтрокаРодитель.ДатаОтгрузки));
				Запрос.УстановитьПараметр("Регион", СтрокаРодитель.Регион);
				Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			КонецЕсли;

			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокСсылка = Выборка.Ссылка;
				Об = ДокСсылка.ПолучитьОбъект();
			Иначе
				Об = Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.СоздатьДокумент();
				
				ЭтоНовый = ПоПериодамОтгрузки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Об, Объект,, "Ответственный,Дата,Номер,Комментарий,Регион");
			
			Об.Дата = ?(ЗначениеЗаполнено(СтрокаРодитель.ДатаВывозаФакт), СтрокаРодитель.ДатаВывозаФакт, СтрокаРодитель.ДатаОтгрузки);
			Об.Регион = СтрокаРодитель.Регион;

		КонецЕсли;
		// Test}
			
		Об.ДокументОснования = Объект.Ссылка;

		// копируем товары для текущего региона + даты в новый документ
		Для Каждого Стр Из тзДатаПунктРегионСклад.НайтиСтроки(Новый Структура("ДатаОтгрузки,Регион,Идентификатор", СтрокаРодитель.ДатаОтгрузки, СтрокаРодитель.Регион, СтрокаРодитель.Идентификатор)) Цикл
			Т0 = тзТовары.Скопировать(
				тзТовары.НайтиСтроки(
					Новый Структура("ДатаОтгрузки,ПунктРазгрузки,Идентификатор", СтрокаРодитель.ДатаОтгрузки, Стр.ПунктРазгрузки, Стр.Идентификатор)
				)
			);
			ТекИдентификатор = "ДопКол"+СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
			Для Каждого С Из Т0 Цикл
				НоваяСтрока = Об.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, С,, "Обработано");
				НоваяСтрока.Идентификатор = ТекИдентификатор;
				
				НоваяСтрока.ДатаОтгрузки = ?(ЗначениеЗаполнено(СтрокаРодитель.ДатаВывозаФакт), СтрокаРодитель.ДатаВывозаФакт, СтрокаРодитель.ДатаОтгрузки);
			КонецЦикла;
			Если Т0.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По пункту розвантаження "+Стр.ПунктРазгрузки+" немає товарів");
			КонецЕсли;
			
			// дополняем тч пункты разгрузки
			тз = Объект.ПунктыРазгрузки.Выгрузить();

			Т1 = тз.Скопировать(
				тз.НайтиСтроки(
					Новый Структура("ДатаОтгрузки,ПунктРазгрузки,Идентификатор", СтрокаРодитель.ДатаОтгрузки, Стр.ПунктРазгрузки, Стр.Идентификатор)
				)
			);
			Для Каждого С Из Т1 Цикл
				МассивСтрок = Об.ПунктыРазгрузки.НайтиСтроки(Новый Структура("ДатаОтгрузки,ПунктРазгрузки,Идентификатор", СтрокаРодитель.ДатаОтгрузки, Стр.ПунктРазгрузки, Стр.Идентификатор));
				Если МассивСтрок.Количество() Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Об.ПунктыРазгрузки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, С,, "ЗаказНаЗборку,Обработано,Статус,СтадияОбработан,СтадияПечатьСклад,СтадияГотовыеДокументы,СтадияВыполнена,Стадия5,Стадия6,НомерСтроки");
				НоваяСтрока.Идентификатор = ТекИдентификатор;
				
				НоваяСтрока.ДатаОтгрузки = ?(ЗначениеЗаполнено(СтрокаРодитель.ДатаВывозаФакт), СтрокаРодитель.ДатаВывозаФакт, СтрокаРодитель.ДатаОтгрузки);
			КонецЦикла; 
			
			ТоварыПересчетКоличества(Об);
	
		КонецЦикла;
			
		// 
		// Test}
		
		//
		МассивОбъектовДляЗаписи.Добавить(Об);
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Об.Ссылка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Документ %1 заблокирован", Об.Ссылка));
			МассивОбъектов.Добавить(Об);
		КонецПопытки;		

	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбъектовДляЗаписи);
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Для Каждого Об Из МассивОбъектовДляЗаписи Цикл
			Попытка
				Об.ДополнительныеСвойства.Вставить("ПроверятьБлокировку", Истина);
				Об.Записать(); 

				Если ПоПериодамОтгрузки Тогда
					УстановитьПризнакВывоз(Об.Ссылка);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В документ %1 добавлено %2 строк товаров'; uk = 'В документ %1 додано %2 рядків пунктів розвантаження'"), Об.Ссылка, тзРодитель.Количество()));
				Если ЗначениеЗаполнено(Ссылка) Тогда
					Прервать;
				КонецЕсли;
			Исключение
								//Не вдалося записати документ 17.01.2024 00:00:00
				//{Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Форма.ФормаДокумента.Форма(973)}: Помилка при виклику методу контексту (Записать): Операція не може бути виконана через невідповідність версії або відсутності запису бази даних (можливо запис було змінено або вилучено)!				
				С = ОписаниеОшибки();
				Если СтрНайти(С, "через невідповідність версії або відсутності запису бази даних") Тогда	
				Иначе
					Успешно = Ложь;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не удалось записать документ %1'; uk = 'Не вдалося записати документ %1'") + Символы.ПС + ОписаниеОшибки(), СтрокаРодитель.ДатаОтгрузки));	
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПризнакВывоз(Ссылка)

	Менеджер = РегистрыСведений.а_ЗаявкиКВывозу.СоздатьМенеджерЗаписи();
	Менеджер.Объект = Ссылка;
	Попытка
		Менеджер.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПечатьЗаявкуНаСборкуНаСервере(ПукнтыРазгрузки, Водители, Авто)
	
	М = Новый Массив;
	М.Добавить(Объект.Ссылка);	
	
	Возврат Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Печать_ОтчетПоЗаявкам(
		М,
		Неопределено,
		Новый Структура("ПунктыРазгрузки,Водитель, Авто", ПукнтыРазгрузки, Водители, Авто),
		"СхемаКомпоновкиДанныхЗаказНаСборку"
	);
	
КонецФункции

&НаСервере
Функция ПечатьЗаявкуНаСервере(ПукнтыРазгрузки)
	
	М = Новый Массив;
	М.Добавить(Объект.Ссылка);	
	
	Возврат Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Печать_ОтчетПоЗаявкам(
		М,
		Неопределено,
		Новый Структура("ПунктыРазгрузкиАвто", ПукнтыРазгрузки),
		"ОсновнаяСхемаКомпоновкиДанных1"
	);
	
КонецФункции

&НаСервере
Функция ПечатьЗаявкиНаСервере(Водитель, Авто, ДатаОтгрузки)
	
	М = Новый Массив;
	М.Добавить(Объект.Ссылка);
	
	Возврат Документы.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Печать_ОтчетПоЗаявкам(
		М,
		Неопределено,
		Новый Структура("Водитель,Авто,ДатаВывоза", Водитель, Авто,ДатаОтгрузки),
		"ОсновнаяСхемаКомпоновкиДанных1"
	); 	
	
КонецФункции

&НаКлиенте
Процедура УстановитьОбработаноНаСервере(ТабЧасть, ПунктРазгрузки, ДатаОтгрузки, Идентификатор, Значение)

	Если ТабЧасть = "ПунктыРазгрузки" Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Объект[ТабЧасть].НайтиСтроки(
		Новый Структура("ПунктРазгрузки,ДатаОтгрузки,Идентификатор", ПунктРазгрузки, ДатаОтгрузки, Идентификатор)
	);
	Для Каждого Стр Из МассивСтрок Цикл
		Стр.Обработано = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораНастройкиЗагрузки(Результат, СтруктураПараметров) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НастройкиЗагрузки", НастройкиИмпорта(Результат));
	
	ВыбратьФайлыДляИмпортаДанных(СтруктураПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиИмпорта(Настройка)
	
	Вернуть = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	, Настройка);
	Запрос.Текст = "ВЫБРАТЬ *
					|ИЗ
	               	|	Справочник.а_НастройкиЗагрузкиЗаявок КАК Спр
	               	|ГДЕ
	               	|	Спр.Ссылка = &Ссылка";
	
	тзДанные = Запрос.Выполнить().Выгрузить();
	
	Если Не тзДанные.Количество() = 0 Тогда
		
		стр0 = тзДанные[0];
		
		Для Каждого Колонка из тзДанные.Колонки Цикл
			
			Вернуть.Вставить(Колонка.Имя, стр0[Колонка.Имя]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Вернуть;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьФайлыДляИмпортаДанных(СтруктураПараметров) Экспорт
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ИмпортДанных", ЭтотОбъект, СтруктураПараметров);
	
	ПарамДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПарамДиалога.МножественныйВыбор 	= Истина;
	ПарамДиалога.Заголовок 			= НСтр("ru = 'Выберите файлы'; uk = 'Оберіть файли'");
	
	Если СтруктураПараметров.НастройкиЗагрузки.ТипФайла = ПредопределенноеЗначение("Перечисление.а_ТипыФайловЗагрузки.Excel") Тогда
		ПарамДиалога.Фильтр			 	= "EXCEL|*.xlsx;*.xls";
	Иначе
		ПарамДиалога.Фильтр			 	= "CSV|*.csv";
	КонецЕсли;
	
	НачатьПомещениеФайловНаСервер(ОповещениеВыбора,,, ПарамДиалога, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортДанных(ПомещенныеФайлы, СтруктураПараметров) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Состояние(НСтр("ru = 'Данные загружаются...'; uk = 'Триває загрузка даних...'"));
	
	ПереданныеФайлы = Новый Массив;

	Для Каждого ПомещенныйФайл из ПомещенныеФайлы Цикл
		
		Если ПомещенныйФайл.ПомещениеФайлаОтменено Тогда
			Продолжить;
		КонецЕсли;
		
		структФайла = Новый Структура("Адрес,Имя,Расширение"
							, ПомещенныйФайл.Адрес
							, ПомещенныйФайл.СсылкаНаФайл.Имя
							, ПомещенныйФайл.СсылкаНаФайл.Расширение
		);
		
		ПереданныеФайлы.Добавить(структФайла);
		
	КонецЦикла;
	
	ИмпортДанныхНаСервере(ПереданныеФайлы, СтруктураПараметров);

	
КонецПроцедуры

&НаСервере
Процедура ИмпортДанныхНаСервере(ПереданныеФайлы, СтруктураПараметров)
	
	ВыбЗначение = "";
	
	Если ПереданныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабРезультат = Объект.Товары.Выгрузить().СкопироватьКолонки();
	
	Для Каждого текПереданныйФайл Из ПереданныеФайлы Цикл
		
		ФайлИзХранилища = ПолучитьИзВременногоХранилища(текПереданныйФайл.Адрес);
		Файл = ПолучитьИмяВременногоФайла(текПереданныйФайл.Расширение);
		ФайлИзХранилища.Записать(Файл);
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(Файл);
		
		КодСтроки = 0;
		Для НомСтроки = СтруктураПараметров.НастройкиЗагрузки.ПерваяСтрока По ТабДок.ВысотаТаблицы Цикл
			Если СтруктураПараметров.НастройкиЗагрузки.КолонкаКоличество <> 0 Тогда
				// реализовать
				
			Иначе
				Если СтруктураПараметров.НастройкиЗагрузки.КолонкаПунктРазгрузки = 0 И СтруктураПараметров.НастройкиЗагрузки.СтрокаПунктРазгрузки = 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не верно указаны колонки загрузки для полей количество или пункт разгрузки'; uk = 'Не вірно вказано колонки завантаження для полів кількість або пунк розвантаження'"));
					Возврат;
				КонецЕсли;
				
				Для НомКолонки = СтруктураПараметров.НастройкиЗагрузки.КолонкаПунктРазгрузки По ТабДок.ШиринаТаблицы Цикл
					//сПунктРасгрузки = Новый Соответствие;
					//сПунктРасгрузки.Вставить(Справочники.ПунктыРазгрузки.НайтиПоНаименованию(СокрЛП(ТабДок.Область(СтруктураПараметров.НастройкиЗагрузки.СтрокаПунктРазгрузки, СтруктураПараметров.НастройкиЗагрузки.КолонкаПунктРазгрузки, СтруктураПараметров.НастройкиЗагрузки.СтрокаПунктРазгрузки, СтруктураПараметров.НастройкиЗагрузки.КолонкаПунктРазгрузки).Текст))
					//);
					
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбновленияТаблицыПунктыРазгрузки(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьПунктыРазгрузкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПунктыРазгрузкиНаСервере()
	Если Не Объект.ПунктыРазгрузки.Количество() Тогда
		тзНомен = Объект.Товары.Выгрузить();
		тзНомен.Свернуть("ПунктРазгрузки,Идентификатор,ДатаОтгрузки,Обработано,ИДЗаявкиКлиента", "Количество");
		
		Объект.ПунктыРазгрузки.Загрузить(тзНомен);
		ЗаполнитьЗначенияПунктыРазгрузкиПоУмолчанию(Объект);
		ЗаполнитьКонтактнымиДанными(, Объект);
		ОбновитьИнфоПоВодителям();
	Иначе
		ТоварыКоличествоПриИзмененииНаСервере();
	КонецЕсли;
	
	ОбновитьДатуВывозаФакт();
	ОбновитьИнфоЗаказНаСборку();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнфоПоВодителям()
	тз = Объект.ПунктыРазгрузки.Выгрузить();
	Для Каждого С Из тз Цикл
		С.Водитель = ?(ЗначениеЗаполнено(С.ВодительФакт), С.ВодительФакт, С.Водитель);
		С.Авто = ?(ЗначениеЗаполнено(С.АвтоФакт), С.АвтоФакт, С.Авто);
		С.ДатаОтгрузки = ?(ЗначениеЗаполнено(С.ДатаВывозаФакт), С.ДатаВывозаФакт, С.ДатаОтгрузки);
	КонецЦикла;
	тз.Свернуть("ДатаОтгрузки,Водитель,Авто", "Количество");
	
	ИтогиПоВодителям.Загрузить(тз);
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоПриИзмененииНаСервере()
	
  	ТоварыПересчетКоличества(Объект);
	
	ЗаполнитьЗначенияПунктыРазгрузкиПоУмолчанию(Объект);
	ЗаполнитьКонтактнымиДанными(, Объект);
	ЗаполнитьДаннымиСотрудника(, Объект);
	ОбновитьИнфоПоВодителям();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыПересчетКоличества(Об)
	
	тзТоварыПункты = Об.Товары.Выгрузить();
	тзТоварыПункты.Свернуть("ПунктРазгрузки,ДатаОтгрузки,Идентификатор,ИДЗаявкиКлиента");
	тзТоварыПункты.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	тзНомен = Об.Товары.Выгрузить();
	Для Каждого Эл Из Об.ПунктыРазгрузки Цикл
		тз = тзНомен.Скопировать(
			тзНомен.НайтиСтроки(Новый Структура("ПунктРазгрузки,Идентификатор,ДатаОтгрузки", Эл.ПунктРазгрузки, Эл.Идентификатор, Эл.ДатаОтгрузки))
		);
		Эл.Количество = тз.Итог("Количество");
		
		МассивТовары = тзТоварыПункты.НайтиСтроки(Новый Структура("ПунктРазгрузки,Идентификатор,ДатаОтгрузки", Эл.ПунктРазгрузки, Эл.Идентификатор, Эл.ДатаОтгрузки));
		Попытка
			Для Каждого ЭлТ Из МассивТовары Цикл
				ЭлТ.Пометка = Истина;
			КонецЦикла;
		Исключение
			Сообщить("Неожиданное поведение при пересчете количества в пунктах разгрузки.");
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого С Из тзТоварыПункты Цикл
		Если С.Пометка Или Не ЗначениеЗаполнено(С.ПунктРазгрузки) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Об.ПунктыРазгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, С);
		
		
		тз = тзНомен.Скопировать(
			тзНомен.НайтиСтроки(Новый Структура("ПунктРазгрузки,Идентификатор,ДатаОтгрузки", С.ПунктРазгрузки, С.Идентификатор, С.ДатаОтгрузки))
		);
		НоваяСтрока.Количество = тз.Итог("Количество"); 
		
		//ТоварыПересчетКоличества(Об);
		ЗаполнитьЗначенияПунктыРазгрузкиПоУмолчанию(Об);
		ЗаполнитьКонтактнымиДанными(, Об);
		ЗаполнитьДаннымиСотрудника(, Об);
		
	КонецЦикла;
	
	Т = Об.ПунктыРазгрузки.Выгрузить();
	Т.Колонки.Добавить("Пометка");
	Для Каждого С Из Т Цикл
		МассивСтрок = тзТоварыПункты.НайтиСтроки(Новый Структура("ПунктРазгрузки,Идентификатор,ДатаОтгрузки", С.ПунктРазгрузки, С.Идентификатор, С.ДатаОтгрузки));
		Если Не МассивСтрок.Количество() Тогда
			С.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	МассивСтрок = Т.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для Каждого Э Из МассивСтрок Цикл
		Т.Удалить(Э);
	КонецЦикла;
	Об.ПунктыРазгрузки.Загрузить(Т);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуВывоза(Знач Дата, ДеньВывоза)
	
	Если ДеньВывоза = 0 Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Если ДеньНедели(Дата) = ДеньВывоза Тогда
		Возврат Дата;
	КонецЕсли;
	
	Возврат ПолучитьДатуВывоза(КонецДня(Дата) + 1, ДеньВывоза);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьКонтактнымиДанными(НомерСтроки = Неопределено, Об)
	
	Если НомерСтроки = Неопределено Тогда
		Для Каждого ТекДанные Из Об.ПунктыРазгрузки Цикл
			Если ЗначениеЗаполнено(ТекДанные.ПунктРазгрузки) Тогда
				ТекПункт = ТекДанные.ПунктРазгрузки;
				Если ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ТекДанные.КонтактныеДанные) Тогда
				Иначе
					Попытка
						ТекДанные.КонтактноеЛицо = ТекПункт.КонтактноеЛицо;
						ТекДанные.КонтактныеДанные = ТекПункт.КонтактныеДанные; 
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не удалось подставить контрагента и договор, попробуйте записать докумнет, выйти с него и зайти заново'; uk = 'Не вдалося підставити контрагента та договір, спробуйте записати документ вийти з нього та зайти знов'"));
					КонецПопытки;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
				Иначе
					Попытка
						ТекДанные.Контрагент = ТекПункт.Контрагент;
						ТекДанные.Договор = ТекПункт.ДоговорКонтрагента;
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не удалось подставить контрагента и договор, попробуйте записать докумнет, выйти с него и зайти заново'; uk = 'Не вдалося підставити контрагента та договір, спробуйте записати документ вийти з нього та зайти знов'"));
					КонецПопытки;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекДанные.ДатаОтгрузки) Тогда
				Иначе
					ТекДанные.ДатаОтгрузки = ПолучитьДатуВывоза(Об.Дата, ТекПункт.ДеньВывоза);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекПункт.Регион) Тогда
					ТекДанные.Регион = ТекПункт.Регион;
				КонецЕсли;
				ТекДанные.Качество = ТекДанные.ПунктРазгрузки.Качество;
				ТекДанные.Тара = ТекДанные.ПунктРазгрузки.Тара;
				ТекДанные.Бирки = ТекДанные.ПунктРазгрузки.Бирки;
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		Попытка
			ТекДанные = Об.ПунктыРазгрузки.НайтиПоИдентификатору(НомерСтроки);
		Исключение
			ТекДанныеМассив = Об.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Идентификатор", НомерСтроки));
			ТекДанные = ТекДанныеМассив[0];
		КонецПопытки;
		Если ЗначениеЗаполнено(ТекДанные.ПунктРазгрузки) Тогда
			ТекПункт = ТекДанные.ПунктРазгрузки;
			Если ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ТекДанные.КонтактныеДанные) Тогда
			Иначе
				ТекДанные.КонтактноеЛицо = ТекПункт.КонтактноеЛицо;
				ТекДанные.КонтактныеДанные = ТекПункт.КонтактныеДанные;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
			Иначе
				Попытка
					ТекДанные.Контрагент = ТекПункт.Контрагент;
					ТекДанные.Договор = ТекПункт.ДоговорКонтрагента;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не удалось подставить контрагента и договор, попробуйте записать докумнет, выйти с него и зайти заново'; uk = 'Не вдалося підставити контрагента та договір, спробуйте записати документ вийти з нього та зайти знов'"));
				КонецПопытки;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекДанные.ДатаОтгрузки) Тогда
			Иначе
				ТекДанные.ДатаОтгрузки = ПолучитьДатуВывоза(Об.Дата, ТекПункт.ДеньВывоза);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекПункт.Регион) Тогда
				ТекДанные.Регион = ТекПункт.Регион;
			КонецЕсли;
			ТекДанные.Качество = ТекДанные.ПунктРазгрузки.Качество;
			ТекДанные.Тара = ТекДанные.ПунктРазгрузки.Тара;
			ТекДанные.Бирки = ТекДанные.ПунктРазгрузки.Бирки;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДаннымиСотрудника(НомерСтроки = Неопределено, Об, ИдентификаторСтроки = "")
	
	Если НомерСтроки = Неопределено Тогда
		Для Каждого ТекДанные Из Об.ПунктыРазгрузки Цикл
			Если ЗначениеЗаполнено(ТекДанные.Водитель) Тогда
				Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Авто) Тогда
					//Если Не ЗначениеЗаполнено(ТекДанные.Авто) Тогда
						ТекДанные.Авто = ТекДанные.Водитель.а_Авто;
					//КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Прицеп) Тогда
					//Если Не ЗначениеЗаполнено(ТекДанные.Прицеп) Тогда
						ТекДанные.Прицеп = ТекДанные.Водитель.а_Прицеп;
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Попытка
			ТекДанныеМассив = Об.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторСтроки));
			ТекДанные = ТекДанныеМассив[0];		
		Исключение
			ТекДанные = Об.ПунктыРазгрузки[НомерСтроки];
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекДанные.Водитель) Тогда
			Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Авто) Тогда
				ТекДанные.Авто = ТекДанные.Водитель.а_Авто;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекДанные.Водитель.а_Прицеп) Тогда
				ТекДанные.Прицеп = ТекДанные.Водитель.а_Прицеп;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если РольДоступна("епрсРазрешитьРедактированиеЗагруженныхКолонокАкта") Тогда
		Элементы.ТоварыЗагруженноеКоличество.ТолькоПросмотр = Ложь;
		Элементы.ТоварыЗагруженнаяНоменклатура.ТолькоПросмотр = Ложь; 
		Элементы.ТоварыЗагруженныйДополнительныеАртикулы.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыОбработкиТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, ДополнительныеАртикулы 
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
		
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)

	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Загрузка из Excel недоступна в Web-клиенте.';uk='Завантаження Excel недоступне у Web-клієнті.'"));
	#Иначе
		//ERPS_TASK_В.Головченко_28.02.2023 - додано параметр "Организация"
		//ДопПараметры = Новый Структура("Контрагент, Организация",Неопределено,Объект.Организация);
		// ек убран параметр организация
		ДопПараметры = Новый Структура("Контрагент",Неопределено);
		ОбработкаЗакрытия = Новый ОписаниеОповещения("ЗаркытиеОбработки_ЗагрузкаИзВнешнегоФайла",ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ерпсСозданиеАктаПриемаПередачиТовара.Форма.Форма",
					ДопПараметры,
					ЭтаФорма,,,,
					ОбработкаЗакрытия,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
	#КонецЕсли	

КонецПроцедуры


&НаКлиенте
Процедура ЗаркытиеОбработки_ЗагрузкаИзВнешнегоФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьВопросОчиститьДалее", ЭтотОбъект, Результат),
			НСтр("ru = 'В документе уже есть данные, очистить строки?'; uk = 'В документі вже є дані, очистити рядки?'"),
			РежимДиалогаВопрос.ДаНет
		);
	Иначе
		Объект.Товары.Очистить();
		ЗагрузкаИзВнешнегоФайлаНаСервере(Результат);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОчиститьДалее(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ЗагрузкаИзВнешнегоФайлаНаСервере(ДопПараметры);
	Иначе
		ЗагрузкаИзВнешнегоФайлаНаСервере(ДопПараметры);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаИзВнешнегоФайлаНаСервере(АдресВременногоХранилища)
	
	ТЗНоменклатур = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
	КодСтроки = 0;
	Для каждого ТекущаяСтрока из ТЗНоменклатур Цикл
		
		НовСтр = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,ТекущаяСтрока);
		НовСтр.КодСтроки = КодСтроки;
		Если Не ЗначениеЗаполнено(НовСтр.ДатаОтгрузки) Тогда
			НовСтр.ДатаОтгрузки = ПолучитьДатуВывоза(Объект.Дата, НовСтр.ПунктРазгрузки.ДеньВывоза);
			НовСтр.ДатаОтгрузки = ?(Не ЗначениеЗаполнено(НовСтр.ДатаОтгрузки),
				?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()),
				НовСтр.ДатаОтгрузки
			);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПунктыРазгрузкиНаСервере();
	
	Если Объект.Товары.Количество() Тогда
		ЗаполнитьДопДанныеТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗначенияПунктыРазгрузкиПоУмолчанию(Об)
	
	СкладПоУмолчанию = Неопределено;
	Попытка
		Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ерпсЗаявкаНаСозданиеАктовПриемкиПередачи", 
			"ЗначенияРеквизитовПоУмолчанию",
			,
			,
			Пользователи.ТекущийПользователь()
		);
		
		СкладПоУмолчанию = Настройки.Настройки;
	Исключение
	КонецПопытки;
	
	Для Каждого Эл Из Об.ПунктыРазгрузки Цикл
		Если Не ЗначениеЗаполнено(Эл.Организация) Тогда
			Эл.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Эл.Склад) И ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
			Эл.Склад = СкладПоУмолчанию;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Эл.Склад) Тогда
			Эл.Склад = Справочники.Склады.НайтиПоКоду("00-000024");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Эл.Перевозчик) Тогда
			Эл.Перевозчик = Справочники.Контрагенты.НайтиПоКоду("00-000510");
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПустоеОповещение(Р,П) Экспорт
КонецПроцедуры

&НаСервере
Функция ЕстьПустыеКонтрагенты()

	Возврат Объект.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Контрагент",Справочники.Контрагенты.ПустаяСсылка())).Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки, ТекстСообщения) 
	ПоказатьВопрос(ОписаниеОповещениеПослеОшибки,
	                    ТекстСообщения,
						РежимДиалогаВопрос.ОК,
						,
						,
						Нстр("ru='Внимание';uk='Увага'")
		);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораКонтрагентов()

	Результат = Новый СписокЗначений;
	
	ТЗКонтрагенты = Объект.ПунктыРазгрузки.Выгрузить();
	ТЗКонтрагенты.Свернуть("Контрагент");
	
	Для каждого ТекКонтрагент из ТЗКонтрагенты Цикл
		Результат.Добавить(ТекКонтрагент.Контрагент,ТекКонтрагент.Контрагент);	
	КонецЦикла;                                    
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненияДокументаНеПройдена()

	Если Объект.ПунктыРазгрузки.Количество() = 0 тогда
		ОписаниеОповещениеПослеОшибки = Новый ОписаниеОповещения("ПустоеОповещение",ЭтотОбъект);
		ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки,Нстр("ru='Сначала заполните таблицу пунктов разгрузки';uk='Спочатку заповніть таблицю пунктів розвантаження'"));
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПустыеКонтрагенты() Тогда
		ОписаниеОповещениеПослеОшибки = Новый ОписаниеОповещения("ПустоеОповещение",ЭтотОбъект);
		ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки, Нстр("ru='Сначала заполните контрагентов в таблице пунктов разгрузки';uk='Спочатку заповніть контрагентів в таблиці пунктів розвантаження'"));
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 тогда
		ОписаниеОповещениеПослеОшибки = Новый ОписаниеОповещения("ПустоеОповещение",ЭтотОбъект);
		ПоказатьВопросПредупреждение(ОписаниеОповещениеПослеОшибки,Нстр("ru='Сначала заполните таблицу товаров';uk='Спочатку заповніть таблицю товарів'"));
		Возврат Истина;
	КонецЕсли;         
	
	Возврат Ложь;

КонецФункции


#КонецОбласти

#Область СозданиеАктов

&НаКлиенте
Процедура СоздатьАкты(Команда)
		
	Если ПроверкаЗаполненияДокументаНеПройдена() тогда
		Возврат;
	КонецЕсли;
	
	//СоздатьАктыНаСервере();
	//ек++
	СписокПунктовВывоза = ПолучитьСписокПунктовВывозаНаСервере();
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыборСпискаПунктовРазгрузкиЗавешение", ЭтотОбъект), СписокПунктовВывоза,,);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАкт(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьАктПослеВопросаЗавершение", ЭтотОбъект,), "Створити акт для обраного пункту розвантаження?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктПослеВопросаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекДанные = Элементы.ПунктыРазгрузки.ТекущиеДанные;
		СоздатьАктыНаСервереНовый(ТекДанные.ПунктРазгрузки, ТекДанные.Идентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСпискаПунктовРазгрузкиЗавешение(Результат, ДопПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		СоздатьАктыНаСервереНовый(Результат.Значение);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокПунктовВывозаНаСервере()
	
	сп = Новый СписокЗначений;
	тз = Объект.ПунктыРазгрузки.Выгрузить();
	тз.Свернуть("ПунктРазгрузки");
	сп.ЗагрузитьЗначения(тз.ВыгрузитьКолонку("ПунктРазгрузки"));
	
	сп.Добавить("ВСЕ", НСтр("ru = 'ВСЕ'; uk = 'ВСІ'"));
	
	Возврат сп;
	
КонецФункции

&НаСервере
Процедура СоздатьАктыНаСервереНовый(Выб, Идентификатор = "")
	
	Для Каждого Пункт из Объект.ПунктыРазгрузки Цикл
		
		Если ТипЗнч(Выб) = Тип("СправочникСсылка.ПунктыРазгрузки") Тогда
			Если Не Пункт.ПунктРазгрузки = Выб Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Не ПустаяСтрока(Идентификатор) И Пункт.Идентификатор <> Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		ТекИдентификатор = ?(ПустаяСтрока(Идентификатор), Пункт.Идентификатор, Идентификатор);
		
		Если АктУжеСозданРаннее(Пункт.Контрагент,Пункт.ПунктРазгрузки,Объект.Ссылка,, ТекИдентификатор) тогда
			Продолжить;
		КонецЕсли;
		
		НовДок = Документы.ерпсАктПриемкиПередачиТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовДок,Объект,,"Номер");
		
		НовДок.ЗаявкаНаСозданиеАктовПриемкиПередачи = Объект.Ссылка;
		НовДок.Контрагент 		= Пункт.Контрагент;
		НовДок.Договор 			= Пункт.Договор;
		НовДок.Ответственный	= Пользователи.ТекущийПользователь();
		НовДок.ПунктРазгрузки	= Пункт.ПунктРазгрузки;
		НовДок.Дата 			= ?(ЗначениеЗаполнено(Пункт.ДатаВывозаФакт), Пункт.ДатаВывозаФакт,  
			?(ЗначениеЗаполнено(Пункт.ДатаОтгрузки),Пункт.ДатаОтгрузки,ТекущаяДата())
		);
		НовДок.Идентификатор	= ТекИдентификатор; 
		//ек++
		//НовДок.Склад			= Объект.Склад;
		НовДок.Организация		= Пункт.Организация;
		НовДок.Склад			= Пункт.Склад;
		НовДок.ПериодОтгрузки	= Объект.ПериодОтгрузки;
		НовДок.Перевозчик		= ?(ЗначениеЗаполнено(Пункт.ПеревозчикФакт), Пункт.ПеревозчикФакт, Пункт.Перевозчик);
		НовДок.Водитель			= ?(ЗначениеЗаполнено(Пункт.ВодительФакт), Пункт.ВодительФакт, Пункт.Водитель);
		НовДок.Авто				= ?(ЗначениеЗаполнено(Пункт.АвтоФакт), Пункт.АвтоФакт, Пункт.Авто);
		НовДок.Прицеп			= ?(ЗначениеЗаполнено(Пункт.ПрицепФакт), Пункт.ПрицепФакт, Пункт.Прицеп);
		
		//ЗаполнитьЗначенияСвойств(НовДок, Пункт, "Водитель,Авто,Прицеп");
		
		
		СтрокиКПереносу = Объект.Товары.НайтиСтроки(Новый Структура("ПунктРазгрузки,Идентификатор",Пункт.ПунктРазгрузки, ТекИдентификатор));
		//НовДок.Товары.Загрузить(Объект.Товары.Выгрузить(СтрокиКПереносу));
		тзЗагрузки = Объект.Товары.Выгрузить(СтрокиКПереносу);
		тзЗагрузки.Сортировать("Номенклатура");
		Для Каждого СтрТЗ Из тзЗагрузки Цикл
			Если СтрТЗ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НовДок.Товары.Добавить(), СтрТЗ); 
		КонецЦикла;
		
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура СоздатьАктыНаСервере()
	Для каждого Пункт из ОБъект.ПунктыРазгрузки Цикл
		
		Если АктУжеСозданРаннее(Пункт.Контрагент,Пункт.ПунктРазгрузки,Объект.Ссылка) тогда
			Продолжить;
		КонецЕсли;
		
		НовДок = Документы.ерпсАктПриемкиПередачиТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовДок,Объект,,"Номер");
		
		НовДок.ЗаявкаНаСозданиеАктовПриемкиПередачи = ОБъект.Ссылка;
		НовДок.Контрагент 		= Пункт.Контрагент;
		НовДок.Договор 			= Пункт.Договор;
		НовДок.Ответственный	= Пользователи.ТекущийПользователь();
		НовДок.ПунктРазгрузки	= Пункт.ПунктРазгрузки;
		НовДок.Дата 			= ТекущаяДата(); 
		НовДок.Склад			= Объект.Склад;
		
		СтрокиКПереносу = Объект.Товары.НайтиСтроки(Новый Структура("ПунктРазгрузки",Пункт.ПунктРазгрузки));
		НовДок.Товары.Загрузить(Объект.Товары.Выгрузить(СтрокиКПереносу));
		
		НовДок.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция АктУжеСозданРаннее(Контрагент,ПунктРазгрузки,ДокументСсылка, Организация = Неопределено, Идентификатор = "")
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ерпсАктПриемкиПередачиТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ерпсАктПриемкиПередачиТоваров КАК ерпсАктПриемкиПередачиТоваров
		|ГДЕ
		|	НЕ ерпсАктПриемкиПередачиТоваров.ПометкаУдаления
		|	И ерпсАктПриемкиПередачиТоваров.ПунктРазгрузки = &ПунктРазгрузки
		|	И ерпсАктПриемкиПередачиТоваров.Контрагент = &Контрагент
		|	И ерпсАктПриемкиПередачиТоваров.ЗаявкаНаСозданиеАктовПриемкиПередачи = &ЗаявкаНаСозданиеАктовПриемкиПередачи
		|	И ерпсАктПриемкиПередачиТоваров.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузки);
	Запрос.УстановитьПараметр("ЗаявкаНаСозданиеАктовПриемкиПередачи",ДокументСсылка);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Если Не Организация = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "	И ерпсАктПриемкиПередачиТоваров.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Если ПустаяСтрока(Идентификатор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ерпсАктПриемкиПередачиТоваров.Идентификатор = &Идентификатор", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура Утвердить(Команда)
	Объект.Утвержден = Не Объект.Утвержден;
	Элементы.Утвердить.Пометка = Объект.Утвержден;
	Элементы.ГруппаДатаНомер.ЦветФона = ?(Объект.Утвержден, WebЦвета.БледноЗеленый, WebЦвета.Белый);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Попытка
		Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ерпсЗаявкаНаСозданиеАктовПриемкиПередачи", 
			"ЗначенияРеквизитовПоУмолчанию",
			,
			,
			Пользователи.ТекущийПользователь()
		);
		
		Если Не Настройки = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияПоУмолчаниюНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ерпсЗаявкаНаСозданиеАктовПриемкиПередачи", 
		"ЗначенияРеквизитовПоУмолчанию",
		Новый Структура("СкладПоУмолчанию", СкладПоУмолчанию),
		,
		Пользователи.ТекущийПользователь()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗначенияПоУмолчанию(Команда)
	ОткрытьФорму("Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Форма.ФормаУстановкиРеквизитовПоУмолчанию",
		Новый Структура("СкладПоУмолчанию", СкладПоУмолчанию),
		ЭтаФорма, УникальныйИдентификатор,
		,
		,
		Новый ОписаниеОповещения("УстановкаРеквизитовПоУмолчаниюДалее", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);  
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРеквизитовПоУмолчаниюДалее(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
	СохранитьЗначенияПоУмолчаниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПриИзменении(Элемент)
	ОбновитьИнфоПоВодителям();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ТоварыКоличествоПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    //ОбновитьДатуВывозаФакт();
	//ОбновитьИнфоЗаказНаСборку();
	
	
	Если ЗначениеЗаполнено(Объект.ДокументОснования) Тогда
		ДокументОснованиеНадпись = СтрШаблон("Документ підстава: %1", Объект.ДокументОснования);
	КонецЕсли;
	
	Если Объект.Товары.Количество() Тогда
		ЗаполнитьДопДанныеТоваров();
	КонецЕсли;
	
	Если СтрНайти(ВРег(СокрЛП(Пользователи.ТекущийПользователь())), "KHMELNYTSKYI")
		ИЛИ СтрНайти(ВРег(СокрЛП(Пользователи.ТекущийПользователь())), "ХМЕЛЬНИЦЬК") Тогда
		Элементы.ПунктыРазгрузкиКонтекстноеМенюПечатьЗаказНаСборку.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьДатуВывозаФакт();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьНажатие(Элемент, СтандартнаяОбработка)
	ОткрытьЗначение(Объект.ДокументОснования);
КонецПроцедуры

// Test{20230830
//колокнка в которой сумма всех заказанных "Апельсинов" на дату документа и исключать основной документ
&НаСервере
Процедура ЗаполнитьДопДанныеТоваров()
	
	тз = Объект.Товары.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", тз);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.Текст = "ВЫБРАТЬ * 
	|ПОМЕСТИТЬ ВТТаб
	|ИЗ &Таб КАК Т
	|;
	|ВЫБРАТЬ 
	|	Т.КодСтроки,
	|	Т.Номенклатура,
	|	Т.ДополнительныеАртикулы,
	|	Т.ЕдиницаИзмерения,
	|	Т.Количество,
	|	Т.Примечание,
	|	Т.ПунктРазгрузки,
	|	Т.Идентификатор,
	|	Т.ДатаОтгрузки,
	|	Т.ЗагруженнаяНоменклатура,
	|	Т.ЗагруженноеКоличество,
	|	Т.ЗагруженныйДополнительныеАртикулы,
	|	Т.Обработано,
	|	Т.ИДЗаявкиКлиента,
	|	ТТ.Кво КАК ЗаказаноВЭтотДень
	|ИЗ ВТТаб КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ТЧ.Номенклатура,
	|		ТЧ.ДатаОтгрузки,
	|		СУММА(ТЧ.Количество) КАК Кво 
	|	ИЗ
	|		Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Товары КАК ТЧ
	|	ГДЕ 
	|		НЕ ТЧ.Ссылка.ПометкаУдаления
	|       И ТЧ.ДатаОтгрузки = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|       И НЕ ТЧ.Ссылка.ДокументОснования = НЕОПРЕДЕЛЕНО
	|	СГРУППИРОВАТЬ ПО
	|		ТЧ.Номенклатура,
	|		ТЧ.ДатаОтгрузки) КАК ТТ
	|ПО ТТ.Номенклатура = Т.Номенклатура
	|	И ТТ.ДатаОтгрузки = Т.ДатаОтгрузки";
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры
// Test}

// Test{20230904
&НаСервере
Процедура ТЧТоварыУдалитьНаСервере(ПунктРазгрузки, Дата, Идентификатор)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Сообщить("Нельзя удалять пунк разгрузки с путой датой");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузки);
	Запрос.УстановитьПараметр("ДатаОтгрузки", Дата);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст = "ВЫБРАТЬ 
	|	Таб.* 
	|ПОМЕСТИТЬ ВТТаб
	|ИЗ &Таб КАК Таб
	|;
	|ВЫБРАТЬ  
	|	Т.*, ТТ.Номенклатура 
	|ИЗ ВТТаб КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТТаб КАК ТТ
	|ПО ТТ.НомерСтроки = Т.НомерСтроки
	|	И ТТ.ПунктРазгрузки = &ПунктРазгрузки
	|	И ТТ.ДатаОтгрузки = &ДатаОтгрузки
	|	И ТТ.Идентификатор = &Идентификатор
	|ГДЕ
	|	ТТ.Номенклатура is null	
	|";
	тз = Запрос.Выполнить().Выгрузить();
	
	Объект.Товары.Загрузить(тз);
	
КонецПроцедуры

&НаСервере
Процедура ТЧТоварыИзменитьДатуОтгрузки(ПунктРазгрузки, Дата, Идентификатор)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаВывозаДоИзменения);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузки);
	Запрос.УстановитьПараметр("НоваяДатаОтгрузки", Дата);
	Запрос.Текст = "ВЫБРАТЬ 
	|	Таб.* 
	|ПОМЕСТИТЬ ВТТаб
	|ИЗ &Таб КАК Таб
	|;
	|ВЫБРАТЬ  
	|	ВЫБОР КОГДА Т.ПунктРазгрузки = &ПунктРазгрузки И Т.ДатаОтгрузки = &ДатаОтгрузки И Т.Идентификатор = &Идентификатор ТОГДА
	|  		&НоваяДатаОтгрузки
	|	ИНАЧЕ Т.ДатаОтгрузки КОНЕЦ КАК ДатаОтгрузки,
	|	ВЫБОР КОГДА Т.ПунктРазгрузки = &ПунктРазгрузки И Т.ДатаОтгрузки = &ДатаОтгрузки И Т.Идентификатор = &Идентификатор ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК БылиИзменения,
	|	Т.* 
	|ИЗ ВТТаб КАК Т
	|";
	тз = Запрос.Выполнить().Выгрузить();
	Если тз.Найти(Истина, "БылиИзменения") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОтгрузки", "ДАТАВРЕМЯ(1,1,1)");
		тз = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если тз.Найти(Истина, "БылиИзменения") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Т.ДатаОтгрузки = &ДатаОтгрузки", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Т.ДатаОтгрузки = ДАТАВРЕМЯ(1,1,1)", "");
		тз = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Объект.Товары.Загрузить(тз);
	
КонецПроцедуры 

&НаСервере
Процедура ТЧТоварыИзменитьПунктОтгрузки(ПунктРазгрузки, Дата, Идентификатор)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОтгрузки", Дата);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузкиДоИзменения);
	Запрос.УстановитьПараметр("НовыйПунктРазгрузки", ПунктРазгрузки);
	Запрос.Текст = "ВЫБРАТЬ 
	|	Таб.* 
	|ПОМЕСТИТЬ ВТТаб
	|ИЗ &Таб КАК Таб
	|;
	|ВЫБРАТЬ  
	|	ВЫБОР КОГДА Т.ПунктРазгрузки = &ПунктРазгрузки И Т.ДатаОтгрузки = &ДатаОтгрузки И Т.Идентификатор = &Идентификатор ТОГДА
	|  		&НовыйПунктРазгрузки
	|	ИНАЧЕ Т.ПунктРазгрузки КОНЕЦ КАК ПунктРазгрузки,
	|	ВЫБОР КОГДА Т.ПунктРазгрузки = &ПунктРазгрузки И Т.ДатаОтгрузки = &ДатаОтгрузки  И Т.Идентификатор = &Идентификатор ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК БылиИзменения,
	|	Т.* 
	|ИЗ ВТТаб КАК Т
	|";
	тз = Запрос.Выполнить().Выгрузить();
	
	Объект.Товары.Загрузить(тз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАдресДоставкиПриИзменении(Элемент)
	ТоварыКоличествоПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ)
	тз = Объект.ПунктыРазгрузки.Выгрузить();
	тз.Свернуть("Склад");
	сч = 0;
	Для Каждого С Из тз Цикл
		Если ЗначениеЗаполнено(С.Склад) Тогда
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если сч > 1 Тогда
		Отказ = Истина;
		ВызватьИсключение("Неможна в таблічній частині Пункти розвантаження обирати різні Склади для одного документу");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНоменклатуруНасервере(Отказ)

	Если Не Константы.а_ПроверятьЗаполненностьНоменклатуры.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.Номенклатура КАК Номенклатура,
	               |	Таб.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТТаб
	               |ИЗ
	               |	&Таб КАК Таб
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТТаб.Номенклатура КАК Номенклатура,
	               |	ВТТаб.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ВТТаб КАК ВТТаб
				   |ГДЕ
				   |	ВТТаб.Номенклатура.а_Номенклатура = ЗНАЧЕНИЕ(Справочник.а_Номенклатура.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Таб", Объект.Товары.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'В строке %1 у номенклатуры %2 не заполнено поле номенклатуры. Взможно стоит выбрать другую номенклатуру'; uk = 'У рядку %1 у номенклатури %2 не заповнено поле номентклатури. Можливо треба обрати іншу номенклатуру'"),
				Выборка.НомерСтроки, 
				Выборка.Номенклатура
			),
			,
			"Товары["+Формат(Выборка.НомерСтроки-1,"ЧГ=")+"].Номенклатура",
			"Объект",
			Отказ
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюНаСервере(Отказ);
	ПроверитьНоменклатуруНасервере(Отказ)
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВодителя(Команда)
	Сп = ПолучитьСписокЗначенийВодителей();
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПослеЗакрытияВыбораИзСпискаВодителей", ЭтотОбъект),
		Сп,
		Элементы.ПунктыРазгрузкиВодитель,
		Сп.НайтиПоЗначению(Элементы.ПунктыРазгрузки.ТекущиеДанные.Водитель)
	);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗначенийВодителей()
	Сп = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
				   //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
				   //|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	               |ГДЕ
	               |	НЕ Сотрудники.ВАрхиве
				   |	И Сотрудники.а_Авто <> ЗНАЧЕНИЕ(Справочник.Авто.ПустаяСсылка)";
				   //|	И КадроваяИсторияСотрудниковСрезПоследних.Должность.Наименование = ""Водій""
				   //|	И НЕ КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	Т = Запрос.Выполнить().Выгрузить();
	Сп.ЗагрузитьЗначения(Т.ВыгрузитьКолонку("Ссылка"));
	Возврат Сп;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВыбораИзСпискаВодителей(Результат, Парам2) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Для Каждого Элемент Из Элементы.ПунктыРазгрузки.ВыделенныеСтроки Цикл
			ТекСтрока = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(Элемент);
			ТекСтрока.Водитель = Результат.Значение;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизитаОбъекта(Результат.Значение, "а_Авто")) Тогда
				ТекСтрока.Авто = ЗначениеРеквизитаОбъекта(Результат.Значение, "а_Авто");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Элементы.ПунктыРазгрузки.Обновить();
КонецПроцедуры

&НаСервере
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
КонецФункции

&НаКлиенте
Процедура СортироватьПоПодтвержденным(Команда)
	Объект.ПунктыРазгрузки.Сортировать("Обработано");
КонецПроцедуры

// Test}
#КонецОбласти

&НаКлиенте
Процедура ВыделениеНоменклатурыНоменклатураПриИзменении(Элемент)
	ВыделениеНоменклатурыИзменениеКоличества();
КонецПроцедуры

&НаКлиенте
Процедура ВыделениеНоменклатурыИзменениеКоличества()
	
	Если Объект.ВыделениеНоменклатуры.Количество() Тогда
	
		Элементы.Группа2.Заголовок = СтрШаблон("Товари без залишків (%1)", Объект.ВыделениеНоменклатуры.Количество());
		Элементы.Группа2.ЗаголовокСвернутогоОтображения = Элементы.Группа2.Заголовок;
	
	КонецЕсли;
	
	ВыделениеНоменклатурыИзменениеКоличестваНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыделениеНоменклатурыИзменениеКоличестваНаСервере()
	ЭтаФорма.УсловноеОформление.Элементы[3].Отбор.Элементы[0].ПравоеЗначение.ЗагрузитьЗначения(
		Объект.ВыделениеНоменклатуры.Выгрузить().ВыгрузитьКолонку("Номенклатура")
	);
КонецПроцедуры


&НаКлиенте
Процедура СтадияВыполнено(Команда)
	ВыделенныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда
			ТекДанные.СтадияВыполнена = Не ТекДанные.СтадияВыполнена;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СтадияГотовыеДокументы(Команда)
	ВыделенныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда
			ТекДанные.СтадияГотовыеДокументы = Не ТекДанные.СтадияГотовыеДокументы;
		КонецЕсли;
	КонецЦикла;КонецПроцедуры


&НаКлиенте
Процедура СтадияОбработан(Команда)
	ВыделенныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда
			ТекДанные.СтадияОбработан = Не ТекДанные.СтадияОбработан;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СтадияПечатьНаСклад(Команда)
	ВыделенныеСтроки = Элементы.ПунктыРазгрузки.ВыделенныеСтроки;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда
			ТекДанные.СтадияПечатьСклад = Не ТекДанные.СтадияПечатьСклад;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуВывозаФакт()
	
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	а_ДатаВывозаФакт.Идентификатор КАК Идентификатор,
	//               |	а_ДатаВывозаФакт.ДатаОтгрузки КАК ДатаВывозаФакт,
	//               |	а_ДатаВывозаФакт.Водитель КАК ВодительФакт,
	//               |	а_ДатаВывозаФакт.Авто КАК АвтоФакт,
	//               |	а_ДатаВывозаФакт.Прицеп КАК ПрицепФакт,
	//               |	а_ДатаВывозаФакт.Перевозчик КАК ПеревозчикФакт,
	//               |	ЕСТЬNULL(СтатусыМаршрут.СтатусОбработан, ЛОЖЬ) КАК МаршрутОтправлен,
	//               |	ЕСТЬNULL(СтатусыСобран.СтатусСобран, ЛОЖЬ) КАК СобраноСкладом
	//               |ИЗ
	//               |	РегистрСведений.а_ДатаВывозаФакт.СрезПоследних КАК а_ДатаВывозаФакт
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_СтатусыЗаявок КАК СтатусыМаршрут
	//               |		ПО (&Объект = СтатусыМаршрут.Объект)
	//               |			И а_ДатаВывозаФакт.Идентификатор = СтатусыМаршрут.Идентификатор
	//               |			И (СтатусыМаршрут.ТипСтатуса = ЗНАЧЕНИЕ(Перечисление.а_ТипыСтатусов.СтатусВывоза))
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_СтатусыЗаявок КАК СтатусыСобран
	//               |		ПО (&Объект = СтатусыСобран.Объект)
	//               |			И а_ДатаВывозаФакт.Идентификатор = СтатусыСобран.Идентификатор
	//               |			И (СтатусыСобран.ТипСтатуса = ЗНАЧЕНИЕ(Перечисление.а_ТипыСтатусов.СтатусСобрано))
	//               |ГДЕ
	//               |	а_ДатаВывозаФакт.Объект = &Объект"; 
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Т.Идентификатор КАК Идентификатор,
	               |	&Объект КАК Ссылка
	               |ПОМЕСТИТЬ ВТТаб
	               |ИЗ
	               |	&Таб КАК Т
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Т.Идентификатор КАК Идентификатор,
	               |	а_ДатаВывозаФакт.ДатаОтгрузки КАК ДатаВывозаФакт,
	               |	а_ДатаВывозаФакт.Водитель КАК ВодительФакт,
	               |	а_ДатаВывозаФакт.Авто КАК АвтоФакт,
	               |	а_ДатаВывозаФакт.Прицеп КАК ПрицепФакт,
	               |	а_ДатаВывозаФакт.Перевозчик КАК ПеревозчикФакт,
	               |	ЕСТЬNULL(СтатусыМаршрут.СтатусОбработан, ЛОЖЬ) КАК МаршрутОтправлен,
	               |	ЕСТЬNULL(СтатусыСобран.СтатусСобран, ЛОЖЬ) КАК СобраноСкладом,
	               |	а_ЗаказНаСборку.Ссылка КАК кЗаказНаСборку,
	               |	а_ДокументыРеализацииЗаявок.Реализация КАК Реализация
	               |ИЗ
	               |	ВТТаб КАК Т
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ДатаВывозаФакт.СрезПоследних КАК а_ДатаВывозаФакт
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				МАКСИМУМ(Т.ДатаОтгрузки) КАК ДатаОтгрузки,
	               |				Т.Идентификатор КАК Идентификатор,
	               |				Т.Объект КАК Объект
	               |			ИЗ
	               |				РегистрСведений.а_ДатаВывозаФакт КАК Т
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				Т.Объект,
	               |				Т.Идентификатор) КАК ФактОтбор
	               |			ПО а_ДатаВывозаФакт.Объект = ФактОтбор.Объект
	               |				И а_ДатаВывозаФакт.Идентификатор = ФактОтбор.Идентификатор
	               |				И а_ДатаВывозаФакт.ДатаОтгрузки = ФактОтбор.ДатаОтгрузки
	               |		ПО Т.Ссылка = а_ДатаВывозаФакт.Объект
	               |			И Т.Идентификатор = а_ДатаВывозаФакт.Идентификатор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_СтатусыЗаявок КАК СтатусыМаршрут
	               |		ПО Т.Ссылка = СтатусыМаршрут.Объект
	               |			И Т.Идентификатор = СтатусыМаршрут.Идентификатор
	               |			И (СтатусыМаршрут.ТипСтатуса = ЗНАЧЕНИЕ(Перечисление.а_ТипыСтатусов.СтатусВывоза))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_СтатусыЗаявок КАК СтатусыСобран
	               |		ПО Т.Ссылка = СтатусыСобран.Объект
	               |			И (а_ДатаВывозаФакт.Идентификатор = СтатусыСобран.Идентификатор)
	               |			И (СтатусыСобран.ТипСтатуса = ЗНАЧЕНИЕ(Перечисление.а_ТипыСтатусов.СтатусСобрано))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.а_ЗаказНаСборку КАК а_ЗаказНаСборку
	               |		ПО Т.Ссылка = а_ЗаказНаСборку.ДокументОснование
	               |			И Т.Идентификатор = а_ЗаказНаСборку.Идентификатор
	               |			И (НЕ а_ЗаказНаСборку.ПометкаУдаления)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ДокументыРеализацииЗаявок КАК а_ДокументыРеализацииЗаявок
	               |		ПО Т.Ссылка = а_ДокументыРеализацииЗаявок.Заявка
	               |			И Т.Идентификатор = а_ДокументыРеализацииЗаявок.Идентификатор";
	Запрос.УстановитьПараметр("Таб", Объект.ПунктыРазгрузки.Выгрузить());
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		М = Объект.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Идентификатор", Выборка.Идентификатор));		
		
		Для Каждого Эл Из М Цикл
			ЗаполнитьЗначенияСвойств(Эл, Выборка,, "Идентификатор");
		КонецЦикла;

	КонецЦикла; 
	
	ОбновитьИнфоПоВодителям();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнфоЗаказНаСборку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	а_ЗаказНаСборку.Ссылка КАК кЗаказНаСборку,
				//   |	а_ЗаказНаСборку.Ссылка КАК ЗаказНаСборку,
	               |	а_ЗаказНаСборку.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	Документ.а_ЗаказНаСборку КАК а_ЗаказНаСборку
	               |ГДЕ
	               |	НЕ а_ЗаказНаСборку.ПометкаУдаления
	               |	И а_ЗаказНаСборку.ДокументОснование = &Заявка";
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		М = Объект.ПунктыРазгрузки.НайтиСтроки(Новый Структура("Идентификатор", Выборка.Идентификатор));		
		
		Для Каждого Эл Из М Цикл
			ЗаполнитьЗначенияСвойств(Эл, Выборка,, "Идентификатор");
		КонецЦикла;

	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйИдентификаторДату(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда		
			Если ПроверитьИдетификаторНаСервере(ТекДанные.Идентификатор) Тогда
				
				ПоказатьПредупреждение(, "Для текущей строки "+ТекДанные.НомерСтроки+" уже существуют документы с идетификатором "+ТекДанные.Идентификатор+Символы.ПС+
					"Выделение в отдельную заявку выполнено не будет"
				);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НовыйУИД = "ДопКол"+СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	Для Каждого С Из ВыделенныеСтроки Цикл
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(С);
		Если Не ТекДанные = Неопределено Тогда			
			ТекДанные.Идентификатор = НовыйУИД;
			ТекДанные.ДатаОтгрузки = ?(ЗначениеЗаполнено(ТекДанные.ДатаОтгрузки), ТекДанные.ДатаОтгрузки, Объект.Дата);
		КонецЕсли;
	КонецЦикла;
	ТоварыКоличествоПриИзмененииНаСервере();
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПроверитьИдетификаторНаСервере(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	а_ЗаказНаСборку.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.а_ЗаказНаСборку КАК а_ЗаказНаСборку
	               |ГДЕ
	               |	а_ЗаказНаСборку.Идентификатор = &Идентификатор
	               |	И НЕ а_ЗаказНаСборку.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Идентификатор = &Идентификатор
	               |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказНаСборку(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаСоздатьЗаказНаСБоркуЗавершение", ЭтотОбъект, Элементы.ПунктыРазгрузки.ВыделенныеСтроки),
		НСтр("ru = 'Создать заказ на сборку?'; uk = 'Створити замовлення на збірку?'"),
		РежимДиалогаВопрос.ДаНет,
		,
		,
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСоздатьЗаказНаСБоркуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Для Каждого С Из ДопПараметры Цикл
			ТекДанные = Объект.ПунктыРазгрузки.НайтиПоИдентификатору(С);
			Состояние(СтрШаблон("%1 от %2", ТекДанные.ПунктРазгрузки, ТекДанные.ДатаОтгрузки));
			Если Не ТекДанные = Неопределено Тогда
				СоздатьЗаказНаСборкуНаСервере(
					ТекДанные.Идентификатор,
					ТекДанные.ПунктРазгрузки,
					?(ЗначениеЗаполнено(ТекДанные.ДатаВывозаФакт), ТекДанные.ДатаВывозаФакт, ТекДанные.ДатаОтгрузки),
					ТекДанные.ЗаказНаЗборку
				); 
			КонецЕсли;
		КонецЦикла;		
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура СоздатьЗаказНаСборкуНаСервере(Идентификатор, ПунктРазгрузки, ДатаОтгрузки, ЗаказНаЗборку = Неопределено, ОбновлениеДокумента = Ложь)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузки);
	//Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПунктыРазгрузки.Идентификатор КАК Идентификатор,
	               |	ПунктыРазгрузки.ПунктРазгрузки КАК ПунктРазгрузки,
	               |	ЕСТЬNULL(Факт.ДатаОтгрузки, ПунктыРазгрузки.ДатаОтгрузки) КАК ДатаОтгрузки,
	               |	Товары.Номенклатура КАК НоменклатураЗаявка,
	               |	Товары.Количество КАК Количество,
	               |	0 КАК КоличествоСобрано,
	               |	Товары.ДополнительныеАртикулы КАК ДополнительныеАртикулы,
	               |	Товары.ДополнительныеАртикулы КАК Артикул,
	               |	ПунктыРазгрузки.Организация КАК Организация,
	               |	ПунктыРазгрузки.Склад КАК Склад,
	               |	ЕСТЬNULL(Факт.Водитель, ПунктыРазгрузки.Водитель) КАК Водитель,
	               |	ЕСТЬNULL(Факт.Авто, ПунктыРазгрузки.Авто) КАК Авто,
	               |	ЕСТЬNULL(Факт.Прицеп, ПунктыРазгрузки.Прицеп) КАК Прицеп,
	               |	ТТ.Примечание КАК Примечание,
	               |	ЕСТЬNULL(Факт.Перевозчик, ПунктыРазгрузки.Перевозчик) КАК Перевозчик,
	               |	ПунктыРазгрузки.Контрагент КАК Контрагент,
	               |	ПунктыРазгрузки.Качество КАК Качество,
	               |	ПунктыРазгрузки.Тара КАК Тара,
	               |	ПунктыРазгрузки.Бирки КАК Бирки
	               |ИЗ
	               |	Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ПунктыРазгрузки КАК ПунктыРазгрузки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ДатаВывозаФакт.СрезПоследних КАК Факт
	               |		ПО ПунктыРазгрузки.Ссылка = Факт.Объект
	               |			И ПунктыРазгрузки.Идентификатор = Факт.Идентификатор
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Товары КАК Товары
	               |		ПО ПунктыРазгрузки.Ссылка = Товары.Ссылка
	               |			И ПунктыРазгрузки.ПунктРазгрузки = Товары.ПунктРазгрузки
	               |			И ПунктыРазгрузки.ДатаОтгрузки = Товары.ДатаОтгрузки
	               |			И ПунктыРазгрузки.Идентификатор = Товары.Идентификатор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			МАКСИМУМ(Т.Примечание) КАК Примечание,
	               |			Т.ПунктРазгрузки КАК ПунктРазгрузки,
	               |			Т.Идентификатор КАК Идентификатор,
	               |			Т.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Товары КАК Т
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Т.ПунктРазгрузки,
	               |			Т.Идентификатор,
	               |			Т.Ссылка) КАК ТТ
	               |		ПО (ТТ.Ссылка = ПунктыРазгрузки.Ссылка)
	               |			И (ТТ.ПунктРазгрузки = ПунктыРазгрузки.ПунктРазгрузки)
	               |			И (ТТ.Идентификатор = ПунктыРазгрузки.Идентификатор)
	               |ГДЕ
	               |	ПунктыРазгрузки.Идентификатор = &Идентификатор
	               |	И ПунктыРазгрузки.ПунктРазгрузки = &ПунктРазгрузки
	               |	И ПунктыРазгрузки.Ссылка = &Ссылка";
	
	Т = Запрос.Выполнить().Выгрузить();
	
	Если Не Т.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'По пункту разгрузки %1, дата %2 не найден товар'; uk = 'За пунктом розвантаження %1, дата %2 не знайдено товар'"),
				ПунктРазгрузки, ДатаОтгрузки
			)
		);
		Возврат;
	КонецЕсли;
	
	ЗаказНаЗборку = Документы.а_ЗаказНаСборку.ЕстьЗаказнаСборку(Объект.Ссылка, Идентификатор);
	
	Если Не ЗначениеЗаполнено(ЗаказНаЗборку) Тогда
		ДокЗаказ = Документы.а_ЗаказНаСборку.СоздатьДокумент();
		ДокЗаказ.Заполнить(Неопределено);
		ДокЗаказ.Дата = Т[0].ДатаОтгрузки;
		ДокЗаказ.Склад = Т[0].Склад;
		ДокЗаказ.Примечание = Т[0].Примечание;
		ДокЗаказ.Организация = Т[0].Организация; 	
		ДокЗаказ.ПунктРазгрузки = ПунктРазгрузки;
		ДокЗаказ.Идентификатор = Идентификатор;
		ДокЗаказ.ДокументОснование = Объект.Ссылка;
		ЗаполнитьЗначенияСвойств(ДокЗаказ, Т[0], "Качество,Тара,Бирки"); 
		
		Попытка
			ДокЗаказ.Записать();
			ЗаказНаЗборку = ДокЗаказ.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ЗаказНаЗборку.Собран Тогда
			ОбновлениеДокумента = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДокЗаказ = ЗаказНаЗборку.ПолучитьОбъект();
	ДокЗаказ.Дата = Т[0].ДатаОтгрузки;
	ДокЗаказ.Склад = Т[0].Склад;
	ДокЗаказ.Примечание = Т[0].Примечание;
	ДокЗаказ.Организация = Т[0].Организация; 	
	ДокЗаказ.ПунктРазгрузки = ПунктРазгрузки;
	ДокЗаказ.Идентификатор = Идентификатор;
	ДокЗаказ.ДокументОснование = Объект.Ссылка;
	ДокЗаказ.Контрагент = Т[0].Контрагент;
	ЗаполнитьЗначенияСвойств(ДокЗаказ, Т[0], "Качество,Тара,Бирки");
	ДокЗаказ.Товары.Загрузить(Т);
	
	Попытка
		ДокЗаказ.Записать();
		Модифицированность = Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//ОбновитьСтатусы();
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПунктыРазгрузки Тогда
		
		ОбновитьСтатусы();
		ПодключитьОбработчикОжидания("ОбновитьСтатусы", 30, Ложь);
		
	Иначе
		
		ОтключитьОбработчикОжидания("ОбновитьСтатусы");
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусы()
	
	ОбновитьДатуВывозаФакт();
	//ОбновитьИнфоЗаказНаСборку();
	
	//ОбновитьСтатусыНаСервере();
	
	//Элементы.ПунктыРазгрузки.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивРегионов() 
	
	Т = Объект.ПунктыРазгрузки.Выгрузить(, "Регион");
	Т.Свернуть("Регион");
	
	Возврат Т.ВыгрузитьКолонку("Регион");
	
КонецФункции

&НаКлиенте
Процедура ОтборПунктРазгрузкиОчистка(Элемент, СтандартнаяОбработка)
	УстановитьОтбор("ПунктРазгрузки", "");
КонецПроцедуры

&НаКлиенте
Процедура ОтборПунктРазгрузкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	УстановитьОтбор("ПунктРазгрузки", Текст);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор (ТекЭлементОтбора, ТекЗначениеОтбора)
	
	СтруктураПоиска = Новый Структура;
	Если ТекЗначениеОтбора <> "" Тогда
		СтруктураПоиска.Вставить(ТекЭлементОтбора, ТекЗначениеОтбора);
	КонецЕсли;

	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	Элементы.ПунктыРазгрузки.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ПунктыРазгрузки.ТекущиеДанные;
	
	Если Поле = Элементы.ПунктыРазгрузкикЗаказНаСборку Тогда
		
		Если ЗначениеЗаполнено(ТекСтрока.кЗаказНаСборку) Тогда
			
			ПоказатьЗначение(,ТекСтрока.кЗаказНаСборку);
			
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ПунктыРазгрузкиРеализация Тогда
		
		Если ЗначениеЗаполнено(ТекСтрока.Реализация) Тогда
			
			ПоказатьЗначение(,ТекСтрока.Реализация);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#Область СозданиеРеализации

&НаКлиенте
Процедура СоздатьРТУ(Команда)
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необхідно записати документ");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьРТУПослеВопросаЗавершение", ЭтотОбъект,), "Створити док Реалізацію для обраного пункту розвантаження?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРТУПослеВопросаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекДанные = Элементы.ПунктыРазгрузки.ТекущиеДанные;
		Если СоздатьРТУНаСервере(ТекДанные.ПунктРазгрузки, ТекДанные.Идентификатор) Тогда
			ТекДанные.СтадияГотовыеДокументы = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьРТУНаСервере(ПунктРазгрузки, Идентификатор)
	
	Док = ерпсАктПриемкиПередачиСервер.ПолучитьРТУ(Идентификатор, Объект.Ссылка);
	
	Если Не Док.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ вже існує "+ Док.Ссылка, Док.Ссылка);
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктРазгрузки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПР.Контрагент КАК Контрагент,
	               |	ПР.Договор КАК ДоговорКонтрагента,
	               |	ПР.ПунктРазгрузки КАК ПунктРазгрузки,
	               |	ПР.Идентификатор КАК Идентификатор,
	               |	ПР.Организация КАК Организация,
	               |	ЕСТЬNULL(Факт.Водитель, ПР.Водитель) КАК Водитель,
	               |	ЕСТЬNULL(Факт.Авто, ПР.Авто) КАК Авто,
	               |	ЕСТЬNULL(Факт.Прицеп, ПР.Прицеп) КАК Прицеп,
	               |	ЕСТЬNULL(Факт.Перевозчик, ПР.Перевозчик) КАК Перевозчик,
	               |	ПР.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	ПР.КонтактныеДанные КАК КонтактныеДанные,
	               |	ПР.Склад КАК Склад,
	               |	ПР.Регион КАК Регион,
	               |	Док.Ссылка КАК Ссылка,
	               |	Док.ПериодОтгрузки КАК ПериодОтгрузки,
	               |	ДОБАВИТЬКДАТЕ(ЕСТЬNULL(Факт.ДатаОтгрузки, ПР.ДатаОтгрузки), МИНУТА, 1) КАК Дата,
	               |	Док.ПредставительОрганизации КАК ПредставительОрганизации,
	               |	ПР.ИДЗаявкиКлиента КАК ИДЗаявкиКлиента
	               |ИЗ
	               |	Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.ПунктыРазгрузки КАК ПР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи КАК Док
	               |		ПО ПР.Ссылка = Док.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ДатаВывозаФакт КАК Факт
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				МАКСИМУМ(Т.ДатаОтгрузки) КАК ДатаОтгрузки,
	               |				Т.Идентификатор КАК Идентификатор,
	               |				Т.Объект КАК Объект
	               |			ИЗ
	               |				РегистрСведений.а_ДатаВывозаФакт КАК Т
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				Т.Объект,
	               |				Т.Идентификатор) КАК ФактОтбор
	               |			ПО Факт.Объект = ФактОтбор.Объект
	               |				И Факт.Идентификатор = ФактОтбор.Идентификатор
	               |				И Факт.ДатаОтгрузки = ФактОтбор.ДатаОтгрузки
	               |		ПО ПР.Ссылка = Факт.Объект
	               |			И ПР.Идентификатор = Факт.Идентификатор
	               |ГДЕ
	               |	Док.Ссылка = &Ссылка
	               |	И ПР.Идентификатор = &Идентификатор
	               |	И ПР.ПунктРазгрузки = &ПунктРазгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.Номенклатура КАК Номенклатура,
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.ДополнительныеАртикулы КАК ДополнительныйАртикул,
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.Количество КАК Количество,
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.ПунктРазгрузки КАК ПунктРазгрузки,
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.Идентификатор КАК Идентификатор,
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.КодСтроки КАК КодСтроки,
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное
	               |ИЗ
	               |	Документ.ерпсЗаявкаНаСозданиеАктовПриемкиПередачи.Товары КАК ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары
	               |ГДЕ
	               |	ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.Ссылка = &Ссылка
	               |	И ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.ПунктРазгрузки = &ПунктРазгрузки
	               |	И ерпсЗаявкаНаСозданиеАктовПриемкиПередачиТовары.Идентификатор = &Идентификатор
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НоменклатураНаименованиеПолное";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаДок = Пакет[0].Выбрать();
	ТаблицаТоваров = Пакет[Пакет.ВГраница()].Выгрузить();
	
	Если ВыборкаДок.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Док, ВыборкаДок);
		Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		Док.а_Периоды = Объект.ПериодОтгрузки;
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(Док, Объект.Ссылка); // Копировать подразделение = Истина
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ЭтоКомиссия, Реализация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ВыборкаДок, "Дата,Организация,Склад");
		ДанныеОбъекта.Реализация	= Истина;
		ДанныеОбъекта.ЭтоКомиссия	= (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
		СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта
		);
		
		Док.ТипЦен 						= ерпсАктПриемкиПередачиСервер.ПолучитьТипЦен(ВыборкаДок.Контрагент, Объект.ПериодОтгрузки, ВыборкаДок.Склад);
		//Если ЗначениеЗаполнено(Док.ТипЦен) Тогда
		//	
		//КонецЕсли;
		Док.ВалютаДокумента				= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Док.КурсВзаиморасчетов			= 1;
		Док.КратностьВзаиморасчетов		= 1;		
		
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			Если Не ЗначениеЗаполнено(СтрокаТоваров.Количество) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Док.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Док.Организация, СтрокаТабличнойЧасти.Номенклатура);
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТабличнойЧасти.Коэффициент = 1;
			
		КонецЦикла;
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
			Док.ДоговорКонтрагента,
			Док.Контрагент,
			Док.Организация, 
			ПолучитьМассивВидовДоговоров()
		);
		
		Док.ПометкаУдаления = Ложь;
		Док.Авто 		  				= ВыборкаДок.Авто;
		Док.Водитель 	  				= ВыборкаДок.Водитель;
		Док.Организация 	  			= ВыборкаДок.Организация;
		Док.ЕРПСПеревозчик 				= ВыборкаДок.Перевозчик;
		Док.Прицеп		  				= ВыборкаДок.Прицеп;
		//Док.ерпсАктПриемкиПередачи		= Объект.Ссылка;              
		Док.ПредставительОрганизации 	= ВыборкаДок.ПредставительОрганизации;
		Док.Склад 						= ВыборкаДок.Склад;
		Док.АдресДоставки				= СокрЛП(ВыборкаДок.ПунктРазгрузки);
		Док.ерпсПунктПогрузки			= ВыборкаДок.Склад;
		Док.Идентификатор				= ВыборкаДок.Идентификатор;
		Док.ПунктРазгрузки 				= ВыборкаДок.ПунктРазгрузки;
		Док.ерпсПунктПогрузки			= ВыборкаДок.Склад;
		Док.ИДЗаявкиКлиента				= ВыборкаДок.ИДЗаявкиКлиента;
		Док.ДатаЗаявкиКлиента			= Объект.Дата;
		Док.Ответственный 				= Пользователи.ТекущийПользователь();
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(Док);
		
		ерпсАктПриемкиПередачиСервер.ОбнЦ_ОбновитьЦеныНаСервере(
			Док.Ссылка, Док.ТипЦен, Док, Истина, Истина
		);
		
		Успешно = Ложь; 
		
		Если Не ЗначениеЗаполнено(Док.Номер) Тогда
			//Префикс = ""; ПрефиксИБ = ""; ПрефиксОрганизации = "";
			//
			//ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаИнформационнойБазы(ПрефиксИБ);
			//ПрефиксИБ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксИБ, 2, "0", "Слева");
			//
			//ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(ВыборкаДок.Организация, ПрефиксОрганизации);
			//ПрефиксОрганизации = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
			//
			//ШаблонПрефикса = "[ОР][ИБ]-[Префикс]";
			//ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[ОР]", ПрефиксОрганизации);
			//ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[ИБ]", ПрефиксИБ);
			//ШаблонПрефикса = СтрЗаменить(ШаблонПрефикса, "[Префикс]", Префикс);
			//
			//Префикс = ШаблонПрефикса;
			
			Док.УстановитьНовыйНомер();
		КонецЕсли;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			Успешно = Истина;
		Исключение
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		Если Успешно Тогда
			РегистрыСведений.а_ДокументыРеализацииЗаявок.ЗаписатьСвязьВРС(Док.Ссылка, Объект.Ссылка, ВыборкаДок.Идентификатор);
			ОбновитьДатуВывозаФакт();
			
			Возврат Истина;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);

	Возврат СписокВидовДоговоров;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЗаявкиКПР

&НаКлиенте
Процедура ЗагрузитьЗаявкуКПР(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаЗагрузитьЗаявкуКПР_Завершение", ЭтотОбъект)
		, "Очистити документ? Чи додати в поточну заяку?
		|ТАК - Очистити, НІ - додатив поточну"
		, РежимДиалогаВопрос.ДаНет
	);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЗагрузитьЗаявкуКПР_Завершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		Объект.ПунктыРазгрузки.Очистить();
	КонецЕсли;
	
    ОбработкаОкончанияПомещения = Новый ОписаниеОповещения("ОбработчикОкончанияПомещенияЗаявкиКПР", ЭтотОбъект);

    НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , , Истина,     
        ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработчикОкончанияПомещенияЗаявкиКПР(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
		
	Если Результат Тогда
        //Сообщить(Адрес); 
		
		ЗагрузкаСФайла = Истина;
		
		ОбработатьЗаявкуКПРНаСервере(Адрес, УникальныйИдентификатор);
		
		//ПараметрыОткрытия = Новый Структура("АдресЗагруженыхДанных", АдресЗагруженныхДанных);
		//
		//ОткрытьФорму(
		//	"Обработка.ерпсСозданиеАктаПриемаПередачиТовара.Форма.ФормаВыбораСопоставленияМестДоставки",
		//	ПараметрыОткрытия,
		//	ЭтаФорма,
		//	,
		//	,
		//	,
		//	//Новый ОписаниеОповещения("СопоставлениеПунктовРазгрузки_Завершение", ЭтотОбъект)
		//);

    Иначе
        Сообщить("ru = 'Файл не был помещен.'; uk = 'Файл не було поміщено.'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаявкуКПРНаСервере(Адрес, УникальныйИдентификатор)
	
	/////////////////////////////////////////
	// таблица для подбора номенклатуры
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДополнительныеАртикулы.Наименование КАК АртикулПоиск,
	                      |	ДополнительныеАртикулы.Ссылка КАК Артикул,
	                      |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	                      |	ДополнительныеАртикулы.НаименованиеНоменклатуры КАК НаименованиеПоиск
	                      |ИЗ
	                      |	Справочник.ДополнительныеАртикулы КАК ДополнительныеАртикулы
	                      |ГДЕ
	                      |	НЕ ДополнительныеАртикулы.ПометкаУдаления");
	 
	
	ТЗНоменклатур = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из ТЗНоменклатур Цикл
		
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПоиск, " ", ""));
		
	КонецЦикла;
	/////////////////////////////////////////

	Т = Новый ТаблицаЗначений;
	
	ТабДок = Новый ТабличныйДокумент;
	
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяФайла = ПолучитьИмяВременногоФайла("xls");
	Данные.Записать(ИмяФайла);
	
	Попытка
		ТабДок.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'не удалось прочитать файл'; uk = 'не вдалося прочитати файл'") +Символы.ПС+ ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	ТекПолучатель = ""; ТекАдрес = ""; ИДЗаявки = ""; КодВЧ = "";
	Для Сч = 1 По ТабДок.ВысотаТаблицы Цикл
		ТекЗначение = ТабДок.Область(Сч, 2, Сч, 2).Текст;
		ТекАртикул = ТабДок.Область(Сч, 1, Сч, 1).Текст;
		
		Если ПустаяСтрока(ТекЗначение) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ТекЗначение, "Получатель") ИЛИ СтрНайти(ТекЗначение, "Организация") Тогда
			ТекПолучатель = ""; ТекАдрес = ""; ИДЗаявки = ""; КодВЧ = "";
		КонецЕсли;
		
		Если СтрНайти(ТекЗначение, "Получатель ") Тогда
			ТекПолучатель = СокрЛП(СтрЗаменить(ТекЗначение, "Получатель ", ""));
		КонецЕсли;
			
		Если СтрНайти(ТекЗначение, "Адрес : ") Тогда
			ТекАдрес = СокрЛП(СтрЗаменить(ТекЗначение, "Адрес : ", ""));
		КонецЕсли;
				
		Если СтрНайти(ТекЗначение, "ID ") Тогда
			ИДЗаявки = СокрЛП(СтрЗаменить(ТекЗначение, "ID ", ""));
		КонецЕсли;
				
		Если СтрНайти(ТекЗначение, "код ВЧ для электронного обмена ") Тогда
			КодВЧ = СокрЛП(СтрЗаменить(ТекЗначение, "код ВЧ для электронного обмена ", ""));
		КонецЕсли;
		
		Если СтрНайти(ТекАртикул, "Артикул") Тогда
			УИД = "ДопКол"+СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
			Для тСч = Сч + 1 По ТабДок.ВысотаТаблицы Цикл
				ТекЗначение = ТабДок.Область(тСч, 2, тСч, 2).Текст;
				Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрНайти(ТекЗначение, "Получатель") ИЛИ СтрНайти(ТекЗначение, "Организация") Тогда
					ТекПолучатель = ""; ТекАдрес = ""; ИДЗаявки = ""; КодВЧ = "";
					Сч = тСч-1;
					Прервать;
				КонецЕсли;
				
				МассивНоменклатуры = Новый Массив;
				
				ТекАртикул = ТабДок.Область(тСч, 1, тСч, 1).Текст;
				ТекКво = ТабДок.Область(тСч, 3, тСч, 3).Текст;
				ТекЦена = ТабДок.Область(тСч, 4, тСч, 4).Текст;
				ТекДатаПоставки = ТабДок.Область(тСч, 5, тСч, 5).Текст;
				
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.ЗагруженнаяНоменклатура = СокрЛП(ТекЗначение);
				НоваяСтрока.ЗагруженноеКоличество = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СокрЛП(ТекКво));
                НоваяСтрока.ЗагруженныйДополнительныеАртикулы = СокрЛП(ТекАртикул);
				ДатаОтгрузки = СтроковыеФункцииКлиентСервер.СтрокаВДату(СокрЛП(Лев(ТекДатаПоставки, СтрНайти(ТекДатаПоставки, " "))));
				НоваяСтрока.ДатаОтгрузки = ?(ЗначениеЗаполнено(ДатаОтгрузки), ДатаОтгрузки, Объект.Дата);
				НоваяСтрока.ИДЗаявкиКлиента = ИДЗаявки;
				НоваяСтрока.Идентификатор = УИД;
				
				НоваяСтрока.ПунктРазгрузки = ерпсАктПриемкиПередачиСервер.ОпределитьПунктРазгрузки(КодВЧ);
				НоваяСтрока.ДополнительныеАртикулы = ерпсАктПриемкиПередачиСервер.ПолучитьДопАртикул(СокрЛП(ТекАртикул));
				НоваяСтрока.Количество = НоваяСтрока.ЗагруженноеКоличество; 
				
				/////////////////////////////////////////
				// подбор номенклатуры
				НайденныеСтроки = ТЗНоменклатур.НайтиСтроки(
					Новый Структура(
						"АртикулПоиск, НаименованиеПоиск",
						ВРег(СтрЗаменить(НоваяСтрока.ЗагруженныйДополнительныеАртикулы, " ", "")),
						ВРег(СтрЗаменить(НоваяСтрока.ЗагруженнаяНоменклатура, " ", ""))
						)
				);
				
				// если ничего не найдено то пробуем убрать 1 из начала номенклатуры
				Если НайденныеСтроки.Количество() = 0 И Лев(ВРег(СтрЗаменить(НоваяСтрока.ЗагруженнаяНоменклатура, " ", "")), 1) = "1" Тогда
					НайденныеСтроки = ТЗНоменклатур.НайтиСтроки(
						Новый Структура(
							"АртикулПоиск, НаименованиеПоиск",
							ВРег(СтрЗаменить(НоваяСтрока.ЗагруженныйДополнительныеАртикулы, " ", "")),
							ВРег(Сред(СтрЗаменить(НоваяСтрока.ЗагруженнаяНоменклатура, " ", ""), 2))
							)
					);
				КонецЕсли;	
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					МассивНоменклатуры.Добавить(НайденнаяСтрока);
				КонецЦикла;
				
				Если МассивНоменклатуры.Количество() = 0 тогда
					НайденныеСтроки = ТЗНоменклатур.НайтиСтроки(
						Новый Структура(
							"АртикулПоиск",
							ВРег(СтрЗаменить(НоваяСтрока.ЗагруженныйДополнительныеАртикулы, " ", ""))
							)
						);
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						МассивНоменклатуры.Добавить(НайденнаяСтрока);
					КонецЦикла;	
				КонецЕсли;  
				
				Если МассивНоменклатуры.Количество() Тогда
					НоваяСтрока.Номенклатура = ПолучитьНоменклатуруИзПоследнегоРТУ(МассивНоменклатуры[0].Артикул);
					НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура,"БазоваяЕдиницаИзмерения");
				КонецЕсли;

 
			КонецЦикла;
		КонецЕсли;		
		
	КонецЦикла;
	
	ОбновитьПунктыРазгрузкиНаСервере();
	
	Если Объект.Товары.Количество() Тогда
		ЗаполнитьДопДанныеТоваров();
	КонецЕсли;

	
КонецПроцедуры

Функция ПолучитьНоменклатуруИзПоследнегоРТУ(ДополнительныйАртикул)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(РеализацияТоваровУслугТовары.Ссылка.Дата) КАК Дата
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.ДополнительныйАртикул = &ДополнительныйАртикул
		|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
		//ERPS_TASK_В.Головченко_28.02.2023
		|	И РеализацияТоваровУслугТовары.Номенклатура В ИЕРАРХИИ(&ПапкаНоменклатуры)
		//...ERPS_TASK_В.Головченко_28.02.2023
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	//ERPS_TASK_В.Головченко_28.02.2023
	//Если ЭтоФОП ТОгда
	//	ТекПапкаНоменклатуры = Константы.ерпсПапкаТоваровФОП.Получить();	
	//Иначе
		ТекПапкаНоменклатуры = Константы.ерпсПапкаТоваровТОВ.Получить();
	//КонецЕсли;
	Запрос.УстановитьПараметр("ПапкаНоменклатуры",ТекПапкаНоменклатуры);
	//...ERPS_TASK_В.Головченко_28.02.2023
	
	Запрос.УстановитьПараметр("ДополнительныйАртикул", ДополнительныйАртикул);
	
	РезультатЗапроса = Запрос.Выполнить();              
	
	Если РезультатЗапроса.Пустой() тогда
		// sklad{20231107
		Если СтрНайти(СтрокаСоединенияИнформационнойБазы(), "Ref=""sklad""") > 0 Тогда
			Спр = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", СокрЛП(ДополнительныйАртикул));
			Если ЗначениеЗаполнено(Спр) Тогда
				Возврат Спр;
			КонецЕсли;
		КонецЕсли;
		// sklad}	
		
		
		Возврат справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Номенклатура;
	
КонецФункции

#КонецОбласти
