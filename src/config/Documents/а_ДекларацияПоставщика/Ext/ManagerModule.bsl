#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПечати
	
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Декларация поставщика
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Декларация_Поставщика";
	КомандаПечати.Представление = НСтр("ru='Декларация поставщика';uk='Декаларація постачальника'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	//
	//// Реестр документов
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор  = "Реестр";
	//КомандаПечати.Представление  = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	//КомандаПечати.ЗаголовокФормы = НСтр("ru='Реестр документов ""Авансовый отчет""';uk='Реєстр документів ""Авансовий звіт""'");
	//КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	//КомандаПечати.СписокФорм     = "ФормаСписка";
	//КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,ОбъектыПечати, ПараметрыВывода) Экспорт

	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Декларация_Поставщика") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ИмяМакета = "";
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Декларация_Поставщика",
			НСтр("ru='Декларация поставщика';uk='Декаларація постачальника'"),
			ПечатьДекларацииПоставщика(МассивОбъектов, ОбъектыПечати, ИмяМакета),
			,
			ИмяМакета);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьДекларацииПоставщика(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыкаПечать = "uk";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КодЯзыка = КодЯзыкаПечать;
	ТабДокумент.АвтоМасштаб = Истина;
	
	Макет = Документы.а_ДекларацияПоставщика.ПолучитьМакет("МакетБОРЩ");
	
	ПустаяОбласть = Макет.ПолучитьОбласть("Пустая");

	ПервыйДокумент = Истина;
	Для Каждого Ссылка Из МассивОбъектов Цикл		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Область = Макет.ПолучитьОбласть("Шапка1");
		Область.Параметры.Номер = ?(ЗначениеЗаполнено(Ссылка.НомерВходящий), "№" + Ссылка.НомерВходящий, "");
		Область.Параметры.День = ?(ЗначениеЗаполнено(Ссылка.ДатаВходящая), День(Ссылка.ДатаВходящая), День(Ссылка.Дата));
		Область.Параметры.МесяцРП = ?(ЗначениеЗаполнено(Ссылка.ДатаВходящая), ОбщегоНазначенияСервер.МесяцСтрокойДП(Месяц(Ссылка.ДатаВходящая)), ОбщегоНазначенияСервер.МесяцСтрокойДП(Месяц(Ссылка.Дата)));
		Область.Параметры.Год = Формат(?(ЗначениеЗаполнено(Ссылка.ДатаВходящая), Год(Ссылка.ДатаВходящая), Год(Ссылка.Дата)), "ЧГ=");
		ТабДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Шапка2");
		Область.Параметры.ВидТранспорта = Ссылка.ВидТранспорту;
		Область.Параметры.ДатаОтправления = ?(ЗначениеЗаполнено(Ссылка.ДатаОтправки), "Дата відправлення: " + Формат(Ссылка.ДатаОтправки, "ДФ=dd.MM.yyyy") + "р.","");
		ТабДокумент.Вывести(Область);
		
		Если Ссылка.Поставщики.Количество() Тогда
			Область = Макет.ПолучитьОбласть("СтрокаПоставщик");
			Область2 = Макет.ПолучитьОбласть("СтрокаПоставщик2");
			Для Каждого Стр Из Ссылка.Поставщики Цикл
				Если Стр.ВидПоставщика = Перечисления.а_ВидыПоставщиков.Товарополучатель Тогда
					ТабДокумент.Вывести(ПустаяОбласть);
				КонецЕсли;
				С = СтрШаблон("%1: %2 %3",
					Стр.ВидПоставщика,
					Стр.Контрагент.НаименованиеПолное,
					Стр.Адрес
				);
				Если СтрДлина(СокрЛП(С)) > 100 Тогда
					Область2.Параметры.СтрокаПоставщик = С;
					ТабДокумент.Вывести(Область2);
				Иначе
					Область.Параметры.СтрокаПоставщик = С;
					ТабДокумент.Вывести(Область);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.НомерПартии) Тогда
			Область = Макет.ПолучитьОбласть("НомерПартии");
			Область.Параметры.Заполнить(Ссылка);
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.БригадаУпаковщиков) Тогда
			Область = Макет.ПолучитьОбласть("БригадаУпаковщиков");
			Область.Параметры.Заполнить(Ссылка);
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.РегистрационныйНомерМощностей) Тогда
			Область = Макет.ПолучитьОбласть("РегистрационныйНомерМощностей");
			Область.Параметры.Заполнить(Ссылка);
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ШапкаТовары");
		ТабДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("СтрокаТовары");
		нпп = 0;
		Для Каждого Стр Из Ссылка.Товары Цикл
			нпп = нпп + 1;
			
			Область.Параметры.Заполнить(Стр);
			
			Область.Параметры.нпп = нпп;
			Область.Параметры.НаименованиеПолное = Стр.Товар.НаименованиеПолное;
			Область.Параметры.СрокиГодности = ""+Формат(Стр.ДатаУпаковки, "ДФ=dd.MM.yyyy")+"/"+Символы.ПС+Формат(Стр.УпотребитьДо, "ДФ=dd.MM.yyyy");
			
			ТабДокумент.Вывести(Область);
		КонецЦикла;

		Область = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Область);
		
		Если Ссылка.ДополнительныеСведения.Количество() Тогда
			Область = Макет.ПолучитьОбласть("Сведения1");
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		Для Каждого Стр Из Ссылка.ДополнительныеСведения Цикл
			Область = Макет.ПолучитьОбласть("Сведения2");
			Область.Параметры.Заполнить(Стр);
			ТабДокумент.Вывести(Область);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Ссылка.ОтветственноеЛицо) Тогда
			Область = Макет.ПолучитьОбласть("ФИО");
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(Ссылка.ОтветственноеЛицо));
			СтрокаФИО = СтрШаблон("%1 %2. %3",
					ФИО.Фамилия,
					ВРег(Лев(ФИО.Имя,1)),
					?(ПустаяСтрока(ФИО.Отчество), "", ВРег(Лев(ФИО.Отчество,1)+ "."))			
			);
	 		Область.Параметры.ФИО = СтрокаФИО;
			ТабДокумент.Вывести(Область);
		КонецЕсли;

		
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;	
	
	Возврат ТабДокумент;	
	
КонецФункции

Функция ПолучитьБиркуНаТоварНаСервере(С, Объект) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ИмяПараметровПечати = "ПЕЧАТЬ_БИРКИ";
	
	Если ТипЗнч(С) = Тип("Структура") Тогда
		ТекДанные = С;
	Иначе
		ТекДанные = Объект.Товары.НайтиПоИдентификатору(С);
	КонецЕсли;
	Если Не ТекДанные = Неопределено Тогда
		
		// доп данные
		Отбор = Новый Структура("Идентификатор",ТекДанные.Идентификатор);
    	Масс = Объект.ТоварыДоп.НайтиСтроки(Отбор);
		ДанныеДоп = ?(Масс.Количество(), Масс[0], Неопределено);
		
		Макет = Документы.а_ДекларацияПоставщика.ПолучитьМакет("Бирка");
		
		// Производитель
		Т = Объект.Поставщики.Выгрузить(Новый Структура("ВидПоставщика", Перечисления.а_ВидыПоставщиков.Производитель));
		Если Т.Количество() Тогда
			Область = Макет.ПолучитьОбласть("Производитель");
			Область.Параметры.Производитель = СтрШаблон("Виробник: %1, %2",
				Т[0].Контрагент.НаименованиеПолное,
				Т[0].Адрес
			);
			ТабДок.Вывести(Область);
		КонецЕсли;
		
		// Организация
		Область = Макет.ПолучитьОбласть("Организация");
		Область.Параметры.Организация = "ТОВ «Українська компанія «Овочевий світ»";//СокрЛП(Объект.Организация);
		Область.Параметры.ЮрАдрес = "Юридична адреса: 49057 м.Дніпро,вул Пресова 65.
		|Тел. (066) 9765959";
		ТабДок.Вывести(Область);
		
		// Импортер
		
		Т = Объект.Поставщики.Выгрузить(Новый Структура("ВидПоставщика", Перечисления.а_ВидыПоставщиков.ИпортерПоставщик));
		Если Т.Количество() Тогда 
			Область = Макет.ПолучитьОбласть("Импортер");
			Область.Параметры.Импортер = СтрШаблон("Імпортер: %1, %2",
				Т[0].Контрагент.НаименованиеПолное,
				Т[0].Адрес
			);
			ТабДок.Вывести(Область);
		КонецЕсли;
		
		// Товар
		Область = Макет.ПолучитьОбласть("Товар");
		Область.Параметры.Товар = "Товар: " + СокрЛП(ТекДанные.Товар.НаименованиеПолное) + "
		|" + ТекДанные.ДСТУ;
		Область.Параметры.СтранаПроисхождения = "Країна походження "+СокрЛП(ТекДанные.СтранаПроизводитель);
		Область.Параметры.Урожай = ?(не ДанныеДоп = неопределено, "Врожай "+ДанныеДоп.Урожай, "");
		Область.Параметры.Калорийность = ?(не ДанныеДоп = неопределено, "Калорійність:" + ДанныеДоп.Калорийность, "");
		Область.Параметры.ПищеваяЦенность = ?(не ДанныеДоп = неопределено, "Харчова цінність: " + ДанныеДоп.ПищеваяЦенность, "");
		
		Область.Параметры.НомерПартии = ?(ЗначениеЗаполнено(Объект.НомерПартии),
			"Номер партії " + СокрЛП(Объект.НомерПартии) + 
				?(ЗначениеЗаполнено(Объект.БригадаУпаковщиков),Символы.ПС + "Пакувальна бригада "+Объект.БригадаУпаковщиков,""),
			"Номер партії відповідає даті фасування"
		);
		Область.Параметры.УсловияХранения = "Температура зберігання: " + ТекДанные.УсловияХраненияТемпература
			+ " та відносній вологості " + ТекДанные.УсловияХраненияВлажность;
			
		Область.Параметры.МассаНетто = ?(не ДанныеДоп = неопределено, ""+Формат(ДанныеДоп.МассаНетто, "ЧДЦ=0") + "кг", "");
        Область.Параметры.ДатаФасовки = "Дата фасування " + Формат(ТекДанные.ДатаУпаковки, "ДФ=dd.MM.yyyy");
		Область.Параметры.УпотребитьДо = "Вжити до " + Формат(ТекДанные.УпотребитьДо, "ДФ=dd.MM.yyyy");
		ТабДок.Вывести(Область);

		//Область = Макет.ПолучитьОбласть("Товар|Отступ");
		//ТабДок.Присоединить(Область);
		
		
	КонецЕсли;
	
	Возврат ТабДок
				

КонецФункции

// Функция - Получить док деларация за текущую неделю
//
// Параметры:
//  Дата - Дата	 - 
// 
// Возвращаемое значение:
//   - ДокументСсылка.а_ДекларацияПоставщика, Неопределено
//
Функция ПолучитьДокДеларация(Дата, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	а_ДекларацияПоставщика.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.а_ДекларацияПоставщика КАК а_ДекларацияПоставщика
	               |ГДЕ
	               |	НЕ а_ДекларацияПоставщика.ПометкаУдаления
	               |	И НАЧАЛОПЕРИОДА(а_ДекларацияПоставщика.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ)
	               |	И а_ДекларацияПоставщика.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция - Получить док деларация за текущую неделю
//
// Параметры:
//  Дата - Дата	 - 
// 
// Возвращаемое значение:
//   - ДокументСсылка.а_ДекларацияПоставщика, Неопределено
//
Функция ПолучитьДокДеларацияТовары(Дата, Организация, Товар = Неопределено, Артикул = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Неопределено);
	Для Каждого Эл Из Метаданные.Документы.а_ДекларацияПоставщика.ТабличныеЧасти.Товары.Реквизиты Цикл
		Результат.Вставить(Эл.Имя, Неопределено);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	а_ДекларацияПоставщика.Ссылка КАК Ссылка,
	               |	ДокТовары.Ссылка КАК Ссылка1,
	               |	ДокТовары.НомерСтроки КАК НомерСтроки,
	               |	ДокТовары.Товар КАК Товар,
	               |	ДокТовары.Тара КАК Тара,
	               |	ДокТовары.Количество КАК Количество,
	               |	ДокТовары.СтранаПроизводитель КАК СтранаПроизводитель,
	               |	ДокТовары.ДатаУпаковки КАК ДатаУпаковки,
	               |	ДокТовары.УпотребитьДо КАК УпотребитьДо,
	               |	ДокТовары.СрокХранения КАК СрокХранения,
	               |	ДокТовары.УсловияХраненияТемпература КАК УсловияХраненияТемпература,
	               |	ДокТовары.УсловияХраненияВлажность КАК УсловияХраненияВлажность,
	               |	ДокТовары.ДСТУ КАК ДСТУ,
	               |	ДокТовары.Идентификатор КАК Идентификатор
	               |ИЗ
	               |	Документ.а_ДекларацияПоставщика.Товары КАК ДокТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.а_ДекларацияПоставщика КАК а_ДекларацияПоставщика
	               |		ПО ДокТовары.Ссылка = а_ДекларацияПоставщика.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.а_ДекларацияПоставщика.ДопАртикулыТоваров КАК ДопАртикулы
	               |		ПО ДокТовары.Идентификатор = ДопАртикулы.Идентификатор
	               |			И (ДопАртикулы.ДополнительныеАртикулы = &Артикул)
	               |ГДЕ
	               |	НЕ а_ДекларацияПоставщика.ПометкаУдаления
	               |	И НАЧАЛОПЕРИОДА(а_ДекларацияПоставщика.Дата, НЕДЕЛЯ) = НАЧАЛОПЕРИОДА(&Дата, НЕДЕЛЯ)
	               |	И а_ДекларацияПоставщика.Организация = &Организация
	               |	И ДокТовары.Товар = &Товар"; 
	
	Если НЕ ЗначениеЗаполнено(Артикул) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст
			, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.а_ДекларацияПоставщика.ДопАртикулыТоваров КАК ДопАртикулы"
			, "ЛЕВОЕ СОЕДИНЕНИЕ Документ.а_ДекларацияПоставщика.ДопАртикулыТоваров КАК ДопАртикулы"
		);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Товар) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДокТовары.Товар = &Товар", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти  

#КонецЕсли